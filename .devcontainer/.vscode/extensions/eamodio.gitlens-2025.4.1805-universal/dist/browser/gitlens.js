var __webpack_modules__={134:(e,t,i)=>{i.d(t,{E:()=>C});var r=i(1398),s=i(1182),o=i(4123),n=i(2624),a=i(5962),l=i(7019),u=i(9336),c=i(9207),h=i(4357),d=i(2141),p=i(745),g=i(5231),m=i(4941),f=i(4808),w=i(9442),v=i(7193),y=Object.defineProperty,b=Object.getOwnPropertyDescriptor;let C=class extends w.Zr{constructor(e){super(["gitlens.openFileRevision","gitlens.openBlamePriorToChange"]),this.container=e}static createMarkdownCommandLink(e,t,i){let s;return s=e instanceof r.Uri?{revisionUri:e,line:i,annotationType:t}:e,(0,g.J)("gitlens.openFileRevision",s)}async preExecute(e,t){if("gitlens.openBlamePriorToChange"===e.command){if(null==(t={...t,annotationType:"blame"}).revisionUri&&null!=e.editor){let i=e.editor.selection.active.line;if(i>=0)try{let r=await n.nk.fromUri(e.editor.document.uri),s=await this.container.git.getBlameForLine(r,i);if(null!=s)if(s.commit.isUncommitted){let e=await s.commit.getPreviousComparisonUrisForLine(i);if(e?.previous==null)return void(0,l.pR)(s.commit);t.revisionUri=this.container.git.getRevisionUriFromGitUri(e.previous)}else{let e=null!=s?await s?.commit.getPreviousSha():void 0;if(null==e)return void(0,l.pR)(s.commit);t.revisionUri=this.container.git.getRevisionUriFromGitUri(s.commit.getGitUri(!0))}}catch(e){m.Vy.error(e,"OpenBlamePriorToChangeCommand")}}if(null==t.revisionUri)return void(0,l.qQ)("Unable to open blame")}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,v.q)(t,e)))return;let r=await n.nk.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri){let e=this.container.git.commits(r.repoPath),n=e.getLogForPath(r.fsPath).then(t=>t??(r.sha?e.getLogForPath(r.fsPath,r.sha):void 0)),l=`Open ${"blame"===i.annotationType?"Blame":"File"} at Revision${(0,f.eV)(s.EO.Dot,2,2)}`,d=`${l}${r.getFormattedFileName({suffix:r.sha?`:${(0,a.pV)(r.sha)}`:void 0,truncateTo:s.uR-l.length})}`,g=await (0,u.X)(n,d,`Choose a commit to ${"blame"===i.annotationType?"blame":"open"} the file revision from`,{empty:r.sha?void 0:{getState:async()=>{let e,t,i=[],s=await this.container.git.status(r.repoPath).getStatus();if(null!=s)for(let e of s.files){if("?"===e.workingTreeStatus||"!"===e.workingTreeStatus)continue;let[t,s]=(0,p.Uf)(e.path,void 0,!0);i.push(new c.Fj({label:t,description:s},void 0,"gitlens.openFileRevision",[this.container.git.getAbsoluteUri(e.path,r.repoPath)]))}return i.length?(e=`${r.getFormattedFileName()} is likely untracked, choose a different file?`,t=`${d} (Untracked?)`):e="No commits found",i.push((0,h.Du)(h.WL.Cancel,void 0,{label:i.length?"Cancel":"OK"})),{items:i,placeholder:e,title:t}}},picked:r.sha,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,o.vM)(t.item.file,t.item,{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!0})}},showOtherReferences:[c.Fj.fromCommand("Choose a Branch or Tag...","gitlens.openFileRevisionFrom",[t]),c.Fj.fromCommand("Choose a Stash...","gitlens.openFileRevisionFrom",[t,{stash:!0}])]});if(g?.file==null)return;await (0,o.vM)(g.file,g,{annotationType:i.annotationType,line:i.line,...i.showOptions});return}await (0,o.vM)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){m.Vy.error(e,"OpenFileAtRevisionCommand"),(0,l.qQ)("Unable to open file at revision")}}};C=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?b(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&y(t,i,o),o})([(0,d.G5)()],C)},149:(e,t,i)=>{i.r(t),i.d(t,{ProvidersApi:()=>ProvidersApi});var r=i(4478),s=i.n(r),o=i(1398),n=i(2476),a=i(6741),l=i(1849),u=i(2320),c=i(4808),h=i(4269);let ProvidersApi=class ProvidersApi{constructor(e,t){this.container=e,this.authenticationService=t;let i=(0,n.cQ)(),r=`${e.debugging?"GitLens-Debug":e.prerelease?"GitLens-Pre":"GitLens"}/${e.version} (${o.env.appName}/${o.version}; ${(0,a.uo)()})`,u=async({url:e,...t})=>d(await (0,n.hd)(e,{agent:i,...t,headers:{"User-Agent":r,...t.headers}})),c=s()({request:u});this.providers={[l.Q7.GitHub]:{...h.Mt[l.Q7.GitHub],provider:c.github,getCurrentUserFn:c.github.getCurrentUser.bind(c.github),getPullRequestsForReposFn:c.github.getPullRequestsForRepos.bind(c.github),getPullRequestsForUserFn:c.github.getPullRequestsAssociatedWithUser.bind(c.github),getIssuesForReposFn:c.github.getIssuesForRepos.bind(c.github)},[l.PY.CloudGitHubEnterprise]:{...h.Mt[l.PY.GitHubEnterprise],provider:c.github,getCurrentUserFn:c.github.getCurrentUser.bind(c.github),getPullRequestsForReposFn:c.github.getPullRequestsForRepos.bind(c.github),getPullRequestsForUserFn:c.github.getPullRequestsAssociatedWithUser.bind(c.github),getIssuesForReposFn:c.github.getIssuesForRepos.bind(c.github)},[l.PY.GitHubEnterprise]:{...h.Mt[l.PY.GitHubEnterprise],provider:c.github,getCurrentUserFn:c.github.getCurrentUser.bind(c.github),getPullRequestsForReposFn:c.github.getPullRequestsForRepos.bind(c.github),getPullRequestsForUserFn:c.github.getPullRequestsAssociatedWithUser.bind(c.github),getIssuesForReposFn:c.github.getIssuesForRepos.bind(c.github)},[l.Q7.GitLab]:{...h.Mt[l.Q7.GitLab],provider:c.gitlab,getRepoFn:c.gitlab.getRepo.bind(c.gitlab),getCurrentUserFn:c.gitlab.getCurrentUser.bind(c.gitlab),getPullRequestsForReposFn:c.gitlab.getPullRequestsForRepos.bind(c.gitlab),getPullRequestsForRepoFn:c.gitlab.getPullRequestsForRepo.bind(c.gitlab),getPullRequestsForUserFn:c.gitlab.getPullRequestsAssociatedWithUser.bind(c.gitlab),getIssueFn:c.gitlab.getIssue.bind(c.gitlab),getIssuesForReposFn:c.gitlab.getIssuesForRepos.bind(c.gitlab),getIssuesForRepoFn:c.gitlab.getIssuesForRepo.bind(c.gitlab),mergePullRequestFn:c.gitlab.mergePullRequest.bind(c.gitlab)},[l.PY.CloudGitLabSelfHosted]:{...h.Mt[l.Q7.GitLab],provider:c.gitlab,getCurrentUserFn:c.gitlab.getCurrentUser.bind(c.gitlab),getPullRequestsForReposFn:c.gitlab.getPullRequestsForRepos.bind(c.gitlab),getPullRequestsForRepoFn:c.gitlab.getPullRequestsForRepo.bind(c.gitlab),getPullRequestsForUserFn:c.gitlab.getPullRequestsAssociatedWithUser.bind(c.gitlab),getIssueFn:c.gitlab.getIssue.bind(c.gitlab),getIssuesForReposFn:c.gitlab.getIssuesForRepos.bind(c.gitlab),getIssuesForRepoFn:c.gitlab.getIssuesForRepo.bind(c.gitlab),mergePullRequestFn:c.gitlab.mergePullRequest.bind(c.gitlab)},[l.PY.GitLabSelfHosted]:{...h.Mt[l.PY.GitLabSelfHosted],provider:c.gitlab,getCurrentUserFn:c.gitlab.getCurrentUser.bind(c.gitlab),getPullRequestsForReposFn:c.gitlab.getPullRequestsForRepos.bind(c.gitlab),getPullRequestsForRepoFn:c.gitlab.getPullRequestsForRepo.bind(c.gitlab),getPullRequestsForUserFn:c.gitlab.getPullRequestsAssociatedWithUser.bind(c.gitlab),getIssuesForReposFn:c.gitlab.getIssuesForRepos.bind(c.gitlab),getIssuesForRepoFn:c.gitlab.getIssuesForRepo.bind(c.gitlab)},[l.Q7.Bitbucket]:{...h.Mt[l.Q7.Bitbucket],provider:c.bitbucket,getCurrentUserFn:c.bitbucket.getCurrentUser.bind(c.bitbucket),getBitbucketResourcesForUserFn:c.bitbucket.getWorkspacesForUser.bind(c.bitbucket),getBitbucketPullRequestsAuthoredByUserForWorkspaceFn:c.bitbucket.getPullRequestsForUserAndWorkspace.bind(c.bitbucket),getPullRequestsForReposFn:c.bitbucket.getPullRequestsForRepos.bind(c.bitbucket),getPullRequestsForRepoFn:c.bitbucket.getPullRequestsForRepo.bind(c.bitbucket),mergePullRequestFn:c.bitbucket.mergePullRequest.bind(c.bitbucket)},[l.PY.BitbucketServer]:{...h.Mt[l.PY.BitbucketServer],provider:c.bitbucketServer,getRepoFn:c.bitbucketServer.getRepo.bind(c.bitbucketServer),getCurrentUserFn:c.bitbucketServer.getCurrentUser.bind(c.bitbucketServer),getBitbucketServerPullRequestsForCurrentUserFn:c.bitbucketServer.getPullRequestsForCurrentUser.bind(c.bitbucketServer),getPullRequestsForReposFn:c.bitbucketServer.getPullRequestsForRepos.bind(c.bitbucketServer),getPullRequestsForRepoFn:c.bitbucketServer.getPullRequestsForRepo.bind(c.bitbucketServer),mergePullRequestFn:c.bitbucketServer.mergePullRequest.bind(c.bitbucketServer)},[l.Q7.AzureDevOps]:{...h.Mt[l.Q7.AzureDevOps],provider:c.azureDevOps,getRepoOfProjectFn:c.azureDevOps.getRepo.bind(c.azureDevOps),getCurrentUserFn:c.azureDevOps.getCurrentUser.bind(c.azureDevOps),getCurrentUserForInstanceFn:c.azureDevOps.getCurrentUserForInstance.bind(c.azureDevOps),getAzureResourcesForUserFn:c.azureDevOps.getOrgsForUser.bind(c.azureDevOps),getAzureProjectsForResourceFn:c.azureDevOps.getAzureProjects.bind(c.azureDevOps),getPullRequestsForReposFn:c.azureDevOps.getPullRequestsForRepos.bind(c.azureDevOps),getPullRequestsForRepoFn:c.azureDevOps.getPullRequestsForRepo.bind(c.azureDevOps),getPullRequestsForAzureProjectsFn:c.azureDevOps.getPullRequestsForProjects.bind(c.azureDevOps),getIssuesForAzureProjectFn:c.azureDevOps.getIssuesForAzureProject.bind(c.azureDevOps),getReposForAzureProjectFn:c.azureDevOps.getReposForAzureProject.bind(c.azureDevOps),mergePullRequestFn:c.azureDevOps.mergePullRequest.bind(c.azureDevOps)},[l.tp.Jira]:{...h.Mt[l.tp.Jira],provider:c.jira,getCurrentUserForResourceFn:c.jira.getCurrentUserForResource.bind(c.jira),getJiraResourcesForCurrentUserFn:c.jira.getJiraResourcesForCurrentUser.bind(c.jira),getJiraProjectsForResourcesFn:c.jira.getJiraProjectsForResources.bind(c.jira),getIssueFn:c.jira.getIssue.bind(c.jira),getIssuesForProjectFn:c.jira.getIssuesForProject.bind(c.jira),getIssuesForResourceForCurrentUserFn:c.jira.getIssuesForResourceForCurrentUser.bind(c.jira)},[l.tp.Trello]:{...h.Mt[l.tp.Trello],provider:c.trello}}}providers;getScopesForProvider(e){return this.providers[e]?.scopes}getProviderDomain(e){return this.providers[e]?.domain}getProviderPullRequestsPagingMode(e){return this.providers[e]?.pullRequestsPagingMode}getProviderIssuesPagingMode(e){return this.providers[e]?.issuesPagingMode}providerSupportsPullRequestFilters(e,t){return this.providers[e]?.supportedPullRequestFilters!=null&&t.every(t=>this.providers[e]?.supportedPullRequestFilters?.includes(t))}providerSupportsIssueFilters(e,t){return this.providers[e]?.supportedIssueFilters!=null&&t.every(t=>this.providers[e]?.supportedIssueFilters?.includes(t))}isRepoIdsInput(e){return null!=e&&Array.isArray(e)&&e.every(e=>"string"==typeof e||"number"==typeof e)}async getProviderToken(e,t){let i={domain:e.domain,scopes:e.scopes};try{let r=await this.authenticationService.get(e.id);return(await r.getSession(i,{createIfNeeded:t?.createSessionIfNeeded}))?.accessToken}catch{return}}getAzurePATForOAuthToken(e){return(0,c.K3)(`PAT:${e}`)}async ensureProviderTokenAndFunction(e,t,i){let r=this.providers[e];if(null==r)throw Error(`Provider with id ${e} not registered`);let s=i??await this.getProviderToken(r);if(null==s)throw Error(`Not connected to provider ${e}`);if(null==r[t])throw Error(`Provider with id ${e} does not support function: ${t}`);return{provider:r,token:s}}handleProviderError(e,t,i){if(null==this.providers[e])throw Error(`Provider with id ${e} not registered`);if(e===l.tp.Jira&&i?.response?.status!=null){if(401===i.response.status)throw new u.v3(e,u.R.Forbidden,i);else if(429===i.response.status){let e,r=i.response.headers?.["x-ratelimit-reset"];throw null!=r&&Number.isNaN(e=parseInt(r,10))&&(e=void 0),new u.HG(i,t,e)}else if(i.response.status>=400&&i.response.status<500)throw new u.tk(i)}throw i}async getPagedResult(e,t,i,r,s="{}",o=!1,n){let a;try{a=JSON.parse(s)}catch{a={}}let l=a.value,u=a.type,c={};"page"===u?c={page:l}:"cursor"===u&&(c={cursor:l});let h={...t,...c};try{let e=await i?.(h,{token:r,isPAT:o,baseUrl:n});if(null==e)return{values:[]};let t=e.pageInfo?.hasNextPage??!1,s="{}";return e.pageInfo?.endCursor!=null?s=JSON.stringify({value:e.pageInfo?.endCursor,type:"cursor"}):e.pageInfo?.nextPage!=null&&(s=JSON.stringify({value:e.pageInfo?.nextPage,type:"page"})),{values:e.data,paging:{cursor:s,more:t}}}catch(t){return this.handleProviderError(e.id,r,t)}}async getRepo(e,t,i,r,s){if(e===l.Q7.AzureDevOps&&null!=r){let{provider:o,token:n}=await this.ensureProviderTokenAndFunction(e,"getRepoOfProjectFn",s?.accessToken);try{let e=await o.getRepoOfProjectFn?.({namespace:t,name:i,project:r},{token:n,isPAT:s?.isPAT,baseUrl:s?.baseUrl});return e?.data}catch(t){return this.handleProviderError(e,n,t)}}{let{provider:o,token:n}=await this.ensureProviderTokenAndFunction(e,"getRepoFn",s?.accessToken);try{let e=await o.getRepoFn?.({namespace:t,name:i,project:r},{token:n,isPAT:s?.isPAT,baseUrl:s?.baseUrl});return e?.data}catch(t){return this.handleProviderError(e,n,t)}}}async getCurrentUser(e,t){let{provider:i,token:r}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserFn",t?.accessToken);try{return(await i.getCurrentUserFn?.({},{token:r,isPAT:t?.isPAT,baseUrl:t?.baseUrl}))?.data}catch(t){return this.handleProviderError(e,r,t)}}async getCurrentUserForInstance(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserForInstanceFn",i?.accessToken);return(await r.getCurrentUserForInstanceFn?.({namespace:t},{token:s,isPAT:i?.isPAT,baseUrl:i?.baseUrl}))?.data}async getCurrentUserForResource(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getCurrentUserForResourceFn",i?.accessToken);try{return(await r.getCurrentUserForResourceFn?.({resourceId:t},{token:s,isPAT:i?.isPAT,baseUrl:i?.baseUrl}))?.data}catch(t){return this.handleProviderError(e,s,t)}}async getJiraResourcesForCurrentUser(e){let{provider:t,token:i}=await this.ensureProviderTokenAndFunction(l.tp.Jira,"getJiraResourcesForCurrentUserFn",e?.accessToken);try{return(await t.getJiraResourcesForCurrentUserFn?.({token:i}))?.data}catch(e){return this.handleProviderError(l.tp.Jira,i,e)}}async getAzureResourcesForUser(e,t){let{provider:i,token:r}=await this.ensureProviderTokenAndFunction(l.Q7.AzureDevOps,"getAzureResourcesForUserFn",t?.accessToken);try{return(await i.getAzureResourcesForUserFn?.({userId:e},{token:r}))?.data}catch(e){return this.handleProviderError(l.Q7.AzureDevOps,r,e)}}async getBitbucketResourcesForUser(e,t){let{provider:i,token:r}=await this.ensureProviderTokenAndFunction(l.Q7.Bitbucket,"getBitbucketResourcesForUserFn",t?.accessToken);try{return(await i.getBitbucketResourcesForUserFn?.({userId:e},{token:r}))?.data}catch(e){return this.handleProviderError(l.Q7.Bitbucket,r,e)}}async getBitbucketPullRequestsAuthoredByUserForWorkspace(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(l.Q7.Bitbucket,"getBitbucketPullRequestsAuthoredByUserForWorkspaceFn",i?.accessToken);try{return(await r.getBitbucketPullRequestsAuthoredByUserForWorkspaceFn?.({userId:e,workspaceSlug:t},{token:s}))?.data}catch(e){return this.handleProviderError(l.Q7.Bitbucket,s,e)}}async getBitbucketServerPullRequestsForCurrentUser(e,t){let{provider:i,token:r}=await this.ensureProviderTokenAndFunction(l.PY.BitbucketServer,"getBitbucketServerPullRequestsForCurrentUserFn",t?.accessToken);try{return(await i.getBitbucketServerPullRequestsForCurrentUserFn?.({},{token:r,baseUrl:e}))?.data}catch(e){return this.handleProviderError(l.PY.BitbucketServer,r,e)}}async getJiraProjectsForResources(e,t){let{provider:i,token:r}=await this.ensureProviderTokenAndFunction(l.tp.Jira,"getJiraProjectsForResourcesFn",t?.accessToken);try{return(await i.getJiraProjectsForResourcesFn?.({resourceIds:e},{token:r}))?.data}catch(e){return this.handleProviderError(l.tp.Jira,r,e)}}async getAzureProjectsForResource(e,t){let{provider:i,token:r}=await this.ensureProviderTokenAndFunction(l.Q7.AzureDevOps,"getAzureProjectsForResourceFn",t?.accessToken),s=t?.isPAT?r:this.getAzurePATForOAuthToken(r);try{return await this.getPagedResult(i,{namespace:e,...t},i.getAzureProjectsForResourceFn,s,t?.cursor,!0)}catch(e){return this.handleProviderError(l.Q7.AzureDevOps,r,e)}}async getReposForAzureProject(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(l.Q7.AzureDevOps,"getReposForAzureProjectFn",i?.accessToken);return this.getPagedResult(r,{namespace:e,project:t,...i},r.getReposForAzureProjectFn,s,i?.cursor)}async getPullRequestsForRepos(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getPullRequestsForReposFn",i?.accessToken);return this.getPagedResult(r,{...this.isRepoIdsInput(t)?{repoIds:t}:{repos:t},...i},r.getPullRequestsForReposFn,s,i?.cursor,i?.isPAT,i?.baseUrl)}async getPullRequestsForRepo(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getPullRequestsForRepoFn",i?.accessToken);return this.getPagedResult(r,{repo:t,...i},r.getPullRequestsForRepoFn,s,i?.cursor,i?.isPAT,i?.baseUrl)}async getPullRequestsForUser(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getPullRequestsForUserFn",i?.accessToken);return this.getPagedResult(r,{...e===l.Q7.Bitbucket?{userId:t}:{username:t},...i},r.getPullRequestsForUserFn,s,i?.cursor,i?.isPAT,i?.baseUrl)}async getPullRequestsForAzureProjects(e,t){let{provider:i,token:r}=await this.ensureProviderTokenAndFunction(l.Q7.AzureDevOps,"getPullRequestsForAzureProjectsFn",t?.accessToken),s=t?.isPAT?r:this.getAzurePATForOAuthToken(r);try{return(await i.getPullRequestsForAzureProjectsFn?.({projects:e,...t},{token:s,isPAT:!0}))?.data}catch(e){return this.handleProviderError(l.Q7.AzureDevOps,r,e)}}async mergePullRequest(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"mergePullRequestFn",i?.accessToken),o=t.refs?.head;if(null==o||r.id===l.Q7.AzureDevOps&&null==t.project)return!1;try{return await r.mergePullRequestFn?.({pullRequest:{headRef:{oid:o.sha},id:t.id,number:Number.parseInt(t.id,10),repository:{id:t.repository.repo,name:t.repository.repo,project:t.project?.name??"",owner:{login:t.repository.owner}},version:t.version},...i},{token:s,isPAT:i?.isPAT,baseUrl:i?.baseUrl}),!0}catch(t){return this.handleProviderError(e,s,t)}}async getIssuesForRepos(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssuesForReposFn",i?.accessToken);return this.getPagedResult(r,{...this.isRepoIdsInput(t)?{repoIds:t}:{repos:t},...i},r.getIssuesForReposFn,s,i?.cursor,i?.isPAT,i?.baseUrl)}async getIssuesForRepo(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssuesForRepoFn",i?.accessToken);return this.getPagedResult(r,{repo:t,...i},r.getIssuesForRepoFn,s,i?.cursor,i?.isPAT,i?.baseUrl)}async getIssuesForAzureProject(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(l.Q7.AzureDevOps,"getIssuesForAzureProjectFn",i?.accessToken);return this.getPagedResult(r,{namespace:e,project:t,...i},r.getIssuesForAzureProjectFn,s,i?.cursor)}async getIssuesForProject(e,t,i,r){let{provider:s,token:o}=await this.ensureProviderTokenAndFunction(e,"getIssuesForProjectFn",r?.accessToken);try{let e=await s.getIssuesForProjectFn?.({projectKey:t,resourceId:i,...r},{token:o});return e?.data}catch(t){return this.handleProviderError(e,o,t)}}async getIssuesForResourceForCurrentUser(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssuesForResourceForCurrentUserFn",i?.accessToken);return this.getPagedResult(r,{resourceId:t},r.getIssuesForResourceForCurrentUserFn,s,i?.cursor,i?.isPAT,i?.baseUrl)}async getIssue(e,t,i){let{provider:r,token:s}=await this.ensureProviderTokenAndFunction(e,"getIssueFn",i?.accessToken);try{let e=await r.getIssueFn?.(t,{token:s,isPAT:i?.isPAT,baseUrl:i?.baseUrl});return e?.data}catch(t){return this.handleProviderError(e,s,t)}}};async function d(e){let t=e.headers.get("content-type")||"",i=null;if(t.startsWith("application/json")){let t=await e.text();i=t.trim().length>0?JSON.parse(t):null}else if(t.startsWith("text/")||""===t)i=await e.text();else if(t.startsWith("application/vnd.github.raw+json"))i=await e.arrayBuffer();else throw Error(`Unsupported content-type: ${t}`);let r={body:i,headers:Object.fromEntries(e.headers.entries()),status:e.status,statusText:e.statusText};if(!e.ok){let t=Error(e.statusText);throw Object.assign(t,{response:r}),t}return r}},224:(e,t,i)=>{function r(e,t){return""===e||null==t||"object"!=typeof t?t:t instanceof Error?String(t):t}function s(e,t){if(t instanceof Date)return t.getTime();if(t instanceof Map||t instanceof Set)return[...t.entries()];if(t instanceof Function||t instanceof Error)return;if(t instanceof RegExp)return t.toString();let i=this[e];return i instanceof Date?i.getTime():t}i.d(t,{q:()=>r,t:()=>s})},225:(e,t,i)=>{i.d(t,{F7:()=>l,It:()=>n,Je:()=>o,LT:()=>a,xq:()=>u});var r=i(1849),s=i(2870);let o="did-authenticate-cloud-integration";function n(){return s.H.get("cloudIntegrations.enabled",void 0,!0)?r.rK:r.aT}function a(e){return n().includes(e)}let l={jira:r.tp.Jira,trello:r.tp.Trello,gitlab:r.Q7.GitLab,github:r.Q7.GitHub,githubEnterprise:r.PY.CloudGitHubEnterprise,gitlabSelfHosted:r.PY.CloudGitLabSelfHosted,bitbucket:r.Q7.Bitbucket,bitbucketServer:r.PY.BitbucketServer,azure:r.Q7.AzureDevOps},u={[r.tp.Jira]:"jira",[r.tp.Trello]:"trello",[r.Q7.GitLab]:"gitlab",[r.Q7.GitHub]:"github",[r.Q7.Bitbucket]:"bitbucket",[r.Q7.AzureDevOps]:"azure",[r.PY.CloudGitHubEnterprise]:"githubEnterprise",[r.PY.CloudGitLabSelfHosted]:"gitlabSelfHosted",[r.PY.BitbucketServer]:"bitbucketServer",[r.PY.GitHubEnterprise]:void 0,[r.PY.GitLabSelfHosted]:void 0}},242:(e,t,i)=>{i.d(t,{X:()=>SearchResultsNode});var r=i(1398),s=i(7808),o=i(3583),n=i(2624),a=i(5042),l=i(9388),u=i(6206),c=i(4808),h=i(5818),d=i(260),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor;let m=0;let SearchResultsNode=class SearchResultsNode extends h.eu{constructor(e,t,i,r,s,o,l=0){super("search-results",n.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._search=r,this._labels=s,this._searchQueryOrLog=o,this._storedAt=l,this._instanceId=m++,this.updateContext({searchId:`${(0,a.b4)(this._search)}+${this._instanceId}`}),this._uniqueId=(0,h.pF)(this.type,this.context),0===this._storedAt&&(this._storedAt=Date.now(),this.store(!0).catch())}_instanceId;get id(){return this._uniqueId}toClipboard(){return this.search.query}get order(){return this._storedAt}get search(){return this._search}dismiss(){this.remove(!0)}_resultsNode;ensureResults(){if(null==this._resultsNode){let e;null==this._searchQueryOrLog?(e=!0,this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel})):"function"!=typeof this._searchQueryOrLog&&(this._searchQueryOrLog=this.getSearchQuery({label:this._labels.queryLabel},this._searchQueryOrLog)),this._resultsNode=new d.V(this.view,this,this.repoPath,this._labels.label,{query:this._searchQueryOrLog,deferred:e},{expand:!1},!0)}return this._resultsNode}async getChildren(){return this.ensureResults().getChildren()}async getTreeItem(){let e=await this.ensureResults().getTreeItem();if(e.id=this.id,e.contextValue=h.U0.SearchResults,this.view.container.git.repositoryCount>1){let t=this.view.container.git.getRepository(this.repoPath);e.description=t?.formattedName??this.repoPath}return e.iconPath=new r.ThemeIcon("search"),e}get hasMore(){return this.ensureResults().hasMore}async loadMore(e){return this.ensureResults().loadMore(e)}async edit(e){if(null==e)return void await (0,o.b)({command:"search",prefillOnly:!0,state:{repo:this.repoPath,...this.search,showResultsInSideBar:this}});let t=this.getStorageId();this._search=e.pattern,this._labels=e.labels,this._searchQueryOrLog=e.log,this._resultsNode=void 0,await this.replace(t,!0),this.triggerChange(!1),queueMicrotask(()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0}))}refresh(e=!1){this._resultsNode?.refresh(e)}getSearchLabel(e,t){if("string"==typeof e)return e;let i=t?.count??0,r=void 0===e.resultsType?{singular:"search result",plural:"search results"}:e.resultsType;return`${(0,c.td)(r.singular,i,{format:e=>t?.hasMore?`${e}+`:String(e),plural:r.plural,zero:"No"})} ${e.label}`}getSearchQuery(e,t){let i=!0;return async r=>{t=await (t??this.view.container.git.commits(this.repoPath).searchCommits(this.search)),i||t?.query==null||(t=await t.query(r)),i=!1;let s={label:this.getSearchLabel(e.label,t),log:t,hasMore:t?.hasMore??!1};return s.hasMore&&(s.more=async t=>{s.log=await s.log?.more?.(t)??s.log,s.label=this.getSearchLabel(e.label,s.log),s.hasMore=s.log?.hasMore??!0}),s}}getStorageId(){return(0,s.Fx)(`${this.repoPath}|${(0,a.b4)(this.search)}`,"base64")}remove(e=!1){return this.view.updateStorage(this.getStorageId(),void 0,e)}async replace(e,t=!1){return await this.view.updateStorage(e,void 0,t),this.store(t)}store(e=!1){return this.view.updateStorage(this.getStorageId(),{type:"search",timestamp:this._storedAt,path:this.repoPath,labels:this._labels,search:(0,a.GQ)(this.search)},e)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o)})([(0,l.G)(),(0,u.Yz)()],SearchResultsNode.prototype,"refresh",1)},260:(e,t,i)=>{i.d(t,{V:()=>ResultsCommitsNode});var r=i(1398),s=i(2624),o=i(8518),n=i(652),a=i(2870),l=i(9388),u=i(6206),c=i(9091),h=i(7864),d=i(5818),p=i(2356),g=i(3263),m=i(8027),f=i(8845);let AutolinkedItemNode=class AutolinkedItemNode extends d.eu{constructor(e,t,i,r,o){super("autolink",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.item=r,this.maybeEnriched=o,this._uniqueId=(0,d.pF)(`${this.type}+${r.id}`,this.context)}get id(){return this._uniqueId}async toClipboard(e){let t=await this.maybeEnriched;return"markdown"===e?`[${this.item.prefix??""}${this.item.id}](${this.item.url})${t?.title?` - ${t?.title}`:""}`:`${this.item.id}: ${t?.title??this.item.url}`}getUrl(){return this.item.url}getChildren(){return[]}getTreeItem(){let e=this.maybeEnriched,t=(0,h.yL)(e);if(t&&e.then(e=>{this.maybeEnriched=e,this.view.triggerNodeChange(this)}),t||null==e){let e=this.item,{provider:i}=e,s=new r.TreeItem(e.description??`Autolink ${e.prefix}${e.id}`,r.TreeItemCollapsibleState.None);return s.description=i?.name??"Custom",s.iconPath=new r.ThemeIcon(t?"loading~spin":null==e.type?"link":"pullrequest"===e.type?"git-pull-request":"issues"),s.contextValue=d.U0.AutolinkedItem,s.tooltip=new r.MarkdownString(`${e.description?`Autolinked ${e.description}`:`${null==e.type?"Autolinked":"pullrequest"===e.type?"Autolinked Pull Request":"Autolinked Issue"} ${e.prefix}${e.id}`} \\
[${e.url}](${e.url}${null!=e.title?` "${e.title}"`:""})`),s}let i=(0,f.PI)(e.closedDate??e.updatedDate??e.createdDate),s=new r.TreeItem(`${e.id}: ${e.title}`,r.TreeItemCollapsibleState.None);s.description=i,s.iconPath=(0,m.pr)(e),s.contextValue=`${d.U0.AutolinkedItem}+${"pullrequest"===e.type?"pr":"issue"}`;let o=` "Open ${"pullrequest"===e.type?"Pull Request":"Issue"} \\#${e.id} on ${e.provider.name}"`,n=new r.MarkdownString(`${(0,m.xu)(e)} [**${e.title.trim()}**](${e.url}${o}) \\
[#${e.id}](${e.url}${o}) was ${e.closed?"merged"===e.state?"merged":"closed":"opened"} ${i}`,!0);return n.supportHtml=!0,n.isTrusted=!0,s.tooltip=n,s}};var w=i(1667),v=i(6230);let y=0;let AutolinkedItemsNode=class AutolinkedItemsNode extends g.l{constructor(e,t,i,r,o){super("autolinks",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.log=r,this.expand=o,this._instanceId=y++,this.updateContext({autolinksId:String(this._instanceId)}),this._uniqueId=(0,d.pF)(this.type,this.context)}_instanceId;get id(){return this._uniqueId}async getChildren(){if(null==this.children){let e,t=[...this.log.commits.values()];if(t.length){let i=await this.view.container.git.remotes(this.repoPath).getBestRemoteWithProvider(),r=t.map(e=>e.message).join(`
`),[s]=await Promise.allSettled([this.view.container.autolinks.getEnrichedAutolinks(r,i).then(e=>null!=e?(0,h.sc)(e,void 0,250):void 0)]),o=(0,h.Ro)(s);o?.size&&(e=[...o.values()].map(([e,t])=>null!=e&&(0,p.r0)(e?.value)?new v.Xu(this.view,this,e.value,this.log.repoPath):new AutolinkedItemNode(this.view,this,this.repoPath,t,e?.value)))}e?.length||(e=[new w.S2(this.view,this,"No autolinked issues or pull requests could be found.")]),this.log.hasMore&&e.push(new w.cb(this.view,this.parent,e[e.length-1],{context:{expandAutolinks:!0},message:"Load more commits to search for autolinks"})),this.children=e}return this.children}getTreeItem(){let e=new r.TreeItem("Autolinked Issues and Pull Requests",this.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=d.U0.AutolinkedItems,e}};var b=i(1831),C=i(968),R=i(6005),k=i(9994),S=i(6339),P=Object.defineProperty,A=Object.getOwnPropertyDescriptor;let ResultsCommitsNode=class ResultsCommitsNode extends d.eu{constructor(e,t,i,r,o,n,a){super("results-commits",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._label=r,this._results=o,null!=o.direction&&this.updateContext({branchStatusUpstreamType:o.direction}),this._uniqueId=(0,d.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this),this._options={autolinks:!0,expand:!0,...n},null!=a&&(this.splatted=a)}limit;_options;get id(){return this._uniqueId}get ref1(){return this._results.comparison?.ref1}get ref2(){return this._results.comparison?.ref2}get isComparisonFiltered(){return this.context.comparisonFiltered}_onChildrenCompleted;async getChildren(){this._onChildrenCompleted?.cancel(),this._onChildrenCompleted=(0,h.v6)();let{log:e}=await this.getCommitsQueryResults();if(null==e)return this._onChildrenCompleted?.fulfill(),[new w.S2(this.view,this,"No results found")];let[t]=await Promise.all([this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath)]),i=[];this._options.autolinks&&i.push(new AutolinkedItemsNode(this.view,this,this.uri.repoPath,e,this._expandAutolinks)),this._expandAutolinks=!1,this._results.comparison?.range&&this.view.config.showComparisonContributors&&i.push(new C.j(this.uri,this.view,this,this.view.container.git.getRepository(this.uri.repoPath),{icon:!1,ref:this._results.comparison?.range,stats:this.view.config.showContributorsStatistics}));let{files:r}=this._results;null==r||this.isComparisonFiltered||i.push(new k.o(this.view,this,this.uri.repoPath,r.ref1,r.ref2,r.query,this._results.direction,{expand:!1}));let s={expand:this._options.expand&&1===e.count};return i.push(...(0,R.h)((0,c.Tj)(e.commits.values(),e=>(0,o.kk)(e)?new S.m(this.view,this,e,{icon:!0}):new b.e(this.view,this,e,void 0,void 0,t,s)),this,void 0,{show:e.count>1})),e.hasMore&&i.push(new w.cb(this.view,this,i[i.length-1])),this._onChildrenCompleted?.fulfill(),i}async getTreeItem(){let e,t;if(this._results.deferred)e=this._label,t=r.TreeItemCollapsibleState.Collapsed;else{let i,s=await (0,h.wW)(this.getCommitsQueryResults(),void 0,100);s.paused?(queueMicrotask(async()=>{try{await this._onChildrenCompleted?.promise}catch{return}await s.value,this.view.triggerNodeChange(this.parent)}),t=r.TreeItemCollapsibleState.Collapsed):({label:e,log:i}=s.value,t=null==i||0===i.count?r.TreeItemCollapsibleState.None:this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed)}let i=new r.TreeItem(e??this._label,t);return i.id=this.id,i.contextValue=null!=this._results.comparison?d.U0.CompareResultsCommits:d.U0.SearchResultsCommits,i.description=this._options.description,i}refresh(e=!1){e&&(this._commitsQueryResults=void 0,this._commitsQueryResultsPromise=void 0,this.getCommitsQueryResults())}_commitsQueryResultsPromise;async getCommitsQueryResults(){if(null==this._commitsQueryResultsPromise){this._commitsQueryResultsPromise=this._results.query(this.limit??a.H.get("advanced.maxSearchItems"));let e=await this._commitsQueryResultsPromise;this._commitsQueryResults=e,this._hasMore=e.hasMore,this._results.deferred&&(this._results.deferred=!1,this.parent.triggerChange(!1))}return this._commitsQueryResultsPromise}_commitsQueryResults;maybeGetCommitsQueryResults(){return this._commitsQueryResults}_hasMore=!0;get hasMore(){return this._hasMore}_expandAutolinks=!1;async loadMore(e,t){let i=await this.getCommitsQueryResults();i?.hasMore&&(null!=t&&"expandAutolinks"in t&&(this._expandAutolinks=!!t.expandAutolinks),await i.more?.(e??this.view.config.pageItemLimit),this.limit=i.log?.count,this.triggerChange(!1))}async getChangesForChangelog(){let e={base:{ref:this.ref1,label:`\`${this.ref1}\``},head:{ref:this.ref2,label:`\`${this.ref2}\``}},{log:t}=await this.getCommitsQueryResults();return null==t?{changes:[],range:e}:(0,n.f)(this.view.container,e,t)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?A(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&P(t,i,o)})([(0,l.G)(),(0,u.Yz)()],ResultsCommitsNode.prototype,"refresh",1)},326:(e,t,i)=>{i.d(t,{UQ:()=>o,ft:()=>n,j2:()=>CloudWorkspace,y1:()=>a});let CloudWorkspace=class CloudWorkspace{constructor(e,t,i,r,s,o,n,a,l,u){this.container=e,this.id=t,this.name=i,this.organizationId=r,this.provider=s,this.repoRelation=o,this.current=n,this.azureInfo=a,this._repositoryDescriptors=l,this._localPath=u,this._disposable=this.container.git.onDidChangeRepositories(this.resetRepositoriesByName,this)}type="cloud";_repositoryDescriptors;_repositoriesByName;_localPath;_disposable;dispose(){this._disposable.dispose()}get shared(){return null!=this.organizationId}get localPath(){return this._localPath}resetRepositoriesByName(){this._repositoriesByName=void 0}async getRepositoriesByName(e){return(null==this._repositoriesByName||e?.force)&&(this._repositoriesByName=await this.container.workspaces.resolveWorkspaceRepositoriesByName(this.id,{resolveFromPath:!0,usePathMapping:!0})),this._repositoriesByName}async getRepositoryDescriptors(e){return(null==this._repositoryDescriptors||e?.force)&&(this._repositoryDescriptors=await this.container.workspaces.getCloudWorkspaceRepositories(this.id),this.resetRepositoriesByName()),this._repositoryDescriptors}async getRepositoryDescriptor(e){return(await this.getRepositoryDescriptors()).find(t=>t.name===e)}addRepositories(e){null==this._repositoryDescriptors?this._repositoryDescriptors=e:this._repositoryDescriptors=this._repositoryDescriptors.concat(e),this.resetRepositoriesByName()}removeRepositories(e){null!=this._repositoryDescriptors&&(this._repositoryDescriptors=this._repositoryDescriptors.filter(t=>!e.includes(t.name)),this.resetRepositoriesByName())}setLocalPath(e){this._localPath=e}};var r,s,o=((r=o||{}).GitHub="github",r.GitHubEnterprise="github_enterprise",r.GitLab="gitlab",r.GitLabSelfHosted="gitlab_self_hosted",r.Bitbucket="bitbucket",r.Azure="azure",r);let n={azure:"azure-devops",bitbucket:"bitbucket",github:"github",github_enterprise:"github",gitlab:"gitlab",gitlab_self_hosted:"gitlab"};var a=((s=a||{}).GitHub="GITHUB",s.GitHubEnterprise="GITHUB_ENTERPRISE",s.GitLab="GITLAB",s.GitLabSelfHosted="GITLAB_SELF_HOSTED",s.Bitbucket="BITBUCKET",s.Azure="AZURE",s)},421:(e,t,i)=>{i.d(t,{s:()=>r,u:()=>s});let r=864e5;function s(e){let t=Date.now()-e;return t<r?(t<36e5?6e4:36e5)/2:0}},486:(e,t,i)=>{i.d(t,{C1:()=>IpcNotification,Fh:()=>u,Ge:()=>r,HE:()=>d,HM:()=>g,OG:()=>n,Oz:()=>IpcRequest,Q2:()=>IpcCommand,RR:()=>c,Vw:()=>o,YU:()=>m,ct:()=>h,j0:()=>l,lJ:()=>a,pY:()=>s});let IpcCall=class IpcCall{constructor(e,t,i=!1,r=!1){this.scope=e,this.reset=i,this.pack=r,this.method=`${e}/${t}`}method;is(e){return e.method===this.method}};let IpcCommand=class IpcCommand extends IpcCall{};let IpcRequest=class IpcRequest extends IpcCall{response;constructor(e,t,i,r){super(e,t,i,r),this.response=new IpcNotification(this.scope,`${t}/completion`,this.reset,this.pack)}};let IpcNotification=class IpcNotification extends IpcCall{};let r=new IpcCommand("core","webview/ready"),s=new IpcCommand("core","webview/focus/changed"),o=new IpcCommand("core","command/execute"),n=new IpcRequest("core","promos/applicable"),a=new IpcCommand("core","configuration/update"),l=new IpcCommand("core","telemetry/sendEvent"),u=new IpcNotification("core","ipc/promise/settled"),c=new IpcNotification("core","window/focus/didChange"),h=new IpcCommand("core","webview/focus/didChange"),d=new IpcNotification("core","configuration/didChange"),p=["rebaseEditor.enabled","currentLine.useUncommittedChangesFormat"];function g(e){return p.includes(e)}function m(e,t){}},534:(e,t,i)=>{i.d(t,{Z:()=>StatusFileFormatter});var r=i(1182),s=i(4256),o=i(9686),n=i(6821),a=i(5496),l=i(567),u=i(7392);let StatusFileFormatter=class StatusFileFormatter extends u.Z{get directory(){let e=c((0,a.C0)(this._item,!1,this._options.relativePath),this._options.outputFormat);return this._padOrTruncate(e,this._options.tokenOptions.directory)}get file(){let e=c((0,o.P8)(this._item.path),this._options.outputFormat);return this._padOrTruncate(e,this._options.tokenOptions.file)}get filePath(){let e=c((0,a.CB)(this._item,{relativeTo:this._options.relativePath,truncateTo:this._options.tokenOptions.filePath?.truncateTo}),this._options.outputFormat);return this._padOrTruncate(e,this._options.tokenOptions.filePath)}get originalPath(){let e=c((0,a.Hk)(this._item,this._options.relativePath),this._options.outputFormat);return this._padOrTruncate(e,this._options.tokenOptions.originalPath)}get path(){let e=c((0,a.WI)(this._item,this._options.relativePath),this._options.outputFormat);return this._padOrTruncate(e,this._options.tokenOptions.path)}get status(){let e=(0,l.m)(this._item.status);return this._padOrTruncate(e,this._options.tokenOptions.status)}get working(){let e="";return e=null!=this._item.workingTreeStatus&&null!=this._item.indexStatus?`${r.EO.Pencil}${r.EO.Space}${r.EO.SpaceThinnest}${r.EO.Check}`:null!=this._item.workingTreeStatus?`${r.EO.Pencil}${r.EO.SpaceThin}${r.EO.SpaceThinnest}${r.EO.EnDash}${r.EO.Space}`:null!=this._item.indexStatus?`${r.EO.Space}${r.EO.EnDash}${r.EO.Space.repeat(2)}${r.EO.Check}`:"",this._padOrTruncate(e,this._options.tokenOptions.working)}get changes(){return(0,n.H)(this._item)?this._padOrTruncate(this._item.formatStats("stats","plaintext"!==this._options.outputFormat?{color:!0}:void 0),this._options.tokenOptions.changes):this._padOrTruncate("",this._options.tokenOptions.changes)}get changesDetail(){return(0,n.H)(this._item)?this._padOrTruncate(this._item.formatStats("expanded",{color:"plaintext"!==this._options.outputFormat,separator:", "}),this._options.tokenOptions.changesDetail):this._padOrTruncate("",this._options.tokenOptions.changes)}get changesShort(){return(0,n.H)(this._item)?this._padOrTruncate(this._item.formatStats("short",{separator:""}),this._options.tokenOptions.changesShort):this._padOrTruncate("",this._options.tokenOptions.changes)}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}};function c(e,t){return"markdown"===t?(0,s.FV)(e):e}},553:(e,t,i)=>{i.d(t,{N6:()=>o,Xc:()=>a,Zg:()=>s,v2:()=>n});var r=i(1398);function s(e){let t=e.toString();return r.workspace.textDocuments.find(e=>e.uri.toString()===t)}function o(e){return r.window.activeTextEditor?.document===e}function n(e){return null!=e&&"object"==typeof e&&"uri"in e&&e.uri instanceof r.Uri&&"fileName"in e&&"languageId"in e&&"isDirty"in e&&"isUntitled"in e}function a(e){return r.window.visibleTextEditors.some(t=>t.document===e)}},558:(e,t,i)=>{i.d(t,{SettingsWebviewProvider:()=>SettingsWebviewProvider});var r=i(1398),s=i(1182),o=i(1849),n=i(8103),a=i(8518),l=i(6821),u=i(6503),c=i(2356),h=i(2870),d=i(9091),p=i(486);let g="settings",m=new p.Oz(g,"configuration/preview"),f=new p.C1(g,"didOpenAnchor"),w=new p.C1(g,"didChangeAccount"),v=new p.C1(g,"didChangeConnectedJira");let SettingsWebviewProvider=class SettingsWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._disposable=r.Disposable.from(h.H.onDidChangeAny(this.onAnyConfigurationChanged,this),e.subscription.onDidChange(this.onSubscriptionChanged,this),e.integrations.onDidChangeConnectionState(this.onIntegrationConnectionStateChanged,this))}_disposable;_pendingJumpToAnchor;dispose(){this._disposable.dispose()}getTelemetryContext(){return{...this.host.getTelemetryContext()}}onSubscriptionChanged(e){this.host.notify(w,{hasAccount:null!=e.current.account})}onIntegrationConnectionStateChanged(e){"jira"===e.key&&this.host.notify(v,{hasConnectedJira:"connected"===e.reason})}async getAccountState(){return null!=(await this.container.subscription.getSubscription()).account}async getJiraConnected(){let e=await this.container.integrations.get(o.tp.Jira);return null!=e&&(e.maybeConnected??e.isConnected())}async includeBootstrap(){let e=[["user","User"]];return r.workspace.workspaceFolders?.length&&e.push(["workspace","Workspace"]),{...this.host.baseWebviewState,version:this.container.version,config:h.H.getAll(!0),customSettings:this.getCustomSettings(),scope:"user",scopes:e,hasAccount:await this.getAccountState(),hasConnectedJira:await this.getJiraConnected()}}onReloaded(){this.notifyDidChangeConfiguration()}onShowing(e,t,...i){let r=i[0];if(r&&"string"==typeof r){if(!e&&this.host.ready&&this.host.visible)return queueMicrotask(()=>void this.host.notify(f,{anchor:r,scrollBehavior:"smooth"})),[!0,void 0];this._pendingJumpToAnchor=r}return[!0,void 0]}onActiveChanged(e){e&&this.notifyDidChangeConfiguration()}onReady(){if(null!=this._pendingJumpToAnchor){let e=this._pendingJumpToAnchor;this._pendingJumpToAnchor=void 0,this.host.notify(f,{anchor:e,scrollBehavior:"auto"})}}async onMessageReceived(e){if(null!=e)switch(!0){case p.lJ.is(e):{let t,{params:i}=e,s="workspace"===i.scope?r.ConfigurationTarget.Workspace:r.ConfigurationTarget.Global;for(t in i.changes){let e=i.changes[t];if((0,p.HM)(t)){let i=this.customSettings.get(t);null!=i&&"boolean"==typeof e&&await i.update(e);continue}(0,p.YU)(t,e);let r=h.H.inspect(t);if(null!=e)if("workspace"===i.scope){if(e===r.workspaceValue)continue}else{if(e===r.globalValue&&e!==r.defaultValue)continue;e===r.defaultValue&&(e=void 0)}await h.H.update(t,e,s)}for(let e of i.removes)await h.H.update(e,void 0,s);break}case m.is(e):switch(e.params.type){case"commit":case"commit-uncommitted":{let t,i,r=new a.Yg(this.container,"~/code/eamodio/vscode-gitlens-demo","fe26af408293cba5b4bfd77306e1ac9ff7ccaef8",new a.M7("You","eamodio@gmail.com",new Date("2016-11-12T20:41:00.000Z")),new a.M7("You","eamodio@gmail.com",new Date("2020-11-01T06:57:21.000Z")),"commit-uncommitted"===e.params.type?"Uncommitted changes":"Supercharged",["3ac1d3f51d7cf5f438cc69f25f6740536ad80fef"],"commit-uncommitted"===e.params.type?"Uncommitted changes":"Supercharged",{files:[new l.l(this.container,"~/code/eamodio/vscode-gitlens-demo","code.ts",u.NO.Modified)],filtered:!0,pathspec:"code.ts"},void 0,[]),s=!1;switch(e.params.key){case h.H.name("currentLine.format"):s=h.H.get("currentLine.pullRequests.enabled");break;case h.H.name("statusBar.format"):s=h.H.get("statusBar.pullRequests.enabled")}s&&(t=new c.B9({id:"github",name:"GitHub",domain:"github.com",icon:"github"},{id:"eamodio",name:"Eric Amodio",avatarUrl:"https://avatars1.githubusercontent.com/u/641685?s=32&v=4",url:"https://github.com/eamodio"},"1",void 0,"Supercharged","https://github.com/gitkraken/vscode-gitlens/pulls/1",{owner:"gitkraken",repo:"vscode-gitlens"},"merged",new Date("Sat, 12 Nov 2016 19:41:00 GMT"),new Date("Sat, 12 Nov 2016 19:41:00 GMT"),void 0,new Date("Sat, 12 Nov 2016 20:41:00 GMT")));try{i=n.c.fromTemplate(e.params.format,r,{dateFormat:h.H.get("defaultDateFormat"),pullRequest:t,messageTruncateAtNewLine:!0})}catch{i="Invalid format"}await this.host.respond(m,e,{preview:i})}}}}onAnyConfigurationChanged(e){(h.H.changedAny(e,s.Od)||h.H.changedAny(e,[...(0,d.Tj)(this.customSettings.values(),e=>e.name)]))&&this.notifyDidChangeConfiguration()}_customSettings;get customSettings(){return null==this._customSettings&&(this._customSettings=new Map([["rebaseEditor.enabled",{name:"workbench.editorAssociations",enabled:()=>this.container.rebaseEditor.enabled,update:this.container.rebaseEditor.setEnabled}],["currentLine.useUncommittedChangesFormat",{name:"currentLine.uncommittedChangesFormat",enabled:()=>null!=h.H.get("currentLine.uncommittedChangesFormat"),update:async e=>h.H.updateEffective("currentLine.uncommittedChangesFormat",e?"✏️ ${ago}":null)}]])),this._customSettings}getCustomSettings(){let e=Object.create(null);for(let[t,i]of this.customSettings)e[t]=i.enabled();return e}notifyDidChangeConfiguration(){return this.host.notify(p.HE,{config:h.H.getAll(!0),customSettings:this.getCustomSettings()})}}},564:(e,t,i)=>{let r;i.d(t,{d:()=>QuickWizardRootStep,g:()=>e4});var s=i(1398),o=i(3037),n=i(3296),a=i(9679),l=i(7308),u=i(1182),c=i(1849),h=i(9207),d=i(4357),p=i(2320),g=i(7864),m=i(2141),f=i(2870),w=i(4152),v=i(6045),y=i(8845),b=i(9091),C=i(4808),R=i(4269),k=i(4898),S=i(6606),P=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),A=e=>{throw TypeError(e)},I=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&A("Object expected"),i&&(r=t[P("asyncDispose")]),void 0===r&&(r=t[P("dispose")],i&&(s=r)),"function"!=typeof r&&A("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},D=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let _={type:"integrations",label:"Connect an Additional Integration...",detail:"Connect additional integrations to view their pull requests in Launchpad"},$=(0,v.N)(),T=["draft","other","snoozed"];let LaunchpadCommand=class LaunchpadCommand extends n.d6{source;telemetryContext;savedSearch;constructor(e,t){super(e,"launchpad","launchpad",`GitLens Launchpad\xa0\xA0${u.lD}`,{description:"focus on a pull request"}),t?.source==="launchpad-indicator"&&null==e.storage.get("launchpad:indicator:hasInteracted")&&e.storage.store("launchpad:indicator:hasInteracted",new Date().toISOString()).catch(),this.source={source:t?.source??"commandPalette"},this.container.telemetry.enabled&&(this.telemetryContext={instance:$.next(),"initialState.group":t?.state?.initialGroup,"initialState.selectTopItem":t?.state?.selectTopItem??!1},this.container.telemetry.sendEvent("launchpad/open",{...this.telemetryContext},this.source));let i=0;t?.state?.item!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async ensureIntegrationConnected(e){let t=await this.container.integrations.get(e);if(null==t)return!1;let i=t.maybeConnected??await t.isConnected();return i||(i=await t.connect("launchpad")),i}async *steps(e){var t=[];try{this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let i=this.container.storage.get("launchpad:groups:collapsed");null==i&&(i=T);let r=new Map(i.map(e=>[e,!0]));if(null!=e.initialGroup)for(let t of S.Rp)r.set(t,t!==e.initialGroup);let o=I(t,function(e){let t,i,r,o;function n(){null!=i&&(clearTimeout(i),i=void 0),null==o||o.token.isCancellationRequested||o.cancel()}function a(){n(),r?.pending&&r.cancel(new p.AL),t=void 0}function l(){a(),o?.dispose(),o=void 0}async function u(){if(null==r||null==t)return;n();let e=t,i=r;t=void 0;let a=o=new s.CancellationTokenSource;try{let t=await e(a.token);if(a.token.isCancellationRequested)throw new p.AL;i!==r&&i.pending&&i.fulfill(t),r.pending&&r.fulfill(t)}catch(e){a.token.isCancellationRequested?r!==i&&i.pending&&i.cancel(e):(i!==r&&i.pending&&i.cancel(e),r?.pending&&r.cancel(e))}finally{a.dispose()}}function c(e){return t=e,n(),r?.pending||(r=(0,g.v6)()),i=setTimeout(u,500),r.promise}return c.cancel=a,c.dispose=l,c[Symbol.dispose]=l,c.flush=function(){return null!=t&&(n(),u()),null!=i&&clearTimeout(i),r?.promise},c.pending=function(){return r?.pending??!1},c}(0)),a={result:{items:[]},searchResult:void 0,title:this.title,collapsed:r,telemetryContext:this.telemetryContext,connectedIntegrations:await this.container.launchpad.getConnectedIntegrations(),inSearch:!1,updateItemsDebouncer:o},u=t=>{a.inSearch=!!t&&"mode",a.searchResult=void 0,a.updateItemsDebouncer.cancel(),e.item=void 0},c=!1;for(;this.canStepsContinue(e);){a.title=this.title,a.updateItemsDebouncer.cancel();let t=!1;if(![...a.connectedIntegrations.values()].some(e=>e)){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(c?"launchpad/steps/connect":"launchpad/opened",{...a.telemetryContext,connected:!1},this.source),c=!0;let i=f.H.get("cloudIntegrations.enabled",void 0,!1)?yield*this.confirmCloudIntegrationsConnectStep(e,a):yield*this.confirmLocalIntegrationConnectStep(e,a);if(i===n.Lt)return i;i.resume();let r=i.connected;if(!r)continue;t=!!r}if((yield*(0,l.jg)(this.container,e,a,"launchpad"))!==n.Lt){if(await F(this.container,a,{force:t}),e.counter<1||null==e.item){if(null!=e.id){let t=a.result.items?.find(t=>t.uuid===e.id?.uuid);if(null!=t){e.item={...t,group:e.id.group},e.counter<1&&(e.counter=1);continue}}this.container.telemetry.enabled&&this.container.telemetry.sendEvent(c?"launchpad/steps/main":"launchpad/opened",{...a.telemetryContext,connected:!0},this.source),c=!0;let i=yield*this.pickLaunchpadItemStep(e,a,{picked:e.item?.graphQLId??e.item?.uuid,selectTopItem:e.selectTopItem});if(i===n.Lt){u(!1);continue}if(!(0,d.hr)(i)&&i?.type==="integrations"){u(!1);let i=f.H.get("cloudIntegrations.enabled",void 0,!1)?yield*this.confirmCloudIntegrationsConnectStep(e,a):yield*this.confirmLocalIntegrationConnectStep(e,a);if(i===n.Lt)continue;i.resume(),t=!!i.connected,await F(this.container,a,{force:t}),e.counter--;continue}if(!(0,d.hr)(i)&&i?.type==="searchMode"){u(i.searchMode),e.counter--;continue}e.item={...i.item,group:i.group}}if(null==e.item)throw Error("Missing item");if(this.confirm(e.confirm)){this.sendItemActionTelemetry("select",e.item,e.item.group,a),await this.container.launchpad.ensureLaunchpadItemCodeSuggestions(e.item);let t=yield*this.confirmStep(e,a);if(t===n.Lt)continue;e.action=t}if(e.action&&this.sendItemActionTelemetry(e.action,e.item,e.item.group,a),"string"==typeof e.action)switch(e.action){case"merge":this.container.launchpad.merge(e.item);break;case"open":this.container.launchpad.open(e.item);break;case"soft-open":this.container.launchpad.open(e.item),e.counter=2;continue;case"switch":case"show-overview":this.container.launchpad.switchTo(e.item);break;case"open-worktree":this.container.launchpad.switchTo(e.item,{openInWorktree:!0});break;case"switch-and-code-suggest":case"code-suggest":this.container.launchpad.switchTo(e.item,{startCodeSuggestion:!0});break;case"open-changes":this.container.launchpad.openChanges(e.item);break;case"open-in-graph":this.container.launchpad.openInGraph(e.item)}else e.action?.action==="open-suggestion"&&this.container.launchpad.openCodeSuggestion(e.item,e.action.target);(0,n.nH)(e)}}return e.counter<0?n.Lt:void 0}catch(e){var i=e,r=!0}finally{D(t,i,r)}}*pickLaunchpadItemStep(e,t,{picked:i,selectTopItem:r}){let o=[...t.connectedIntegrations.values()].some(e=>!e),l=(i,r)=>[(0,h.uK)(r?r.toString():void 0),(0,d.Du)(d.WL.Reload,!1,{label:`$(${t.collapsed.get(i)?"chevron-down":"chevron-up"})\xa0\xA0${S.lj.get(i)}\xa0\xA0${S.aL.get(i)?.toUpperCase()}`,onDidSelect:()=>{let r=!t.collapsed.get(i);t.collapsed.set(i,r),null==e.initialGroup&&this.container.storage.store("launchpad:groups:collapsed",Array.from(t.collapsed.keys()).filter(e=>t.collapsed.get(e))),this.container.telemetry.enabled&&(B(t),this.container.telemetry.sendEvent("launchpad/groupToggled",{...t.telemetryContext,group:i,collapsed:r},this.source))}})],p=(e,t,r,o)=>{let n=[];return"mergeable"===e.actionableCategory&&n.push(a.M_),e.isSearched||n.push(e.viewer.pinned?a.wt:a.Zo,e.viewer.snoozed?a.NA:a.KD),n.push(...O(e.provider.id)),e.openRepository?.localBranch?.current||n.push(a.oS),{type:"item",label:e.title.length>60?`${e.title.substring(0,60)}...`:e.title,description:`\xa0 ${e.repository.owner.login}/${e.repository.name}#${e.id} \xa0 ${e.codeSuggestionsCount>0?` $(gitlens-code-suggestion) ${e.codeSuggestionsCount}`:""} \xa0 ${e.isNew?"(New since last view)":""}`,detail:`      ${e.viewer.pinned?"$(pinned) ":""}${e.isDraft&&"draft"!==t?"$(git-pull-request-draft) ":""}${"other"===e.actionableCategory?"":`${S.oJ.get(e.actionableCategory)[0]} \u2022  `}${(0,y.PI)(e.updatedDate)} by @${e.author.username}`,alwaysShow:o,buttons:n,iconPath:e.provider.id===c.Q7.AzureDevOps?new s.ThemeIcon("account"):e.author?.avatarUrl!=null?s.Uri.parse(e.author.avatarUrl):new s.ThemeIcon("account"),item:e,picked:null!=e.graphQLId?e.graphQLId===i||e.graphQLId===r?.graphQLId:null!=e.uuid&&(e.uuid===i||e.uuid===r?.uuid),group:t}},g=(e=[],s)=>{let o=[];if(e.length){let n=(0,k.Vy)(e),a=r&&null==i?n.get("mergeable")?.[0]||n.get("blocked")?.[0]||n.get("follow-up")?.[0]||n.get("needs-review")?.[0]:void 0;for(let[e,i]of n)if(t.inSearch&&(i=i.filter(e=>e.isSearched)),i.length){if(!s&&(o.push(...l(e,i.length)),t.collapsed.get(e)))continue;o.push(...i.map(i=>p(i,e,a,!!t.inSearch)))}}return o};function m(e){let i=t.inSearch?t.searchResult:t.result;if(i?.error!=null)return{title:`${t.title} \xa0\u2022\xa0 Unable to Load Items`,placeholder:`Unable to load items (${"HttpError"===i.error.name&&"status"in i.error&&"number"==typeof i.error.status?`${i.error.status}: ${String(i.error)}`:String(i.error)})`,items:[(0,d.Du)(d.WL.Cancel,void 0,{label:"OK"})]};if(!i?.items.length)return"mode"===t.inSearch?{title:`Search For Pull Request \xa0\u2022\xa0 ${t.title}`,placeholder:"Enter a term to search for a pull request to act on",items:[{type:"searchMode",searchMode:!1,label:"Cancel Searching",detail:e?"No pull requests found":"Go back to Launchpad",alwaysShow:!0,picked:!0}]}:{title:t.title,placeholder:"All done! Take a vacation",items:[{type:"searchMode",searchMode:!0,label:"Search for Pull Request...",alwaysShow:!0,picked:!0}]};let r=g(i.items,e),s=r.some(e=>e.picked);if("mode"===t.inSearch){let i={type:"searchMode",searchMode:!1,label:"Cancel Searching",detail:"Go back to Launchpad",alwaysShow:!0,picked:!e&&!s};return{title:`Search For Pull Request \xa0\u2022\xa0 ${t.title}`,placeholder:"Enter a term to search for a pull request to act on",items:e?[...r,i]:[i,...r]}}let o={type:"searchMode",searchMode:!0,label:"Search for Pull Request...",alwaysShow:!0,picked:!e&&!s};return{title:t.title,placeholder:"Choose a pull request or paste a pull request URL to act on",items:e?[...r,o]:[o,...g(i.items,e)]}}let f=async(e,i)=>{let r=t.inSearch?e.value:void 0;e.busy=!0;try{let s=async s=>{if("mode"===t.inSearch&&(e.items=[{type:"searchMode",searchMode:!1,label:`Searching for "${e.value}"...`,detail:"Click to cancel searching",alwaysShow:!0,picked:!0}]),await F(this.container,t,{force:i?.force,search:r},s),s?.isCancellationRequested)return;let{items:o,placeholder:n,title:a}=m(!!r);e.title=a,e.placeholder=n,e.items=o};i?.immediate?(t.updateItemsDebouncer.cancel(),await s(void 0)):await t.updateItemsDebouncer(s)}finally{e.busy=!1}},v=e=>{let{items:t,placeholder:i,title:r}=m(!!e.value);e.title=r,e.placeholder=i,e.items=t},{items:b,placeholder:C,title:R}=m(),P="mode"===t.inSearch,A=(0,n.Ac)({title:R,placeholder:C,matchOnDescription:!P,matchOnDetail:!P,items:b,buttons:[...P?[s.QuickInputButtons.Back]:[],a.re,...o?[a.Lx]:[],a.F7,a.lA],onDidActivate:e=>{this.savedSearch?.length&&("mode"===t.inSearch&&(e.value=this.savedSearch),this.savedSearch=void 0)},onDidChangeValue:async e=>{let{value:i}=e;if(this.savedSearch=i,!i?.length){t.updateItemsDebouncer.cancel(),t.searchResult=void 0,!0===t.inSearch&&(t.inSearch=!1);let{items:i,placeholder:r,title:s}=m();return e.title=s,e.placeholder=r,e.items=i,!0}if(t.inSearch||this.container.launchpad.isMaybeSupportedLaunchpadPullRequestSearchUrl(i)){let r=!1;if(!t.inSearch){r=i.length>=3;let{items:s}=m(!0);e.items=s,t.inSearch=!0}await f(e,{force:!0,immediate:r})}else{t.updateItemsDebouncer.cancel();let{items:i}=m(!0);e.title=R,e.placeholder=C,e.items=i}return!0},onDidClickButton:async(e,i)=>{switch(i){case a.Lx:return this.sendTitleActionTelemetry("connect",t),this.next([_]);case a.F7:this.sendTitleActionTelemetry("settings",t),s.commands.executeCommand("workbench.action.openSettings","gitlens.launchpad");break;case a.FF:this.sendTitleActionTelemetry("feedback",t),(0,w.CZ)("https://github.com/gitkraken/vscode-gitlens/discussions/3286");break;case a.re:this.sendTitleActionTelemetry("open-on-gkdev",t),(0,w.CZ)(this.container.launchpad.generateWebUrl());break;case a.lA:this.sendTitleActionTelemetry("refresh",t),await f(e,{force:!0,immediate:!0})}},onDidClickItemButton:async(e,i,{group:r,item:s})=>{if(i===a.qk)return void(0,w.CZ)(u.DS.proFeatures);if(s){switch(i){case a.II:case a.iD:case a.Rn:case a.EH:this.sendItemActionTelemetry("soft-open",s,r,t),this.container.launchpad.open(s);break;case a.KD:{this.sendItemActionTelemetry("snooze",s,r,t);let i=t.result.items?.find(e=>e.uuid===s.uuid);null!=i&&(i.viewer.snoozed=!0,v(e)),await this.container.launchpad.snooze(s);break}case a.NA:{this.sendItemActionTelemetry("unsnooze",s,r,t);let i=t.result.items?.find(e=>e.uuid===s.uuid);null!=i&&(i.viewer.snoozed=!1,v(e)),await this.container.launchpad.unsnooze(s);break}case a.Zo:{this.sendItemActionTelemetry("pin",s,r,t);let i=t.result.items?.find(e=>e.uuid===s.uuid);null!=i&&(i.viewer.pinned=!0,v(e)),await this.container.launchpad.pin(s);break}case a.wt:{this.sendItemActionTelemetry("unpin",s,r,t);let i=t.result.items?.find(e=>e.uuid===s.uuid);null!=i&&(i.viewer.pinned=!1,v(e)),await this.container.launchpad.unpin(s);break}case a.M_:this.sendItemActionTelemetry("merge",s,r,t),await this.container.launchpad.merge(s);break;case a.oS:this.sendItemActionTelemetry("open-worktree",s,r,t),await this.container.launchpad.switchTo(s,{openInWorktree:!0})}await f(e)}}}),I=yield A;return(0,n.fg)(A,e,I)?I[0]:n.Lt}*confirmStep(e,t){let i=O(e.item.provider.id);function r(){let t=[(0,h.uK)((0,y.PI)(e.item.updatedDate)),(0,h.Xt)({label:e.item.title,description:`${e.item.repository.owner.login}/${e.item.repository.name}#${e.item.id}`,detail:(0,C.GW)(S.oJ.get(e.item.actionableCategory)[1],{author:e.item.author.username,createdDateRelative:(0,y.PI)(e.item.createdDate)}),iconPath:e.item.provider.id===c.Q7.AzureDevOps?new s.ThemeIcon("account"):e.item.author?.avatarUrl!=null?s.Uri.parse(e.item.author.avatarUrl):void 0,buttons:[...i,...e.item.isSearched?[]:[e.item.viewer.pinned?a.wt:a.Zo,e.item.viewer.snoozed?a.NA:a.KD]]},"soft-open"),(0,d.Du)(d.WL.Noop,!1,{label:""}),...function(e){let t=[];switch(e.actionableCategory){case"mergeable":t.push((0,h.uK)("Status"),E(e),...x(e));break;case"failed-checks":case"conflicts":t.push((0,h.uK)("Status"),E(e));break;case"unassigned-reviewers":case"needs-my-review":case"changes-requested":case"reviewer-commented":case"waiting-for-review":t.push((0,h.uK)("Reviewers"),...x(e))}return e.codeSuggestions?.value!=null&&e.codeSuggestions.value.length>0&&(t.length>0&&t.push((0,d.Du)(d.WL.Noop,!1,{label:""})),t.push((0,h.uK)("Suggestions"),...function(e){if(e.codeSuggestions?.value==null||0===e.codeSuggestions.value.length)return[];let t=[(0,d.Du)(d.WL.Noop,!1,{label:`$(gitlens-code-suggestion) ${(0,C.td)("code suggestion",e.codeSuggestions.value.length)}`})];for(let i of e.codeSuggestions.value)t.push((0,h.Xt)({label:`    ${i.author.name} suggested a code change ${(0,y.PI)(i.createdAt)}: "${i.title}"`,iconPath:i.author.avatarUri??(0,o.m_)(i.author.email),buttons:[a.re]},{action:"open-suggestion",target:i.id}));return t}(e))),t.length>0&&t.push((0,d.Du)(d.WL.Noop,!1,{label:""})),t}(e.item),(0,h.uK)("Actions")];for(let r of e.item.suggestedActions)switch(r){case"merge":{let s,o;e.item.headRepository?.owner!=null&&e.item.headRepository.owner!==e.item.repository.owner?(s=null!=e.item.headRef?`${e.item.headRepository.owner.login}:${e.item.headRef.name}`:"these changes",o=null!=e.item.baseRef?` into ${e.item.repository.owner.login}:${e.item.baseRef.name}`:""):(s=e.item.headRef?.name??"these changes",o=e.item.baseRef?.name?` into ${e.item.baseRef.name}`:""),t.push((0,h.Xt)({label:"Merge...",detail:`Will merge ${s}${o}`,buttons:[...i]},r));break}case"open":t.push((0,h.Xt)({label:`${function(e){switch(e){case"unassigned-reviewers":return"Assign Reviewers";case"failed-checks":return"Resolve Failing Checks";case"conflicts":return"Resolve Conflicts";case"needs-my-review":return"Start Reviewing";case"changes-requested":case"reviewer-commented":return"Respond to Reviewers";case"waiting-for-review":return"Check In with Reviewers";case"draft":return"View draft";default:return"Open"}}(e.item.actionableCategory)} on ${function(e){switch(e){case c.Q7.GitLab:case c.PY.GitLabSelfHosted:case c.PY.CloudGitLabSelfHosted:return"GitLab";case c.Q7.GitHub:case c.PY.GitHubEnterprise:case c.PY.CloudGitHubEnterprise:return"GitHub";case c.Q7.AzureDevOps:return"Azure DevOps";case c.Q7.Bitbucket:return"Bitbucket";case c.PY.BitbucketServer:return"Bitbucket Data Center";default:return e}}(e.item.provider.id)}`,buttons:[...i]},r));break;case"switch":t.push((0,h.Xt)({label:"Switch to Branch",detail:"Will checkout the branch, create or open a worktree"},r));break;case"open-worktree":t.push((0,h.Xt)({label:"Open in Worktree",detail:"Will create or open a worktree in a new window"},r));break;case"switch-and-code-suggest":t.push((0,h.Xt)({label:`Switch & Suggest ${e.item.viewer.isAuthor?"Additional ":""}Code Changes`,detail:"Will checkout and start suggesting code changes"},r));break;case"code-suggest":t.push((0,h.Xt)({label:`Suggest ${e.item.viewer.isAuthor?"Additional ":""}Code Changes`,detail:"Will start suggesting code changes"},r));break;case"show-overview":t.push((0,h.Xt)({label:"Open Details",detail:"Will open the pull request details in the Side Bar"},r));break;case"open-changes":t.push((0,h.Xt)({label:"Open Changes",detail:"Will open the pull request changes for review"},r));break;case"open-in-graph":t.push((0,h.Xt)({label:"Open in Commit Graph"},r))}return t}let l=this.createConfirmStep(`Launchpad \xa0\u2022\xa0 Pull Request ${e.item.repository.owner.login}/${e.item.repository.name}#${e.item.id}`,r(),void 0,{placeholder:"Choose an action to perform",onDidClickItemButton:async(i,s,o)=>{switch(s){case a.II:case a.iD:case a.Rn:case a.EH:this.sendItemActionTelemetry("soft-open",e.item,e.item.group,t),this.container.launchpad.open(e.item);break;case a.re:var n;this.sendItemActionTelemetry("open-suggestion-browser",e.item,e.item.group,t),n=o,n?.item?.action!=null&&n?.item?.target!=null&&this.container.launchpad.openCodeSuggestionInBrowser(o.item.target);break;case a.Zo:this.sendItemActionTelemetry("pin",e.item,e.item.group,t),i.busy=!0,await this.container.launchpad.pin(e.item),i.items=[...r(),(0,h.uK)(),(0,d.Du)(d.WL.Cancel)],i.busy=!1;break;case a.wt:this.sendItemActionTelemetry("unpin",e.item,e.item.group,t),i.busy=!0,await this.container.launchpad.unpin(e.item),i.items=[...r(),(0,h.uK)(),(0,d.Du)(d.WL.Cancel)],i.busy=!1;break;case a.KD:this.sendItemActionTelemetry("snooze",e.item,e.item.group,t),i.busy=!0,this.container.launchpad.snooze(e.item),i.items=[...r(),(0,h.uK)(),(0,d.Du)(d.WL.Cancel)],i.busy=!1;break;case a.NA:this.sendItemActionTelemetry("unsnooze",e.item,e.item.group,t),this.container.launchpad.unsnooze(e.item),i.items=[...r(),(0,h.uK)(),(0,d.Du)(d.WL.Cancel)],i.busy=!1}}}),u=yield l;return(0,n.fg)(l,e,u)?u[0].item:n.Lt}async *confirmLocalIntegrationConnectStep(e,t){let i=(0,b.zN)(t.connectedIntegrations.values(),e=>e)?[]:[(0,d.Du)(d.WL.Cancel,void 0,{label:"Launchpad prioritizes your pull requests to keep you focused and your team unblocked",detail:"Click to learn more about Launchpad",iconPath:new s.ThemeIcon("rocket"),onDidSelect:()=>void(0,m.RS)("gitlens.openWalkthrough",{step:"accelerate-pr-reviews",source:{source:"launchpad",detail:"info"}})}),(0,h.uK)()];for(let e of k.UZ)if(!t.connectedIntegrations.get(e))switch(e){case c.Q7.GitHub:i.push((0,h.Xt)({label:"Connect to GitHub...",detail:"Will connect to GitHub to provide access your pull requests and issues"},e));break;case c.Q7.GitLab:i.push((0,h.Xt)({label:"Connect to GitLab...",detail:"Will connect to GitLab to provide access your pull requests and issues"},e))}let r=this.createConfirmStep(`${this.title} \xa0\u2022\xa0 Connect an Integration`,i,(0,d.Du)(d.WL.Cancel,!1,{label:"Cancel"}),{placeholder:"Connect an integration to get started with Launchpad",buttons:[],ignoreFocusOut:!1}),o=yield r;if((0,n.fg)(r,e,o)){let e=r.freeze?.(),t=o[0].item;return{connected:!!await this.ensureIntegrationConnected(t)&&t,resume:()=>e?.dispose()}}return n.Lt}async *confirmCloudIntegrationsConnectStep(e,t){let i=(0,b.zN)(t.connectedIntegrations.values(),e=>e),r=this.createConfirmStep(`${this.title} \xa0\u2022\xa0 Connect an ${i?"Additional ":""}Integration`,[...i?[]:[(0,d.Du)(d.WL.Cancel,void 0,{label:"Launchpad prioritizes your pull requests to keep you focused and your team unblocked",detail:"Click to learn more about Launchpad",iconPath:new s.ThemeIcon("rocket"),onDidSelect:()=>void(0,m.RS)("gitlens.openWalkthrough",{step:"accelerate-pr-reviews",source:{source:"launchpad",detail:"info"}})}),(0,h.uK)()],(0,h.Xt)({label:`Connect an ${i?"Additional ":""}Integration...`,detail:i?"Connect additional integrations to view their pull requests in Launchpad":"Connect an integration to accelerate your PR reviews",picked:!0},!0)],(0,d.Du)(d.WL.Cancel,!1,{label:"Cancel"}),{placeholder:i?"Connect additional integrations to Launchpad":"Connect an integration to get started with Launchpad",buttons:[],ignoreFocusOut:!0}),o=yield r;if((0,n.fg)(r,e,o)){let e;r.quickpick&&(e=r.quickpick.placeholder,r.quickpick.placeholder="Connecting integrations...");let t=r.freeze?.(),i=await this.container.integrations.connectCloudIntegrations({integrationIds:k.UZ},{source:"launchpad"});return r.quickpick&&(r.quickpick.placeholder=e),{connected:i,resume:()=>t?.dispose()}}return n.Lt}sendItemActionTelemetry(e,t,i,r){let s;this.container.telemetry.enabled&&null!=(s="string"!=typeof e&&"action"in e?e.action:e)&&this.container.telemetry.sendEvent("select"===s?"launchpad/steps/details":"launchpad/action",{...r.telemetryContext,action:s,"item.id":(0,k.hJ)(t),"item.type":t.type,"item.provider":t.provider.id,"item.actionableCategory":t.actionableCategory,"item.group":i,"item.assignees.count":t.assignees?.length??void 0,"item.createdDate":t.createdDate.getTime(),"item.updatedDate":t.updatedDate.getTime(),"item.isNew":t.isNew,"item.comments.count":t.commentCount??void 0,"item.upvotes.count":t.upvoteCount??void 0,"item.pr.codeSuggestionCount":t.codeSuggestionsCount,"item.pr.isDraft":t.isDraft,"item.pr.mergeableState":t.mergeableState,"item.pr.state":t.state,"item.pr.changes.additions":t.additions??void 0,"item.pr.changes.deletions":t.deletions??void 0,"item.pr.changes.commits":t.commitCount??void 0,"item.pr.changes.files":t.fileCount??void 0,"item.pr.failingCI":t.failingCI,"item.pr.hasConflicts":t.hasConflicts,"item.pr.reviews.count":t.reviews?.length??void 0,"item.pr.reviews.decision":t.reviewDecision??void 0,"item.pr.reviews.changeRequestCount":t.changeRequestReviewCount??void 0,"item.viewer.isAuthor":t.viewer.isAuthor,"item.viewer.isAssignee":t.viewer.isAssignee,"item.viewer.pinned":t.viewer.pinned,"item.viewer.snoozed":t.viewer.snoozed,"item.viewer.pr.canMerge":t.viewer.canMerge,"item.viewer.pr.isReviewer":t.viewer.isReviewer,"item.viewer.pr.shouldAssignReviewer":t.viewer.shouldAssignReviewer,"item.viewer.pr.shouldMerge":t.viewer.shouldMerge,"item.viewer.pr.shouldReview":t.viewer.shouldReview,"item.viewer.pr.waitingOnReviews":t.viewer.waitingOnReviews},this.source)}sendTitleActionTelemetry(e,t){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("launchpad/title/action",{...t.telemetryContext,action:e},this.source)}};function E(e){let t,i=e.baseRef?.name!=null?`$(git-branch) ${e.baseRef.name}`:"",r=e.headCommit?.buildStatuses?.[0].state;t=r===R.n2.Success?e.hasConflicts?`$(error) Conflicts with ${i}, but passed CI checks`:"$(pass) No conflicts, and passed CI checks":r===R.n2.Failed?e.hasConflicts?`$(error) Conflicts with ${i}, and failed CI checks`:"$(error) No conflicts, but failed CI checks":e.hasConflicts?`$(error) Conflicts with ${i}`:"$(pass) No conflicts";let s=O(e.provider.id);return(0,h.Xt)({label:t,buttons:[...s]},"soft-open")}function x(e){let t=O(e.provider.id);if(null==e.reviews||0===e.reviews.length)return[(0,h.Xt)({label:"$(info) No reviewers have been assigned",buttons:[...t]},"soft-open")];let i=[];for(let r of e.reviews){let o,n=r.reviewer.username===e.currentViewer.username,a=e.provider.id===c.Q7.AzureDevOps?new s.ThemeIcon("account"):null!=r.reviewer.avatarUrl?s.Uri.parse(r.reviewer.avatarUrl):new s.ThemeIcon("account");switch(r.state){case R.lE.Approved:o=`${n?"You":r.reviewer.username} approved these changes`;break;case R.lE.ChangesRequested:o=`${n?"You":r.reviewer.username} requested changes`;break;case R.lE.Commented:o=`${n?"You":r.reviewer.username} left a comment review`;break;case R.lE.ReviewRequested:o=`${n?"You haven't":`${r.reviewer.username} hasn't`} reviewed these changes yet`}null!=o&&i.push((0,h.Xt)({label:o,iconPath:a,buttons:[...t]},"soft-open"))}return i}function O(e){let t=function(e){switch(e){case c.Q7.GitLab:case c.PY.GitLabSelfHosted:case c.PY.CloudGitLabSelfHosted:return a.iD;case c.Q7.GitHub:case c.PY.GitHubEnterprise:case c.PY.CloudGitHubEnterprise:return a.II;case c.Q7.AzureDevOps:return a.Rn;case c.Q7.Bitbucket:case c.PY.BitbucketServer:return a.EH;default:return}}(e);return null!=t?[t]:[]}async function F(e,t,i,r){let s=await e.launchpad.getCategorizedItems(i,r);t.inSearch?t.searchResult=s:(t.result=s,e.telemetry.enabled&&B(t)),t.connectedIntegrations=await e.launchpad.getConnectedIntegrations()}function B(e){let t;if(null!=e.telemetryContext){if(null!=e.result.error)t={...e.telemetryContext,"items.error":String(e.result.error)};else{let i=(0,k.Zh)(e.result.items);for(let[r,s]of(t={...e.telemetryContext,"items.count":e.result.items.length,"items.timings.prs":e.result.timings?.prs,"items.timings.codeSuggestionCounts":e.result.timings?.codeSuggestionCounts,"items.timings.enrichedItems":e.result.timings?.enrichedItems,"groups.count":i.size},i))t[`groups.${r}.count`]=s,t[`groups.${r}.collapsed`]=e.collapsed.get(r)}e.telemetryContext=t}}function L(e,t){let i=N(e,t);if(!0===(t&&void 0!==t.fallback?t.fallback:L.defaults.fallback)&&""===i){let s="";for(let t=0;t<e.length;t++){let i=function(e,t){let i=e.charCodeAt(t);if(isNaN(i))throw RangeError("Index "+t+' out of range for string "'+e+'"; please open an issue at https://github.com/Trott/slug/issues/new');if(i<55296||i>57343)return[e.charAt(t),t];if(i>=55296&&i<=56319){if(e.length<=t+1)return[" ",t];let i=e.charCodeAt(t+1);return i<56320||i>57343?[" ",t]:[e.charAt(t)+e.charAt(t+1),t+1]}if(0===t)return[" ",t];let r=e.charCodeAt(t-1);if(r<55296||r>56319)return[" ",t];throw Error('String "'+e+'" reaches code believed to be unreachable; please open an issue at https://github.com/Trott/slug/issues/new')}(e,t);t=i[1],s+=i[0]}i=N(r(s),t)}return i}r="undefined"!=typeof window?window.btoa?function(e){return btoa(unescape(encodeURIComponent(e)))}:function(e){let t=unescape(encodeURIComponent(e+"")),i="";for(let e,r,s=0,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";t.charAt(0|s)||(o="=",s%1);i+=o.charAt(63&e>>8-s%1*8)){if((r=t.charCodeAt(s+=3/4))>255)throw Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");e=e<<8|r}return i}:function(e){return Buffer.from(e).toString("base64")};let U={bg:{Й:"Y",й:"y",X:"H",x:"h",Ц:"Ts",ц:"ts",Щ:"Sht",щ:"sht",Ъ:"A",ъ:"a",Ь:"Y",ь:"y"},de:{Ä:"AE",ä:"ae",Ö:"OE",ö:"oe",Ü:"UE",ü:"ue"},sr:{đ:"dj",Đ:"DJ"},uk:{И:"Y",и:"y",Й:"Y",й:"y",Ц:"Ts",ц:"ts",Х:"Kh",х:"kh",Щ:"Shch",щ:"shch",Г:"H",г:"h"}},q={};function N(e,t){if("string"!=typeof e)throw Error("slug() requires a string argument, received "+typeof e);"string"==typeof t&&(t={replacement:t}),(t=t?Object.assign({},t):{}).mode=t.mode||L.defaults.mode;let i=L.defaults.modes[t.mode],r=["replacement","multicharmap","charmap","remove","lower","trim"];for(let e,s=0,o=r.length;s<o;s++)t[e=r[s]]=e in t?t[e]:i[e];let s=U[t.locale]||q,o=[];for(let e in t.multicharmap){if(!Object.prototype.hasOwnProperty.call(t.multicharmap,e))continue;let i=e.length;-1===o.indexOf(i)&&o.push(i)}o=o.sort(function(e,t){return t-e});let n="rfc3986"===t.mode?/[^\w\s\-.~]/:/[^A-Za-z0-9\s]/,a="";for(let i,r=0,l=e.length;r<l;r++){i=e[r];let l=!1;for(let s=0;s<o.length;s++){let n=o[s],a=e.substr(r,n);if(t.multicharmap[a]){r+=n-1,i=t.multicharmap[a],l=!0;break}}l||(i=s[i]?s[i]:t.charmap[i]?t.charmap[i].replace(t.replacement," "):i.includes(t.replacement)?i.replace(t.replacement," "):i.replace(n,"")),a+=i}return t.remove&&(a=a.replace(t.remove,"")),t.trim&&(a=a.trim()),a=a.replace(/\s+/g,t.replacement),t.lower&&(a=a.toLowerCase()),a}let M={फ़:"Fi",ग़:"Ghi",ख़:"Khi",क़:"Qi",ड़:"ugDha",ढ़:"ugDhha",य़:"Yi",ज़:"Za",בִי:"i",בֵ:"e",בֵי:"e",בֶ:"e",בַ:"a",בָ:"a",בֹ:"o",וֹ:"o",בֻ:"u",וּ:"u",בּ:"b",כּ:"k",ךּ:"k",פּ:"p",שׁ:"sh",שׂ:"s",בְ:"e",חֱ:"e",חֲ:"a",חֳ:"o",בִ:"i"},W={À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",Æ:"AE",Ç:"C",È:"E",É:"E",Ê:"E",Ë:"E",Ì:"I",Í:"I",Î:"I",Ï:"I",Ð:"D",Ñ:"N",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ő:"O",Ø:"O",Ō:"O",Ù:"U",Ú:"U",Û:"U",Ü:"U",Ű:"U",Ý:"Y",Þ:"TH",ß:"ss",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",æ:"ae",ç:"c",è:"e",é:"e",ê:"e",ë:"e",ì:"i",í:"i",î:"i",ï:"i",ð:"d",ñ:"n",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ő:"o",ø:"o",ō:"o",Œ:"OE",œ:"oe",ù:"u",ú:"u",û:"u",ü:"u",ű:"u",ý:"y",þ:"th",ÿ:"y",ẞ:"SS",α:"a",β:"b",γ:"g",δ:"d",ε:"e",ζ:"z",η:"h",θ:"th",ι:"i",κ:"k",λ:"l",μ:"m",ν:"n",ξ:"3",ο:"o",π:"p",ρ:"r",σ:"s",τ:"t",υ:"y",φ:"f",χ:"x",ψ:"ps",ω:"w",ά:"a",έ:"e",ί:"i",ό:"o",ύ:"y",ή:"h",ώ:"w",ς:"s",ϊ:"i",ΰ:"y",ϋ:"y",ΐ:"i",Α:"A",Β:"B",Γ:"G",Δ:"D",Ε:"E",Ζ:"Z",Η:"H",Θ:"Th",Ι:"I",Κ:"K",Λ:"L",Μ:"M",Ν:"N",Ξ:"3",Ο:"O",Π:"P",Ρ:"R",Σ:"S",Τ:"T",Υ:"Y",Φ:"F",Χ:"X",Ψ:"PS",Ω:"W",Ά:"A",Έ:"E",Ί:"I",Ό:"O",Ύ:"Y",Ή:"H",Ώ:"W",Ϊ:"I",Ϋ:"Y",ş:"s",Ş:"S",ı:"i",İ:"I",ğ:"g",Ğ:"G",а:"a",б:"b",в:"v",г:"g",д:"d",е:"e",ё:"yo",ж:"zh",з:"z",и:"i",й:"j",к:"k",л:"l",м:"m",н:"n",о:"o",п:"p",р:"r",с:"s",т:"t",у:"u",ф:"f",х:"h",ц:"c",ч:"ch",ш:"sh",щ:"sh",ъ:"u",ы:"y",ь:"",э:"e",ю:"yu",я:"ya",А:"A",Б:"B",В:"V",Г:"G",Д:"D",Е:"E",Ё:"Yo",Ж:"Zh",З:"Z",И:"I",Й:"J",К:"K",Л:"L",М:"M",Н:"N",О:"O",П:"P",Р:"R",С:"S",Т:"T",У:"U",Ф:"F",Х:"H",Ц:"C",Ч:"Ch",Ш:"Sh",Щ:"Sh",Ъ:"U",Ы:"Y",Ь:"",Э:"E",Ю:"Yu",Я:"Ya",Є:"Ye",І:"I",Ї:"Yi",Ґ:"G",є:"ye",і:"i",ї:"yi",ґ:"g",č:"c",ď:"d",ě:"e",ň:"n",ř:"r",š:"s",ť:"t",ů:"u",ž:"z",Č:"C",Ď:"D",Ě:"E",Ň:"N",Ř:"R",Š:"S",Ť:"T",Ů:"U",Ž:"Z",ľ:"l",ĺ:"l",ŕ:"r",Ľ:"L",Ĺ:"L",Ŕ:"R",ą:"a",ć:"c",ę:"e",ł:"l",ń:"n",ś:"s",ź:"z",ż:"z",Ą:"A",Ć:"C",Ę:"E",Ł:"L",Ń:"N",Ś:"S",Ź:"Z",Ż:"Z",ā:"a",ē:"e",ģ:"g",ī:"i",ķ:"k",ļ:"l",ņ:"n",ū:"u",Ā:"A",Ē:"E",Ģ:"G",Ī:"I",Ķ:"K",Ļ:"L",Ņ:"N",Ū:"U",أ:"a",إ:"i",ب:"b",ت:"t",ث:"th",ج:"g",ح:"h",خ:"kh",د:"d",ذ:"th",ر:"r",ز:"z",س:"s",ش:"sh",ص:"s",ض:"d",ط:"t",ظ:"th",ع:"aa",غ:"gh",ف:"f",ق:"k",ك:"k",ل:"l",م:"m",ن:"n",ه:"h",و:"o",ي:"y",ء:"aa",ة:"a",آ:"a",ا:"a",پ:"p",ژ:"zh",گ:"g",چ:"ch",ک:"k",ی:"i",ė:"e",į:"i",ų:"u",Ė:"E",Į:"I",Ų:"U",ț:"t",Ț:"T",ţ:"t",Ţ:"T",ș:"s",Ș:"S",ă:"a",Ă:"A",Ạ:"A",Ả:"A",Ầ:"A",Ấ:"A",Ậ:"A",Ẩ:"A",Ẫ:"A",Ằ:"A",Ắ:"A",Ặ:"A",Ẳ:"A",Ẵ:"A",Ẹ:"E",Ẻ:"E",Ẽ:"E",Ề:"E",Ế:"E",Ệ:"E",Ể:"E",Ễ:"E",Ị:"I",Ỉ:"I",Ĩ:"I",Ọ:"O",Ỏ:"O",Ồ:"O",Ố:"O",Ộ:"O",Ổ:"O",Ỗ:"O",Ơ:"O",Ờ:"O",Ớ:"O",Ợ:"O",Ở:"O",Ỡ:"O",Ụ:"U",Ủ:"U",Ũ:"U",Ư:"U",Ừ:"U",Ứ:"U",Ự:"U",Ử:"U",Ữ:"U",Ỳ:"Y",Ỵ:"Y",Ỷ:"Y",Ỹ:"Y",Đ:"D",ạ:"a",ả:"a",ầ:"a",ấ:"a",ậ:"a",ẩ:"a",ẫ:"a",ằ:"a",ắ:"a",ặ:"a",ẳ:"a",ẵ:"a",ẹ:"e",ẻ:"e",ẽ:"e",ề:"e",ế:"e",ệ:"e",ể:"e",ễ:"e",ị:"i",ỉ:"i",ĩ:"i",ọ:"o",ỏ:"o",ồ:"o",ố:"o",ộ:"o",ổ:"o",ỗ:"o",ơ:"o",ờ:"o",ớ:"o",ợ:"o",ở:"o",ỡ:"o",ụ:"u",ủ:"u",ũ:"u",ư:"u",ừ:"u",ứ:"u",ự:"u",ử:"u",ữ:"u",ỳ:"y",ỵ:"y",ỷ:"y",ỹ:"y",đ:"d",Ә:"AE",ә:"ae",Ғ:"GH",ғ:"gh",Қ:"KH",қ:"kh",Ң:"NG",ң:"ng",Ү:"UE",ү:"ue",Ұ:"U",ұ:"u",Һ:"H",һ:"h",Ө:"OE",ө:"oe",ђ:"dj",ј:"j",љ:"lj",њ:"nj",ћ:"c",џ:"dz",Ђ:"Dj",Ј:"j",Љ:"Lj",Њ:"Nj",Ћ:"C",Џ:"Dz",ǌ:"nj",ǉ:"lj",ǋ:"NJ",ǈ:"LJ",अ:"a",आ:"aa",ए:"e",ई:"ii",ऍ:"ei",ऎ:"ae",ऐ:"ai",इ:"i",ओ:"o",ऑ:"oi",ऒ:"oii",ऊ:"uu",औ:"ou",उ:"u",ब:"B",भ:"Bha",च:"Ca",छ:"Chha",ड:"Da",ढ:"Dha",फ:"Fa",ग:"Ga",घ:"Gha",ग़:"Ghi",ह:"Ha",ज:"Ja",झ:"Jha",क:"Ka",ख:"Kha",ख़:"Khi",ल:"L",ळ:"Li",ऌ:"Li",ऴ:"Lii",ॡ:"Lii",म:"Ma",न:"Na",ङ:"Na",ञ:"Nia",ण:"Nae",ऩ:"Ni",ॐ:"oms",प:"Pa",क़:"Qi",र:"Ra",ऋ:"Ri",ॠ:"Ri",ऱ:"Ri",स:"Sa",श:"Sha",ष:"Shha",ट:"Ta",त:"Ta",ठ:"Tha",द:"Tha",थ:"Tha",ध:"Thha",ड़:"ugDha",ढ़:"ugDhha",व:"Va",य:"Ya",य़:"Yi",ज़:"Za",ə:"e",Ə:"E",ა:"a",ბ:"b",გ:"g",დ:"d",ე:"e",ვ:"v",ზ:"z",თ:"t",ი:"i",კ:"k",ლ:"l",მ:"m",ნ:"n",ო:"o",პ:"p",ჟ:"zh",რ:"r",ს:"s",ტ:"t",უ:"u",ფ:"p",ქ:"k",ღ:"gh",ყ:"q",შ:"sh",ჩ:"ch",ც:"ts",ძ:"dz",წ:"ts",ჭ:"ch",ხ:"kh",ჯ:"j",ჰ:"h",ב:"v",גּ:"g",ג:"g",ד:"d",דּ:"d",ה:"h",ו:"v",ז:"z",ח:"h",ט:"t",י:"y",כ:"kh",ך:"kh",ל:"l",מ:"m",ם:"m",נ:"n",ן:"n",ס:"s",פ:"f",ף:"f",ץ:"ts",צ:"ts",ק:"k",ר:"r",תּ:"t",ת:"t"};L.charmap=Object.assign({},W),L.multicharmap=Object.assign({},M),L.defaults={charmap:L.charmap,mode:"pretty",modes:{rfc3986:{replacement:"-",remove:null,lower:!0,charmap:L.charmap,multicharmap:L.multicharmap,trim:!0},pretty:{replacement:"-",remove:null,lower:!0,charmap:L.charmap,multicharmap:L.multicharmap,trim:!0}},multicharmap:L.multicharmap,fallback:!0},L.reset=function(){L.defaults.modes.rfc3986.charmap=L.defaults.modes.pretty.charmap=L.charmap=L.defaults.charmap=Object.assign({},W),L.defaults.modes.rfc3986.multicharmap=L.defaults.modes.pretty.multicharmap=L.multicharmap=L.defaults.multicharmap=Object.assign({},M),q=""},L.extend=function(e){let t=Object.keys(e),i={},r={};for(let s=0;s<t.length;s++)t[s].length>1?i[t[s]]=e[t[s]]:r[t[s]]=e[t[s]];Object.assign(L.charmap,r),Object.assign(L.multicharmap,i)},L.setLocale=function(e){q=U[e]||{}};var G=i(7808),H=i(875);async function V(e,t,i){let r=function(e){if(null==e.repository)throw Error("Missing repository");return{remote:{url:e.repository.url,domain:e.provider.domain},name:`${e.repository.owner}/${e.repository.repo}`,provider:{id:e.provider.id,domain:e.provider.domain,repoDomain:e.repository.owner,repoName:e.repository.repo,repoOwnerDomain:e.repository.owner}}}(t),o=await e.repositoryIdentity.getRepository(r,{openIfNeeded:!0,keepOpen:!1,prompt:!1});if(null==o&&!i?.skipVirtual){let i=function(e){if(null==e.repository)throw Error("Missing repository");if("github"!==e.provider.id)return;let t=s.Uri.parse(e.repository.url??e.url);return t.with({scheme:u.xB.Virtual,authority:"github",path:t.path})}(t);null!=i&&(o=await e.git.getOrOpenRepository(i,{closeOnOpen:!0,detectNested:!1}))}return null==o&&i?.promptIfNeeded&&(o=await e.repositoryIdentity.getRepository(r,{openIfNeeded:!0,keepOpen:!1,prompt:!0})),o}var j=i(4797),z=i(1678);let Q=[c.Q7.GitHub,c.PY.CloudGitHubEnterprise,c.Q7.GitLab,c.PY.CloudGitLabSelfHosted,c.Q7.AzureDevOps,c.Q7.Bitbucket,c.tp.Jira],Y=(0,v.N)(),K={label:"Connect an Additional Integration...",detail:"Connect additional integrations to view and start work on their issues",item:void 0},Z={label:"Manage integrations...",detail:"Manage your connected integrations",item:void 0};let StartWorkBaseCommand=class StartWorkBaseCommand extends n.d6{source;telemetryContext;telemetryEventKey;constructor(e,t,i="startWork",r="startWork",s=`Start Work\xa0\xA0${u.lD}`,o="Start work on an issue",n="startWork"){super(e,i,r,s,{description:o}),this.telemetryEventKey=n,this.source={source:t?.source??"commandPalette"},this.container.telemetry.enabled&&(this.telemetryContext={instance:Y.next()},this.container.telemetry.sendEvent(`${this.telemetryEventKey}/open`,{...this.telemetryContext},this.source)),this.initialState={counter:0}}async *steps(e){this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let t={result:void 0,title:this.title,telemetryContext:this.telemetryContext,connectedIntegrations:await ee(this.container)},i=!1;for(;this.canStepsContinue(e);){let r;if(t.title=this.title,![...t.connectedIntegrations.values()].some(e=>e)){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(i?`${this.telemetryEventKey}/steps/connect`:`${this.telemetryEventKey}/opened`,{...t.telemetryContext,connected:!1},this.source),i=!0;let r=f.H.get("cloudIntegrations.enabled",void 0,!1)?yield*this.confirmCloudIntegrationsConnectStep(e,t):yield*this.confirmLocalIntegrationConnectStep(e,t);if(r===n.Lt)return r;if(r.resume(),!r.connected)continue}if("startWork"===this.key?r="startWork":"associateIssueWithBranch"===this.key&&(r="associateIssueWithBranch"),null==r||(yield*(0,l.jg)(this.container,e,t,r))!==n.Lt){if(e.counter<1||null==e.item){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(i?`${this.telemetryEventKey}/steps/issue`:`${this.telemetryEventKey}/opened`,{...t.telemetryContext,connected:!0},this.source),i=!0;let r=yield*this.pickStartWorkIssueStep(e,t);if(r===n.Lt)continue;e.item=r,this.container.telemetry.enabled&&this.container.telemetry.sendEvent(`${this.telemetryEventKey}/issue/chosen`,{...t.telemetryContext,...X(r),connected:!0},this.source)}if(null==e.item)throw Error("Missing item");this.continuation&&(yield*this.continuation(e,t)),(0,n.nH)(e)}}return e.counter<0?n.Lt:void 0}async getIssueRepositoryIfExists(e){try{return await V(this.container,e)}catch{return}}async *confirmLocalIntegrationConnectStep(e,t){t.result=void 0;let i=[];for(let e of Q)t.connectedIntegrations.get(e)||e===c.Q7.GitHub&&i.push((0,h.Xt)({label:"Connect to GitHub...",detail:"Will connect to GitHub to provide access to your pull requests and issues"},e));let r=this.createConfirmStep(`${this.title} \xa0\u2022\xa0 Connect an Integration`,i,(0,d.Du)(d.WL.Cancel,!1,{label:"Cancel"}),{placeholder:this.overrides?.placeholders?.localIntegrationConnect??"Connect an integration to view its issues in Start Work",buttons:[],ignoreFocusOut:!1}),s=yield r;if((0,n.fg)(r,e,s)){let e=r.freeze?.(),t=s[0].item;return{connected:!!await this.ensureIntegrationConnected(t)&&t,resume:()=>e?.dispose()}}return n.Lt}async ensureIntegrationConnected(e){let t=await this.container.integrations.get(e);if(null==t)return!1;let i=t.maybeConnected??await t.isConnected();return i||(i=await t.connect(this.overrides?.ownSource??"startWork")),i}async *confirmCloudIntegrationsConnectStep(e,t,i){let r,s,o=(0,b.zN)(t.connectedIntegrations.values(),e=>e);if(t.result=void 0,null==i?(r=this.createConfirmStep(`${this.title} \xa0\u2022\xa0 Connect an ${o?"Additional ":""}Integration`,[(0,h.Xt)({label:`Connect an ${o?"Additional ":""}Integration...`,detail:o?"Connect additional integrations to view their issues":"Connect an integration to accelerate your work",picked:!0},!0)],(0,d.Du)(d.WL.Cancel,!1,{label:"Cancel"}),{placeholder:o?this.overrides?.placeholders?.cloudIntegrationConnectHasConnected??"Connect additional integrations to Start Work":this.overrides?.placeholders?.cloudIntegrationConnectNoConnected??"Connect an integration to get started with Start Work",buttons:[],ignoreFocusOut:!0}),s=yield r):(r=i,s=[!0]),(0,n.fg)(r,e,s)){let e;r.quickpick&&(e=r.quickpick.placeholder,r.quickpick.placeholder="Connecting integrations...");let t=r.freeze?.(),i=await this.container.integrations.connectCloudIntegrations({integrationIds:Q},{source:this.overrides?.ownSource??"startWork"});return r.quickpick&&(r.quickpick.placeholder=e),{connected:i,resume:()=>t?.dispose()}}return n.Lt}async *pickStartWorkIssueStep(e,t){let i=[...t.connectedIntegrations.values()].some(e=>!e),r=t=>{var i;let r=t.issue.url?function(e){switch(e){case c.Q7.AzureDevOps:return a.Rn;case c.Q7.Bitbucket:return a.EH;case c.Q7.GitHub:case c.PY.CloudGitHubEnterprise:return a.II;case c.Q7.GitLab:case c.PY.CloudGitLabSelfHosted:return a.iD;case c.tp.Jira:return a.z3;default:return}}(t.issue.provider.id):void 0,o=t.issue.body?`${i=200," ".repeat(200)}

${t.issue.body}`:"";return{label:t.issue.title.length>60?`${t.issue.title.substring(0,60)}...`:t.issue.title,description:`\xa0 ${t.issue.repository?`${t.issue.repository.owner}/${t.issue.repository.repo}#`:""}${t.issue.id} \xa0`,detail:`      ${(0,y.PI)(t.issue.updatedDate)} by @${t.issue.author.name}${o}`,iconPath:t.issue.author?.avatarUrl!=null?s.Uri.parse(t.issue.author.avatarUrl):void 0,item:t,picked:t.issue.id===e.item?.issue.id,buttons:r?[r]:[]}},o=e=>{let t=[];return e.items?.length&&t.push(...e.items.map(r)),t},l=async e=>{e.busy=!0;try{var r;await J(this.container,t);let{items:s,placeholder:n}=(r=this.overrides?.placeholders?.issueSelection,t.result?.items.length?{placeholder:r??"Choose an issue to start working on",items:[...o(t.result),(0,d.Du)(d.WL.Cancel)]}:{placeholder:"No issues found for your open repositories.",items:[i?K:Z,(0,d.Du)(d.WL.Cancel)]});e.placeholder=n,e.items=s}catch{e.placeholder="Error retrieving issues",e.items=[(0,d.Du)(d.WL.Cancel)]}finally{e.busy=!1}},u=(0,n.Ac)({title:t.title,placeholder:"Loading...",matchOnDescription:!0,matchOnDetail:!0,items:[],buttons:[...i?[a.Lx]:[]],onDidActivate:l,onDidClickButton:async(e,i)=>{if(i===a.Lx)return this.sendTitleActionTelemetry("connect",t),this.next([K])},onDidClickItemButton:(e,i,{item:r})=>{switch(i){case a.Rn:case a.EH:case a.II:case a.iD:case a.z3:this.sendItemActionTelemetry("soft-open",r,t),this.open(r);return;default:return!1}},onDidChangeValue:()=>!0}),h=yield u;if(!(0,n.fg)(u,e,h))return n.Lt;let p=h[0];if(p===K){this.sendTitleActionTelemetry("connect",t);let i=f.H.get("cloudIntegrations.enabled",void 0,!1)?yield*this.confirmCloudIntegrationsConnectStep(e,t,u):yield*this.confirmLocalIntegrationConnectStep(e,t);return i===n.Lt?i:(i.resume(),n.Lt)}return p===Z?(this.sendActionTelemetry("manage",t),(0,m.RS)("gitlens.plus.cloudIntegrations.manage",{source:{source:this.overrides?.ownSource??"startWork"}}),(0,n.nH)(e),n.Lt):{...p.item}}open(e){null!=e.issue.url&&(0,w.CZ)(e.issue.url)}sendItemActionTelemetry(e,t,i){this.container.telemetry.sendEvent(`${this.telemetryEventKey}/issue/action`,{...i.telemetryContext,...X(t),action:e,connected:!0})}sendTitleActionTelemetry(e,t){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(`${this.telemetryEventKey}/title/action`,{...t.telemetryContext,connected:!0,action:e},this.source)}sendActionTelemetry(e,t){this.container.telemetry.enabled&&this.container.telemetry.sendEvent(`${this.telemetryEventKey}/action`,{...t.telemetryContext,connected:!0,action:e},this.source)}};let StartWorkCommand=class StartWorkCommand extends StartWorkBaseCommand{overrides;async *continuation(e,t){let i=e.item.issue,r=i&&await this.getIssueRepositoryIfExists(i);(yield*e4(this.container,{command:"branch",state:{subcommand:"create",repo:r,name:i?`${L(i.id,{lower:!1})}-${L(i.title)}`:void 0,suggestNameOnly:!0,suggestRepoOnly:!0,confirmOptions:["--switch","--worktree"],associateWithIssue:i}},this.pickedVia))!==n.Lt?e.counter=0:(0,n.nH)(e)}};let AssociateIssueWithBranchCommand=class AssociateIssueWithBranchCommand extends StartWorkBaseCommand{branch;overrides={ownSource:"associateIssueWithBranch",placeholders:{cloudIntegrationConnectHasConnected:"Connect additional integrations to associate their issues with your branches",cloudIntegrationConnectNoConnected:"Connect an integration to associate its issues with your branches",localIntegrationConnect:"Connect an integration to associate its issues with your branches",issueSelection:"Choose an issue to associate with your branch"}};constructor(e,t){super(e,{command:"associateIssueWithBranch",source:t?.source??"commandPalette"},"associateIssueWithBranch","associateIssueWithBranch",`Associate Issue with Branch\xa0\xA0${u.lD}`,"Associate an issue with your branch","associateIssueWithBranch"),this.branch=t?.branch}async *continuation(e,t){if(!this.container.git.openRepositories.length)return;let i=e.item.issue;if(null==this.branch&&(this.branch=await (0,j.Ol)(`Associate Issue with Branch\xa0\xA0${u.lD}`,"Choose a branch to associate the issue with",this.container.git.openRepositories,{filter:e=>!e.remote})),null==this.branch)return;let r=(0,z.XN)(i);null!=r&&(await (0,H.IZ)(this.container,this.branch,{...i,type:"issue"},r),(0,n.nH)(e))}};async function J(e,t){var i;t.connectedIntegrations=await ee(e);let r=[...t.connectedIntegrations.keys()].filter(e=>!!t.connectedIntegrations.get(e));t.result??={items:(await e.integrations.getMyIssues(r,{openRepositoriesOnly:!0}))?.map(e=>({issue:e}))??[]},e.telemetry.enabled&&((i=t).telemetryContext={...i.telemetryContext,"items.count":i.result?.items.length??0})}function X(e){return{"item.id":(0,G.Fx)(e.issue.id),"item.type":e.issue.type,"item.provider":e.issue.provider.id,"item.assignees.count":e.issue.assignees?.length??void 0,"item.createdDate":e.issue.createdDate.getTime(),"item.updatedDate":e.issue.updatedDate.getTime(),"item.comments.count":e.issue.commentsCount??void 0,"item.upvotes.count":e.issue.thumbsUpCount??void 0,"item.issue.state":e.issue.state}}async function ee(e){let t=new Map;return await Promise.allSettled(Q.map(async i=>{let r=await e.integrations.get(i);if(null==r)return void t.set(i,!1);let s=(r.maybeConnected??await r.isConnected())&&await r.access();t.set(i,s)})),t}var et=i(9615),ei=i(8219),er=i(9271),es=i(7660),eo=i(7019);function en(e,t,i,r){var s,o;return{...i,item:t,picked:i.picked??(s=e,void 0===(o=t)?0===s.length:Array.isArray(o)?0===o.length?0===s.length:o.every(e=>s.includes(e)):s.includes(o)),context:r}}var ea=i(2812),el=i(4941);let eu=new Map([["create","Create"],["delete","Delete"],["prune","Prune"],["rename","Rename"]]);function ec(e,t){return null==t?e:`${eu.get(t)} ${e}`}let BranchGitCommand=class BranchGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"branch","branch","Branch",{description:"create, prune, rename, or delete branches"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t?.state.subcommand){case"create":null!=t.state.flags&&i++,null!=t.state.reference&&i++,!t.state.suggestNameOnly&&null!=t.state.name&&i++,t.state.suggestRepoOnly&&null!=t.state.repo&&i--;break;case"delete":case"prune":null!=t.state.references&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++;break;case"rename":null!=t.state.reference&&i++,null!=t.state.name&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&"prune"!==this.subcommand&&"rename"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={associatedView:this.container.views.branches,repos:this.container.git.openRepositories,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=ec("delete"===e.subcommand||"prune"===e.subcommand?"Branches":this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo||e?.subcommand==="create"&&e.suggestRepoOnly)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)continue;e.repo=i}switch(e.subcommand){case"create":if(!(e.repo instanceof ei.LN)||"create"!==e.subcommand)throw Error("Missing repository");yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":if(!(e.repo instanceof ei.LN)||"delete"!==e.subcommand)throw Error("Missing repository");yield*this.deleteCommandSteps(e,t);break;case"prune":if(!(e.repo instanceof ei.LN)||"prune"!==e.subcommand)throw Error("Missing repository");yield*this.deleteCommandSteps(e,t);break;case"rename":if(!(e.repo instanceof ei.LN)||"rename"!==e.subcommand)throw Error("Missing repository");yield*this.renameCommandSteps(e,t),e.name=void 0;break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new branch",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified branches",picked:"delete"===e.subcommand,item:"delete"},{label:"prune",description:"deletes local branches with missing upstreams",picked:"prune"===e.subcommand,item:"prune"},{label:"rename",description:"renames the specified branch",picked:"rename"===e.subcommand,item:"rename"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.Re)(e,t,{placeholder:"Choose a base to create the new branch from",picked:e.reference?.ref??(await e.repo.git.branches().getBranch())?.ref,title:"Select Base to Create Branch From",value:(0,es.bv)(e.reference)?e.reference.ref:void 0});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.name||e.suggestNameOnly){let i=yield*(0,l.wS)(e,t,{title:`${t.title} from ${(0,es.M4)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.name??((0,es.gC)(e.reference)&&e.reference.remote?(0,es.fC)(e.reference):void 0)});if(i===n.Lt)continue;e.name=i}if(this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}if(e.flags.includes("--worktree")){if((yield*e4(this.container,{command:"worktree",state:{subcommand:"create",reference:e.reference,createBranch:e.name,repo:e.repo}},this.pickedVia))!==n.Lt)continue;(0,n.nH)(e);return}if((0,n.nH)(e),e.flags.includes("--switch"))await e.repo.switch(e.reference.ref,{createBranch:e.name});else try{await e.repo.git.branches().createBranch?.(e.name,e.reference.ref)}catch(e){return el.Vy.error(e),(0,eo.qQ)("Unable to create branch")}if(null!=e.associateWithIssue){let t=e.associateWithIssue,i=await e.repo.git.branches().getBranch(e.name),r=(0,z.XN)(t);null!=i&&null!=r&&await (0,H.IZ)(this.container,i,{...t,type:"issue"},r)}}}*createCommandConfirmStep(e,t){let i=[];e.confirmOptions||i.push(en(e.flags,[],{label:t.title,detail:`Will create a new branch named ${e.name} from ${(0,es.M4)(e.reference)}`})),(!e.confirmOptions||e.confirmOptions.includes("--switch"))&&i.push(en(e.flags,["--switch"],{label:"Create & Switch to Branch",detail:`Will create and switch to a new branch named ${e.name} from ${(0,es.M4)(e.reference)}`})),(!e.confirmOptions||e.confirmOptions.includes("--worktree"))&&i.push(en(e.flags,["--worktree"],{label:`${t.title} in New Worktree`,description:"avoids modifying your working tree",detail:`Will create a new worktree for a new branch named ${e.name} from ${(0,es.M4)(e.reference)}`}));let r=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),i,t),s=yield r;return(0,n.fg)(r,e,s)?s[0].item:n.Lt}async *deleteCommandSteps(e,t){let i="prune"===e.subcommand;for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let r=await (0,er.Ao)(e.repo,{includeDefault:!0});if(e.counter<3||null==e.references||Array.isArray(e.references)&&0===e.references.length){t.title=ec("Branches",e.subcommand);let s=yield*(0,l.gw)(e,t,{filter:i?e=>!e.current&&!!e.upstream?.missing&&!r.get(e.id)?.isDefault:e=>!e.current&&!r.get(e.id)?.isDefault,picked:e.references?.map(e=>e.ref),placeholder:i?"Choose branches with missing upstreams to delete":"Choose branches to delete",emptyPlaceholder:i?`No branches with missing upstreams in ${e.repo.formattedName}`:void 0,sort:{current:!1,missingUpstream:!0}});if(s===n.Lt)break;e.references=s}t.title=ec((0,C.td)("Branch",e.references.length,{only:!0,plural:"Branches"}),"prune"===e.subcommand?"delete":e.subcommand);if(!Array.isArray(e.references))throw Error("Missing branches");let s=this.getSelectedWorktrees(e,r);if(s.length&&(yield*e4(this.container,{command:"worktree",state:{subcommand:"delete",repo:e.repo,uris:s.map(e=>e.uri),startingFromBranchDelete:!0,overrides:{title:`Delete ${1===s.length?"Worktree":"Worktrees"} for ${1===s.length?"Branch":"Branches"}`}}},this.pickedVia))!==n.Lt){e.counter--;continue}let o=yield*this.deleteCommandConfirmStep(e,t);o!==n.Lt&&(e.flags=o,(0,n.nH)(e),e.repo.branchDelete(e.references,{force:e.flags.includes("--force"),remote:e.flags.includes("--remotes")}))}}getSelectedWorktrees(e,t){let i=[];for(let r of(0,ea.eC)(e.references)){let e=t.get(r.id);null==e||e.isDefault||i.push(e)}return i}*deleteCommandConfirmStep(e,t){let i=[en(e.flags,[],{label:t.title,detail:`Will delete ${(0,es.M4)(e.references)}`})];!e.references.every(e=>e.remote)&&(i.push(en(e.flags,["--force"],{label:`Force ${t.title}`,description:"--force",detail:`Will forcibly delete ${(0,es.M4)(e.references)}`})),"prune"!==e.subcommand&&e.references.some(e=>null!=e.upstream)&&i.push((0,h.uK)(),en(e.flags,["--remotes"],{label:"Delete Local & Remote Branches",description:"--remotes",detail:`Will delete ${(0,es.M4)(e.references)} and any remote tracking branches`}),en(e.flags,["--force","--remotes"],{label:"Force Delete Local & Remote Branches",description:"--force --remotes",detail:`Will forcibly delete ${(0,es.M4)(e.references)} and any remote tracking branches`})));let r=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),i,t),s=yield r;return(0,n.fg)(r,e,s)?s[0].item:n.Lt}async *renameCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.aL)(e,t,{filter:e=>!e.remote,picked:e.reference?.ref,placeholder:"Choose a branch to rename"});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.name){let i=yield*(0,l.wS)(e,t,{title:`${t.title} ${(0,es.M4)(e.reference,!1)}`,value:e.name??e.reference.name});if(i===n.Lt)continue;e.name=i}let i=yield*this.renameCommandConfirmStep(e,t);if(i!==n.Lt){e.flags=i,(0,n.nH)(e);try{await e.repo.git.branches().renameBranch?.(e.reference.ref,e.name)}catch(e){return el.Vy.error(e),(0,eo.qQ)("Unable to rename branch")}}}}*renameCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,["-m"],{label:t.title,detail:`Will rename ${(0,es.M4)(e.reference)} to ${e.name}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var eh=i(5567),ed=i(1705),ep=i(5962);let CherryPickGitCommand=class CherryPickGitCommand extends n.d6{constructor(e,t){super(e,"cherry-pick","cherry-pick","Cherry Pick",{description:"integrates changes from specified commits into the current branch"});let i=0;t?.state?.repo!=null&&i++,t?.state?.references!=null&&(Array.isArray(t.state.references)?t.state.references.length>0&&((0,es.bv)(t.state.references[0])?i+=2:i++):i++),this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}async execute(e){try{await e.repo.git.commits().cherryPick?.(e.references.map(e=>e.ref),{edit:e.flags.includes("--edit"),noCommit:e.flags.includes("--no-commit")})}catch(t){if(el.Vy.error(t,this.title),t instanceof ed.HT&&t.reason===ed.$j.EmptyCommit){let t;try{t=await e.repo.git.status().getPausedOperationStatus?.(),t??=await e.repo.waitForRepoChange(500).then(()=>e.repo.git.status().getPausedOperationStatus?.())}catch{}let i=t?(0,es.M4)(t?.incoming,{icon:!1,label:!0,quoted:!0}):void 0,r={title:"Skip"};if(await s.window.showInformationMessage(`The cherry-pick operation cannot be completed because ${i??"it"} resulted in an empty commit.

Do you want to skip ${i??"this commit"}?`,{modal:!0},r,{title:"Cancel",isCloseAffordance:!0})===r)return void(0,eh.RG)(e.repo);(0,m.RS)("gitlens.showCommitsView");return}(0,eo.qQ)(t.message)}}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"cherry"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,destination:void 0,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(null==t.destination){let i=await e.repo.git.branches().getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,es.M4)(t.destination,{icon:!1,label:!1})}`,e.counter<2||!e.references?.length){let r=yield*(0,l.Re)(e,t,{filter:{branches:e=>e.id!==t.destination.id},placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to cherry-pick from`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.references?.[0]?.ref:void 0});if(r===n.Lt){i&&e.counter--;continue}(0,es.bv)(r)?(e.references=[r],t.selectedBranchOrTag=void 0):t.selectedBranchOrTag=r}if(null==t.selectedBranchOrTag&&e.references?.length){let i=await e.repo.git.branches().getBranchesWithCommits(e.references.map(e=>e.ref),void 0,{mode:"contains"});if(i.length){let r=await e.repo.git.branches().getBranch(i[0]);null!=r&&(t.selectedBranchOrTag=r)}}if(e.counter<3&&null!=t.selectedBranchOrTag){let i=(0,ep.Xn)(t.destination.ref,t.selectedBranchOrTag.ref,".."),r=t.cache.get(i);null==r&&(r=e.repo.git.commits().getLog(i,{merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,l.GW)(e,t,{log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),picked:e.references?.map(e=>e.ref),placeholder:(e,t)=>null==t?`No pickable commits found on ${(0,es.M4)(e.selectedBranchOrTag,{icon:!1})}`:`Choose commits to cherry-pick into ${(0,es.M4)(e.destination,{icon:!1})}`});if(s===n.Lt)continue;e.references=s}if(this.confirm(e.confirm)){let i=yield*this.confirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:this.title,detail:`Will apply ${(0,es.M4)(e.references,{label:!1})} to ${(0,es.M4)(t.destination,{label:!1})}`}),en(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will edit and apply ${(0,es.M4)(e.references,{label:!1})} to ${(0,es.M4)(t.destination,{label:!1})}`}),en(e.flags,["--no-commit"],{label:`${this.title} without Committing`,description:"--no-commit",detail:`Will apply ${(0,es.M4)(e.references,{label:!1})} to ${(0,es.M4)(t.destination,{label:!1})} without Committing`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var eg=i(9686);let CoAuthorsGitCommand=class CoAuthorsGitCommand extends n.d6{constructor(e,t){super(e,"co-authors","co-authors","Add Co-Authors",{description:"adds co-authors to a commit message"});let i=0;t?.state?.repo!=null&&i++,t?.state?.contributors!=null&&(!Array.isArray(t.state.contributors)||0!==t.state.contributors.length)&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async execute(e){let t=await this.container.git.getOrOpenScmRepository(e.repo.path);if(null==t)return;let i=t.inputBox.value,r=i.indexOf("Co-authored-by: ");for(let t of(-1!==r&&(i=i.substring(0,r-1).trimEnd()),null==e.contributors||Array.isArray(e.contributors)||(e.contributors=[e.contributors]),e.contributors)){let e;e=i.includes("Co-authored-by: ")?`
`:0!==i.length&&i.endsWith(`
`)?`

`:`


`,i+=`${e}Co-authored-by: ${t.getCoauthor()}`}t.inputBox.value=i,await (0,m.S4)("workbench.view.scm")}async *steps(e){let t={repos:this.container.git.openRepositories,activeRepo:void 0,associatedView:this.container.views.contributors,title:this.title},i=await this.container.git.getOpenScmRepositories();i.length&&(t.repos=t.repos.filter(e=>i.find(t=>(0,eg.Fd)(t.rootUri.fsPath)===e.path)),t.activeRepo=await this.container.git.getOrOpenRepositoryForEditor(),null==t.activeRepo||i.some(e=>e.rootUri.fsPath===t.activeRepo.path)||(t.activeRepo=void 0));let r=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(r=!1,1===t.repos.length)r=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(e.counter<2||null==e.contributors){let i=yield*(0,l.iM)(e,t,"Choose contributors to add as co-authors");if(i===n.Lt){r&&e.counter--;continue}e.contributors=i}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}};let FetchGitCommand=class FetchGitCommand extends n.d6{constructor(e,t){super(e,"fetch","fetch","Fetch",{description:"fetches changes from one or more remotes"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){return(0,es.gC)(e.reference)?e.repos[0].fetch({branch:e.reference}):this.container.git.fetchAll(e.repos,{all:e.flags.includes("--all"),prune:e.flags.includes("--prune")})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,ea.Bo)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,l.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===n.Lt){i&&e.counter--;continue}e.flags=r}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i,r="";if(1===e.repos.length){let t=await e.repos[0].getLastFetched();0!==t&&(r=`${(0,C.eV)(u.EO.Dot,2,2)}Last fetched ${(0,y.PI)(new Date(t))}`)}if(1===e.repos.length&&(0,es.gC)(e.reference))i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t,r),[en(e.flags,[],{label:this.title,detail:`Will fetch ${(0,es.M4)(e.reference)}`})]);else{let s=1===e.repos.length?`$(repo) ${e.repos[0].formattedName}`:`${e.repos.length} repos`;i=(0,n.VW)((0,l.Zr)(`Confirm ${this.title}`,e,t,r),[en(e.flags,[],{label:this.title,detail:`Will fetch ${s}`}),en(e.flags,["--prune"],{label:`${this.title} & Prune`,description:"--prune",detail:`Will fetch and prune ${s}`}),en(e.flags,["--all"],{label:`${this.title} All`,description:"--all",detail:`Will fetch all remotes of ${s}`}),en(e.flags,["--all","--prune"],{label:`${this.title} All & Prune`,description:"--all --prune",detail:`Will fetch and prune all remotes of ${s}`})],t)}let s=yield i;return(0,n.fg)(i,e,s)?s[0].item:n.Lt}};var em=i(4123),ef=i(8518),ew=i(7062);let LogGitCommand=class LogGitCommand extends n.d6{constructor(e,t){super(e,"log","history","Commits",{description:"aka log, shows commit history"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&(i++,"HEAD"!==t.state.reference&&(0,es.bv)(t.state.reference)&&!(0,es.SN)(t.state.reference)&&i++),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"log"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,selectedBranchOrTag:void 0,title:this.title},i=!1;for(;this.canStepsContinue(e);){let r;if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(!(e.repo instanceof ei.LN))throw Error("Missing repository");if("HEAD"===e.reference){let t=await e.repo.git.branches().getBranch();e.reference=t}if(e.counter<2||null==e.reference){let r=yield*(0,l.Re)(e,t,{placeholder:"Choose a branch or tag to show its commit history",picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,ranges:!0});if(r===n.Lt){i&&e.counter--;continue}e.reference=r,t.selectedBranchOrTag=void 0}if((!(0,es.bv)(e.reference)||(0,es.SN)(e.reference))&&(t.selectedBranchOrTag=e.reference),t.title=`${this.title}${(0,C.eV)(u.EO.Dot,2,2)}${(0,es.M4)(t.selectedBranchOrTag,{icon:!1})}`,e.fileName&&(t.title+=`${(0,C.eV)(u.EO.Dot,2,2)}${(0,ew.j)(e.fileName,{fileOnly:!0,truncateTo:u.uR-t.title.length-3})}`),e.counter<3&&null!=t.selectedBranchOrTag){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=null!=e.fileName?e.repo.git.commits().getLogForPath(e.fileName,i):e.repo.git.commits().getLog(i),t.cache.set(i,r));let s=yield*(0,l.t$)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found in ${(0,es.M4)(e.selectedBranchOrTag,{icon:!1})}`:"Choose a commit",picked:e.reference?.ref});if(s===n.Lt)continue;e.reference=s}e.reference instanceof ef.Yg&&null==e.reference.file||(e.reference=await e.repo.git.commits().getCommit(e.reference.ref)),e.openPickInView?((0,em.JX)(e.reference,{pin:!1,preserveFocus:!1}),r=n.Lt):r=yield*e4(this.container,{command:"show",state:{repo:e.repo,reference:e.reference,fileName:e.fileName}},this.pickedVia),e.counter--,r===n.Lt&&(0,n.nH)(e)}return e.counter<0?n.Lt:void 0}};var ev=i(9975);let MergeGitCommand=class MergeGitCommand extends n.d6{constructor(e,t){super(e,"merge","merge","Merge",{description:"integrates changes from a specified branch into the current branch"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.merge(...e.flags,e.reference.ref)}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(null==t.destination){let i=await e.repo.git.branches().getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,es.M4)(t.destination,{icon:!1,label:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){let r=new a.m(t.pickCommit,t,()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit}),s=yield*(0,l.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to merge`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[r]});if(s===n.Lt){i&&e.counter--;continue}e.reference=s,t.selectedBranchOrTag=void 0}if((0,es.bv)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=e.repo.git.commits().getLog(i,{merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,l.t$)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,es.M4)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to merge into ${(0,es.M4)(e.destination,{icon:!1})}`,picked:e.reference?.ref});if(s===n.Lt)continue;e.reference=s}let r=yield*this.confirmStep(e,t);r!==n.Lt&&(e.flags=r,(0,n.nH)(e),this.execute(e))}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i,r,o=await e.repo.git.commits().getLeftRightCommitCount((0,ep.Xn)(t.destination.ref,e.reference.ref,"...")),a=`Merge ${(0,es.M4)(e.reference,{icon:!1,label:!1})} into ${(0,es.M4)(t.destination,{icon:!1,label:!1})} `,u=null!=o?o.right:0;if(0===u){let i=this.createConfirmStep((0,l.Zr)(a,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:`${(0,es.M4)(t.destination,{capitalize:!0,label:!1})} is already up to date with ${(0,es.M4)(e.reference,{label:!1})}`}),{placeholder:`Nothing to merge; ${(0,es.M4)(t.destination,{label:!1,icon:!1})} is already up to date`}),r=yield i;return(0,n.fg)(i,e,r),n.Lt}let c=[en(e.flags,[],{label:this.title,detail:`Will merge ${(0,C.td)("commit",u)} from ${(0,es.M4)(e.reference,{label:!1})} into ${(0,es.M4)(t.destination,{label:!1})}`,picked:!0}),en(e.flags,["--ff-only"],{label:`Fast-forward ${this.title}`,description:"--ff-only",detail:`Will fast-forward merge ${(0,C.td)("commit",u)} from ${(0,es.M4)(e.reference,{label:!1})} into ${(0,es.M4)(t.destination,{label:!1})}`}),en(e.flags,["--squash"],{label:`Squash ${this.title}`,description:"--squash",detail:`Will squash ${(0,C.td)("commit",u)} from ${(0,es.M4)(e.reference,{label:!1})} into one when merging into ${(0,es.M4)(t.destination,{label:!1})}`}),en(e.flags,["--no-ff"],{label:`No Fast-forward ${this.title}`,description:"--no-ff",detail:`Will create a merge commit when merging ${(0,C.td)("commit",u)} from ${(0,es.M4)(e.reference,{label:!1})} into ${(0,es.M4)(t.destination,{label:!1})}`}),en(e.flags,["--no-ff","--no-commit"],{label:`Don't Commit ${this.title}`,description:"--no-commit --no-ff",detail:`Will pause before committing the merge of ${(0,C.td)("commit",u)} from ${(0,es.M4)(e.reference,{label:!1})} into ${(0,es.M4)(t.destination,{label:!1})}`})],p=await this.container.subscription.getSubscription();(0,ev.k0)(p?.state)&&(i=e.repo.git.branches().getPotentialMergeOrRebaseConflict?.(t.destination.name,e.reference.ref));let g=[];i&&(i?.then(e=>{if(g.splice(0,1,null==e?(0,d.Du)(d.WL.Noop,!1,{label:"No Conflicts Detected",iconPath:new s.ThemeIcon("check")}):(0,d.Du)(d.WL.Noop,!1,{label:"Conflicts Detected",detail:`Will result in ${(0,C.td)("conflicting file",e.files.length)} that will need to be resolved`,iconPath:new s.ThemeIcon("warning")})),null!=r.quickpick){let e=r.quickpick.activeItems;r.quickpick.items=[...g,...c],r.quickpick.activeItems=e}}),g.push((0,d.Du)(d.WL.Noop,!1,{label:`$(loading~spin) \xa0Detecting Conflicts...`}),(0,h.uK)())),r=this.createConfirmStep((0,l.Zr)(`Confirm ${a}`,e,t),[...g,...c]);let m=yield r;return(0,n.fg)(r,e,m)?m[0].item:n.Lt}};var ey=i(9779);let PullGitCommand=class PullGitCommand extends n.d6{constructor(e,t){super(e,"pull","pull","Pull",{description:"fetches and integrates changes from a remote into the current branch"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async execute(e){if((0,es.gC)(e.reference)&&(!(0,ey.P)(e.reference)||!e.reference.current)){let t=await e.repos[0].git.branches().getBranch();if(t?.name!==e.reference.name)return e.repos[0].fetch({branch:e.reference,pull:!0})}return this.container.git.pullAll(e.repos,{rebase:e.flags.includes("--rebase")})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,ea.Bo)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,l.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===n.Lt){i&&e.counter--;continue}e.flags=r}await this.execute(e),(0,n.nH)(e)}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i;if(e.repos.length>1)i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:this.title,detail:`Will pull ${e.repos.length} repos`}),en(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull ${e.repos.length} repos by rebasing`})]);else if((0,es.gC)(e.reference))if(e.reference.remote)i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a remote branch"}));else{let[r]=e.repos,s=await r.git.branches().getBranch(e.reference.name);i=s?.upstream==null?this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a branch until it has been published"})):this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:this.title,detail:`Will pull${s.upstream.state.behind?` ${(0,C.td)("commit",s.upstream.state.behind)} into ${(0,es.M4)(s)}`:` into ${(0,es.M4)(s)}`}`})])}else{let[r]=e.repos,[s,o]=await Promise.all([r.git.status().getStatus(),r.getLastFetched()]),n="";0!==o&&(n=`${(0,C.eV)(u.EO.Dot,2,2)}Last fetched ${(0,y.PI)(new Date(o))}`);let c=s?.upstream?.state.behind?` ${(0,C.td)("commit",s.upstream.state.behind)} into $(repo) ${r.formattedName}`:` into $(repo) ${r.formattedName}`;i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t,n),[en(e.flags,[],{label:this.title,detail:`Will pull${c}`}),en(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull and rebase${c}`})],void 0,{additionalButtons:[a.yn],onDidClickButton:async(e,i)=>{if(i!==a.yn||e.busy)return!1;e.title=`Confirm ${t.title}${(0,C.eV)(u.EO.Dot,2,2)}Fetching${u.EO.Ellipsis}`,e.busy=!0;try{return await r.fetch({progress:!0}),!0}finally{e.busy=!1}}})}let r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var eb=i(3631);let PushGitCommand=class PushGitCommand extends n.d6{constructor(e,t){super(e,"push","push","Push",{description:"pushes changes from the current branch to a remote"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){let t=e.flags.indexOf("--set-upstream");return -1!==t?this.container.git.pushAll(e.repos,{force:!1,publish:{remote:e.flags[t+1]},reference:e.reference}):this.container.git.pushAll(e.repos,{force:e.flags.includes("--force"),reference:e.reference})}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,ea.Bo)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else if(null!=e.reference){let i=yield*(0,l.UA)({...e,repos:void 0,repo:e.reference.repoPath},t);if(i===n.Lt)break;e.repos=[i]}else{let i=yield*(0,l.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}if(this.confirm(e.confirm)){let r=yield*this.confirmStep(e,t);if(r===n.Lt){i&&e.counter--;continue}e.flags=r}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i,r=f.H.getCore("git.useForcePushWithLease")??!0,s=r&&(f.H.getCore("git.useForcePushIfIncludes")??!0)&&await this.container.git.supports(e.repos[0].uri,"git:push:force-if-includes");if(e.repos.length>1)i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:this.title,detail:`Will push ${e.repos.length} repos`}),en(e.flags,["--force"],{label:`Force ${this.title}${s?" (with lease and if includes)":r?" (with lease)":""}`,description:`--force${r?`-with-lease${s?" --force-if-includes":""}`:""}`,detail:`Will force push${s?" (with lease and if includes)":r?" (with lease)":""} ${e.repos.length} repos`})]);else{let[o]=e.repos,n=[];if((0,es.gC)(e.reference))if(e.reference.remote)i=this.createConfirmStep((0,l.Zr)(t.title,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:"Cannot push a remote branch"}),{placeholder:"Cannot push a remote branch"});else{let a=await o.git.branches().getBranch(e.reference.name);if(null!=a&&a?.upstream==null){for(let t of(await o.git.remotes().getRemotes()))n.push(en(e.flags,["--set-upstream",t.name,a.name],{label:`Publish ${a.name} to ${t.name}`,detail:`Will publish ${(0,es.M4)(a)} to ${t.name}`}));i=n.length?this.createConfirmStep((0,l.Zr)("Confirm Publish",e,t),n,void 0,{placeholder:"Confirm Publish"}):this.createConfirmStep((0,l.Zr)("Publish",e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:"No remotes found"}),{placeholder:"Cannot publish; No remotes found"})}else i=a?.upstream?.state.behind?this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,["--force"],{label:`Force ${this.title}${s?" (with lease and if includes)":r?" (with lease)":""}`,description:`--force${r?`-with-lease${s?" --force-if-includes":""}`:""}`,detail:`Will force push${s?" (with lease and if includes)":r?" (with lease)":""} ${a?.upstream.state.ahead?` ${(0,C.td)("commit",a.upstream.state.ahead)}`:""}${a.getRemoteName()?` to ${a.getRemoteName()}`:""}${null!=a&&a.upstream.state.behind>0?`, overwriting ${(0,C.td)("commit",a.upstream.state.behind)}${a?.getRemoteName()?` on ${a.getRemoteName()}`:""}`:""}`})],(0,d.Du)(d.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,es.M4)(a)} is behind ${a.getRemoteName()} by ${(0,C.td)("commit",a.upstream.state.behind)}`})):a?.upstream?.state.ahead?this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[a.getRemoteName()],{label:this.title,detail:`Will push ${(0,C.td)("commit",a.upstream.state.ahead)} from ${(0,es.M4)(a)} to ${a.getRemoteName()}`})]):this.createConfirmStep((0,l.Zr)(t.title,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:"No commits found to push"}),{placeholder:"Nothing to push; No commits found to push"})}else{let c=await o.git.status().getStatus(),h={refType:"branch",name:c?.branch??"HEAD",ref:c?.branch??"HEAD",remote:!1,repoPath:o.path};if(c?.upstream?.state.ahead===0){if(!(0,es.gC)(e.reference)&&null==c.upstream){let t;for(let i of(null!=e.reference?t=` up to and including ${(0,es.M4)(e.reference,{label:!1})}`:(e.reference=h,t=""),await o.git.remotes().getRemotes()))n.push(en(e.flags,["--set-upstream",i.name,c.branch],{label:`Publish ${h.name} to ${i.name}`,detail:`Will publish ${(0,es.M4)(h)}${t} to ${i.name}`}))}i=n.length?this.createConfirmStep((0,l.Zr)("Confirm Publish",e,t),n,void 0,{placeholder:"Confirm Publish"}):null==c.upstream?this.createConfirmStep((0,l.Zr)("Publish",e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:"No remotes found"}),{placeholder:"Cannot publish; No remotes found"}):this.createConfirmStep((0,l.Zr)(t.title,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:`No commits ahead of ${(0,eb.Zq)(c.upstream?.name)}`}),{placeholder:`Nothing to push; No commits ahead of ${(0,eb.Zq)(c.upstream?.name)}`})}else{let n,p="",g=await o.getLastFetched();0!==g&&(p=`${(0,C.eV)(u.EO.Dot,2,2)}Last fetched ${(0,y.PI)(new Date(g))}`),n=null!=e.reference?`${c?.upstream?.state.ahead?` commits up to and including ${(0,es.M4)(e.reference,{label:!1})}`:""}${c?.upstream?` to ${(0,eb.Zq)(c.upstream?.name)}`:""}`:`${c?.upstream?.state.ahead?` ${(0,C.td)("commit",c.upstream.state.ahead)}`:""}${c?.upstream?` to ${(0,eb.Zq)(c.upstream?.name)}`:""}`,(i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t,p),[...c?.upstream?.state.behind?[]:[en(e.flags,[],{label:this.title,detail:`Will push${n}`})],en(e.flags,["--force"],{label:`Force ${this.title}${s?" (with lease and if includes)":r?" (with lease)":""}`,description:`--force${r?`-with-lease${s?" --force-if-includes":""}`:""}`,detail:`Will force push${s?" (with lease and if includes)":r?" (with lease)":""} ${n}${c?.upstream?.state.behind?`, overwriting ${(0,C.td)("commit",c.upstream.state.behind)}${c?.upstream?` on ${(0,eb.Zq)(c.upstream?.name)}`:""}`:""}`})],c?.upstream?.state.behind?(0,d.Du)(d.WL.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,es.M4)(h)} is behind${c?.upstream?` ${(0,eb.Zq)(c.upstream?.name)}`:""} by ${(0,C.td)("commit",c.upstream.state.behind)}`}):void 0)).additionalButtons=[a.yn],i.onDidClickButton=async(e,i)=>{if(i!==a.yn||e.busy)return!1;e.title=`Confirm ${t.title}${(0,C.eV)(u.EO.Dot,2,2)}Fetching${u.EO.Ellipsis}`,e.busy=!0;try{return await o.fetch({progress:!0}),!0}finally{e.busy=!1}}}}}let o=yield i;return(0,n.fg)(i,e,o)?o[0].item:n.Lt}};var eC=i(4692);let RebaseGitCommand=class RebaseGitCommand extends n.d6{constructor(e,t){super(e,"rebase","rebase","Rebase",{description:"integrates changes from a specified branch into the current branch, by changing the base of the branch and reapplying the commits on top"});let i=0;t?.state?.repo!=null&&i++,t?.state?.destination!=null&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}async execute(e){let t;if(e.flags.includes("--interactive")){await this.container.rebaseEditor.enableForNextUse();let e=await (0,eC.Xz)();t=["-c",`"sequence.editor=${e}"`]}e.repo.rebase(t,...e.flags,e.destination.ref)}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,branch:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(null==t.branch){let i=await e.repo.git.branches().getBranch();if(null==i)break;t.branch=i}if(t.title=`${this.title} ${(0,es.M4)(t.branch,{icon:!1,label:!1})} onto`,t.pickCommitForItem=!1,e.counter<2||null==e.destination){let r=new a.m(t.pickCommit,t,()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit}),s=yield*(0,l.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to rebase onto`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.destination?.ref:void 0,additionalButtons:[r]});if(s===n.Lt){i&&e.counter--;continue}e.destination=s,t.selectedBranchOrTag=void 0}if((0,es.bv)(e.destination)||(t.selectedBranchOrTag=e.destination),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.destination.ref===t.branch.ref)){let i=t.selectedBranchOrTag.ref,r=t.cache.get(i);null==r&&(r=e.repo.git.commits().getLog(i,{merges:"first-parent"}),t.cache.set(i,r));let s=yield*(0,l.t$)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,es.M4)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to rebase ${(0,es.M4)(e.branch,{icon:!1})} onto`,picked:e.destination?.ref});if(s===n.Lt)continue;e.destination=s}let r=yield*this.confirmStep(e,t);r!==n.Lt&&(e.flags=r,(0,n.nH)(e),this.execute(e))}return e.counter<0?n.Lt:void 0}async *confirmStep(e,t){let i,r,o=await e.repo.git.commits().getLeftRightCommitCount((0,ep.Xn)(e.destination.ref,t.branch.ref,"..."),{excludeMerges:!0}),a=`${t.title} ${(0,es.M4)(e.destination,{icon:!1,label:!1})}`,u=null!=o?o.right:0,c=null!=o?o.left:0;if(0===c&&0===u){let i=this.createConfirmStep((0,l.Zr)(a,e,t),[],(0,d.Du)(d.WL.Cancel,!0,{label:"OK",detail:`${(0,es.M4)(t.branch,{capitalize:!0})} is already up to date with ${(0,es.M4)(e.destination,{label:!1})}`}),{placeholder:`Nothing to rebase; ${(0,es.M4)(t.branch,{label:!1,icon:!1})} is already up to date`}),r=yield i;return(0,n.fg)(i,e,r),n.Lt}let p=[en(e.flags,["--interactive"],{label:`Interactive ${this.title}`,description:"--interactive",detail:`Will interactively update ${(0,es.M4)(t.branch,{label:!1})} by applying ${(0,C.td)("commit",u)} on top of ${(0,es.M4)(e.destination,{label:!1})}`,picked:0===c})];c>0&&p.unshift(en(e.flags,[],{label:this.title,detail:`Will update ${(0,es.M4)(t.branch,{label:!1})} by applying ${(0,C.td)("commit",u)} on top of ${(0,es.M4)(e.destination,{label:!1})}`,picked:!0}));let g=await this.container.subscription.getSubscription();(0,ev.k0)(g?.state)&&(i=e.repo.git.branches().getPotentialMergeOrRebaseConflict?.(t.branch.name,e.destination.ref));let m=[];i&&(i?.then(e=>{if(m.splice(0,1,null==e?(0,d.Du)(d.WL.Noop,!1,{label:"No Conflicts Detected",iconPath:new s.ThemeIcon("check")}):(0,d.Du)(d.WL.Noop,!1,{label:"Conflicts Detected",detail:`Will result in ${(0,C.td)("conflicting file",e.files.length)} that will need to be resolved`,iconPath:new s.ThemeIcon("warning")})),null!=r.quickpick){let e=r.quickpick.activeItems;r.quickpick.items=[...m,...p],r.quickpick.activeItems=e}}),m.push((0,d.Du)(d.WL.Noop,!1,{label:`$(loading~spin) \xa0Detecting Conflicts...`}),(0,h.uK)())),r=this.createConfirmStep((0,l.Zr)(`Confirm ${a}`,e,t),[...m,...p]);let f=yield r;return(0,n.fg)(r,e,f)?f[0].item:n.Lt}};var eR=i(3592);let ek=new Map([["add","Add"],["prune","Prune"],["remove","Remove"]]);let RemoteGitCommand=class RemoteGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"remote","remote","Remote",{description:"add, prune, or remove remotes"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t?.state.subcommand){case"add":null!=t.state.name&&i++,null!=t.state.url&&i++;break;case"prune":case"remove":null!=t.state.remote&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"remove"!==this.subcommand&&"prune"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.remotes,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,r=this.title,t.title=null==(s=e.subcommand)?r:`${ek.get(s)} ${r}`,e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)continue;e.repo=i}switch(e.subcommand){case"add":var r,s;if(!(e.repo instanceof ei.LN)||"add"!==e.subcommand)throw Error("Missing repository");yield*this.addCommandSteps(e,t),e.name=void 0,e.url=void 0;break;case"prune":if(!(e.repo instanceof ei.LN)||"prune"!==e.subcommand)throw Error("Missing repository");yield*this.pruneCommandSteps(e,t);break;case"remove":if(!(e.repo instanceof ei.LN)||"remove"!==e.subcommand)throw Error("Missing repository");yield*this.removeCommandSteps(e,t);break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"add",description:"adds a new remote",picked:"add"===e.subcommand,item:"add"},{label:"prune",description:"prunes remote branches on the specified remote",picked:"prune"===e.subcommand,item:"prune"},{label:"remove",description:"removes the specified remote",picked:"remove"===e.subcommand,item:"remove"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *addCommandSteps(e,t){null==e.flags&&(e.flags=["-f"]);let i=0!==(await e.repo.git.remotes().getRemotes({filter:t=>t.name===e.name})).length;for(;this.canStepsContinue(e);){if(e.counter<3||null==e.name||i){let r=yield*(0,l.C6)(e,t,{placeholder:"Please provide a name for the remote",value:e.name});if(r===n.Lt)continue;if(i=0!==(await e.repo.git.remotes().getRemotes({filter:e=>e.name===r})).length){e.counter--;continue}e.name=r}if(e.counter<4||null==e.url){let i=yield*(0,l.aG)(e,t,{placeholder:"Please provide a URL for the remote",value:e.url});if(i===n.Lt)continue;e.url=i}if(this.confirm(e.confirm)){let i=yield*this.addCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e);let r=await e.repo.git.remotes().addRemoteWithResult?.(e.name,e.url,e.flags.includes("-f")?{fetch:!0}:void 0);!1!==e.reveal&&(0,eR._c)(r,{focus:!0,select:!0})}}*addCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:t.title,detail:`Will add remote '${e.name}' for ${e.url}`}),en(e.flags,["-f"],{label:`${t.title} and Fetch`,description:"-f",detail:`Will add and fetch remote '${e.name}' for ${e.url}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}async *removeCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){let[t]=await e.repo.git.remotes().getRemotes({filter:t=>t.name===e.remote});null!=t?e.remote=t:e.remote=void 0}if(e.counter<3||null==e.remote){let i=yield*(0,l.YR)(e,t,{picked:e.remote?.name,placeholder:"Choose remote to remove"});if(i===n.Lt)break;e.remote=i}if("string"==typeof e.remote)throw Error("Missing remote");if((yield*this.removeCommandConfirmStep(e,t))!==n.Lt){(0,n.nH)(e);try{await e.repo.git.remotes().removeRemote?.(e.remote.name)}catch(e){el.Vy.error(e),(0,eo.qQ)("Unable to remove remote")}}}}*removeCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will remove remote '${e.remote.name}'`}],t),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}async *pruneCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){let[t]=await e.repo.git.remotes().getRemotes({filter:t=>t.name===e.remote});null!=t?e.remote=t:e.remote=void 0}if(e.counter<3||null==e.remote){let i=yield*(0,l.YR)(e,t,{picked:e.remote?.name,placeholder:"Choose a remote to prune"});if(i===n.Lt)break;e.remote=i}if("string"==typeof e.remote)throw Error("Missing remote");(yield*this.pruneCommandConfirmStep(e,t))!==n.Lt&&((0,n.nH)(e),e.repo.git.remotes().pruneRemote?.(e.remote.name))}}*pruneCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will prune remote '${e.remote.name}'`}],t),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}};let ResetGitCommand=class ResetGitCommand extends n.d6{constructor(e,t){super(e,"reset","reset","Reset",{description:"resets the current branch to a specified commit"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:t?.confirm??!0,...t?.state},this._canSkipConfirm=!this.initialState.confirm}_canSkipConfirm=!1;get canSkipConfirm(){return this._canSkipConfirm}async execute(e){try{await e.repo.git.reset({hard:e.flags.includes("--hard"),soft:e.flags.includes("--soft")},e.reference.ref)}catch(e){el.Vy.error(e,this.title),(0,eo.qQ)(e.message)}}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(null==t.destination){let i=await e.repo.git.branches().getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,es.M4)(t.destination,{icon:!1})}`,e.counter<2||null==e.reference){let r=t.destination.ref,s=t.cache.get(r);null==s&&(s=e.repo.git.commits().getLog(r,{merges:"first-parent"}),t.cache.set(r,s));let o=yield*(0,l.t$)(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:`Choose a commit to reset ${e.destination.name} to`,picked:e.reference?.ref});if(o===n.Lt){i&&e.counter--;continue}e.reference=o}if(this.confirm(e.confirm)){let i=yield*this.confirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e),await this.execute(e)}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:this.title,detail:`Will reset (leaves changes in the working tree) ${(0,es.M4)(t.destination)} to ${(0,es.M4)(e.reference)}`}),en(e.flags,["--soft"],{label:`Soft ${this.title}`,description:"--soft",detail:`Will soft reset (leaves changes in the index and working tree) ${(0,es.M4)(t.destination)} to ${(0,es.M4)(e.reference)}`}),en(e.flags,["--hard"],{label:`Hard ${this.title}`,description:"--hard",detail:`Will hard reset (discards all changes) ${(0,es.M4)(t.destination)} to ${(0,es.M4)(e.reference)}`})]),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};let RevertGitCommand=class RevertGitCommand extends n.d6{constructor(e,t){super(e,"revert","revert","Revert",{description:"undoes the changes of specified commits, by creating new commits with inverted changes"});let i=0;t?.state?.repo!=null&&i++,t?.state?.references!=null&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.revert(...e.flags,...e.references.map(e=>e.ref).reverse())}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(null==t.destination){let i=await e.repo.git.branches().getBranch();if(null==i)break;t.destination=i}if(e.counter<2||null==e.references||0===e.references.length){let r=t.destination.ref,s=t.cache.get(r);null==s&&(s=e.repo.git.commits().getLog(r,{merges:"first-parent"}),t.cache.set(r,s));let o=yield*(0,l.GW)(e,t,{log:await s,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:"Choose commits to revert",picked:e.references?.map(e=>e.ref)});if(o===n.Lt){i&&e.counter--;continue}e.references=o}let r=yield*this.confirmStep(e,t);r!==n.Lt&&(e.flags=r,(0,n.nH)(e),this.execute(e))}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,["--no-edit"],{label:this.title,description:"--no-edit",detail:`Will revert ${(0,es.M4)(e.references)}`}),en(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will revert and edit ${(0,es.M4)(e.references)}`})]),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};var eS=i(9210),eP=i(5042),eA=i(2631),eI=i(242),eD=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),e_=e=>{throw TypeError(e)},e$=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&e_("Object expected"),i&&(r=t[eD("asyncDispose")]),void 0===r&&(r=t[eD("dispose")],i&&(s=r)),"function"!=typeof r&&e_("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},eT=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let eE={iconPath:new s.ThemeIcon("person-add"),tooltip:"Pick Authors"},ex={iconPath:new s.ThemeIcon("new-file"),tooltip:"Pick Files"},eO={iconPath:new s.ThemeIcon("new-folder"),tooltip:"Pick Folder"},eF=new Map([["","Search by Message"],["=:","Search by Message"],["message:","Search by Message"],["@:","Search by Author"],["author:","Search by Author"],["#:","Search by Commit SHA"],["commit:","Search by Commit SHA"],["?:","Search by File"],["file:","Search by File"],["~:","Search by Changes"],["change:","Search by Changes"],["type:","Search by Type"]]);let SearchGitCommand=class SearchGitCommand extends n.d6{constructor(e,t){super(e,"search","search","Commit Search",{description:"aka grep, searches for commits"});let i=0;t?.state?.repo!=null&&i++,t?.state?.query!=null&&!t.prefillOnly&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isMatch(e){return super.isMatch(e)||"grep"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"grep"===e}async *steps(e){let t={container:this.container,repos:this.container.git.openRepositories,associatedView:this.container.views.searchAndCompare,commit:void 0,hasVirtualFolders:(0,et.SD)("gitlens:hasVirtualFolders",!1),resultsKey:void 0,resultsPromise:void 0,title:this.title},i=f.H.get("gitCommands.search");null==e.matchAll&&(e.matchAll=i.matchAll),null==e.matchCase&&(e.matchCase=i.matchCase),null==e.matchRegex&&(e.matchRegex=i.matchRegex),null==e.showResultsInSideBar&&(e.showResultsInSideBar=i.showResultsInSideBar??void 0);let r=!1;for(;this.canStepsContinue(e);){let i;if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(r=!1,1===t.repos.length)r=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(e.counter<2||null==e.query){let i=yield*this.pickSearchOperatorStep(e,t);if(i===n.Lt){r&&e.counter--,e.query=void 0;continue}e.query=i}let s={query:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex},o=(0,eP.b4)(s);if((null==t.resultsPromise||t.resultsKey!==o)&&(t.resultsPromise=e.repo.git.commits().searchCommits(s),t.resultsKey=o),e.showResultsInSideBar){this.container.views.searchAndCompare.search(e.repo.path,s,{label:{label:`for ${e.query}`}},t.resultsPromise,e.showResultsInSideBar instanceof eI.X?e.showResultsInSideBar:void 0);break}if(e.counter<3||null==t.commit){let i=e.repo.path,r=yield*(0,l.t$)(e,t,{ignoreFocusOut:!0,log:await t.resultsPromise,onDidLoadMore:e=>t.resultsPromise=Promise.resolve(e),placeholder:(t,i)=>i?.commits.size?`${(0,C.td)("result",i.count,{format:e=>i.hasMore?`${e}+`:String(e)})} for ${e.query}`:`No results for ${e.query}`,picked:t.commit?.ref,showInSideBarCommand:new h.g5("$(link-external)  Show Results in Side Bar",()=>void this.container.views.searchAndCompare.search(i,s,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)),showInSideBarButton:{button:a.UM,onDidClick:()=>void this.container.views.searchAndCompare.search(i,s,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)}});if(r===n.Lt){e.counter--;continue}t.commit=r}e.openPickInView?((0,em.JX)(t.commit,{pin:!1,preserveFocus:!1}),i=n.Lt):i=yield*e4(this.container,{command:"show",state:{repo:e.repo,reference:t.commit}},this.pickedVia),e.counter--,i===n.Lt&&(0,n.nH)(e)}return e.counter<0?n.Lt:void 0}*pickSearchOperatorStep(e,t){let i=[{label:eF.get(""),description:`pattern or message: pattern or =: pattern ${u.EO.Dash} use quotes to search for phrases`,alwaysShow:!0,item:"message:"},{label:eF.get("author:"),description:"author: pattern or @: pattern",buttons:[eE],alwaysShow:!0,item:"author:"},{label:eF.get("commit:"),description:"commit: sha or #: sha",alwaysShow:!0,item:"commit:"},t.hasVirtualFolders?void 0:{label:eF.get("file:"),description:"file: glob or ?: glob",buttons:[ex,eO],alwaysShow:!0,item:"file:"},t.hasVirtualFolders?void 0:{label:eF.get("change:"),description:"change: pattern or ~: pattern",alwaysShow:!0,item:"change:"},t.hasVirtualFolders?void 0:{label:eF.get("type:"),description:"type: stash or is: stash",alwaysShow:!0,item:"type:"}].filter(e=>null!=e),r=new a.XS(e.matchCase),s=new a.S(e.matchAll),o=new a.w7(e.matchRegex),c=(0,n.Ac)({title:(0,l.Zr)(t.title,e,t),placeholder:'e.g. "Updates dependencies" author:eamodio',ignoreFocusOut:!0,matchOnDescription:!0,matchOnDetail:!0,additionalButtons:[r,s,o],items:i,value:e.query,selectValueWhenShown:!1,onDidAccept:async i=>{let r=i.selectedItems[0];return!(0,d.hr)(r)&&(!eS.GZ.has(r.item)||(await eB(r,{},i,c,e,t),!1))},onDidClickButton:(t,i)=>{i===r?(e.matchCase=!e.matchCase,r.on=e.matchCase):i===s?(e.matchAll=!e.matchAll,s.on=e.matchAll):i===o&&(e.matchRegex=!e.matchRegex,o.on=e.matchRegex)},onDidClickItemButton:async function(i,r,s){return r===eE?await eB(s,{author:!0},i,c,e,t):r===ex?await eB(s,{file:{type:"file"}},i,c,e,t):r===eO&&await eB(s,{file:{type:"folder"}},i,c,e,t),!1},onDidChangeValue:r=>{let s=r.value.trim();e.counter=s?3:2;let o=(0,eP.OM)({query:s,matchCase:e.matchCase,matchAll:e.matchAll,matchRegex:e.matchRegex});return r.title=(0,l.Zr)(1===o.size?`Commit ${eF.get((0,b.$1)(o.keys()))}`:t.title,e,t),0===r.value.length?r.items=i:(r.ignoreFocusOut=!0,c.ignoreFocusOut=!0,r.items=[{label:"Search for",description:r.value,item:r.value,picked:!0},...i],r.activeItems=[r.items[0]]),!0}}),h=yield c;return(0,n.fg)(c,e,h)?(e.counter--,h[0].item.trim()):(e.counter--,n.Lt)}};async function eB(e,t,i,r,o,n){let a=(0,eP.OM)({query:i.value,matchCase:o.matchCase,matchAll:o.matchAll}),l=!1;if(t?.author&&"author:"===e.item){var u=[];try{e$(u,r.freeze?.());let e=a.get("author:"),t=await (0,eA.W)(n.container,o.repo,"Search by Author","Choose contributors to include commits from",{appendReposToTitle:!0,clearButton:!0,ignoreFocusOut:!0,multiselect:!0,picked:t=>null!=e&&(null!=t.email&&e.has(t.email)||null!=t.name&&e.has(t.name)||null!=t.username&&e.has(t.username))});if(null!=t){let e=t.map(e=>e.email??e.name??e.username).filter(e=>null!=e);e.length?a.set("author:",new Set(e)):a.delete("author:")}else l=!0}catch(e){var c=e,h=!0}finally{eT(u,c,h)}}else if(t?.file&&"file:"===e.item){var d=[];try{e$(d,r.freeze?.());let e=a.get("file:"),i=await s.window.showOpenDialog({canSelectFiles:"file"===t.file.type,canSelectFolders:"folder"===t.file.type,canSelectMany:"file"===t.file.type,title:"Search by File",openLabel:"Add to Search",defaultUri:o.repo.folder?.uri});if(i?.length)for(let t of(null==e&&(e=new Set,a.set("file:",e)),i))e.add(n.container.git.getRelativePath(t,o.repo.uri));else l=!0;(null==e||0===e.size)&&a.delete("file:")}catch(e){var p=e,g=!0}finally{eT(d,p,g)}}else{let t=a.get(e.item);l=!t?.has("")}i.value=`${(0,b.fj)((0,b.Tj)(a.entries(),([e,t])=>`${e}${(0,b.fj)(t,` ${e}`)}`)," ")}${l?` ${e.item}`:""}`,r.onDidChangeValue(i)}var eL=i(6366),eU=i(3227);let ShowGitCommand=class ShowGitCommand extends n.d6{constructor(e,t){super(e,"show","show","Show",{description:"shows information about a git reference"});let i=0;t?.state?.repo!=null&&i++,t?.state?.reference!=null&&i++,t?.state?.fileName!=null&&(i+=2),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}getStepState(e){let t=super.getStepState(e);return{...t,startingStep:e?Math.min(t.startingStep??0,1):0}}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(!(e.repo instanceof ei.LN))throw Error("Missing repository");if((e.counter<2||null==e.reference||!(0,ef.WM)(e.reference)||null!=e.reference.file)&&(null==e.reference||(0,ef.WM)(e.reference)||(e.reference=await this.container.git.commits(e.reference.repoPath).getCommit(e.reference.ref)),e.counter<2||null==e.reference)){let r=yield*(0,l.t$)(e,t,{log:{repoPath:e.repo.path,commits:new Map,sha:void 0,range:void 0,count:0,limit:void 0,hasMore:!1},placeholder:"Enter a reference or commit SHA",picked:e.reference?.ref});if(r===n.Lt){i&&e.counter--;continue}e.reference=r}if(!(0,ef.WM)(e.reference))throw Error("Missing reference");if(e.counter<3){(e.reference.fileset?.files==null||e.reference.fileset?.filtered)&&await e.reference.ensureFullDetails();let i=yield*(0,l.x$)(e,t);if(i===n.Lt)continue;if(i instanceof eU.$N){let t=yield*i.executeSteps(this.pickedVia);e.counter--,t===n.Lt&&(0,n.nH)(e);continue}if(i instanceof h.Fj&&!(i instanceof eL.o3)){(0,n.nH)(e),i.execute();break}}if(e.counter<4||null==e.fileName){let i=yield*(0,l.UI)(e,t,{picked:e.fileName});if(i===n.Lt)continue;if(i instanceof eL.o3){e.counter-=2;continue}e.fileName=i.file.path}if(!e.fileName)throw Error("Missing filename");let r=yield*(0,l.tY)(e,t);if(r!==n.Lt){if(r instanceof eL.o3){e.counter-=2;continue}if(r instanceof eU.$N){yield*r.executeSteps(this.pickedVia),e.counter--;continue}if(r instanceof h.Fj){(0,n.nH)(e),r.execute();break}}}return e.counter<0?n.Lt:void 0}};var eq=i(3621),eN=i(6770),eM=i(1003),eW=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),eG=e=>{throw TypeError(e)},eH=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&eG("Object expected"),i&&(r=t[eW("asyncDispose")]),void 0===r&&(r=t[eW("dispose")],i&&(s=r)),"function"!=typeof r&&eG("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},eV=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let ej=new Map([["apply","Apply"],["drop","Drop"],["list","List"],["pop","Pop"],["push","Push"],["rename","Rename"]]);function ez(e,t){return null==t?e:`${ej.get(t)} ${e}`}let StashGitCommand=class StashGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"stash","stash","Stash",{description:"shelves (stashes) local changes to be reapplied later"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"apply":case"pop":null!=t.state.reference&&i++;break;case"drop":null!=t.state.references&&i++;break;case"push":null!=t.state.message&&i++;break;case"rename":null!=t.state.reference&&i++,null!=t.state.message&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand&&"list"!==this.subcommand}get canSkipConfirm(){return"drop"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.stashes,readonly:(0,et.SD)("gitlens:readonly",!1)||(0,et.SD)("gitlens:untrusted",!1)||(0,et.SD)("gitlens:hasVirtualFolders",!1),title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,t.readonly&&(e.subcommand="list"),e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=ez(this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)continue;e.repo=i}switch(e.subcommand){case"apply":case"pop":yield*this.applyOrPopCommandSteps(e,t);break;case"drop":yield*this.dropCommandSteps(e,t);break;case"list":yield*this.listCommandSteps(e,t);break;case"push":yield*this.pushCommandSteps(e,t);break;case"rename":yield*this.renameCommandSteps(e,t),e.message=void 0;break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"apply",description:"integrates changes from the specified stash into the current branch",picked:"apply"===e.subcommand,item:"apply"},{label:"drop",description:"deletes the specified stashes",picked:"drop"===e.subcommand,item:"drop"},{label:"list",description:"lists the saved stashes",picked:"list"===e.subcommand,item:"list"},{label:"pop",description:"integrates changes from the specified stash into the current branch and deletes the stash",picked:"pop"===e.subcommand,item:"pop"},{label:"push",description:"saves your local changes to a new stash and discards them from the working tree and index",picked:"push"===e.subcommand,item:"push"},{label:"rename",description:"renames the specified stash",picked:"rename"===e.subcommand,item:"rename"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *applyOrPopCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.FF)(e,t,{gitStash:await e.repo.git.stash()?.getStash(),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to apply to your working tree",picked:e.reference?.ref});if(i===n.Lt)break;e.reference=i}if(this.confirm(e.confirm)){let i=yield*this.applyOrPopCommandConfirmStep(e,t);if(i===n.Lt)continue;e.subcommand=i}(0,n.nH)(e);try{if(await e.repo.git.stash()?.applyStash("pop"===e.subcommand?`stash@{${e.reference.stashNumber}}`:e.reference.ref,{deleteAfter:"pop"===e.subcommand}),e.reference.message){let t=await this.container.git.getScmRepository(e.repo.path);null==t||t.inputBox.value||(t.inputBox.value=e.reference.message)}}catch(e){el.Vy.error(e,t.title),ed.Uz.is(e,ed.W.WorkingChanges)?s.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"):(0,eo.qQ)(e.message)}}}*applyOrPopCommandConfirmStep(e,t){let i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:"pop"===e.subcommand?`Will delete ${(0,es.M4)(e.reference)} and apply the changes to the working tree`:`Will apply the changes from ${(0,es.M4)(e.reference)} to the working tree`,item:e.subcommand},{label:ez(this.title,"pop"===e.subcommand?"apply":"pop"),detail:"pop"===e.subcommand?`Will apply the changes from ${(0,es.M4)(e.reference)} to the working tree`:`Will delete ${(0,es.M4)(e.reference)} and apply the changes to the working tree`,item:"pop"===e.subcommand?"apply":"pop"}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[a.kk,a.yi],onDidClickButton:(t,i)=>{i===a.kk?(0,eq.JX)(e.reference,{pin:!1,preserveFocus:!0}):i===a.yi&&(0,eq._c)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}async *dropCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||!e.references?.length){let i=yield*(0,l.Tq)(e,t,{gitStash:await e.repo.git.stash()?.getStash(),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose stashes to delete",picked:e.references?.map(e=>e.ref)});if(i===n.Lt)break;e.references=i}if(t.title=ez((0,C.td)("Stash",e.references.length,{only:!0,plural:"Stashes"}),e.subcommand),(yield*this.dropCommandConfirmStep(e,t))!==n.Lt)for(let i of((0,n.nH)(e),e.references.sort((e,t)=>parseInt(t.stashNumber,10)-parseInt(e.stashNumber,10)),e.references))try{await e.repo.git.stash()?.deleteStash(`stash@{${i.stashNumber}}`,i.ref)}catch(e){el.Vy.error(e,t.title),(0,eo.qQ)(`Unable to delete stash@{${i.stashNumber}}${i.message?`: ${i.message}`:""}`)}}}*dropCommandConfirmStep(e,t){let i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,es.M4)(e.references)}`}],void 0,{placeholder:`Confirm ${t.title}`}),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}async *listCommandSteps(e,t){for(t.title="Stashes";this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.FF)(e,t,{gitStash:await e.repo.git.stash()?.getStash(),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash",picked:e.reference?.ref});if(i===n.Lt)break;e.reference=i}let i=yield*e4(this.container,{command:"show",state:{repo:e.repo,reference:e.reference}},this.pickedVia);e.counter--,i===n.Lt&&(0,n.nH)(e)}}async *pushCommandSteps(e,t){let i;for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.message){if(null==e.message){let t=await this.container.git.getScmRepository(e.repo.path);e.message=t?.inputBox.value}let i=yield*this.pushCommandInputMessageStep(e,t);if(i===n.Lt)break;e.message=i}if(this.confirm(i??e.confirm)){let i=yield*this.pushCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}try{e.flags.includes("--snapshot")?await e.repo.git.stash()?.saveSnapshot(e.message):await e.repo.git.stash()?.saveStash(e.message,e.uris,{includeUntracked:e.flags.includes("--include-untracked"),keepIndex:e.flags.includes("--keep-index"),onlyStaged:e.flags.includes("--staged")}),(0,n.nH)(e)}catch(o){if(el.Vy.error(o,t.title),o instanceof ed.Oo){if(o.reason===ed.C6.NothingToSave){if(!e.flags.includes("--include-untracked")){i=!0,s.window.showWarningMessage('No changes to stash. Choose the "Push & Include Untracked" option, if you have untracked files.');continue}s.window.showInformationMessage("No changes to stash.");return}if(o.reason===ed.C6.ConflictingStagedAndUnstagedLines&&e.flags.includes("--staged")){let t={title:"Stash Everything"},i={title:"Cancel",isCloseAffordance:!0};if(await s.window.showErrorMessage(`Changes were stashed, but the working tree cannot be updated because at least one file has staged and unstaged changes on the same line(s)

Do you want to try again by stashing both your staged and unstaged changes?`,{modal:!0},t,i)===t){null==e.uris&&(e.uris=e.onlyStagedUris),e.flags.splice(e.flags.indexOf("--staged"),1);continue}return}}let r=o?.message??o?.toString()??"";if(r.includes("newer version of Git"))return void s.window.showErrorMessage(`Unable to stash changes. ${r}`);(0,eo.qQ)("Unable to stash changes");return}}}async *pushCommandInputMessageStep(e,t){var i=[];try{let r=eH(i,(0,eM.bP)(`${(0,el.zu)(this)}.pushCommandInputMessageStep`,!1)),o={iconPath:new s.ThemeIcon("sparkle"),tooltip:"Generate Stash Message"},a=(0,n.TX)({title:(0,l.Zr)(t.title,e,t,null!=e.uris?`${(0,C.eV)(u.EO.Dot,2,2)}${1===e.uris.length?(0,ew.j)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`:void 0),placeholder:"Please provide a stash message",value:e.message,prompt:"Enter stash message",buttons:(0,et.SD)("gitlens:gk:organization:ai:enabled")?[s.QuickInputButtons.Back,o]:[s.QuickInputButtons.Back],validate:e=>[!0,void 0],onDidClickButton:async(t,i)=>{if(i===o){var n=[];try{let i=eH(n,a.freeze?.());try{let r=await e.repo.git.diff().getDiff?.(e.flags.includes("--staged")?eN.id:eN.SU,void 0,e.uris?.length?{uris:e.uris}:void 0);if(!r?.contents)return void s.window.showInformationMessage("No changes to generate a stash message from.");let o=(0,g.v6)();o.promise.then(e=>{t.validationMessage={severity:s.InputBoxValidationSeverity.Info,message:`$(loading~spin) Generating stash message with ${e.name}...`},i?.dispose()},()=>{t.validationMessage=void 0,i?.dispose()});let n=await this.container.ai.generateStashMessage(r.contents,{source:"quick-wizard"},{generating:o});t.validationMessage=void 0;let a=n?.parsed.summary;null!=a&&(e.message=a,t.value=a)}catch(e){el.Vy.error(e,r,"generateStashMessage"),t.validationMessage={severity:s.InputBoxValidationSeverity.Error,message:e.message}}}catch(e){var l=e,u=!0}finally{eV(n,l,u)}}}}),c=yield a;if(!(0,n.wc)(a,e,c)||!await (0,n.Ss)(a,e,c))return n.Lt;return c}catch(e){var r=e,o=!0}finally{eV(i,r,o)}}*pushCommandConfirmStep(e,t){let i=e.flags.includes("--staged"),r=[];i&&r.push("--staged");let s=[];e.uris?.length?(e.flags.includes("--include-untracked")&&r.push("--include-untracked"),s.push(en(e.flags,[...r],{label:t.title,detail:`Will stash changes from ${1===e.uris.length?(0,ew.j)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`})),e.flags.includes("--include-untracked")||s.push(en(e.flags,[...r,"--keep-index"],{label:`${t.title} & Keep Staged`,detail:`Will stash changes from ${1===e.uris.length?(0,ew.j)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}, but will keep staged files intact`}))):(s.push(en(e.flags,[...r],{label:t.title,detail:`Will stash ${i?"staged":"uncommitted"} changes`}),en(e.flags,[...r,"--snapshot"],{label:`${t.title} Snapshot`,detail:"Will stash uncommitted changes without changing the working tree"})),i||(s.push(en(e.flags,[...r,"--include-untracked"],{label:`${t.title} & Include Untracked`,description:"--include-untracked",detail:"Will stash uncommitted changes, including untracked files"})),s.push(en(e.flags,[...r,"--keep-index"],{label:`${t.title} & Keep Staged`,description:"--keep-index",detail:`Will stash ${i?"staged":"uncommitted"} changes, but will keep staged files intact`}))));let o=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),s,void 0,{placeholder:`Confirm ${t.title}`}),a=yield o;return(0,n.fg)(o,e,a)?a[0].item:n.Lt}async *renameCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.FF)(e,t,{gitStash:await e.repo.git.stash()?.getStash(),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to rename",picked:e.reference?.ref});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.message){let i=yield*this.renameCommandInputMessageStep(e,t);if(i===n.Lt)continue;e.message=i}if(!this.confirm(e.confirm)||(yield*this.renameCommandConfirmStep(e,t))!==n.Lt){(0,n.nH)(e);try{await e.repo.git.stash()?.renameStash(e.reference.name,e.reference.ref,e.message,e.reference.stashOnRef)}catch(e){el.Vy.error(e,t.title),(0,eo.qQ)(e.message)}}}}async *renameCommandInputMessageStep(e,t){let i=(0,n.TX)({title:(0,l.Zr)(t.title,e,t),placeholder:`Please provide a new message for ${(0,es.M4)(e.reference,{icon:!1})}`,value:e.message??e.reference?.message,prompt:"Enter new stash message"}),r=yield i;return(0,n.wc)(i,e,r)&&await (0,n.Ss)(i,e,r)?r:n.Lt}*renameCommandConfirmStep(e,t){let i=this.createConfirmStep((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will rename ${(0,es.M4)(e.reference)}`,item:e.subcommand}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[a.kk,a.yi],onDidClickButton:(t,i)=>{i===a.kk?(0,eq.JX)(e.reference,{pin:!1,preserveFocus:!0}):i===a.yi&&(0,eq._c)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}};let StatusGitCommand=class StatusGitCommand extends n.d6{constructor(e,t){super(e,"status","status","Status",{description:"shows status information about a repository"});let i=0;t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,status:void 0,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)break;e.repo=i}if(t.status=await e.repo.git.status().getStatus(),null==t.status)return;t.title=`${this.title}${(0,C.eV)(u.EO.Dot,2,2)}${(0,es.M4)((0,es.kA)(t.status.branch,e.repo.path,{refType:"branch",name:t.status.branch,remote:!1,upstream:t.status.upstream}),{icon:!1})}`;let r=yield*(0,l.cf)(e,t);if(r===n.Lt){i&&e.counter--;continue}if(r instanceof eU.$N){let t=yield*r.executeSteps(this.pickedVia);e.counter--,t===n.Lt&&(0,n.nH)(e);continue}if(r instanceof h.Fj){(0,n.nH)(e),r.execute();break}}}};let SwitchGitCommand=class SwitchGitCommand extends n.d6{constructor(e,t){super(e,"switch","switch","Switch to...",{description:"aka checkout, switches to a specified branch"});let i=0;t?.state?.repos!=null&&(!Array.isArray(t.state.repos)||0!==t.state.repos.length)&&i++,t?.state?.reference!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}_canConfirmOverride;get canConfirm(){return this._canConfirmOverride??!0}async execute(e){await s.window.withProgress({location:s.ProgressLocation.Notification,title:`${(0,es.gC)(e.reference)||e.createBranch?"Switching to":"Checking out"} ${(0,es.M4)(e.reference,{icon:!1,label:!1})} in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`}`},()=>Promise.all(e.repos.map(t=>t.switch(e.reference.ref,{createBranch:e.createBranch,progress:!1})))),null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref)}isMatch(e){return super.isMatch(e)||"checkout"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"checkout"===e}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.commits,canSwitchToLocalBranch:void 0,promptToCreateBranch:!1,showTags:!1,title:this.title};null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,ea.Bo)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{let i=yield*(0,l.g0)(e,t,{skipIfPossible:e.counter>=1});if(i===n.Lt)break;e.repos=i}if(e.counter<2||null==e.reference){let r=yield*(0,l.uV)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to switch to`,allowCreate:1===e.repos.length});if(r===n.Lt){i&&e.counter--;continue}if("string"==typeof r){yield*e4(this.container,{command:"branch",state:{subcommand:"create",repo:e.repos[0],name:r,suggestNameOnly:!0,flags:["--switch"]}},this.pickedVia),(0,n.nH)(e);return}if((0,n.h8)(r)){(0,m.RS)(r.command,r.args),(0,n.nH)(e);return}e.reference=r}if(t.canSwitchToLocalBranch=void 0,(0,es.gC)(e.reference)&&!e.reference.remote){e.createBranch=void 0;let t=await this.container.git.worktrees(e.reference.repoPath)?.getWorktree(t=>t.branch?.name===e.reference.name);if(null!=t&&!t.isDefault){if(null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref),(yield*e4(this.container,{command:"worktree",state:{subcommand:"open",worktree:t,openOnly:!0,overrides:{disallowBack:!0,confirmation:e.worktreeDefaultOpen?void 0:{title:`Confirm Switch to Worktree \u2022 ${(0,es.M4)(e.reference,{icon:!1,label:!1})}`,placeholder:`${(0,es.M4)(e.reference,{capitalize:!0,icon:!1})} is linked to a worktree`}},onWorkspaceChanging:e.onWorkspaceChanging,repo:e.repos[0],worktreeDefaultOpen:e.worktreeDefaultOpen}},this.pickedVia))===n.Lt&&!e.worktreeDefaultOpen)continue;(0,n.nH)(e);return}}else if((0,es.gC)(e.reference)&&e.reference.remote){let{values:i}=await this.container.git.branches(e.reference.repoPath).getBranches({filter:t=>t.upstream?.name===e.reference.name,sort:{orderBy:"date:desc"}});if(i.length){if(t.canSwitchToLocalBranch=i[0],e.createBranch=void 0,t.promptToCreateBranch=!1,e.worktreeDefaultOpen){e.reference=t.canSwitchToLocalBranch;continue}}else t.promptToCreateBranch=!0}if(e.worktreeDefaultOpen||this.confirm(!!t.promptToCreateBranch||!!t.canSwitchToLocalBranch||e.confirm)){let i=yield*this.confirmStep(e,t);if(i===n.Lt)continue;switch(i){case"switchToLocalBranch":e.reference=t.canSwitchToLocalBranch;continue;case"switchToLocalBranchAndFastForward":e.fastForwardTo=e.reference,e.reference=t.canSwitchToLocalBranch;continue;case"switchToNewBranch":{t.title="Switch to New Branch",this._canConfirmOverride=!1;let i=yield*(0,l.wS)(e,t,{title:`${t.title} from ${(0,es.M4)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.createBranch??((0,es.gC)(e.reference)&&e.reference.remote?(0,es.fC)(e.reference):void 0)});if(this._canConfirmOverride=void 0,i===n.Lt)continue;e.createBranch=i;break}case"switchViaWorktree":case"switchToLocalBranchViaWorktree":case"switchToNewBranchViaWorktree":if((yield*e4(this.container,{command:"worktree",state:{subcommand:"create",reference:"switchToLocalBranchViaWorktree"===i?t.canSwitchToLocalBranch:e.reference,createBranch:"switchToNewBranchViaWorktree"===i?e.createBranch:void 0,repo:e.repos[0],onWorkspaceChanging:e.onWorkspaceChanging,worktreeDefaultOpen:e.worktreeDefaultOpen}},this.pickedVia))===n.Lt&&!e.worktreeDefaultOpen)continue;(0,n.nH)(e);return}}(0,n.nH)(e),this.execute(e)}return e.counter<0?n.Lt:void 0}*confirmStep(e,t){let i=(0,es.gC)(e.reference)&&!e.reference.remote,r=(0,es.gC)(e.reference)&&e.reference.remote;if(e.worktreeDefaultOpen&&1===e.repos.length)return i?"switchViaWorktree":e.createBranch||null==t.canSwitchToLocalBranch?"switchToNewBranchViaWorktree":"switchToLocalBranchViaWorktree";let s=[];(0,es.gC)(e.reference)||s.push({label:`Checkout to ${(0,es.eN)(e.reference)}`,description:"(detached)",detail:`Will checkout to ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switch"}),!e.createBranch&&(null!=t.canSwitchToLocalBranch?(s.push((0,h.uK)("Local")),s.push({label:"Switch to Local Branch",description:"",detail:`Will switch to local ${(0,es.M4)(t.canSwitchToLocalBranch)} for ${(0,es.M4)(e.reference)}`,item:"switchToLocalBranch"}),1===e.repos.length&&s.push({label:"Switch to Local Branch & Fast-Forward",description:"",detail:`Will switch to and fast-forward local ${(0,es.M4)(t.canSwitchToLocalBranch)}`,item:"switchToLocalBranchAndFastForward"})):i&&s.push({label:"Switch to Branch",description:"",detail:`Will switch to ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switch"})),(!i||e.createBranch||t.promptToCreateBranch)&&(r?(s.length&&s.push((0,h.uK)("Remote")),s.push({label:"Create & Switch to New Local Branch",description:"",detail:`Will create and switch to a new local branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranch"})):(s.length&&s.push((0,h.uK)("Branch")),s.push({label:`Create & Switch to New Branch from ${(0,es.eN)(e.reference)}`,description:"",detail:`Will create and switch to a new branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranch"}))),1===e.repos.length&&(s.length&&s.push((0,h.uK)("Worktree")),i?s.push({label:"Create Worktree for Branch...",description:"avoids modifying your working tree",detail:`Will create a new worktree for ${(0,es.M4)(e.reference)}`,item:"switchViaWorktree"}):e.createBranch||null==t.canSwitchToLocalBranch?r?s.push({label:"Create Worktree for New Local Branch...",description:"avoids modifying your working tree",detail:`Will create a new worktree for a new local branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranchViaWorktree"}):s.push({label:`Create Worktree for New Branch from ${(0,es.eN)(e.reference)}...`,description:"avoids modifying your working tree",detail:`Will create a new worktree for a new branch${e.createBranch?` named ${e.createBranch}`:""} from ${(0,es.M4)(e.reference)}${e.repos.length>1?` in ${e.repos.length} repos`:""}`,item:"switchToNewBranchViaWorktree"}):s.push({label:"Create Worktree for Local Branch...",description:"avoids modifying your working tree",detail:`Will create a new worktree for local ${(0,es.M4)(t.canSwitchToLocalBranch)}`,item:"switchToLocalBranchViaWorktree"})),r&&!e.createBranch&&(s.length&&s.push((0,h.uK)("Checkout")),s.push({label:"Checkout to Remote Branch",description:"(detached)",detail:`Will checkout to ${(0,es.M4)(e.reference)}`,item:"switch"}));let o=this.createConfirmStep((0,l.Zr)(`Confirm Switch to ${(0,es.M4)(e.reference,{icon:!1,capitalize:!0})}`,e,t),s,void 0,{placeholder:`Confirm ${t.title}`}),a=yield o;return(0,n.fg)(o,e,a)?a[0].item:n.Lt}};let eQ=new Map([["create","Create"],["delete","Delete"]]);function eY(e,t){return null==t?e:`${eQ.get(t)} ${e}`}let TagGitCommand=class TagGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"tag","tag","Tag",{description:"create, or delete tags"});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"create":null!=t.state.reference&&i++,null!=t.state.name&&i++,null!=t.state.message&&i++;break;case"delete":null!=t.state.references&&(!Array.isArray(t.state.references)||0!==t.state.references.length)&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.tags,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)continue;e.repo=i}switch(t.title=eY("delete"===e.subcommand?"Tags":this.title,e.subcommand),e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":yield*this.deleteCommandSteps(e,t);break;default:(0,n.nH)(e)}i&&e.counter--}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new tag",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified tags",picked:"delete"===e.subcommand,item:"delete"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){let i=yield*(0,l.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new tag from`,picked:e.reference?.ref??(await e.repo.git.branches().getBranch())?.ref,title:`${t.title} from`,value:(0,es.bv)(e.reference)?e.reference.ref:void 0});if(i===n.Lt)break;e.reference=i}if(e.counter<4||null==e.name){let i=yield*(0,l.c1)(e,t,{placeholder:"Please provide a name for the new tag",title:`${t.title} at ${(0,es.M4)(e.reference,{capitalize:!0,icon:!1})}`,value:e.name??((0,es.A1)(e.reference)?void 0:(0,es.fC)(e.reference))});if(i===n.Lt)continue;e.name=i}if(e.counter<5||null==e.message){let i=yield*this.createCommandInputMessageStep(e,t);if(i===n.Lt)continue;e.message=i}if(0===e.message.length||e.flags.includes("-m")||e.flags.push("-m"),this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}(0,n.nH)(e);try{await e.repo.git.tags().createTag?.(e.name,e.reference.ref,e.message)}catch(e){el.Vy.error(e,t.title),(0,eo.qQ)(e)}}}async *createCommandInputMessageStep(e,t){let i=(0,n.TX)({title:(0,l.Zr)(`${t.title} at ${(0,es.M4)(e.reference,{capitalize:!0,icon:!1})}`,e,t),placeholder:"Please provide an optional message to annotate the tag",value:e.message,prompt:"Enter optional message"}),r=yield i;return(0,n.wc)(i,e,r)&&await (0,n.Ss)(i,e,r)?r:n.Lt}*createCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,0!==e.message.length?["-m"]:[],{label:t.title,description:0!==e.message.length?"-m":"",detail:`Will create a new tag named ${e.name} at ${(0,es.M4)(e.reference)}`}),en(e.flags,0!==e.message.length?["--force","-m"]:["--force"],{label:`Force ${t.title}`,description:`--force${0!==e.message.length?" -m":""}`,detail:`Will forcibly create a new tag named ${e.name} at ${(0,es.M4)(e.reference)}`})],t),r=yield i;return(0,n.fg)(i,e,r)?r[0].item:n.Lt}async *deleteCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||0===e.references.length){t.title=eY("Tags",e.subcommand);let i=yield*(0,l.RX)(e,t,{picked:e.references?.map(e=>e.ref),placeholder:"Choose tags to delete"});if(i===n.Lt)break;e.references=i}if(t.title=eY((0,C.td)("Tag",e.references.length,{only:!0}),e.subcommand),(yield*this.deleteCommandConfirmStep(e,t))!==n.Lt)for(let{ref:i}of((0,n.nH)(e),e.references))try{await e.repo.git.tags().deleteTag?.(i)}catch(e){el.Vy.error(e,t.title),(0,eo.qQ)(e)}}}*deleteCommandConfirmStep(e,t){let i=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,es.M4)(e.references)}`}],t),r=yield i;return(0,n.fg)(i,e,r)?void 0:n.Lt}};var eK=i(3583),eZ=i(4931),eJ=i(4119),eX=i(745),e0=i(3677);let e1=new Map([[void 0,`Worktrees ${u.tM}`],["create","Create Worktree"],["delete","Delete Worktrees"],["open","Open Worktree"],["copy-changes","Copy Changes to Worktree"]]);function e2(e,t){return`${e1.get(e)}${t??""}`}let WorktreeGitCommand=class WorktreeGitCommand extends n.d6{subcommand;constructor(e,t){super(e,"worktree","worktree",`Worktrees ${u.tM}`,{description:`${u.lD}\xa0\xA0open, create, or delete worktrees`});let i=0;if(t?.state?.subcommand!=null)switch(i++,t.state.subcommand){case"create":null!=t.state.uri&&i++,null!=t.state.reference&&i++;break;case"delete":null!=t.state.uris&&(!Array.isArray(t.state.uris)||0!==t.state.uris.length)&&i++;break;case"open":case"copy-changes":null!=t.state.worktree&&i++}t?.state?.repo!=null&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}_canSkipConfirmOverride;get canSkipConfirm(){return this._canSkipConfirmOverride??"open"===this.subcommand}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async *steps(e){let t={repos:this.container.git.openRepositories,associatedView:this.container.views.worktrees,showTags:!1,title:this.title},i=!1;for(;this.canStepsContinue(e);){if(t.title=e.overrides?.title??this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;let t=yield*this.pickSubcommandStep(e);if(t===n.Lt)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=e.overrides?.title??e2(e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{let i=yield*(0,l.UA)(e,t);if(i===n.Lt)continue;e.repo=i}"copy-changes"!==e.subcommand&&(e.repo=await e.repo.getCommonRepository()??e.repo);if(null==e.repo||"string"==typeof e.repo)throw Error("Missing repository");if((yield*(0,l.jg)(this.container,e,t,"worktrees"))!==n.Lt){switch(e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.uri=void 0;break;case"delete":null==e.uris||Array.isArray(e.uris)||(e.uris=[e.uris]),yield*this.deleteCommandSteps(e,t);break;case"open":yield*this.openCommandSteps(e,t);break;case"copy-changes":yield*this.copyChangesCommandSteps(e,t);break;default:(0,n.nH)(e)}i&&e.counter--}}return e.counter<0?n.Lt:void 0}*pickSubcommandStep(e){let t=(0,n.Ac)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"open",description:"opens the specified worktree",picked:"open"===e.subcommand,item:"open"},{label:"create",description:"creates a new worktree",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified worktrees",picked:"delete"===e.subcommand,item:"delete"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,n.fg)(t,e,i)?i[0].item:n.Lt}async *createCommandSteps(e,t){for(null==t.defaultUri&&(t.defaultUri=await e.repo.git.worktrees()?.getWorktreesDefaultUri()),null==e.flags&&(e.flags=[]),t.pickedRootFolder=void 0,t.pickedSpecificFolder=void 0,e.confirm=!0,this._canSkipConfirmOverride=void 0;this.canStepsContinue(e);){let i;if(e.counter<3||null==e.reference){let i=yield*(0,l.Re)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new worktree from`,picked:e.reference?.ref??(await e.repo.git.branches().getBranch())?.ref,title:"Select Branch to Create Worktree From",value:(0,es.bv)(e.reference)?e.reference.ref:void 0});if(i===n.Lt)break;e.reference=i}null==e.uri&&(e.uri=t.defaultUri),e.worktree=(0,es.gC)(e.reference)&&!e.reference.remote?await (0,er.vV)(e.repo,e.reference.name,void 0,t.worktrees):void 0;let r=(0,es.gC)(e.reference)&&e.reference?.remote;if((r||null!=e.worktree)&&!e.flags.includes("-b")&&e.flags.push("-b"),r){e.createBranch=(0,es.fC)(e.reference);let t=await e.repo.git.branches().getBranch(e.createBranch);null==t||t.remote||(e.createBranch=t.name)}if(e.flags.includes("-b")){let i;if(null!=e.createBranch){let t=await e.repo.git.refs().checkIfCouldBeValidBranchOrTagName(e.createBranch);t&&(t=null==await e.repo.git.branches().getBranch(e.createBranch)),t||(i=e.createBranch,e.createBranch=void 0)}if(null==e.createBranch){let r=yield*(0,l.wS)(e,t,{title:`${t.title} and New Branch from ${(0,es.M4)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:i});if(r===n.Lt){e.flags=[];continue}e.createBranch=r}}if(this.confirm(e.confirm)){let i=yield*this.createCommandConfirmStep(e,t);if(i===n.Lt)continue;if("string"==typeof i[0])switch(i[0]){case"changeRoot":{let i=yield*this.createCommandChoosePathStep(e,t,{title:"Choose a Different Root Folder for this Worktree",label:"Choose Root Folder",pickedUri:t.pickedRootFolder,defaultUri:t.pickedRootFolder??t.defaultUri});if(i===n.Lt)continue;e.uri=i,t.pickedRootFolder=e.uri,t.pickedSpecificFolder=void 0;continue}case"chooseFolder":{let i=yield*this.createCommandChoosePathStep(e,t,{title:"Choose a Specific Folder for this Worktree",label:"Choose Worktree Folder",pickedUri:t.pickedRootFolder,defaultUri:t.pickedSpecificFolder??t.defaultUri});if(i===n.Lt)continue;e.uri=i,t.pickedRootFolder=void 0,t.pickedSpecificFolder=e.uri;continue}}[e.uri,e.flags]=i}e.confirm=!0,this._canSkipConfirmOverride=void 0;let o=e.flags.includes("--direct")?e.uri:s.Uri.joinPath(e.uri,...(e.createBranch??e.reference.name).replace(/\\/g,"/").split("/"));try{null!=e.addRemote&&await e.repo.git.remotes().addRemote?.(e.addRemote.name,e.addRemote.url,{fetch:!0}),i=await e.repo.git.worktrees()?.createWorktreeWithResult(o.fsPath,{commitish:e.reference?.name,createBranch:e.flags.includes("-b")?e.createBranch:void 0,detach:e.flags.includes("--detach"),force:e.flags.includes("--force")}),e.result?.fulfill(i)}catch(t){if(ed.iX.is(t,ed.O7.AlreadyCheckedOut)&&!e.flags.includes("--force")){let t={title:"Create New Branch"},i={title:"Create Anyway"},r={title:"Cancel",isCloseAffordance:!0},o=await s.window.showWarningMessage(`Unable to create the new worktree because ${(0,es.M4)(e.reference,{icon:!1,quoted:!0})} is already checked out.

Would you like to create a new branch for this worktree or forcibly create it anyway?`,{modal:!0},t,i,r);if(o===t){e.flags.push("-b"),this._canSkipConfirmOverride=!0,e.confirm=!1;continue}if(o===i){e.flags.push("--force"),this._canSkipConfirmOverride=!0,e.confirm=!1;continue}}else if(ed.iX.is(t,ed.O7.AlreadyExists)){let e={title:"OK"},t={title:"Open Folder"};s.window.showErrorMessage(`Unable to create a new worktree in '${(0,e0.kZ)(o)}' because the folder already exists and is not empty.`,e,t).then(e=>{e===t&&(0,eC.mP)(o)})}else(0,eo.qQ)(`Unable to create a new worktree in '${(0,e0.kZ)(o)}.`)}if((0,n.nH)(e),null==i)break;!1!==e.reveal&&setTimeout(()=>{this.container.views.worktrees.visible&&(0,eZ._c)(i,{select:!0,focus:!1})},100);let a=f.H.get("worktrees.openAfterCreate");if("never"!==a){let r;switch(a){case"always":r=(0,eZ.F8)("currentWindow");break;case"alwaysNewWindow":r=(0,eZ.F8)("newWindow");break;case"onlyWhenEmpty":r=(0,eZ.F8)(s.workspace.workspaceFolders?.length?"newWindow":"currentWindow");break;default:r=[]}yield*this.openCommandSteps({subcommand:"open",repo:e.repo,worktree:i,flags:r,counter:3,confirm:"prompt"===a,openOnly:!0,overrides:{disallowBack:!0},isNewWorktree:!0,worktreeDefaultOpen:e.worktreeDefaultOpen,onWorkspaceChanging:e.onWorkspaceChanging},t)}}}*createCommandChoosePathStep(e,t,i){let r=(0,n.CO)({show:async r=>{let o=await s.window.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,defaultUri:i.pickedUri??e.uri??t.defaultUri,openLabel:i.label,title:i.title});return null==o||0===o.length?d.WL.Back:o[0]}}),o=yield r;return(0,n.wc)(r,e,o)?o:n.Lt}async *createCommandConfirmStep(e,t){let i,r=!1;null!=t.pickedSpecificFolder&&(r=!0);let o=t.pickedSpecificFolder??t.pickedRootFolder??e.uri,a=await e.repo.getCommonRepositoryUri()??e.repo.uri,u=`${(0,eg.P8)(a.path)}.worktrees`;null!=t.pickedRootFolder?i=t.pickedRootFolder:a.toString()!==o.toString()?i=(0,eX.K9)(o,a)?s.Uri.joinPath(a,"..",u):(0,eg.P8)(o.path)===u?o=s.Uri.joinPath(o,".."):s.Uri.joinPath(o,u):(i=s.Uri.joinPath(a,"..",u),r=!1);let c=(0,C.Es)((0,e0.kZ)(o),60),d=null!=e.reference?(0,es.fC)(e.reference):void 0,p=`<root>/${(0,C.Es)(d?.replace(/\\/g,"/")??"",65)}`,g=`<root>/${e.createBranch||"<new-branch-name>"}`,m=(0,es.gC)(e.reference),f=(0,es.gC)(e.reference)&&e.reference?.remote,w=en(e.flags,e.createBranch?["-b"]:[],{label:f?"Create Worktree from New Local Branch":m?"Create Worktree from Branch":t.title,description:"",detail:`Will create worktree in $(folder) ${e.createBranch?g:p}`},i),v=[];if(r)e.createBranch||v.push(en(e.flags,["--direct"],{label:f?"Create Worktree from Local Branch":m?"Create Worktree from Branch":t.title,description:"",detail:`Will create worktree directly in $(folder) ${(0,C.Es)(c,60)}`},o)),v.push(en(e.flags,["-b","--direct"],{label:f?"Create Worktree from New Local Branch":"Create Worktree from New Branch",description:"",detail:`Will create worktree directly in $(folder) ${(0,C.Es)(c,60)}`},o));else{if(e.worktreeDefaultOpen)return[w.context,w.item];v.push(w)}r||v.push((0,h.uK)(),en([],[],{label:"Change Root Folder...",description:`$(folder) ${(0,C.Es)(t.pickedRootFolder?c:`${c}/${u}`,65)}`,picked:!1},"changeRoot")),v.push(en([],[],{label:"Choose a Specific Folder...",description:"",picked:!1},"chooseFolder"));let y=(0,n.VW)((0,l.Zr)(`Confirm ${t.title} \u2022 ${e.createBranch||(0,es.M4)(e.reference,{icon:!1,label:!1})}`,e,t),v,t),b=yield y;return(0,n.fg)(y,e,b)?[b[0].context,b[0].item]:n.Lt}async *deleteCommandSteps(e,t){for(t.worktrees=await e.repo.git.worktrees()?.getWorktrees()??[],null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.uris||0===e.uris.length){t.title=e2(e.subcommand);let i=yield*(0,l.sL)(e,t,{excludeOpened:!0,filter:e=>!e.isDefault,includeStatus:!0,picked:e.uris?.map(e=>e.toString()),placeholder:"Choose worktrees to delete"});if(i===n.Lt)break;e.uris=i.map(e=>e.uri)}t.title=e2(e.subcommand);let i=yield*this.deleteCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i;let r=[];for(let i of e.uris){let o=!1,n=!1,a=e.flags.includes("--delete-branches"),l=e.flags.includes("--force"),u=t.worktrees.find(e=>e.uri.toString()===i.toString());for(;;){n=!1;try{if(l){let e;try{e=await u?.getStatus()}catch{}if(e?.hasChanges&&!o){let e={title:"Force Delete"},t={title:"Cancel",isCloseAffordance:!0};if(await s.window.showWarningMessage(`The worktree in '${i.fsPath}' has uncommitted changes.

Deleting it will cause those changes to be FOREVER LOST.
This is IRREVERSIBLE!

Are you sure you still want to delete it?`,{modal:!0},e,t)!==e)return}}await e.repo.git.worktrees()?.deleteWorktree(i,{force:l}),n=!0}catch(e){if(o=!1,ed.N$.is(e)){if(e.reason===ed.z2.DefaultWorkingTree){s.window.showErrorMessage("Cannot delete the default worktree.");break}if(e.reason===ed.z2.DirectoryNotEmpty){let e={title:"Open Folder"},t={title:"OK",isCloseAffordance:!0};await s.window.showErrorMessage(`Unable to fully clean up the delete worktree in '${i.fsPath}' because the folder is not empty.`,{modal:!0},e,t)===e&&(0,eC.mP)(i),n=!0;break}if(!l){let t={title:"Force Delete"},r={title:"Cancel",isCloseAffordance:!0};if(await s.window.showErrorMessage(e.reason===ed.z2.HasChanges?`Unable to delete worktree because there are UNCOMMITTED changes in '${i.fsPath}'.

Forcibly deleting it will cause those changes to be FOREVER LOST.
This is IRREVERSIBLE!

Would you like to forcibly delete it?`:`Unable to delete worktree in '${i.fsPath}'.

Would you like to try to forcibly delete it?`,{modal:!0},t,r)===t){l=!0,o=e.reason===ed.z2.HasChanges;continue}break}}(0,eo.qQ)(`Unable to delete worktree in '${i.fsPath}. ex=${String(e)}`)}break}n&&a&&u?.branch&&r.push((0,eJ.iw)(u?.branch))}(0,n.nH)(e),r.length&&(0,eK.b)({command:"branch",state:{subcommand:"delete",repo:e.repo,references:r}})}}*deleteCommandConfirmStep(e,t){t.title=1===e.uris.length?"Delete Worktree":"Delete Worktrees";let i=1===e.uris.length?"Delete Worktree":"Delete Worktrees",r=1===e.uris.length?"Branch":"Branches",s="";e.startingFromBranchDelete&&(s=` for ${r}`,t.title=`${t.title}${s}`);let o=1===e.uris.length?`delete worktree in $(folder) ${(0,e0.kZ)(e.uris[0])}`:`delete ${e.uris.length} worktrees`,a=1===e.uris.length?"delete the worktree and then prompt to delete the associated branch":`delete ${e.uris.length} worktrees and then prompt to delete the associated branches`,u=(0,n.VW)((0,l.Zr)(`Confirm ${t.title}`,e,t),[en(e.flags,[],{label:`${i}${s}`,detail:`Will ${o}`}),en(e.flags,["--force"],{label:`Force ${i}${s}`,description:"includes ANY UNCOMMITTED changes",detail:`Will forcibly ${o}`}),...e.startingFromBranchDelete?[]:[(0,h.uK)(),en(e.flags,["--delete-branches"],{label:`${i} & ${r}`,detail:`Will ${a}`}),en(e.flags,["--force","--delete-branches"],{label:`Force ${i} & ${r}`,description:"includes ANY UNCOMMITTED changes",detail:`Will forcibly ${a}`})]],t),c=yield u;return(0,n.fg)(u,e,c)?c[0].item:n.Lt}async *openCommandSteps(e,t){for(null==e.flags&&(e.flags=[]),this._canSkipConfirmOverride=!0;this.canStepsContinue(e);){if(e.counter<3||null==e.worktree){t.title=e2(e.subcommand),t.worktrees??=await e.repo.git.worktrees()?.getWorktrees()??[];let i=yield*(0,l.l7)(e,t,{excludeOpened:!0,includeStatus:!0,picked:e.worktree?.uri?.toString(),placeholder:"Choose worktree to open"});if(i===n.Lt)break;e.worktree=i}if(t.title=e2(e.subcommand,` \u2022 ${e.worktree.name}`),this.confirm(e.confirm)){let i=yield*this.openCommandConfirmStep(e,t);if(i===n.Lt)continue;e.flags=i}if((0,n.nH)(e),e.flags.includes("--reveal-explorer"))(0,eC.mP)(e.worktree.uri);else{let t,i=await e.repo.getCommonRepository()??e.repo;t=i.name!==e.worktree.name?`${i.name}: ${e.worktree.name}`:e.worktree.name;let r=(0,eZ.VO)(e.flags);("currentWindow"===r||"newWindow"===r)&&await e.onWorkspaceChanging?.(e.isNewWorktree),(0,e0.OH)(e.worktree.uri,{location:(0,eZ.VO)(e.flags),name:t})}}}*openCommandConfirmStep(e,t){let i=en(e.flags,["--new-window"],{label:"Open Worktree in a New Window",detail:"Will open the worktree in a new window"}),r=en(e.flags,[],{label:"Open Worktree",detail:"Will open the worktree in the current window"});if("new"===e.worktreeDefaultOpen)return i.item;if("current"===e.worktreeDefaultOpen)return r.item;let s=[r,i,en(e.flags,["--add-to-workspace"],{label:"Add Worktree to Workspace",detail:"Will add the worktree into the current workspace"})];e.openOnly||s.push((0,h.uK)(),en(e.flags,["--reveal-explorer"],{label:"Reveal in File Explorer",description:`$(folder) ${(0,C.Es)((0,e0.kZ)(e.worktree.uri),40)}`,detail:"Will open the worktree in the File Explorer"}));let o=(0,n.VW)((0,l.Zr)(e.overrides?.confirmation?.title??`Confirm ${t.title}`,e,t),s,t,void 0,{disallowBack:e.overrides?.disallowBack,placeholder:e.overrides?.confirmation?.placeholder??"Confirm Open Worktree"}),a=yield o;return(0,n.fg)(o,e,a)?a[0].item:n.Lt}async *copyChangesCommandSteps(e,t){for(;this.canStepsContinue(e);){if(t.title=e?.overrides?.title??e2(e.subcommand),e.counter<3||null==e.worktree){let i;switch(t.worktrees??=await e.repo.git.worktrees()?.getWorktrees()??[],e.changes.type){case"index":t.title=e?.overrides?.title??"Copy Staged Changes to Worktree",i="Choose a worktree to copy your staged changes to";break;case"working-tree":t.title=e?.overrides?.title??"Copy Working Changes to Worktree",i="Choose a worktree to copy your working changes to";break;default:t.title=e?.overrides?.title??"Copy Changes to Worktree",i="Choose a worktree to copy changes to"}let r=yield*(0,l.l7)(e,t,{excludeOpened:!0,includeStatus:!0,picked:e.worktree?.uri?.toString(),placeholder:i});if(r===n.Lt)break;e.worktree=r}if(!e.changes.contents||!e.changes.baseSha){let t=await e.repo.git.diff().getDiff?.("index"===e.changes.type?eN.id:eN.SU,"HEAD",{includeUntracked:"index"!==e.changes.type});if(!t?.contents){s.window.showErrorMessage("No changes to copy"),(0,n.nH)(e);break}e.changes.contents=t.contents,e.changes.baseSha=t.from}if(!(0,ep.HH)(e.changes.baseSha)){let t=await e.repo.git.refs().resolveReference(e.changes.baseSha,void 0,{force:!0});null!=t&&(e.changes.baseSha=t)}if(!this.confirm(e.confirm)||(yield*this.copyChangesCommandConfirmStep(e,t))!==n.Lt){(0,n.nH)(e);try{let t=this.container.git.patch(e.worktree.uri),i=await t?.createUnreachableCommitForPatch(e.changes.baseSha,"Copied Changes",e.changes.contents);if(null==i)return;await t?.applyUnreachableCommitForPatch(i.sha,{stash:!1}),s.window.showInformationMessage("Changes copied successfully")}catch(e){if(e instanceof p.AL)return;if(!(e instanceof ed.ol))return void s.window.showErrorMessage(`Unable to copy changes: ${e.message}`);if(e.reason===ed.a_.AppliedWithConflicts)s.window.showWarningMessage("Changes copied with conflicts");else if(e.reason===ed.a_.ApplyAbortedWouldOverwrite)return void s.window.showErrorMessage("Unable to copy changes as some local changes would be overwritten");else return void s.window.showErrorMessage(`Unable to copy changes: ${e.message}`)}yield*this.openCommandSteps({subcommand:"open",repo:e.repo,worktree:e.worktree,flags:[],counter:3,confirm:!0,openOnly:!0,overrides:{disallowBack:!0}},t)}}}async *copyChangesCommandConfirmStep(e,t){let i=await e.repo.git.diff().getDiffFiles?.(e.changes.contents),r=i?.files.length??0,s=[];switch(e.changes.type){case"index":s.push({label:"Copy Staged Changes to Worktree",detail:`Will copy the staged changes${r>0?` (${(0,C.td)("file",r)})`:""} to worktree '${e.worktree.name}'`});break;case"working-tree":s.push({label:"Copy Working Changes to Worktree",detail:`Will copy the working changes${r>0?` (${(0,C.td)("file",r)})`:""} to worktree '${e.worktree.name}'`});break;default:s.push(en([],[],{label:"Copy Changes to Worktree",detail:`Will copy the changes${r>0?` (${(0,C.td)("file",r)})`:""} to worktree '${e.worktree.name}'`}))}let o=(0,n.VW)(`Confirm ${t.title} \u2022 ${e.worktree.name}`,s,t),a=yield o;return(0,n.fg)(o,e,a)?void 0:n.Lt}};function e4(e,t,i){let r=new QuickWizardRootStep(e,t),s=r.find(t.command);return null==s?function*(){}():(r.setCommand(s,i),s.executeSteps())}let QuickWizardRootStep=class QuickWizardRootStep{constructor(e,t){this.container=e;let i=(0,et.SD)("gitlens:hasVirtualFolders",!1),r=i||(0,et.SD)("gitlens:readonly",!1)||(0,et.SD)("gitlens:untrusted",!1);if(this.items=[r?void 0:new BranchGitCommand(e,t?.command==="branch"?t:void 0),r?void 0:new CherryPickGitCommand(e,t?.command==="cherry-pick"?t:void 0),i?void 0:new CoAuthorsGitCommand(e,t?.command==="co-authors"?t:void 0),r?void 0:new FetchGitCommand(e,t?.command==="fetch"?t:void 0),new LogGitCommand(e,t?.command==="log"?t:void 0),r?void 0:new MergeGitCommand(e,t?.command==="merge"?t:void 0),r?void 0:new PullGitCommand(e,t?.command==="pull"?t:void 0),r?void 0:new PushGitCommand(e,t?.command==="push"?t:void 0),r?void 0:new RebaseGitCommand(e,t?.command==="rebase"?t:void 0),r?void 0:new RemoteGitCommand(e,t?.command==="remote"?t:void 0),r?void 0:new ResetGitCommand(e,t?.command==="reset"?t:void 0),r?void 0:new RevertGitCommand(e,t?.command==="revert"?t:void 0),new SearchGitCommand(e,t?.command==="search"||t?.command==="grep"?t:void 0),new ShowGitCommand(e,t?.command==="show"?t:void 0),i?void 0:new StashGitCommand(e,t?.command==="stash"?t:void 0),i?void 0:new StatusGitCommand(e,t?.command==="status"?t:void 0),r?void 0:new SwitchGitCommand(e,t?.command==="switch"||t?.command==="checkout"?t:void 0),r?void 0:new TagGitCommand(e,t?.command==="tag"?t:void 0),i?void 0:new WorktreeGitCommand(e,t?.command==="worktree"?t:void 0)].filter(e=>null!=e),"usage"===f.H.get("gitCommands.sortBy")){let t=e.storage.getWorkspace("gitComandPalette:usage");null!=t&&this.items.sort((e,i)=>(t[i.key]??0)-(t[e.key]??0))}this.hiddenItems=[],t?.command==="launchpad"&&this.hiddenItems.push(new LaunchpadCommand(e,t)),t?.command==="startWork"&&this.hiddenItems.push(new StartWorkCommand(e,t)),t?.command==="associateIssueWithBranch"&&this.hiddenItems.push(new AssociateIssueWithBranchCommand(e,t))}type="pick";buttons=[];ignoreFocusOut=!1;items;matchOnDescription=!0;placeholder="Choose a command";title="GitLens";hiddenItems;_command;get command(){return this._command}find(e,t=!1){if(t){let t=e.toLowerCase();return this.items.find(e=>e.isFuzzyMatch(t))??this.hiddenItems.find(e=>e.isFuzzyMatch(t))}return this.items.find(t=>t.isMatch(e))??this.hiddenItems.find(t=>t.isMatch(e))}setCommand(e,t){null!=this._command&&(this._command.picked=!1),null!=e&&(e.picked=!0,e.pickedVia=t),this._command=e,null!=e&&this.updateCommandUsage(e.key,Date.now())}async updateCommandUsage(e,t){let i=this.container.storage.getWorkspace("gitComandPalette:usage");void 0===i&&(i=Object.create(null)),i[e]=t,await this.container.storage.storeWorkspace("gitComandPalette:usage",i)}}},567:(e,t,i)=>{i.d(t,{O:()=>s,m:()=>n});let r={".":void 0,"!":"icon-status-ignored.svg","?":"icon-status-untracked.svg",A:"icon-status-added.svg",D:"icon-status-deleted.svg",M:"icon-status-modified.svg",R:"icon-status-renamed.svg",C:"icon-status-copied.svg",AA:"icon-status-conflict.svg",AU:"icon-status-conflict.svg",UA:"icon-status-conflict.svg",DD:"icon-status-conflict.svg",DU:"icon-status-conflict.svg",UD:"icon-status-conflict.svg",UU:"icon-status-conflict.svg",T:"icon-status-modified.svg",U:"icon-status-modified.svg"};function s(e){return r[e]??"icon-status-unknown.svg"}let o={".":"Unchanged","!":"Ignored","?":"Untracked",A:"Added",D:"Deleted",M:"Modified",R:"Renamed",C:"Copied",AA:"Conflict",AU:"Conflict",UA:"Conflict",DD:"Conflict",DU:"Conflict",UD:"Conflict",UU:"Conflict",T:"Modified",U:"Updated but Unmerged"};function n(e){return o[e]??"Unknown"}},600:(e,t,i)=>{i.d(t,{LI:()=>s,m2:()=>Issue});let Issue=class Issue{constructor(e,t,i,r,s,o,n,a,l,u,c,h,d,p,g,m,f,w){this.provider=e,this.id=t,this.nodeId=i,this.title=r,this.url=s,this.createdDate=o,this.updatedDate=n,this.closed=a,this.state=l,this.author=u,this.assignees=c,this.repository=h,this.closedDate=d,this.labels=p,this.commentsCount=g,this.thumbsUpCount=m,this.body=f,this.project=w}type="issue"};var r,s=((r=s||{})[r.Admin=100]="Admin",r[r.Maintain=40]="Maintain",r[r.Write=30]="Write",r[r.Triage=20]="Triage",r[r.Read=10]="Read",r[r.None=0]="None",r)},652:(e,t,i)=>{i.d(t,{f:()=>o});var r=i(9091),s=i(7864);async function o(e,t,i){let o,n=[];if(!i.commits.size)return{changes:n,range:t};let a=new Map,l=await e.git.remotes(i.repoPath).getBestRemoteWithIntegration();for(let t of i.commits.values()){let i=t.message??t.summary,r=await e.autolinks.getAutolinks(i,l);for(let[e,t]of(n.push({message:i,links:r,issues:[]}),r))a.set(e,t)}let u=await e.autolinks.getEnrichedAutolinks(a,l);if(null!=u){let e=await Promise.allSettled((0,r.x1)(u,async([e,[t]])=>{let i=await t;if(null!=i&&"issue"===i.type)return[e,i]}));o=new Map((0,r.x1)(e,e=>(0,s.Ro)(e)))}else o=new Map;for(let e of n)e.issues.push(...(0,r.Tj)(e.links,([e,t])=>{let i=o.get(e);return{id:i?.id??e,url:i?.url??t.url,title:i?.title}}));return{changes:n,range:t}}},657:(e,t,i)=>{i.r(t),i.d(t,{BitbucketApi:()=>BitbucketApi});var r=i(1398),s=i(2476),o=i(6741),n=i(2320),a=i(7019),l=i(2870),u=i(6206),c=i(4941),h=i(1003),d=i(8178),p=i(4478);let g=e=>({name:e.displayName,email:e.emailAddress,avatarUrl:e.avatarUrl??null,id:e.id.toString(),username:e.name,url:e.links.self[0].href}),m={[p.GitPullRequestReviewState.Approved]:0,[p.GitPullRequestReviewState.Commented]:1,[p.GitPullRequestReviewState.ReviewRequested]:2,[p.GitPullRequestReviewState.ChangesRequested]:3},f=e=>e&&0!==e.length?e.reduce((e,t)=>m[t.state]>m[e]?t.state:e,p.GitPullRequestReviewState.Approved):null,w=e=>{let t={OPEN:p.GitPullRequestState.Open,MERGED:p.GitPullRequestState.Merged,DECLINED:p.GitPullRequestState.Closed},i={UNAPPROVED:p.GitPullRequestReviewState.ReviewRequested,NEEDS_WORK:p.GitPullRequestReviewState.ChangesRequested,APPROVED:p.GitPullRequestReviewState.Approved},r=e.reviewers.map(e=>({reviewer:g(e.user),state:i[e.status]})),s=e.toRef.repository.links.clone.find(e=>"ssh"===e.name)?.href??null,o=e.toRef.repository.links.clone.find(e=>"https"===e.name)?.href??null;o||(o=e.toRef.repository.links.clone.find(e=>"http"===e.name)?.href??null);let n=e.fromRef.repository.links.clone.find(e=>"ssh"===e.name)?.href??null,a=e.fromRef.repository.links.clone.find(e=>"https"===e.name)?.href??null;return a||(a=e.fromRef.repository.links.clone.find(e=>"http"===e.name)?.href??null),{id:e.id.toString(),number:e.id,title:e.title,url:e.links.self[0].href,state:t[e.state],isDraft:!1,createdDate:new Date(e.createdDate),updatedDate:new Date(e.updatedDate),closedDate:e.closedDate?new Date(e.closedDate):null,mergedDate:"MERGED"===e.state&&e.closedDate?new Date(e.closedDate):null,baseRef:{name:e.toRef.displayId,oid:e.toRef.latestCommit},headRef:{name:e.fromRef.displayId,oid:e.fromRef.latestCommit},commentCount:e.properties?.commentCount,upvoteCount:null,commitCount:null,fileCount:null,additions:null,deletions:null,author:g(e.author.user),assignees:null,reviews:r,reviewDecision:f(r),repository:{id:e.toRef.repository.id.toString(),name:e.toRef.repository.name,owner:{login:e.toRef.repository.project.key},remoteInfo:o&&s?{cloneUrlHTTPS:o,cloneUrlSSH:s}:null},headRepository:{id:e.fromRef.repository.id.toString(),name:e.fromRef.repository.name,owner:{login:e.fromRef.repository.project.key},remoteInfo:a&&n?{cloneUrlHTTPS:a,cloneUrlSSH:n}:null},headCommit:null,mergeableState:p.GitPullRequestMergeableState.Unknown,permissions:null,version:e.version}};var v=i(4269),y=i(600),b=i(2356);function C(e){switch(e){case"resolved":case"invalid":case"duplicate":case"wontfix":case"closed":return"closed";default:return"opened"}}function R(e){return{avatarUrl:e.links.avatar.href,name:e.display_name,url:e.links.html.href,id:e.uuid}}function k(e,t,i){return{reviewer:R(e.user),state:e.approved?b.c7.Approved:"changes_requested"===e.state?b.c7.ChangesRequested:null!=e.participated_on?b.c7.Commented:e.user.uuid===t?.uuid&&"DECLINED"===i?b.c7.Dismissed:b.c7.ReviewRequested}}function S(e){return{owner:e.full_name.split("/")[0],repo:e.name,id:e.uuid,accessLevel:y.LI.Write}}function P(e,t){return new y.m2(t,e.id.toString(),e.id.toString(),e.title,e.links.html.href,new Date(e.created_on),new Date(e.updated_on),"opened"!==C(e.state),C(e.state),R(e.reporter),e.assignee?[R(e.assignee)]:[],S(e.repository),void 0,void 0,void 0,e.votes,e.content.html,!e.repository?.project?void 0:{id:e.repository.project.uuid,name:e.repository.project.name,resourceId:e.repository.project.uuid,resourceName:e.repository.project.name})}function A(e,t){return new b.B9(t,R(e.author),e.id.toString(),e.id.toString(),e.title,e.links.html.href,S(e.destination.repository),function(e){switch(e){case"DECLINED":case"SUPERSEDED":return"closed";case"MERGED":return"merged";default:return"opened"}}(e.state),new Date(e.created_on),new Date(e.updated_on),e.closed_by?new Date(e.updated_on):void 0,"MERGED"===e.state?new Date(e.updated_on):void 0,b.Q6.Mergeable,void 0,{base:{branch:e.destination.branch.name,sha:e.destination.commit.hash,repo:e.destination.repository.name,owner:e.destination.repository.full_name.split("/")[0],exists:!0,url:e.destination.repository.links.html.href},head:{branch:e.source.branch.name,sha:e.source.commit.hash,repo:e.source.repository.name,owner:e.source.repository.full_name.split("/")[0],exists:!0,url:e.source.repository.links.html.href},isCrossRepository:e.source.repository.uuid!==e.destination.repository.uuid},void 0,void 0,void 0,void 0,void 0,function(e){if(!e.participants?.length&&e.reviewers?.length)return b.dq.ReviewRequired;if(!e.participants)return;let t=!1,i=!1,r=!1;for(let s of e.participants)null!=s.participated_on&&(t=!0),s.approved&&(r=!0),"changes_requested"===s.state&&(i=!0);return i?b.dq.ChangesRequested:r?b.dq.Approved:t?void 0:b.dq.ReviewRequired}(e),e.participants?.filter(e=>"REVIEWER"===e.role).map(t=>k(t,e.closed_by,e.state)).filter(e=>e.state===b.c7.ReviewRequested),e.participants?.filter(e=>null!=e.participated_on).map(t=>k(t,e.closed_by,e.state)),void 0,void 0,void 0)}var I=Object.defineProperty,D=Object.getOwnPropertyDescriptor,_=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?D(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&I(t,i,o),o};let BitbucketApi=class BitbucketApi{_disposable;constructor(e){this._disposable=l.H.onDidChangeAny(e=>{(l.H.changedCore(e,["http.proxy","http.proxyStrictSSL"])||l.H.changed(e,["outputLevel","proxy"]))&&this.resetCaches()})}dispose(){this._disposable.dispose()}_proxyAgent=null;get proxyAgent(){if(!o.HZ)return null===this._proxyAgent&&(this._proxyAgent=(0,s.cQ)()),this._proxyAgent}resetCaches(){this._proxyAgent=null}async getPullRequestForBranch(e,t,i,r,s,o){let n=(0,h.dQ)(),a=await this.request(e,t,o,`repositories/${i}/${r}/pullrequests?q=source.branch.name="${s}"&fields=%2Bvalues.reviewers,%2Bvalues.participants`,{method:"GET"},n);if(a?.values?.length)return A(a.values[0],e)}async getServerPullRequestForBranch(e,t,i,r,s,o,n){let a=(0,h.dQ)(),l=await this.request(e,t,o,`projects/${i}/repos/${r}/pull-requests?at=refs/heads/${s}&direction=OUTGOING&state=ALL`,{method:"GET"},a);if(!l?.values?.length)return;let u=w(l.values[0]);return(0,v.QF)(u,n)}async getUsersIssuesForRepo(e,t,i,r,s,o){let n=(0,h.dQ)(),a=encodeURIComponent(`assignee.uuid="${i}" OR reporter.uuid="${i}"`),l=await this.request(e,t,o,`repositories/${r}/${s}/issues?q=${a}`,{method:"GET"},n);if(l?.values?.length)return l.values.map(t=>P(t,e))}async getIssue(e,t,i,r,s,o){let n=(0,h.dQ)();try{let a=await this.request(e,t,o,`repositories/${i}/${r}/issues/${s}`,{method:"GET"},n);if(a)return P(a,e);return}catch(e){c.Vy.error(e,n);return}}async getIssueOrPullRequest(e,t,i,r,s,o,n){let a=(0,h.dQ)();if(n?.type!=="issue")try{let n=await this.request(e,t,o,`repositories/${i}/${r}/pullrequests/${s}?fields=%2Bvalues.reviewers,%2Bvalues.participants`,{method:"GET"},a);if(n)return A(n,e)}catch(e){if(e.original?.status!==404)return void c.Vy.error(e,a)}if(n?.type!=="pullrequest")try{let n=await this.request(e,t,o,`repositories/${i}/${r}/issues/${s}`,{method:"GET"},a);if(n)return{id:n.id.toString(),type:"issue",nodeId:n.id.toString(),provider:e,createdDate:new Date(n.created_on),updatedDate:new Date(n.updated_on),state:C(n.state),closed:"closed"===n.state,title:n.title,url:n.links.html.href}}catch(e){c.Vy.error(e,a)}}async getServerPullRequestById(e,t,i,r,s,o,n){let a=(0,h.dQ)();try{let l=await this.request(e,t,o,`projects/${i}/repos/${r}/pull-requests/${s}`,{method:"GET"},a);if(l){let e=w(l);return(0,v.QF)(e,n)}}catch(e){if(e.original?.status!==404)return void c.Vy.error(e,a)}}async getRepositoriesForWorkspace(e,t,i,r){let s=(0,h.dQ)();try{let o=await this.request(e,t,r.baseUrl,`repositories/${i}?role=contributor&fields=%2Bvalues.parent.workspace`,{method:"GET"},s);if(o)return o.values.map(t=>({provider:e,owner:t.workspace.slug,name:t.slug,isFork:!!t.parent,parent:t.parent?{owner:t.parent.workspace.slug,name:t.parent.slug}:void 0}));return}catch(e){c.Vy.error(e,s);return}}async request(e,t,i,o,a,l,u){let h,p=`${i}/${o}`;try{let i=(0,d.u)(`[BITBUCKET] ${a?.method??"GET"} ${p}`,{log:!1}),r=this.proxyAgent;try{let i;if(null!=u){if(u.isCancellationRequested)throw new n.AL;i=new AbortController,u.onCancellationRequested(()=>i.abort())}if((h=await (0,s.Ff)(e.getIgnoreSSLErrors(),()=>(0,s.hd)(p,{headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},agent:r,signal:i?.signal,...a}))).ok)return await h.json();throw new n.QI("Bitbucket",h)}finally{i?.stop()}}catch(i){throw i instanceof n.QI||"AbortError"===i.name?this.handleRequestError(e,t,i,l):c.Vy.isDebugging&&r.window.showErrorMessage(`Bitbucket request failed: ${i.message}`),i}}handleRequestError(e,t,i,s){if("AbortError"===i.name||!(i instanceof n.QI))throw new n.AL(i);switch(i.status){case 404:case 410:case 422:throw new n.LN(i);case 401:throw new n.v3("bitbucket",n.R.Unauthorized,i);case 403:throw new n.v3("bitbucket",n.R.Forbidden,i);case 500:c.Vy.error(i,s),null!=i.response&&(e?.trackRequestException(),(0,a.wW)(`${e?.name??"Bitbucket"} failed to respond and might be experiencing issues.${null==e||"bitbucket"===e.id?" Please visit the [Bitbucket status page](https://bitbucket.status.atlassian.com/) for more information.":""}`));return;case 502:c.Vy.error(i,s);break;default:if(i.status>=400&&i.status<500)throw new n.tk(i)}c.Vy.error(i,s),c.Vy.isDebugging&&r.window.showErrorMessage(`Bitbucket request failed: ${i.response?.errors?.[0]?.message??i.message}`)}};_([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],BitbucketApi.prototype,"getPullRequestForBranch",1),_([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],BitbucketApi.prototype,"getServerPullRequestForBranch",1),_([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],BitbucketApi.prototype,"getUsersIssuesForRepo",1),_([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],BitbucketApi.prototype,"getIssue",1),_([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],BitbucketApi.prototype,"getIssueOrPullRequest",1),_([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],BitbucketApi.prototype,"getServerPullRequestById",1),_([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],BitbucketApi.prototype,"getRepositoriesForWorkspace",1)},669:(e,t,i)=>{i.d(t,{F6:()=>UriTrie,ZZ:()=>VisitedPathsTrie,m9:()=>PathTrie});var r=i(6741),s=i(9091),o=i(9686);function n(e){return 47===(e=(0,o.Fd)(e)).charCodeAt(0)&&(e=e.slice(1)),e}let UriTrie=class UriTrie{constructor(e){this.normalize=e,this.trie=new PathTrie}trie;clear(){this.trie.clear()}delete(e,t=!0){let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.delete(i,r,t)}get(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.get(t,i)}getChildren(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.getChildren(t,i)}getClosest(e,t,i){let{path:r,ignoreCase:s}=this.normalize(e);return this.trie.getClosest(r,t,i,s)}getDescendants(e,t){if(null==e)return this.trie.getDescendants();let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.getDescendants(i,t,r)}has(e){let{path:t,ignoreCase:i}=this.normalize(e);return this.trie.has(t,i)}set(e,t){let{path:i,ignoreCase:r}=this.normalize(e);return this.trie.set(i,t,r)}};let PathNode=class PathNode{constructor(e){this.path=e}value;children};let PathTrie=class PathTrie{constructor(e=n){this.normalize=e,this.root=new PathNode("")}root;clear(){this.root.children=void 0}delete(e,t,i=!0){let s,o;for(let i of(e=this.normalize(e),t=t??!r.j9,e.split("/"))){let e=(s??this.root).children?.get(t?i.toLowerCase():i);if(null==e)return!1;o=s??this.root,s=e}return!!s?.value&&(i&&a(s.value),s.value=void 0,(null==s.children||0===s.children.size)&&o?.children!=null&&(o.children.delete(t?s.path.toLowerCase():s.path),0===o.children.size&&(o.children=void 0)),!0)}get(e,t){return this.getCore(e,t)}getCore(e,t){let i;for(let s of(e=this.normalize(e),t=t??!r.j9,e.split("/"))){let e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return;i=e}return i?.value}getChildren(e,t){let i;if(e=this.normalize(e),t=t??!r.j9,e)for(let r of e.split("/")){let e=(i??this.root).children?.get(t?r.toLowerCase():r);if(null==e)return[];i=e}else i=this.root;return i?.children==null?[]:[...(0,s.x1)(i.children.values(),e=>e.value||void 0)]}getClosest(e,t,i,s){let o,n;for(let t of(e=this.normalize(e),s=s??!r.j9,e.split("/"))){o?.value&&(!i||i?.(o.value))&&(n=o);let e=(o??this.root).children?.get(s?t.toLowerCase():t);if(null==e)break;o=e}return!t&&o?.value&&(!i||i?.(o.value))?o.value:n?.value}*getDescendants(e,t,i){let s;e=e?this.normalize(e):"",i=i??!r.j9;let o="";if(e)for(let t of e.split("/")){let e=(s??this.root).children?.get(i?t.toLowerCase():t);if(null==e)return;s=e,o+=`${e.path}/`}else s=this.root;s?.children!=null&&(yield*function* e(i,r,s){for(let o of i.values()){let i=r?`${r}/${o.path}`:o.path;o.value&&(!t||t?.(o.value))&&(yield o.value),null!=o.children&&(yield*e(o.children,i,s))}}(s.children,"",o))}has(e,t){return null!=this.getCore(e,t)}set(e,t,i){e=this.normalize(e),i=i??!r.j9;let s=this.root;for(let t of e.split("/")){let e=i?t.toLowerCase():t,r=s.children?.get(e);null==r&&(null==s.children&&(s.children=new Map),r=new PathNode(t),s.children.set(e,r)),s=r}let o=null==s.value;return o||s.value===t||a(s.value),s.value=t,o}};function a(e){null!=e&&"object"==typeof e&&"dispose"in e&&"function"==typeof e.dispose&&e.dispose()}let VisitedPathNode=class VisitedPathNode{constructor(e){this.path=e}children};let VisitedPathsTrie=class VisitedPathsTrie{constructor(e=n){this.normalize=e,this.root=new VisitedPathNode("")}root;clear(){this.root.children=void 0}has(e,t){let i;for(let s of(e=this.normalize(e),t=t??!r.j9,e.split("/"))){let e=(i??this.root).children?.get(t?s.toLowerCase():s);if(null==e)return!1;i=e}return null!=i}set(e,t){e=this.normalize(e),t=t??!r.j9;let i=this.root;for(let r of e.split("/")){let e=t?r.toLowerCase():r,s=i.children?.get(e);null==s&&(null==i.children&&(i.children=new Map),s=new VisitedPathNode(r),i.children.set(e,s)),i=s}}}},711:(e,t,i)=>{i.d(t,{G5:()=>a,L9:()=>u,e2:()=>l});var r=i(1398),s=i(3911),o=i(9207),n=i(4357);async function a(e,t,i){for(;;){let o=await e.subscription.getSubscription();if(o.account?.verified===!1){let s={title:"Resend Email"},o={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${t}

You must verify your email before you can continue.`,{modal:!0},s,o)===s&&await e.subscription.resendVerification(i))continue;return!1}if(null!=o.account)break;let n={title:"Try GitLens Pro"},a={title:"Sign In"},l={title:"Cancel",isCloseAffordance:!0},u=await r.window.showWarningMessage(`${t}

Start your free ${s.kj}-day Pro trial for full access to all GitLens Pro features, or sign in.`,{modal:!0},n,a,l);if(u===a){if(await e.subscription.loginOrSignUp(!1,i))continue}else if(u===n&&await e.subscription.loginOrSignUp(!0,i))continue;return!1}return!0}async function l(e,t,i,s){for(;;){let a=(await e.subscription.getSubscription()).account;if(a?.verified===!0)break;if(s)return!1;let l=[t],u="Requires an account to continue";a?.verified===!1?(l.push((0,n.Du)(n.WL.RequiresVerification,!0),(0,o.uK)(),(0,n.Du)(n.WL.Cancel)),u="You must verify your email before you can continue"):l.push((0,n.Du)(n.WL.StartProTrial,!0),(0,n.Du)(n.WL.SignIn),(0,o.uK)(),(0,n.Du)(n.WL.Cancel));let c=await r.window.showQuickPick(l,{placeHolder:u,ignoreFocusOut:!0});if(null==c||!(c.directive===n.WL.Noop||c.directive===n.WL.RequiresVerification&&await e.subscription.resendVerification(i)||c.directive===n.WL.StartProTrial&&await e.subscription.loginOrSignUp(!0,i)||c.directive===n.WL.SignIn&&await e.subscription.loginOrSignUp(!1,i)))return!1}return!0}async function u(e,t,i,o,n){if(!await a(e,t,o))return!1;for(;!(await e.git.access(i,n)).allowed;){let i={title:"Upgrade to Pro"},n={title:"Cancel",isCloseAffordance:!0};if(!(await r.window.showWarningMessage(`${t}

Please upgrade to GitLens Pro to continue.`,{modal:!0},i,n)===i&&await e.subscription.upgrade(s.qn.Pro,o)))return!1}return!0}},745:(e,t,i)=>{i.d(t,{A3:()=>p,K9:()=>c,Sp:()=>l,Uf:()=>g,V8:()=>d,ZA:()=>h,pW:()=>u});var r=i(2101),s=i(1398),o=i(1182),n=i(9686);let a=/^([a-zA-Z][\w+.-]+):/;function l(e){if("string"==typeof e){if(!a.test(e))return(0,n.Fd)(e);e=s.Uri.parse(e,!0)}return(0,n.Fd)(e.scheme===o.xB.File?e.fsPath:e.path)}function u(e){return s.Uri.joinPath(e,"*")}function c(e,t){if("string"!=typeof e&&"string"!=typeof t&&(e.scheme!==t.scheme||e.authority!==t.authority))return!1;let i=l(t);i.startsWith("/")||(i=`${i}/`),i.endsWith("/*")?i=i.substring(0,i.length-1):i.endsWith("/")||(i=`${i}/`);let r=l(e);return r.startsWith("/")||(r=`${r}/`),r.startsWith(i)}async function h(e){try{if(((await s.workspace.fs.stat(e)).type&s.FileType.Directory)===s.FileType.Directory)return!0}catch{}return!1}function d(e,t,i){e=a.test(e)?s.Uri.parse(e,!0).path:(0,n.Fd)(e),t=a.test(t)?s.Uri.parse(t,!0).path:(0,n.Fd)(t);let r=(0,n.vO)(`${t}/`,`${e}/`,"/",i);return r>0?t.substring(r+1):t}function p(e,t){let i=(0,r.dirname)(e);if(!i||"."===i||i===t)return"";if(!t)return i;let[s]=g(i,t);return s}function g(e,t,i=!1,o){if(e=l(e),t){let i;t=a.test(t)?l(i=s.Uri.parse(t,!0)):(0,n.Fd)(t);let r=(0,n.vO)(`${t}/`,`${e}/`,"/",o);r>0?(t=e.substring(0,r),e=e.substring(r+1)):e.startsWith("/")&&(e=e.slice(1)),null!=i&&(t=i.with({path:t}).toString())}else t=(0,n.Fd)(i?(0,r.dirname)(e):""),e=i?(0,r.basename)(e):e;return[e,t]}},797:(e,t,i)=>{i.d(t,{P9:()=>y,RZ:()=>f,g6:()=>v,gF:()=>d,gw:()=>p,k1:()=>C,ld:()=>g,oU:()=>m,pr:()=>w,sP:()=>h,zu:()=>b});var r=i(1398),s=i(1182),o=i(2624),n=i(4941),a=i(9686),l=i(2141),u=i(553),c=i(4152);function h(e){if(e instanceof r.Uri){let t=e.toString();return r.window.visibleTextEditors.find(e=>e.document.uri.toString()===t)}return r.window.visibleTextEditors.find(t=>t.document===e)}async function d(e,t){let i=function(e){let t=r.window.activeTextEditor,i=e.toString();for(let e of[...null!=t?[t]:[],...r.window.visibleTextEditors])if(e.document.uri.toString()===i&&e?.viewColumn!=null)return e}(e);return null!=i?(t?.preserveFocus||await r.window.showTextDocument(i.document,{...t,viewColumn:i.viewColumn}),i):b(e,{viewColumn:r.window.activeTextEditor?.viewColumn,...t})}function p(e){return r.window.visibleTextEditors.filter(t=>t!==e&&t.document.uri.toString()===e.document.uri.toString())}function g(e){return null!=e&&"object"==typeof e&&!!("document"in e&&(0,u.v2)(e.document))&&"viewColumn"in e&&"selections"in e}function m(e){return(0,c.G3)(e.document.uri)}async function f(e,t,i){try{if(i?.viewColumn===r.ViewColumn.Beside){let e=(i?.sourceViewColumn??r.window.tabGroups.activeTabGroup?.viewColumn??0)+1;e>r.ViewColumn.Nine&&(e=r.ViewColumn.One),r.window.tabGroups.all.some(t=>t.viewColumn===e)?await (0,l.S4)("workbench.action.focusRightGroup"):await (0,l.S4)("workbench.action.newGroupRight")}await (0,l.S4)("vscode.changes",t,e.map(e=>[e.uri,e.lhs,e.rhs]))}catch(e){n.Vy.error(e,"openChangesEditor")}}async function w(e,t,i,r){try{await (0,l.S4)("vscode.diff",e,t,i,r)}catch(e){n.Vy.error(e,"openDiffEditor")}}async function v(e,t){try{if(t?.viewColumn===r.ViewColumn.Beside){let e=(t?.sourceViewColumn??r.window.tabGroups.activeTabGroup?.viewColumn??0)+1;e>r.ViewColumn.Nine&&(e=r.ViewColumn.One),r.window.tabGroups.all.some(t=>t.viewColumn===e)?await (0,l.S4)("workbench.action.focusRightGroup"):await (0,l.S4)("workbench.action.newGroupRight")}await (0,l.S4)("_open.mergeEditor",e)}catch(e){n.Vy.error(e,"openMergeEditor")}}async function y(e){await (0,l.S4)("workbench.action.openSettings",e)}async function b(e,t){let i,u;null!=t&&({background:i,throwOnError:u,...t}=t);try{if((0,o.t5)(e)&&(e=e.documentUri()),i||e.scheme===s.xB.GitLens&&s.fk[(0,a.LC)(e.fsPath)])return void await (0,l.S4)("vscode.open",e,{background:i,...t});let n=await r.workspace.openTextDocument(e);return await r.window.showTextDocument(n,{preserveFocus:!1,preview:!0,viewColumn:r.ViewColumn.Active,...t})}catch(t){if((t?.toString()??"").includes("File seems to be binary and cannot be opened as text"))return void await (0,l.S4)("vscode.open",e);if(u)throw t;n.Vy.error(t,"openEditor");return}}function C(e,t){let i=new Map(e.map(e=>[e.toString(),e]));for(let e of r.window.visibleTextEditors)e?.viewColumn!=null&&i.delete(e.document.uri.toString());for(let e of(t={background:!0,preview:!1,...t},i.values()))(0,l.S4)("vscode.open",e,t)}},811:(e,t,i)=>{function r(e,t){return e===t||null!=e&&null!=t&&e.toString()===t.toString()}i.d(t,{k:()=>r})},875:(e,t,i)=>{i.d(t,{GI:()=>a,IZ:()=>n});var r=i(1678),s=i(4941),o=i(7864);async function n(e,t,i,o,n){let{key:a,encoded:u}=await l(e,t);if(!n?.cancellation?.isCancellationRequested)try{let s=u?JSON.parse(u):[];if(s.some(e=>e.entityId===i.nodeId))return;s.push((0,r.cG)(i,o)),await e.git.config(t.repoPath).setConfig?.(a,JSON.stringify(s))}catch(e){s.Vy.error(e,"addAssociatedIssueToBranch")}}async function a(e,t,i){let n,{encoded:a}=await l(e,t);if(i?.cancellation?.isCancellationRequested)return{value:void 0,paused:!1};if(null!=a){try{n=(0,r.MA)(a)}catch(e){return s.Vy.error(e,"getAssociatedIssuesForBranch"),{value:void 0,paused:!1}}if(null!=n)return(0,o.wW)((async()=>(await Promise.allSettled((n??[]).map(t=>(0,r.aM)(e,t)))).map(e=>(0,o.Ro)(e)).filter(e=>null!=e))(),i?.cancellation,i?.timeout)}return{value:void 0,paused:!1}}async function l(e,t){let i=`branch.${t.name}.gk-associated-issues`,r=await e.git.config(t.repoPath).getConfig?.(i);return{key:i,encoded:r}}},887:(e,t,i)=>{i.d(t,{p:()=>m});var r=i(3583),s=i(4123),o=i(2624),n=i(7019),a=i(2141),l=i(5231),u=i(4941),c=i(9442),h=i(7193),d=i(7945),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor;let m=class extends c.dY{constructor(e){super(["gitlens.revealCommitInView","gitlens.showQuickCommitDetails"]),this.container=e}static createMarkdownCommandLink(e,t){return(0,l.J)("gitlens.showQuickCommitDetails","string"==typeof e?{sha:e,repoPath:t}:e)}preExecute(e,t){return"gitlens.revealCommitInView"===e.command&&((t={...t}).revealInView=!0),"viewItem"===e.type&&((t={...t}).sha=e.node.uri.sha,(0,d.j7)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let a,l;if(i?.commit==null)if(i?.repoPath!=null&&null!=i.sha)l=i.repoPath,a=o.nk.fromRepoPath(l);else{if(null==(t=(0,h.q)(t,e)))return;l=(a=await o.nk.fromUri(t)).repoPath}else null==i.sha&&(i.sha=i.commit.sha),a=i.commit.getGitUri(),l=i.commit.repoPath,null==t&&(t=i.commit.file?.uri);if(null==(i={...i}).sha){if(null==e)return;let t=e.selection.active.line;if(t<0)return;try{let e=await this.container.git.getBlameForLine(a,t);if(null==e)return void(0,n.gD)("Unable to show commit");if(e.commit.isUncommitted)return void(0,n.CR)("Unable to show commit");i.sha=e.commit.sha,l=e.commit.repoPath,i.commit=e.commit}catch(e){u.Vy.error(e,"ShowQuickCommitCommand",`getBlameForLine(${t})`),(0,n.qQ)("Unable to show commit");return}}try{if((null==i.commit||null!=i.commit.file)&&(null!=i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),null==i.commit&&(i.repoLog=void 0)),null==i.repoLog&&(i.commit=await this.container.git.commits(l).getCommit(i.sha))),null==i.commit)return void(0,n.pW)("Unable to show commit");if(i.revealInView)return void await (0,s._c)(i.commit,{select:!0,focus:!0,expand:!0});await (0,r.b)({command:"show",state:{repo:l,reference:i.commit}})}catch(e){u.Vy.error(e,"ShowQuickCommitCommand"),(0,n.qQ)("Unable to show commit")}}};m=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o),o})([(0,a.G5)()],m)},903:(e,t,i)=>{i.r(t),i.d(t,{JiraIntegration:()=>JiraIntegration});var r=i(1849),s=i(9091),o=i(4941),n=i(8832),a=i(4269);let l=a.Mt[r.tp.Jira],u=Object.freeze({id:l.id,scopes:l.scopes});let JiraIntegration=class JiraIntegration extends n.On{authProvider=u;id=r.tp.Jira;key=this.id;name="Jira";get domain(){return l.domain}get apiBaseUrl(){return"https://api.atlassian.com"}_autolinks;async autolinks(){if(!(this.maybeConnected??await this.isConnected())||null==this._session||null==this._organizations||null==this._projects)return[];let e=this._autolinks?.get(this._session.accessToken);if(null!=e)return e;let t=[],i=this._organizations.get(this._session.accessToken);if(null!=i)for(let e of i){let i=this._projects.get(`${this._session.accessToken}:${e.id}`);if(null!=i)for(let r of i){let i=`${r.key}-`;t.push({prefix:i,url:`${e.url}/browse/${i}<num>`,alphanumeric:!1,ignoreCase:!1,title:`Open Issue ${i}<num> on ${e.name}`,type:"issue",description:`${e.name} Issue ${i}<num>`,descriptor:{...e}})}}return this._autolinks??=new Map,this._autolinks.set(this._session.accessToken,t),t}async getProviderAccountForResource({accessToken:e},t){let i=await this.getProvidersApi(),r=await i.getCurrentUserForResource(this.id,t.id,{accessToken:e});if(null!=r)return(0,a.tf)(r,this)}_organizations;async getProviderResourcesForUser({accessToken:e},t=!1){if(this._organizations??=new Map,null==this._organizations.get(e)||t){let t=await this.getProvidersApi(),i=await t.getJiraResourcesForCurrentUser({accessToken:e});this._organizations.set(e,null!=i?i.map(e=>({...e,key:e.id})):void 0)}return this._organizations.get(e)}_projects;async getProviderProjectsForResources({accessToken:e},t,i=!1){this._projects??=new Map;let r=[];if(i)r=t;else for(let i of t){let t=`${e}:${i.id}`;null==this._projects.get(t)&&r.push(i)}if(r.length>0){let t=await this.getProvidersApi(),i=await t.getJiraProjectsForResources(r.map(e=>e.id),{accessToken:e});for(let t of r){let r=i?.filter(e=>e.resourceId===t.id);null!=r&&this._projects.set(`${e}:${t.id}`,r.map(e=>({...e})))}}return t.reduce((t,i)=>{let r=this._projects.get(`${e}:${i.id}`);return null!=r&&t.push(...r),t},[])}async getProviderIssuesForProject({accessToken:e},t,i){let r,o=await this.getProvidersApi(),n=async(i,r)=>{let s=await o.getIssuesForProject(this.id,t.name,t.resourceId,{authorLogin:r===a.mN.Author?i:void 0,assigneeLogins:r===a.mN.Assignee?[i]:void 0,mentionLogin:r===a.mN.Mention?i:void 0,accessToken:e});return s?.map(e=>(0,a.Y9)(e,this)).filter(e=>void 0!==e)};if(i?.user!=null&&i.filters.length>0){let e=Promise.allSettled(i.filters.map(e=>n(i.user,e)));r=[...(0,s.Bq)((0,s.x1)(await e,e=>"fulfilled"===e.status&&null!=e.value?e.value:void 0))];let t=new Map;for(let e of r)t.has(e.id)||t.set(e.id,e);return[...t.values()]}return r=await o.getIssuesForProject(this.id,t.name,t.resourceId,{accessToken:e}),r?.map(e=>(0,a.Y9)(e,this)).filter(e=>void 0!==e)}async searchProviderMyIssues(e,t,i){let r=t??await this.getProviderResourcesForUser(e);if(!r)return;let s=await this.getProvidersApi(),n=[];for(let t of r)try{let i,r=!1,o=0;do{let l=await s.getIssuesForResourceForCurrentUser(this.id,t.id,{accessToken:e.accessToken,cursor:i});o+=1,r=l.paging?.more??!1,i=l.paging?.cursor;let u=l.values.map(e=>(0,a.Y9)(e,this)).filter(e=>null!=e);u.length>0&&n.push(...u)}while(o<10&&r)}catch(e){o.Vy.error(e,"searchProviderMyIssues")}return n}async getProviderIssueOrPullRequest(e,t,i){let r=await this.getProvidersApi(),s=await r.getIssue(this.id,{resourceId:t.id,number:i},{accessToken:e.accessToken});return null!=s?(0,a.Y9)(s,this):void 0}async getProviderIssue(e,t,i){let r=await this.getProvidersApi(),s=await r.getIssue(this.id,{resourceId:t.id,number:i},{accessToken:e.accessToken}),o=null!=s?(0,a.Y9)(s,this):void 0;return null!=o?{...o,type:"issue"}:void 0}async providerOnConnect(){if(this._autolinks=void 0,null==this._session)return;let e=this.container.storage.get(`jira:${this._session.accessToken}:organizations`),t=this.container.storage.get(`jira:${this._session.accessToken}:projects`),i=e?.data?.map(e=>({...e})),r=t?.data?.map(e=>({...e}));for(let s of(null==e&&(i=await this.getProviderResourcesForUser(this._session,!0),await this.container.storage.deleteWithPrefix("jira"),await this.container.storage.store(`jira:${this._session.accessToken}:organizations`,{v:1,timestamp:Date.now(),data:i})),this._organizations??=new Map,this._organizations.set(this._session.accessToken,i),null==t&&i?.length&&(r=await this.getProviderProjectsForResources(this._session,i),await this.container.storage.store(`jira:${this._session.accessToken}:projects`,{v:1,timestamp:Date.now(),data:r})),this._projects??=new Map,r??[])){let e=`${this._session.accessToken}:${s.resourceId}`,t=this._projects.get(e);null==t?this._projects.set(e,[s]):t.some(e=>e.id===s.id)||t.push(s)}}providerOnDisconnect(){this._organizations=void 0,this._projects=void 0,this._autolinks=void 0}}},928:e=>{var t=Object.defineProperty,i=Object.getOwnPropertyDescriptor,r=Object.getOwnPropertyNames,s=Object.prototype.hasOwnProperty,o=(e,i)=>{for(var r in i)t(e,r,{get:i[r],enumerable:!0})},n={};o(n,{EntityIdentifierUtils:()=>a}),e.exports=((e,o,n,a)=>{if(o&&"object"==typeof o||"function"==typeof o)for(let l of r(o))s.call(e,l)||l===n||t(e,l,{get:()=>o[l],enumerable:!(a=i(o,l))||a.enumerable});return e})(t({},"__esModule",{value:!0}),n);var a={};o(a,{decode:()=>R,decodeV0:()=>k,encode:()=>C,validate:()=>b});var l=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.entityId)throw Error("Missing required fields for Azure DevOps issue uniqueId");let t=[];return t.push("azure"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Azure DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:null,entityId:e[6]}}},u=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.repoId||!e.entityId)throw Error("Missing required fields for Azure DevOps pull request uniqueId");let t=[];return t.push("azure"),t.push("pr"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<8)throw Error("Invalid Azure DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:e[6],entityId:e[7]}}},c=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},h=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},d=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},p=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},g=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},m=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},f=class{constructor(){}validate(e){if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.projectId||!e.entityId)throw Error("Missing required fields for Jira issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"jira"==e.provider?(t.push(""),t.push(e.resourceId)):(t.push(e.domain),t.push("")),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Jira issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:""==e[4]?null:e[4],accountOrOrgId:null,organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},w=class{constructor(){}validate(e){if(!e.accountOrOrgId)throw Error("accountOrOrgId is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.accountOrOrgId||!e.projectId||!e.entityId)throw Error("Missing required fields for Trello issue uniqueId");let t=[];return t.push("trello"),t.push("issue"),t.push("1"),t.push(""),t.push(e.accountOrOrgId),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Trello issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:e[4],organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},v=(e,t)=>{if("issue"!==t&&"pr"!==t)throw Error("unknown entityType");switch(e){case"azure":return"pr"===t?new u:new l;case"bitbucket":case"bitbucketServer":return"pr"===t?new h:new c;case"github":case"githubEnterprise":return"pr"===t?new p:new d;case"gitlab":case"gitlabSelfHosted":return"pr"===t?new m:new g;case"jira":case"jiraServer":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new f;case"trello":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new w;default:throw Error("unknown provider")}},y=e=>{if(!e.entityType)throw Error("entityType is required");if(!e.provider)throw Error("provider is required");if(!e.entityId)throw Error("entityID is required")},b=e=>{if("0"===e.version)return void y(e);v(e.provider,e.entityType).validate(e)},C=e=>v(e.provider,e.entityType).encode(e),R=e=>{let t=JSON.parse(e);if(!t||!t.length)throw Error("invalid issue unique id");return v(t[0],t[1]).decode(t)},k=(e,t,i)=>{if(!i)throw Error("entityID is required");try{let r=JSON.parse(i);if(!r||!r.length)throw Error("Invalid pull request uniqueId");let s=[e,t,"0",...r];return v(e,t).decode(s)}catch{return{provider:e,entityType:t,version:"0",domain:"",resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:i}}}},968:(e,t,i)=>{i.d(t,{j:()=>ContributorsNode});var r=i(1398),s=i(9013),o=i(2870),n=i(6206),a=i(3263),l=i(5818),u=i(1667),c=i(1453),h=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};let ContributorsNode=class ContributorsNode extends a.l{constructor(e,t,i,r,s){super("contributors",e,t,i),this.parent=i,this.repo=r,this.options=s,this.updateContext({repository:r}),this._uniqueId=(0,l.pF)(this.type,this.context)}splatted=!0;get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=this.options?.ref,t=null==e&&(this.options?.all??o.H.get("views.contributors.showAllBranches"));if(null==e&&!t)try{let t=await this.view.container.git.branches(this.uri.repoPath).getBranch();t?.upstream?.name==null||t.upstream.missing||(e="@{u}")}catch{}let i=this.options?.stats??o.H.get("views.contributors.showStatistics"),r=await this.repo.git.contributors().getContributors(e,{all:t,merges:this.options?.showMergeCommits,stats:i});if(0===r.length)return[new u.S2(this.view,this,"No contributors could be found.")];(0,s.tB)(r);let n=this.view.container.vsls.active?await this.getPresenceMap(r):void 0;this.children=r.map(i=>new c.W(this.uri,this.view,this,i,{all:t,ref:e,presence:n,showMergeCommits:this.options?.showMergeCommits}))}return this.children}getTreeItem(){this.splatted=!1;let e=new r.TreeItem("Contributors",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=l.U0.Contributors,this.options?.icon!==!1&&(e.iconPath=new r.ThemeIcon("organization")),e}updateAvatar(e){if(null!=this.children)for(let t of this.children)t.contributor.email===e&&t.triggerChange()}refresh(){super.refresh(!0)}async getPresenceMap(e){let t=e.find(e=>e.current)?.email;if(null!=t)return this.view.container.vsls.getContactsPresence([t])}};p([(0,n.Yz)()],ContributorsNode.prototype,"refresh",1),p([(0,n.Yz)({args:!1})],ContributorsNode.prototype,"getPresenceMap",1)},988:(e,t,i)=>{i.d(t,{GutterHeatmapBlameAnnotationProvider:()=>GutterHeatmapBlameAnnotationProvider});var r=i(1398),s=i(6206),o=i(1003),n=i(8178),a=i(7984),l=i(1573),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor,h=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),d=e=>{throw TypeError(e)},p=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&d("Object expected"),i&&(r=t[h("asyncDispose")]),void 0===r&&(r=t[h("dispose")],i&&(s=r)),"function"!=typeof r&&d("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},g=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let GutterHeatmapBlameAnnotationProvider=class GutterHeatmapBlameAnnotationProvider extends l.z{constructor(e,t,i,r){super(e,t,"heatmap",i,r)}async onProvideAnnotation(e,t){var i=[];try{let e,s=(0,o.dQ)(),l=await this.getBlame(t?.recompute);if(null==l)return!1;let u=p(i,(0,n.u)(s)),c=new Map,h=this.getComputedHeatmap(l);for(let t of l.lines){let i=t.line-1;e=l.commits.get(t.sha),null!=e&&(0,a.n0)(e.date,h,new r.Range(i,0,i,0),c)}return u?.restart({suffix:" to compute heatmap annotations"}),c.size&&(this.setDecorations([...c.values()]),u?.stop({suffix:" to apply all heatmap annotations"})),!0}catch(e){var s=e,l=!0}finally{g(i,s,l)}}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o)})([(0,s.Rm)()],GutterHeatmapBlameAnnotationProvider.prototype,"onProvideAnnotation",1)},1003:(e,t,i)=>{i.d(t,{$e:()=>r,DL:()=>c,TT:()=>h,aE:()=>o,bP:()=>u,dQ:()=>a,jr:()=>l,rL:()=>n});let r=(0,i(6045).N)(),s=new Map;function o(e){s.delete(e)}function n(e,t){return null==t?`[${e.toString(16).padStart(13)}]`:`[${t.toString(16).padStart(5)} \u2192 ${e.toString(16).padStart(5)}]`}function a(){return s.get(r.current)}function l(e,t){if(null!=t&&"boolean"!=typeof t)return{scopeId:t.scopeId,prevScopeId:t.prevScopeId,prefix:`${t.prefix}${e}`};let i=t?r.current:void 0,s=r.next();return{scopeId:s,prevScopeId:i,prefix:`${n(s,i)} ${e}`}}function u(e,t){let i=l(e,t);return s.set(i.scopeId,i),{...i,[Symbol.dispose]:()=>o(i.scopeId)}}function c(e,t){return t={prevScopeId:r.current,...t},s.set(e,t),t}function h(e,t,i){null!=e&&(e.exitDetails=t,null!=i&&(e.exitFailed=i))}},1016:(e,t,i)=>{i.d(t,{DN:()=>ViewBase,lm:()=>w});var r=i(1398),s=i(6529),o=i(2141),n=i(2870),a=i(6206),l=i(3361),u=i(5539),c=i(4941),h=i(1003),d=i(7864),p=i(5818),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};let ViewBase=class ViewBase{constructor(e,t,i,s,o){if(this.container=e,this.type=t,this.name=i,this.trackingFeature=s,this.grouped=o,this.description=this.getViewDescription(),this.disposables.push(this._onDidChangeNodesCheckedState,this._onDidChangeNodeCollapsibleState,this._onDidChangeSelection,this._onDidChangeTreeData,this._onDidChangeVisibility,this._onDidInitialize,(0,l.Oo)(e.onReady)(this.onReady,this)),this.container.debugging||n.H.get("debug")){let e=function(e,t,i){null==e.tooltip&&(e.tooltip=new r.MarkdownString(null!=e.label&&"string"!=typeof e.label?e.label.label:e.label??"")),"string"==typeof e.tooltip?e.tooltip=`${e.tooltip}

---
context: ${e.contextValue}
node: ${t.toString()}${null!=i?`
parent: ${i.toString()}`:""}`:e.tooltip.appendMarkdown(`

---

context: \`${e.contextValue}\`\\
node: \`${t.toString()}\`${null!=i?`\\
parent: \`${i.toString()}\``:""}`)},t=this.getTreeItem;this.getTreeItem=async function(i){let r=await t.apply(this,[i]);return null==i.resolveTreeItem&&e(r,i,i.getParent()),r};let i=this.resolveTreeItem;this.resolveTreeItem=async function(t,r,s){return e(t=await i.apply(this,[t,r,s]),r,r.getParent()),t}}this.disposables.push(...this.registerCommands())}is(e){return this.type===e}isAny(...e){return e.includes(this.type)}_disposed=!1;get disposed(){return this._disposed}get id(){return`gitlens.views.${this.type}`}_onDidChangeSelection=new r.EventEmitter;get onDidChangeSelection(){return this._onDidChangeSelection.event}_onDidChangeNodesCheckedState=new r.EventEmitter;get onDidChangeNodesCheckedState(){return this._onDidChangeNodesCheckedState.event}_onDidChangeNodeCollapsibleState=new r.EventEmitter;get onDidChangeNodeCollapsibleState(){return this._onDidChangeNodeCollapsibleState.event}_onDidChangeTreeData=new r.EventEmitter;get onDidChangeTreeData(){return this._onDidChangeTreeData.event}_onDidChangeVisibility=new r.EventEmitter;get onDidChangeVisibility(){return this._onDidChangeVisibility.event}_onDidInitialize=new r.EventEmitter;disposables=[];root;tree;initialized=!1;_lastKnownLimits=new Map;dispose(){this._disposed=!0,this._nodeState?.dispose(),this._nodeState=void 0,this.root?.dispose(),r.Disposable.from(...this.disposables).dispose()}onReady(){this.initialize({canSelectMany:this.canSelectMany,showCollapseAll:!this.grouped&&this.showCollapseAll}),queueMicrotask(()=>this.onConfigurationChanged())}get canReveal(){return!0}get canSelectMany(){return!1}_groupedLabel;get groupedLabel(){return this.grouped?this._groupedLabel:void 0}set groupedLabel(e){this._groupedLabel=e}_nodeState;get nodeState(){return null==this._nodeState&&(this._nodeState=new ViewNodeState),this._nodeState}get showCollapseAll(){return!0}filterConfigurationChanged(e){return!!n.H.changed(e,"views")&&!!(n.H.changed(e,`views.${this.configKey}`)||n.H.changed(e,s.md.map(e=>`views.${e}`)))}get badge(){return this.tree?.badge}set badge(e){null!=this.tree&&(this.tree.badge=e)}_title;get title(){return this._title}set title(e){this._title=e,null!=this.tree&&(this.tree.title=e)}_description;get description(){return this._description}set description(e){this._description=e,null!=this.tree&&(this.tree.description=e)}_message;get message(){return this._message}set message(e){this._message=e,null!=this.tree&&(this.tree.message=e)}getQualifiedCommand(e){return`gitlens.views.${this.type}.${e}`}onConfigurationChanged(e){null!=e&&null!=this.root&&this.refresh(!0)}initialize(e){this.tree=r.window.createTreeView(this.grouped?"gitlens.views.scm.grouped":this.id,{...e,treeDataProvider:this}),this.disposables.push(n.H.onDidChange(e=>{this.filterConfigurationChanged(e)&&(this._config=void 0,this.onConfigurationChanged(e))},this),this.tree,this.tree.onDidChangeSelection((0,u.s)(this.onSelectionChanged,250),this),this.tree.onDidChangeVisibility((0,u.s)(this.onVisibilityChanged,250),this),this.tree.onDidChangeCheckboxState(this.onCheckboxStateChanged,this),this.tree.onDidCollapseElement(this.onElementCollapsed,this),this.tree.onDidExpandElement(this.onElementExpanded,this)),null!=this._title?this.tree.title=this._title:this._title=this.tree.title,null!=this._description&&(this.tree.description=this._description),null!=this._message&&(this.tree.message=this._message)}ensureRoot(e=!1){return(null==this.root||e)&&(this.root?.dispose(),this.root=this.getRoot()),this.root}getChildren(e){if(null!=e)return e.getChildren();let t=this.ensureRoot().getChildren();return this.initialized||((0,d.yL)(t)?t.then(()=>{this.initialized||(this.initialized=!0,setTimeout(()=>this._onDidInitialize.fire(),1))}):(this.initialized=!0,setTimeout(()=>this._onDidInitialize.fire(),1))),t}getParent(e){return e.getParent()}getTreeItem(e){return e.getTreeItem()}getViewDescription(e){return`${this.grouped?`${this.name.toLocaleLowerCase()} `:""}${null!=e?`(${e})`:""}`||void 0}resolveTreeItem(e,t,i){return t.resolveTreeItem?.(e,i)??e}onElementCollapsed(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Collapsed})}onElementExpanded(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Expanded})}onCheckboxStateChanged(e){try{for(let[t,i]of e.items){if(null==t.id)throw Error("Id is required for checkboxes");t.storeState("checked",i,!0)}}finally{this._onDidChangeNodesCheckedState.fire(e)}}onSelectionChanged(e){this._onDidChangeSelection.fire(e),this.notifySelections()}onVisibilityChanged(e){e.visible&&this.container.usage.track(`${this.trackingFeature}:shown`).catch(),this._onDidChangeVisibility.fire(e),e.visible&&this.notifySelections()}notifySelections(){let e=this.selection?.[0];null!=e&&((e.is("commit")||e.is("stash")||e.is("file-commit")||e.is("commit-file")||e.is("stash-file"))&&this.container.events.fire("commit:selected",{commit:e.commit,interaction:"passive",preserveFocus:!0,preserveVisibility:!0},{source:this.id}),(e.is("file-commit")||e.is("commit-file")||e.is("stash-file"))&&this.container.events.fire("file:selected",{uri:e.uri,preserveFocus:!0,preserveVisibility:!0},{source:this.id}))}get activeSelection(){if(null!=this.tree&&null!=this.root)return this.tree.selection[0]}get selection(){return null==this.tree||null==this.root?[]:this.tree.selection}get visible(){return this.tree?.visible??!1}async findNode(e,t){let i=(0,h.dQ)();async function r(){try{return await this.findNodeCoreBFS(e,this.ensureRoot(),t?.allowPaging??!1,t?.canTraverse,t?.maxDepth??2,t?.token)}catch(e){c.Vy.error(e,i);return}}return this.initialized?r.call(this):(this.show({preserveFocus:!0}),new Promise(e=>(0,l.Oo)(this._onDidInitialize.event)(()=>e(r.call(this)),this)))}async findNodeCoreBFS(e,t,i,r,s,o){let a,l,u=[t,void 0],c=n.H.get("advanced.maxListItems"),h=0;for(;u.length>1&&!o?.isCancellationRequested;){if(null==(a=u.shift())){if(h++,u.push(void 0),h>s)break;continue}if(e(a))return a;if(null!=r){let e=r(a);if((0,d.yL)(e)){if(!await e)continue}else if(!e)continue}if(0!==(l=await a.getChildren()).length){for(;null!=a&&!(0,p.DQ)(a);)a=await a.getSplattedChild?.();if(null!=a&&(0,p.DQ)(a)){let t=l.find(e);if(null!=t)return t;if(i&&a.hasMore)for(;;){if(o?.isCancellationRequested)return;if(await this.loadMoreNodeChildren(a,c),null!=(t=(await (0,d.nZ)(Promise.resolve(a.getChildren()),6e4,o,{onDidCancel:e=>e([])})).find(e)))return t;if(!a.hasMore)break}continue}u.push(...l)}}}async ensureRevealNode(e,t){let i=[],r=e;for(;null!=r;)i.push(r),r=r.getParent();for(let e of(i.length>1&&i.pop(),i.reverse()))try{await this.reveal(e,t)}catch{}}async refresh(e=!1){e&&this.nodeState.reset(),await this.root?.refresh?.(e),this.triggerNodeChange()}async refreshNode(e,t=!1,i=!1){let r=await e.refresh?.(t);(i||!0!==r)&&this.triggerNodeChange(e)}async reveal(e,t){if(null!=this.tree)try{await this.tree.reveal(e,t)}catch(e){c.Vy.error(e)}}async show(e){let t=(0,h.dQ)();try{let t=`${this.grouped?"gitlens.views.scm.grouped":this.id}.focus`;this.initialized||((0,o.S4)(t,e),await new Promise(e=>{(0,l.Oo)(this._onDidInitialize.event)(()=>e(),this)})),await (0,o.S4)(t,e)}catch(e){c.Vy.error(e,t)}}getNodeLastKnownLimit(e){return this._lastKnownLimits.get(e.id)}async loadMoreNodeChildren(e,t,i,r){null!=i&&await this.reveal(i,{select:!0}),await e.loadMore(t,r),this._lastKnownLimits.set(e.id,e.limit)}resetNodeLastKnownLimit(e){this._lastKnownLimits.delete(e.id)}triggerNodeChange(e){this._onDidChangeTreeData.fire(null!=e&&e!==this.root?e:void 0)}_config;get config(){if(null==this._config){let e={...n.H.get("views")};for(let t of s.ZD)delete e[t];this._config={...e,...n.H.get("views")[this.configKey]}}return this._config}};f([(0,a.Rm)({args:{0:"<function>",1:e=>`options=${JSON.stringify({...e,canTraverse:void 0,token:void 0})}`}})],ViewBase.prototype,"findNode",1),f([(0,a.Yz)()],ViewBase.prototype,"refresh",1),f([(0,a.Yz)({args:{0:e=>e.toString()}})],ViewBase.prototype,"refreshNode",1),f([(0,a.Rm)({args:{0:e=>e.toString()}})],ViewBase.prototype,"reveal",1),f([(0,a.Rm)()],ViewBase.prototype,"show",1),f([(0,a.Yz)({args:{0:e=>e.toString(),2:e=>e?.toString()}})],ViewBase.prototype,"loadMoreNodeChildren",1),f([(0,a.Yz)({args:{0:e=>e.toString()},singleLine:!0})],ViewBase.prototype,"resetNodeLastKnownLimit",1),f([(0,a.Yz)({args:{0:e=>e?.toString()}})],ViewBase.prototype,"triggerNodeChange",1);let ViewNodeState=class ViewNodeState{_store;_stickyStore;dispose(){this.reset(),this._stickyStore?.clear(),this._stickyStore=void 0}reset(){this._store?.clear(),this._store=void 0}delete(e,t){for(let i of[this._store,this._stickyStore])if(null!=i)for(let[r,s]of i)r.startsWith(e)&&(s.delete(t),0===s.size&&i.delete(r))}deleteState(e,t){if(null==t)this._store?.delete(e),this._stickyStore?.delete(e);else for(let i of[this._store,this._stickyStore]){if(null==i)continue;let r=i.get(e);null!=r&&(r.delete(t),0===r.size&&i.delete(e))}}get(e,t){let i=new Map;for(let r of[this._store,this._stickyStore])if(null!=r)for(let[s,o]of r)s.startsWith(e)&&o.has(t)&&i.set(s,o.get(t));return i}getState(e,t){return this._stickyStore?.get(e)?.get(t)??this._store?.get(e)?.get(t)}storeState(e,t,i,r){let s;r?(null==this._stickyStore&&(this._stickyStore=new Map),s=this._stickyStore):(null==this._store&&(this._store=new Map),s=this._store);let o=s.get(e);null!=o?o.set(t,i):s.set(e,new Map([[t,i]]))}};function w(e,t){if(!e?.length)return;let i=t?.length?e.filter(e=>!t.includes(e)):[...e];if(i.length)if(i.length>1e3)setTimeout(()=>{for(let e of i)e.dispose()},500);else for(let e of i)e.dispose()}},1017:(e,t,i)=>{i.d(t,{$:()=>m,Cf:()=>h,HZ:()=>b,NK:()=>f,U3:()=>c,VZ:()=>p,aN:()=>C,rq:()=>v,sE:()=>g,uW:()=>y,vk:()=>l,yI:()=>w,zB:()=>d});var r,s,o,n,a,l=((r=l||{}).Branch="b",r.Command="command",r.Commit="c",r.Comparison="compare",r.Draft="drafts",r.File="f",r.Repository="r",r.Tag="t",r.Workspace="workspace",r),u=((s=u||{}).CloudPatches="cloud-patches",s.Graph="graph",s.Home="home",s.Inspect="inspect",s.Launchpad="launchpad",s.Walkthrough="walkthrough",s.Worktrees="worktrees",s);function c(e){return Object.values(u).includes(e)}let h=new Map([["cloud-patches","gitlens.showDraftsView"],["graph","gitlens.showGraph"],["home","gitlens.showHomeView"],["inspect","gitlens.showCommitDetailsView"],["launchpad","gitlens.showLaunchpad"],["walkthrough","gitlens.getStarted"],["worktrees","gitlens.showWorktreesView"]]);var d=((o=d||{}).DeleteBranch="delete-branch",o.Switch="switch",o.SwitchToPullRequest="switch-to-pr",o.SwitchToPullRequestWorktree="switch-to-pr-worktree",o.SwitchToAndSuggestPullRequest="switch-to-and-suggest-pr",o);let p=["drafts","workspace"],g=[];function m(e){switch(e){case"b":return"Branch";case"command":return"Command";case"c":return"Commit";case"compare":return"Comparison";case"drafts":return"Cloud Patch";case"f":return"File";case"r":return"Repository";case"t":return"Tag";case"workspace":return"Workspace";default:return"Unknown"}}function f(e){switch(e){case"branch":return"b";case"revision":return"c";case"tag":return"t";default:return"r"}}function w(e){let[,t,i,r,s,...o]=e.path.split("/");if("link"!==t)return;let n=new URLSearchParams(e.query);switch(i){case"r":{let e,t,i,a,l=n.get("url")??void 0;null!=l&&(l=decodeURIComponent(l));let u=n.get("path")??void 0;if(null!=u&&(u=decodeURIComponent(u)),!l&&!u)return;let c=n.get("action")??void 0;if(null==s)return{type:"r",mainId:r,remoteUrl:l,repoPath:u};if(null==o||0===o.length)return;let h=o.join("/");if("compare"===s){let r=h.split(/(\.\.\.|\.\.)/);if(3!==r.length)return;e=r[0],t=r[2],null!=(i=n.get("prRepoUrl")??void 0)&&(i=decodeURIComponent(i))}else if("f"===s){a=h;let i=n.get("ref")??void 0;null!=i&&(i=decodeURIComponent(i)),e=i;let r=n.get("lines")??void 0;null!=r&&(r=decodeURIComponent(r)),t=r}else e=h;return{type:s,mainId:r,remoteUrl:l,repoPath:u,filePath:a,targetId:e,secondaryTargetId:t,secondaryRemoteUrl:i,action:c,params:n,prId:n.get("prId")??void 0}}case"drafts":{if(null==r||r.match(/^v\d+$/))return;let e=n.get("patch")??void 0;return null!=e&&(e=decodeURIComponent(e)),{type:"drafts",targetId:r,secondaryTargetId:e,params:n}}case"workspace":return{type:"workspace",mainId:r,params:n};case"command":return{type:"command",mainId:r,params:n};default:return}}var v=((n=v||{})[n.Idle=0]="Idle",n[n.AccountCheck=1]="AccountCheck",n[n.PlanCheck=2]="PlanCheck",n[n.TypeMatch=3]="TypeMatch",n[n.RepoMatch=4]="RepoMatch",n[n.CloneOrAddRepo=5]="CloneOrAddRepo",n[n.AddedRepoMatch=6]="AddedRepoMatch",n[n.RemoteMatch=7]="RemoteMatch",n[n.AddRemote=8]="AddRemote",n[n.TargetMatch=9]="TargetMatch",n[n.Fetch=10]="Fetch",n[n.FetchedTargetMatch=11]="FetchedTargetMatch",n[n.MaybeOpenRepo=12]="MaybeOpenRepo",n[n.RepoOpening=13]="RepoOpening",n[n.EnsureRemoteMatch=14]="EnsureRemoteMatch",n[n.GoToTarget=15]="GoToTarget",n[n.OpenGraph=16]="OpenGraph",n[n.OpenComparison=17]="OpenComparison",n[n.OpenDraft=18]="OpenDraft",n[n.OpenWorkspace=19]="OpenWorkspace",n[n.OpenFile=20]="OpenFile",n[n.OpenInspect=21]="OpenInspect",n[n.SwitchToRef=22]="SwitchToRef",n[n.RunCommand=23]="RunCommand",n[n.OpenAllPrChanges=24]="OpenAllPrChanges",n[n.DeleteBranch=25]="DeleteBranch",n),y=((a=y||{})[a.AccountCheckPassed=0]="AccountCheckPassed",a[a.DeepLinkEventFired=1]="DeepLinkEventFired",a[a.DeepLinkCancelled=2]="DeepLinkCancelled",a[a.DeepLinkResolved=3]="DeepLinkResolved",a[a.DeepLinkStored=4]="DeepLinkStored",a[a.DeepLinkErrored=5]="DeepLinkErrored",a[a.LinkIsCommandType=6]="LinkIsCommandType",a[a.LinkIsRepoType=7]="LinkIsRepoType",a[a.LinkIsDraftType=8]="LinkIsDraftType",a[a.LinkIsWorkspaceType=9]="LinkIsWorkspaceType",a[a.PlanCheckPassed=10]="PlanCheckPassed",a[a.RepoMatched=11]="RepoMatched",a[a.RepoMatchedInLocalMapping=12]="RepoMatchedInLocalMapping",a[a.RepoMatchFailed=13]="RepoMatchFailed",a[a.RepoAdded=14]="RepoAdded",a[a.RemoteMatched=15]="RemoteMatched",a[a.RemoteMatchFailed=16]="RemoteMatchFailed",a[a.RemoteMatchUnneeded=17]="RemoteMatchUnneeded",a[a.RemoteAdded=18]="RemoteAdded",a[a.TargetMatched=19]="TargetMatched",a[a.TargetMatchFailed=20]="TargetMatchFailed",a[a.TargetFetched=21]="TargetFetched",a[a.RepoOpened=22]="RepoOpened",a[a.RepoOpening=23]="RepoOpening",a[a.OpenGraph=24]="OpenGraph",a[a.OpenComparison=25]="OpenComparison",a[a.OpenFile=26]="OpenFile",a[a.OpenInspect=27]="OpenInspect",a[a.OpenSwitch=28]="OpenSwitch",a[a.OpenAllPrChanges=29]="OpenAllPrChanges",a[a.DeleteBranch=30]="DeleteBranch",a);let b={0:{1:1,2:0},1:{0:2,5:0,2:0},2:{10:3,5:0,2:0},3:{5:0,2:0,6:23,7:4,8:18,9:19},4:{5:0,2:0,11:7,12:5,13:5},5:{14:6,5:0,2:0},6:{11:7,5:0,2:0},7:{5:0,2:0,15:9,16:8,17:9},8:{18:9,5:0,2:0},9:{5:0,2:0,19:12,20:10},10:{21:11,5:0,2:0},11:{19:12,5:0,2:0},12:{22:14,23:13,4:0,5:0,2:0},13:{22:14,5:0,2:0},14:{5:0,2:0,17:15,15:15},15:{24:16,26:20,28:22,25:17,30:25,5:0,2:0},16:{3:0,5:0,2:0},17:{3:0,5:0,2:0},18:{3:0,5:0,2:0},19:{3:0,5:0,2:0},20:{3:0,5:0,2:0},21:{29:24,3:0,5:0,2:0},24:{3:0,5:0,2:0},22:{27:21,3:0,5:0,2:0},23:{3:0,5:0,2:0},25:{3:0,5:0,2:0}},C={0:{message:"Done.",increment:100},1:{message:"Checking account...",increment:1},2:{message:"Checking plan...",increment:2},3:{message:"Matching link type...",increment:5},4:{message:"Finding a matching repository...",increment:10},5:{message:"Adding repository...",increment:20},6:{message:"Finding a matching repository...",increment:25},7:{message:"Finding a matching remote...",increment:30},8:{message:"Adding remote...",increment:40},9:{message:"finding a matching target...",increment:50},10:{message:"Fetching...",increment:60},11:{message:"Finding a matching target...",increment:65},12:{message:"Opening repository...",increment:70},13:{message:"Opening repository...",increment:75},15:{message:"Opening target...",increment:80},16:{message:"Opening graph...",increment:90},17:{message:"Opening comparison...",increment:90},18:{message:"Opening cloud patch...",increment:90},19:{message:"Opening workspace...",increment:90},20:{message:"Opening file...",increment:90},21:{message:"Opening inspect...",increment:90},22:{message:"Switching to ref...",increment:90},23:{message:"Running command...",increment:90}}},1090:(e,t,i)=>{i.r(t),i.d(t,{BitbucketAuthenticationProvider:()=>BitbucketAuthenticationProvider,BitbucketServerAuthenticationProvider:()=>BitbucketServerAuthenticationProvider});var r=i(1849),s=i(8576);let BitbucketAuthenticationProvider=class BitbucketAuthenticationProvider extends s.DP{get authProviderId(){return r.Q7.Bitbucket}};let BitbucketServerAuthenticationProvider=class BitbucketServerAuthenticationProvider extends s.DP{get authProviderId(){return r.PY.BitbucketServer}}},1176:(e,t,i)=>{i.d(t,{B0:()=>a,UB:()=>l,wJ:()=>AnnotationProviderBase});var r=i(1398),s=i(4283),o=i(4941),n=i(7864);function a(e){return`${e?.document.uri.toString()}|${e?.viewColumn??0}`}function l(e){let t=(0,s.ek)(e);return`${t?.toString()}|${e.group.viewColumn}`}let AnnotationProviderBase=class AnnotationProviderBase{constructor(e,t,i,s,o){this.container=e,this.onDidChangeStatus=t,this.annotationType=i,this.trackedDocument=o,this.editor=s,this.disposable=r.Disposable.from(r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}decorations;disposable;_computing;dispose(){this.clear(),this.disposable.dispose()}_annotationContext;get annotationContext(){return this._annotationContext}set annotationContext(e){this._annotationContext=e}_correlationKey;get correlationKey(){return this._correlationKey}_editor;get editor(){return this._editor}set editor(e){this._editor=e,this._correlationKey=a(e)}_status;get status(){return this._status}setStatus(e,t){this.status!==e&&(this._status=e,this.onDidChangeStatus({editor:t,status:e}))}onTextEditorSelectionChanged(e){this.editor.document===e.textEditor.document&&this.selection?.({line:e.selections[0].active.line})}canReuse(e){return!0}async clear(){this._computing?.pending&&await this._computing.promise;let e=this.decorations;if(this.decorations=void 0,this.annotationContext=void 0,this.setStatus(void 0,this.editor),null!=this.editor&&e?.length)for(let t of e)try{this.editor.setDecorations(t.decorationType,[]),t.dispose&&t.decorationType.dispose()}catch{}}async provideAnnotation(e,t){this._computing=(0,n.v6)(),this.setStatus("computing",this.editor);try{if(this.annotationContext=e,await this.onProvideAnnotation(e,t))return this.setStatus("computed",this.editor),await this.selection?.(t?.restoring?{line:this.editor.selection.active.line}:e?.selection),this._computing.fulfill(),!0}catch(e){o.Vy.error(e)}return this.setStatus(void 0,this.editor),this._computing.fulfill(),!1}refresh(e){if(null==this.editor||!this.decorations?.length)return;let t=[];for(let i of this.decorations){let r=e.get(i.decorationType);null!==r&&(null!=r&&(i.decorationType=r),t.push(i))}this.setDecorations(this.decorations)}restore(e,t){if(!1!==this.editor._disposed){if(this.editor=e,t||null==this.decorations)return void this.provideAnnotation(this.annotationContext,{recompute:!0,restoring:!0});if(this.setStatus("computing",this.editor),this.decorations?.length)for(let e of this.decorations)this.editor.setDecorations(e.decorationType,e.rangesOrOptions);this.setStatus("computed",this.editor)}}setDecorations(e){if(this.decorations?.length){if(!e?.length)return void this.clear();for(let t of this.decorations.filter(t=>!e.some(e=>e.decorationType.key===t.decorationType.key)))try{this.editor.setDecorations(t.decorationType,[]),t.dispose&&t.decorationType.dispose()}catch{}}if(this.decorations=e,e?.length)for(let t of e)this.editor.setDecorations(t.decorationType,t.rangesOrOptions)}}},1182:(e,t,i)=>{i.d(t,{DS:()=>v,EO:()=>d,HP:()=>g,MV:()=>f,Od:()=>r,WZ:()=>o,fk:()=>p,lD:()=>n,s7:()=>h,tM:()=>a,uR:()=>s,xB:()=>m});let r="gitlens",s=80,o="ᴘʀᴇᴠɪᴇᴡ",n="ᴘʀᴏ",a="ᴾᴿᴼ";var l,u,c,h=((l=h||{})[l.Hash=35]="Hash",l[l.Slash=47]="Slash",l[l.Digit0=48]="Digit0",l[l.Digit1=49]="Digit1",l[l.Digit2=50]="Digit2",l[l.Digit3=51]="Digit3",l[l.Digit4=52]="Digit4",l[l.Digit5=53]="Digit5",l[l.Digit6=54]="Digit6",l[l.Digit7=55]="Digit7",l[l.Digit8=56]="Digit8",l[l.Digit9=57]="Digit9",l[l.Backslash=92]="Backslash",l[l.A=65]="A",l[l.B=66]="B",l[l.C=67]="C",l[l.D=68]="D",l[l.E=69]="E",l[l.F=70]="F",l[l.Z=90]="Z",l[l.a=97]="a",l[l.b=98]="b",l[l.c=99]="c",l[l.d=100]="d",l[l.e=101]="e",l[l.f=102]="f",l[l.z=122]="z",l),d=((u=d||{}).AngleBracketLeftHeavy="❰",u.AngleBracketRightHeavy="❱",u.ArrowBack="↩",u.ArrowDown="↓",u.ArrowDownUp="⇵",u.ArrowDropRight="⤷",u.ArrowHeadRight="➤",u.ArrowLeft="←",u.ArrowLeftDouble="⇐",u.ArrowLeftRight="↔",u.ArrowLeftRightDouble="⇔",u.ArrowLeftRightDoubleStrike="⇎",u.ArrowLeftRightLong="⟷",u.ArrowRight="→",u.ArrowRightDouble="⇒",u.ArrowRightHollow="⇨",u.ArrowUp="↑",u.ArrowUpDown="⇅",u.ArrowUpRight="↗",u.ArrowsHalfLeftRight="⇋",u.ArrowsHalfRightLeft="⇌",u.ArrowsLeftRight="⇆",u.ArrowsRightLeft="⇄",u.Asterisk="∗",u.Bullseye="◎",u.Check="✔",u.Dash="—",u.Dot="•",u.Ellipsis="…",u.EnDash="–",u.Envelope="✉",u.EqualsTriple="≡",u.Flag="⚑",u.FlagHollow="⚐",u.MiddleEllipsis="⋯",u.MuchLessThan="≪",u.MuchGreaterThan="≫",u.Pencil="✎",u.Space=" ",u.SpaceThin=" ",u.SpaceThinnest=" ",u.SquareWithBottomShadow="❏",u.SquareWithTopShadow="❐",u.Warning="⚠",u.ZeroWidthSpace="​",u);let p=Object.freeze({".png":"image/png",".gif":"image/gif",".jpg":"image/jpeg",".jpeg":"image/jpeg",".jpe":"image/jpeg",".webp":"image/webp",".tif":"image/tiff",".tiff":"image/tiff",".bmp":"image/bmp"}),g=Object.freeze(["left","alt+left","ctrl+left","right","alt+right","ctrl+right","alt+,","alt+.","alt+enter","ctrl+enter","escape"]);var m=((c=m||{}).File="file",c.Git="git",c.GitHub="github",c.GitLens="gitlens",c.PRs="pr",c.Remote="vscode-remote",c.Vsls="vsls",c.VslsScc="vsls-scc",c.Virtual="vscode-vfs",c);let f=Object.freeze(new Set(["file","git","gitlens","pr","vscode-remote","vsls","vsls-scc","vscode-vfs","github"])),w="source=gitlens&product=gitlens&utm_source=gitlens-extension&utm_medium=in-app-links",v=Object.freeze({codeSuggest:`https://gitkraken.com/solutions/code-suggest?${w}`,cloudPatches:`https://gitkraken.com/solutions/cloud-patches?${w}`,graph:`https://gitkraken.com/solutions/commit-graph?${w}`,launchpad:`https://gitkraken.com/solutions/launchpad?${w}`,platform:`https://gitkraken.com/devex?${w}`,pricing:`https://gitkraken.com/gitlens/pricing?${w}`,proFeatures:`https://gitkraken.com/gitlens/pro-features?${w}`,security:`https://help.gitkraken.com/gitlens/security?${w}`,workspaces:`https://gitkraken.com/solutions/workspaces?${w}`,cli:`https://gitkraken.com/cli?${w}`,browserExtension:`https://gitkraken.com/browser-extension?${w}`,desktop:`https://gitkraken.com/git-client?${w}`,githubIssues:`https://github.com/gitkraken/vscode-gitlens/issues/?${w}`,githubDiscussions:`https://github.com/gitkraken/vscode-gitlens/discussions/?${w}`,helpCenter:`https://help.gitkraken.com/gitlens/gitlens-start-here/?${w}`,helpCenterHome:`https://help.gitkraken.com/gitlens/home-view/?${w}`,releaseNotes:`https://help.gitkraken.com/gitlens/gitlens-release-notes-current/?${w}`,acceleratePrReviews:`https://help.gitkraken.com/gitlens/gitlens-start-here/?${w}#accelerate-pr-reviews`,communityVsPro:`https://help.gitkraken.com/gitlens/gitlens-community-vs-gitlens-pro/?${w}`,homeView:`https://help.gitkraken.com/gitlens/home-view/?${w}&utm_campaign=walkthrough`,interactiveCodeHistory:`https://help.gitkraken.com/gitlens/gitlens-start-here/?${w}#interactive-code-history`,startIntegrations:`https://help.gitkraken.com/gitlens/gitlens-start-here/?${w}#improve-workflows-with-integrations`,streamlineCollaboration:`https://help.gitkraken.com/gitlens/gitlens-start-here/?${w}#streamline-collaboration`})},1251:(e,t,i)=>{let r=i(6990),s=/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/y,o=/[\x00-\x1F\x7F-\x9F]{1,1000}/y,n=/(?:\p{Emoji_Modifier_Base}\p{Emoji_Modifier}?|\p{Emoji_Presentation}|\p{Emoji}\uFE0F)(?:\u200d(?:\p{Emoji_Modifier_Base}\p{Emoji_Modifier}?|\p{Emoji_Presentation}|\p{Emoji}\uFE0F))*/yu,a=/[\x20-\x7E\xA0-\xFF]{1,1000}/y,l=/\p{M}+/gu,u={limit:1/0,ellipsis:""},c=(e,t={},i={})=>{let h=t.limit??1/0,d=t.ellipsis??"",p=t?.ellipsisWidth??(d?c(d,u,i).width:0),g=i.ansiWidth??0,m=i.controlWidth??0,f=i.ambiguousWidth??1,w=i.emojiWidth??2,v=i.fullWidthWidth??2,y=i.regularWidth??1,b=i.wideWidth??2,C=0,R=0,k=e.length,S=0,P=!1,A=k,I=Math.max(0,h-p),D=0,_=0,$=0,T=0;e:for(;;){if(_>D||R>=k&&R>C){for(let t of(S=0,(e.slice(D,_)||e.slice(C,R)).replaceAll(l,""))){let e=t.codePointAt(0)||0;if($+(T=(0,r.isFullWidth)(e)?v:(0,r.isWide)(e)?b:f!==y&&(0,r.isAmbiguous)(e)?f:y)>I&&(A=Math.min(A,Math.max(D,C)+S)),$+T>h){P=!0;break e}S+=t.length,$+=T}D=_=0}if(R>=k)break;if(a.lastIndex=R,a.test(e)){if($+(T=(S=a.lastIndex-R)*y)>I&&(A=Math.min(A,R+Math.floor((I-$)/y))),$+T>h){P=!0;break}$+=T,D=C,_=R,R=C=a.lastIndex;continue}if(s.lastIndex=R,s.test(e)){if($+g>I&&(A=Math.min(A,R)),$+g>h){P=!0;break}$+=g,D=C,_=R,R=C=s.lastIndex;continue}if(o.lastIndex=R,o.test(e)){if($+(T=(S=o.lastIndex-R)*m)>I&&(A=Math.min(A,R+Math.floor((I-$)/m))),$+T>h){P=!0;break}$+=T,D=C,_=R,R=C=o.lastIndex;continue}if(n.lastIndex=R,n.test(e)){if($+w>I&&(A=Math.min(A,R)),$+w>h){P=!0;break}$+=w,D=C,_=R,R=C=n.lastIndex;continue}R+=1}return{width:P?I:$,index:P?A:k,truncated:P,ellipsed:P&&h>=p}};t.A=c},1288:(e,t,i)=>{i.d(t,{NZ:()=>f,m7:()=>m,nA:()=>w});var r,s=i(1398),o=i(9679),n=i(7308),a=i(2099),l=i(8282),u=i(4123),c=i(2112),h=i(7660),d=i(4692),p=i(4357),g=i(3227),m=((r=m||{})[r.Branches=1]="Branches",r[r.Tags=2]="Tags",r[r.WorkingTree=4]="WorkingTree",r[r.HEAD=8]="HEAD",r[r.BranchesAndTags=3]="BranchesAndTags",r[r.All=15]="All",r);async function f(e,t,i,r){let s=await w(e,t,i,r);return s?.value}async function w(e,t,i,r){let g,m,f=s.window.createQuickPick();f.ignoreFocusOut=r?.ignoreFocusOut??(0,d.dW)(),f.title=t,f.placeholder=r?.allowRevisions!=null&&!1!==r.allowRevisions?`${i} (or enter a revision using #)`:i,f.matchOnDescription=!0,r?.allowBack&&(f.buttons=[s.QuickInputButtons.Back]);let w=[];if(r?.keyboard!=null){let{keyboard:e}=r;(g=a.m.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==f.activeItems.length){let[i]=f.activeItems;if(null!=i){let r=f.ignoreFocusOut;f.ignoreFocusOut=!0,await e.onDidPressKey(t,i),f.ignoreFocusOut=r}}}}])))).start(),w.push(g)}let y=new s.CancellationTokenSource,b=v(e,r);r?.autoPick&&(b=b.then(e=>(e.length<=1&&(m={value:e[0]?.item},y.cancel()),e))),f.busy=!0,f.show();let C=(0,n.e2)(a.m.instance.git.getRepository(e),{buttons:[o.yi],ranges:r?.allowRevisions&&"boolean"!=typeof r.allowRevisions?r.allowRevisions.ranges:void 0});if(f.items=await b,r?.picked!=null){let e=f.items.find(e=>e.ref===r.picked);null!=e&&(f.activeItems=[e])}f.busy=!1;try{let e=await new Promise(e=>{w.push(y.token.onCancellationRequested(()=>f.hide()),f.onDidHide(()=>e({value:void 0})),f.onDidAccept(()=>{0!==f.activeItems.length&&e({value:f.activeItems[0]?.item})}),f.onDidChangeValue(async e=>{null!=g&&(0!==e.length?g.pause(["left","ctrl+left","right","ctrl+right"]):g.resume()),r?.allowRevisions&&!await C(f,e)&&(f.items=await b)}),f.onDidTriggerItemButton(({button:e,item:{item:t}})=>{e===o.yi&&((0,h.gC)(t)?(0,l._c)(t,{select:!0,expand:!0}):(0,h.A1)(t)?(0,c._c)(t,{select:!0,expand:!0}):(0,h.bv)(t)&&(0,u.JX)(t,{pin:!1,preserveFocus:!0}))}),f.onDidTriggerButton(t=>{t===s.QuickInputButtons.Back&&e({directive:p.WL.Back})}))});if(e?.directive!=null)return e;return e?.value==null&&null!=m?m:e}finally{f.dispose(),w.forEach(e=>void e.dispose())}}async function v(e,t){let i=t?.include??3,r=await (0,n.Qj)(a.m.instance.git.getRepository(e),i&&1?["branches","tags"]:i&&1?["branches"]:i&&1?["tags"]:[],{buttons:[o.yi],filter:t?.filter,picked:t?.picked,sort:t?.sort??{branches:{current:!1},tags:{}}}),s=t?.picked;if(s){let e=r.findIndex(e=>e.ref===s);-1!==e&&r.unshift(...r.splice(e,1))}return 8&i&&r.unshift((0,g.vS)("HEAD",e,void 0,{icon:!0})),4&i&&r.unshift((0,g.vS)("",e,void 0,{icon:!0})),t?.exclude?.length?r.filter(e=>!t.exclude?.includes(e.ref)):r}},1308:(e,t,i)=>{i.r(t),i.d(t,{GitLabCloudAuthenticationProvider:()=>GitLabCloudAuthenticationProvider,GitLabLocalAuthenticationProvider:()=>GitLabLocalAuthenticationProvider,GitLabSelfHostedCloudAuthenticationProvider:()=>GitLabSelfHostedCloudAuthenticationProvider});var r=i(1398),s=i(1849),o=i(8576);let GitLabLocalAuthenticationProvider=class GitLabLocalAuthenticationProvider extends o.RH{constructor(e,t,i,r){super(e,t,i),this.authProviderId=r}async createSession(e){let t,i=r.window.createInputBox();i.ignoreFocusOut=!0;let s=[];try{let o={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the GitLab Access Tokens Page"};t=await new Promise(t=>{s.push(i.onDidHide(()=>t(void 0)),i.onDidChangeValue(()=>i.validationMessage=void 0),i.onDidAccept(()=>{let e=i.value.trim();if(!e){i.validationMessage="A personal access token is required";return}t(e)}),i.onDidTriggerButton(t=>{t===o&&r.env.openExternal(r.Uri.parse(`https://${e.domain}/-/profile/personal_access_tokens`))})),i.password=!0,i.title=`GitLab Authentication  \u2022 ${e.domain}`,i.placeholder=`Requires ${e.scopes.join(", ")} scopes`,i.prompt=`Paste your [GitLab Personal Access Token](https://${e.domain}/-/user_settings/personal_access_tokens?name=GitLens+Access+token&scopes=${e.scopes.join(",")} "Get your GitLab Access Token")`,i.buttons=[o],i.show()})}finally{i.dispose(),s.forEach(e=>void e.dispose())}if(t)return{id:this.configuredIntegrationService.getSessionId(e),accessToken:t,scopes:e?.scopes??[],account:{id:"",label:""},cloud:!1,domain:e.domain}}};let GitLabSelfHostedCloudAuthenticationProvider=class GitLabSelfHostedCloudAuthenticationProvider extends o.DP{get authProviderId(){return s.PY.CloudGitLabSelfHosted}};let GitLabCloudAuthenticationProvider=class GitLabCloudAuthenticationProvider extends o.DP{get authProviderId(){return s.Q7.GitLab}}},1350:(e,t,i)=>{i.d(t,{IT:()=>c,Q:()=>l,U8:()=>n,Xn:()=>p,b9:()=>d,eB:()=>h,jn:()=>a});var r=i(1849),s=i(4256),o=i(4808);function n(e){return{provider:e.provider?{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon}:void 0,id:e.id,index:e.index,prefix:e.prefix,url:e.url,alphanumeric:e.alphanumeric,ignoreCase:e.ignoreCase,title:e.title,type:e.type,description:e.description,descriptor:e.descriptor}}let a=[r.tp.Jira];function l(e){return!("prefix"in e)&&!("url"in e)}function u(e){return"prefix"in e&&null!=e.prefix&&"url"in e&&null!=e.url}function c(e,t){let i=e.id?e.id:e.alphanumeric?"\\w+":"\\d+",r=!e.id&&e.ignoreCase?"gi":"g";"markdown"===t?e.messageMarkdownRegex??=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,o.$f)((0,o.yz)((0,s.FV)(e.prefix)))}(${i}))\\b`,r):"html"===t?e.messageHtmlRegex??=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,o.$f)((0,o.yz)(e.prefix))}(${i}))\\b`,r):e.messageRegex??=RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,o.$f)(e.prefix)}(${i}))\\b`,r)}let h=/<num>/g;function d(e,t){let i,r,s=new Map;for(let[o,n]of t)for(let t of n){if(!u(t)||t.referenceType&&"commit"!==t.referenceType){l(t)&&t.parse(e,s);continue}for(c(t,"plaintext");i=t.messageRegex.exec(e);)[,,,r]=i,s.set(r,{provider:o,id:r,index:i.index,prefix:t.prefix,url:t.url?.replace(h,r),alphanumeric:t.alphanumeric,ignoreCase:t.ignoreCase,title:t.title?.replace(h,r),type:t.type,description:t.description?.replace(h,r),descriptor:t.descriptor})}return s}function p(e,t){let i,r,s=new Map;for(let[o,n]of t)for(let t of n){if(!u(t)||"pullrequest"===t.type||t.referenceType&&"branch"!==t.referenceType)continue;t.branchNameRegex??=RegExp(`(^|\\-|_|\\.|\\/)(?<prefix>${t.prefix})(?<issueKeyNumber>${t.alphanumeric?"\\w":"\\d"}+)(?=$|\\-|_|\\.|\\/)`,"gi");let n=e.matchAll(t.branchNameRegex);do{if(i=n.next(),!i.value?.groups)break;r=i?.value?.groups.issueKeyNumber;let e=i.value.index,a=t.url?.replace(h,r),l=s.get(a)?.index;null!=l&&(e=Math.min(e,l)),s.set(a,{...t,provider:o,id:r,index:e,url:a,title:t.title?.replace(h,r),description:t.description?.replace(h,r),descriptor:t.descriptor})}while(!i.done)}return new Map([...s.entries()].sort((e,t)=>{var i,r;return i=e[1],0===(r=t[1]).index?1:0===i.index?-1:r.prefix.length-i.prefix.length||r.id.length-i.id.length||(null!=r.index&&null!=i.index?-(r.index-i.index):0)}))}},1383:(e,t,i)=>{i.d(t,{P:()=>RepositoryFolderNode});var r=i(1398),s=i(1182),o=i(8219),n=i(3526),a=i(9181),l=i(9388),u=i(6206),c=i(3361),h=i(9686),d=i(4808),p=i(6266),g=i(5818),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o};let RepositoryFolderNode=class RepositoryFolderNode extends p.Y{constructor(e,t,i,r,s,o){super("repo-folder",e,t,i),this.parent=i,this.repo=r,this.options=o,this.updateContext({repository:this.repo}),this._uniqueId=(0,g.pF)(this.type,this.context),this.splatted=s}splatted=!0;_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}dispose(){super.dispose(),this.child=void 0}get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}async getTreeItem(){this.splatted=!1;let e=await this.repo.git.branches().getBranch(),t=!!e?.upstream?.state.ahead,i=!!e?.upstream?.state.behind,o=t||i||this.repo.starred||this.view.container.git.isRepositoryForEditor(this.repo),l=this.repo.formattedName??this.uri.repoPath??"";if(this.options?.showBranchAndLastFetched&&null!=e){let t=`: ${(0,h.P8)(e.name)}`,i=`: ${e.name}`;l.endsWith(t)?l=l.substring(0,l.length-t.length)+i:l.endsWith(i)||(l+=i)}let u=new r.TreeItem(l,o?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);if(u.contextValue=`${g.U0.RepositoryFolder}${this.repo.starred?"+starred":""}`,t&&(u.contextValue+="+ahead"),i&&(u.contextValue+="+behind"),"commits"===this.view.type&&this.view.state.filterCommits.get(this.repo.id)?.length&&(u.contextValue+="+filtered"),null!=e&&this.options?.showBranchAndLastFetched){let t,i=await this.repo.getLastFetched()??0,o=e.getTrackingStatus();if(o&&(u.description=o,i&&(u.description+=(0,d.eV)(s.EO.Dot,1,1))),i&&(u.description=`${u.description??""}Last fetched ${(0,n.V)(i)}`),null!=e.upstream){let i=(0,a.zF)(await this.view.container.git.remotes(e.repoPath).getRemotesWithProviders());t=i?.length?i[0].name:void 0}else{let i=await e.getRemote();t=i?.provider?.name}u.tooltip=new r.MarkdownString(`${this.repo.formattedName??this.uri.repoPath??""}${i?`${(0,d.eV)(s.EO.Dash,2,2)}Last fetched ${(0,n.V)(i,!1)}`:""}${this.repo.formattedName?`
${this.uri.repoPath}`:""}

Current branch $(git-branch) ${e.name}${null!=e.upstream?` is ${e.getTrackingStatus({empty:e.upstream.missing?`missing upstream $(git-branch) ${e.upstream.name}`:`up to date with $(git-branch) ${e.upstream.name}${t?` on ${t}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${e.upstream.name}${t?` on ${t}`:""}`})}`:`hasn't been published to ${t??"a remote"}`}`,!0)}else u.tooltip=this.repo.formattedName?`${this.repo.formattedName}
${this.uri.repoPath}`:this.uri.repoPath??"";return u}async getSplattedChild(){return null==this.child&&await this.getChildren(),this.child}async refresh(e=!1){super.refresh(e),await this.child?.triggerChange(e,!1,this),await this.ensureSubscription()}async star(){await this.repo.star()}async unstar(){await this.repo.unstar()}subscribe(){return(0,c.HC)(this.repo.onDidChange,this.onRepositoryChanged,this)}etag(){return this.repo.etag}onRepositoryChanged(e){if(e.changed(o.Z_.Closed,o.Ti.Any)){this.dispose(),this.parent?.triggerChange(!0);return}if(e.changed(o.Z_.Opened,o.Ti.Any)||e.changed(o.Z_.Starred,o.Ti.Any))return void this.parent?.triggerChange(!0);this.changed(e)&&(!this.loaded||this.repo.orderByLastFetched?this.parent??this:this).triggerChange(!0)}};w([(0,l.G)(),(0,u.Yz)()],RepositoryFolderNode.prototype,"refresh",1),w([(0,u.Rm)()],RepositoryFolderNode.prototype,"star",1),w([(0,u.Rm)()],RepositoryFolderNode.prototype,"unstar",1),w([(0,u.Yz)()],RepositoryFolderNode.prototype,"subscribe",1),w([(0,u.Yz)({args:{0:e=>e.toString()}})],RepositoryFolderNode.prototype,"onRepositoryChanged",1)},1396:(e,t,i)=>{i.d(t,{N:()=>MergeConflictCurrentChangesNode});var r=i(1398),s=i(1182),o=i(2624),n=i(7660),a=i(2141),l=i(2870),u=i(5818),c=i(4484);let MergeConflictCurrentChangesNode=class MergeConflictCurrentChangesNode extends u.eu{constructor(e,t,i,r){super("conflict-current-changes",o.nk.fromFile(r,i.repoPath,"HEAD"),e,t),this.parent=t,this.status=i,this.file=r}_commit;async getCommit(){return this._commit??=this.view.container.git.commits(this.status.repoPath).getCommit("HEAD"),this._commit}getChildren(){return[]}async getTreeItem(){let e=await this.getCommit(),t=new r.TreeItem("Current changes",r.TreeItemCollapsibleState.None);return t.contextValue=u.U0.MergeConflictCurrentChanges,t.description=`${(0,n.M4)(this.status.current,{expand:!1,icon:!1})}${null!=e?` (${(0,n.M4)(e,{expand:!1,icon:!1})})`:" (HEAD)"}`,t.iconPath=this.view.config.avatars?await e?.getAvatarUri({defaultStyle:l.H.get("defaultGravatarsStyle")})??new r.ThemeIcon("diff"):new r.ThemeIcon("diff"),t.command=this.getCommand(),t}getCommand(){return null==this.status.mergeBase?(0,a.Jl)("vscode.open","Open Revision",this.view.container.git.getRevisionUri(this.status.repoPath,"HEAD",this.file.path)):(0,a.gu)("gitlens.diffWith","Open Changes",{lhs:{sha:this.status.mergeBase,uri:o.nk.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:"HEAD",uri:o.nk.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${(0,n.M4)(this.status.current,{expand:!1,icon:!1})})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getTooltip(e){let t=await this.getCommit();if(e.isCancellationRequested)return;let i=new r.MarkdownString(`Current changes on ${(0,n.M4)(this.status.current,{label:!1})}\\
$(file)${s.EO.Space}${this.file.path}`,!0);if(null==t)return i;let o=await (0,c.m)(this.view.container,t,this.file,this.view.config.formats.commits.tooltipWithStatus,{cancellation:e});return i.appendMarkdown(`

${o}`),i.isTrusted=!0,i}}},1398:e=>{e.exports=require("vscode")},1453:(e,t,i)=>{i.d(t,{W:()=>ContributorNode});var r=i(1398),s=i(3037),o=i(1182),n=i(2870),a=i(8845),l=i(9388),u=i(6206),c=i(9091),h=i(4808),d=i(5818),p=i(1831),g=i(1667),m=i(6005),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?w(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&f(t,i,o),o};let ContributorNode=class ContributorNode extends d.eu{constructor(e,t,i,r,s){super("contributor",e,t,i),this.parent=i,this.contributor=r,this.options=s,this.updateContext({contributor:r}),this._uniqueId=(0,d.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(e){let t=`${this.contributor.name}${this.contributor.email?` <${this.contributor.email}>`:""}`;return"markdown"===e&&this.contributor.email?`[${t}](mailto:${this.contributor.email})`:t}getUrl(){return this.contributor.email?`mailto:${this.contributor.email}`:""}get repoPath(){return this.contributor.repoPath}async getChildren(){let e=await this.getLog();if(null==e)return[new g.S2(this.view,this,"No commits could be found.")];let t=await this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath),i=[...(0,m.h)((0,c.Tj)(e.commits.values(),e=>new p.e(this.view,this,e,void 0,void 0,t)),this)];return e.hasMore&&i.push(new g.cb(this.view,this,i[i.length-1])),i}async getTreeItem(){let e,t,i=this.options?.presence?.get(this.contributor.email),l=null!=this.contributor.stats?` (${(0,h.td)("file",this.contributor.stats.files)}, +${(0,a.bH)(this.contributor.stats.additions)} -${(0,a.bH)(this.contributor.stats.additions)} ${(0,h.td)("line",this.contributor.stats.additions+this.contributor.stats.deletions,{only:!0})})`:"",u=new r.TreeItem(this.contributor.current?`${this.contributor.label} (you)`:this.contributor.label,r.TreeItemCollapsibleState.Collapsed);if(u.id=this.id,u.contextValue=this.contributor.current?`${d.U0.Contributor}+current`:d.U0.Contributor,u.description=`${null!=i&&"offline"!==i.status?`${i.statusText} ${o.EO.Space}${o.EO.Dot}${o.EO.Space} `:""}${null!=this.contributor.latestCommitDate?`${this.contributor.formatDateFromNow()}, `:""}${(0,h.td)("commit",this.contributor.commits)}${l}`,this.view.config.avatars){let r=n.H.get("hovers.avatarSize");if(e=await this.contributor.getAvatarUri({defaultStyle:n.H.get("defaultGravatarsStyle"),size:r}),null!=i){let o=`${this.contributor.commits?"You are":`${this.contributor.label} is`} ${"dnd"===i.status?"in ":""}${i.statusText.toLocaleLowerCase()}`;t=`![${o}](${e.toString(!0)}|width=${r},height=${r} "${o}")![${o}](${(0,s.Sk)(i.status)} "${o}")`}else t=`![${this.contributor.label}](${e.toString(!0)}|width=${r},height=${r} "${this.contributor.label}")`}let c=null!=this.contributor.stats?`\\
${(0,h.td)("file",this.contributor.stats.files)} changed, ${(0,h.td)("addition",this.contributor.stats.additions)}, ${(0,h.td)("deletion",this.contributor.stats.deletions)}`:"",p=this.contributor.email?`__[${this.contributor.name}](mailto:${this.contributor.email} "Email ${this.contributor.label} (${this.contributor.email})")__`:`__${this.contributor.label}__`,g=null!=this.contributor.latestCommitDate?`Last commit ${this.contributor.formatDateFromNow()} (${this.contributor.formatDate()})\\
`:"",m=new r.MarkdownString(`${null!=t?t:""} &nbsp;${p} 

${g}${(0,h.td)("commit",this.contributor.commits)}${c}`);return m.supportHtml=!0,m.isTrusted=!0,u.tooltip=m,u.iconPath=e,u}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return this._log??=await this.view.container.git.commits(this.uri.repoPath).getLog(this.options?.ref,{all:this.options?.all,limit:this.limit??this.view.config.defaultItemLimit,merges:this.options?.showMergeCommits,authors:[{name:this.contributor.name,email:this.contributor.email,username:this.contributor.username,id:this.contributor.id}]}),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};v([(0,l.G)(),(0,u.Yz)()],ContributorNode.prototype,"refresh",1),v([(0,l.G)()],ContributorNode.prototype,"loadMore",1)},1510:(e,t,i)=>{i.d(t,{JB:()=>n,d5:()=>a,sN:()=>o});var r=i(3374),s=i(5818);function o(e,t){return null!=e&&e instanceof s.eu&&(null==t||(Array.isArray(t)?t.includes(e.type):e.type===t))}function n(e){return o(e,"folder")||o(e,r.fc)}function a(e){return o(e,r.Oi)}},1545:(e,t,i)=>{i.d(t,{m:()=>z,P:()=>j});var r=i(1849),s=i(4269),o=i(2870),n=i(4941),a=i(8832),l=i(7687),u=i(7201),c=i(4241);let h=/\/_git\/?/i,d=/^DefaultCollection\//i,p=/^(.*?)\/(.*?)\/(.*)/,g=/^(ssh|vs-ssh)\./i,m=/^\/?v\d\//i,f=/path=([^&]+)/i,w=/line=(\d+)(?:&lineEnd=(\d+))?/;let AzureDevOpsRemote=class AzureDevOpsRemote extends c.u{constructor(e,t,i,r,s,o=!1){let n;if(g.test(t)){i=i.replace(m,""),t=t.replace(g,"");let e=p.exec(i);if(null!=e){let[,r,s,a]=e;n=s,o?(t=`${r}.${t}`,i=`${s}/_git/${a}`):i=`${r}/${s}/_git/${a}`}}else{let e=p.exec(i);if(null!=e){let[,,t]=e;n=t}}super(t,i=decodeURIComponent(i),r,s),this.container=e,this.project=n}project;get issueLinkPattern(){let e=this.baseUrl.replace(h,"/");return`${e}/_workitems/edit/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"#",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!1,title:`Open Work Item #<num> on ${this.name}`,type:"issue",description:`${this.name} Work Item #<num>`},{prefix:"PR ",url:`${this.baseUrl}/pullrequest/<num>`,alphanumeric:!1,ignoreCase:!1,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get icon(){return"azdo"}get id(){return"azure-devops"}get gkProviderId(){return"azureDevops"}get name(){return"Azure DevOps"}get providerDesc(){if(null!=this.gkProviderId&&null!=this.owner&&null!=this.repoName&&null!=this.project)return{id:this.gkProviderId,repoDomain:this.project,repoName:this.repoName,repoOwnerDomain:this.owner}}_displayPath;get displayPath(){return void 0===this._displayPath&&(this._displayPath=this.path.replace(h,"/").replace(d,"")),this._displayPath}async getLocalInfoFromRemoteUri(e,t){let i,r;if(t.authority!==this.domain)return;if(t.query){let e=w.exec(t.query);if(null!=e){let[,t,s]=e;t&&(i=parseInt(t,10),s&&(r=parseInt(s,10)))}}let s=f.exec(t.query);if(null==s)return;let[,o]=s,n=await e.getAbsoluteOrBestRevisionUri(o,void 0);return null!=n?{uri:n,repoPath:e.path,rev:void 0,startLine:i,endLine:r}:void 0}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/?version=GB${e}&_a=history`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branchCompare?baseVersion=GB${e}&targetVersion=GB${t}`)}async isReadyForForCrossForkPullRequestUrls(){let e=(0,l.p)(this.id),t=e&&await this.container.integrations.get(e);return t?.maybeConnected??t?.isConnected()??!1}async getUrlForCreatePullRequest({base:e,head:t},i){let r=new URLSearchParams({sourceRef:t.branch,targetRef:e.branch??""});if(e.remote.url!==t.remote.url){let t,i=function(e){if(v.test(e)){e=e.replace(v,"");let t=p.exec(e);if(null!=t){let[,e,i,r]=t;return{org:e,project:i,repo:r}}}else{let[t,i,r]=(0,u.Lr)(e);return{org:t,project:i,repo:r}}}(e.remote.url);if(null==i)return;let{org:s,project:o,repo:n}=i,c=(0,l.p)(this.id),h=c&&await this.container.integrations.get(c);if(h?.isConnected&&h instanceof a.T5&&(t=(await h.getRepoInfo?.({project:o,name:n,owner:s}))?.id),!t)return;r.set("targetRepositoryId",t)}return`${this.encodeUrl(`${this.getRepoBaseUrl(t.remote.path)}/pullrequestcreate`)}?${r.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`&line=${r.start.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:`&line=${r.start.line}&lineEnd=${r.end.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:"",i)?this.encodeUrl(`${this.baseUrl}?path=${e}&version=GC${i}${s}&_a=contents`):t?this.encodeUrl(`${this.baseUrl}/?path=/${e}&version=GB${t}&_a=contents${s}`):this.encodeUrl(`${this.baseUrl}?path=/${e}${s}`)}};let v=/^(?:[^@]+@)?([^:]+):v\d\//;var y=i(5962);let b=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,C=/^lines-(\d+)(?::(\d+))?$/;let BitbucketRemote=class BitbucketRemote extends c.u{constructor(e,t,i,r,s=!1){super(e,t,i,r,s)}get issueLinkPattern(){return`${this.baseUrl}/issues/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"issue #",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!0,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",url:`${this.baseUrl}/pull-requests/<num>`,alphanumeric:!1,ignoreCase:!0,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get icon(){return"bitbucket"}get id(){return"bitbucket"}get gkProviderId(){return"bitbucket"}get name(){return this.formatName("Bitbucket")}async getLocalInfoFromRemoteUri(e,t){let i,r,s,o;if(t.authority!==this.domain||!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=C.exec(t.fragment);if(null!=e){let[,t,s]=e;t&&(i=parseInt(t,10),s&&(r=parseInt(s,10)))}}let n=b.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,y.HH)(t)){let s=await e.getAbsoluteOrBestRevisionUri(a.substring(l),t);if(null!=s)return{uri:s,repoPath:e.path,rev:t,startLine:i,endLine:r}}else if((0,y.HH)(t,!0)){let s=await e.getAbsoluteOrBestRevisionUri(a.substring(l),t);null!=s&&(o={uri:s,repoPath:e.path,rev:t,startLine:i,endLine:r})}}let u=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),s=a.substring(1,l),u.set(s,a.substring(l));while(l>0)if(0!==u.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&u.has(e.getNameWithoutRemote())});for(let s of t){let t=s.getNameWithoutRemote(),o=u.get(t);if(null==o)continue;let n=await e.getAbsoluteOrBestRevisionUri(o.substring(l),t);if(null!=n)return{uri:n,repoPath:e.path,rev:t,startLine:i,endLine:r}}}return o}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return`${this.encodeUrl(`${this.baseUrl}/branches/compare/${t}\r${e}`)}#diff`}getUrlForCreatePullRequest({base:e,head:t}){let{owner:i,name:r}=this.repoDesc,s=new URLSearchParams({source:t.branch,dest:`${i}/${r}::${e.branch??""}`});return`${this.encodeUrl(`${this.getRepoBaseUrl(t.remote.path)}/pull-requests/new`)}?${s.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#${e}-${r.start.line}`:`#${e}-${r.start.line}:${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/src/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/src/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};var R=i(3282);let k=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,S=/^lines-(\d+)(?::(\d+))?$/;let BitbucketServerRemote=class BitbucketServerRemote extends c.u{constructor(e,t,i,r,s,o=!1){super(t,i,r,s,o),this.container=e}get issueLinkPattern(){return`${this.baseUrl}/issues/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"issue #",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!0,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",alphanumeric:!1,ignoreCase:!0,url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get baseUrl(){let[e,t]=this.splitPath(this.path);return`${this.protocol}://${this.domain}/projects/${e}/repos/${t}`}splitPath(e){return e.startsWith("scm/")&&e.indexOf("/")!==e.lastIndexOf("/")?super.splitPath(e.replace("scm/","")):super.splitPath(e)}get icon(){return"bitbucket"}get id(){return"bitbucket-server"}get gkProviderId(){return"bitbucketServer"}get name(){return this.formatName("Bitbucket Server")}get supportedFeatures(){return{...super.supportedFeatures,createPullRequestWithDetails:!0}}async getLocalInfoFromRemoteUri(e,t){let i,r,s,o;if(t.authority!==this.domain||!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=S.exec(t.fragment);if(null!=e){let[,t,s]=e;t&&(i=parseInt(t,10),s&&(r=parseInt(s,10)))}}let n=k.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,y.HH)(t)){let s=await e.getAbsoluteOrBestRevisionUri(a.substring(l),t);if(null!=s)return{uri:s,repoPath:e.path,rev:t,startLine:i,endLine:r}}else if((0,y.HH)(t,!0)){let s=await e.getAbsoluteOrBestRevisionUri(a.substring(l),t);null!=s&&(o={uri:s,repoPath:e.path,rev:t,startLine:i,endLine:r})}}let u=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),s=a.substring(1,l),u.set(s,a.substring(l));while(l>0)if(u.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&u.has(e.getNameWithoutRemote())});for(let s of t){let t=s.getNameWithoutRemote(),o=u.get(t);if(null==o)continue;let n=await e.getAbsoluteOrBestRevisionUri(o.substring(l),t);if(null!=n)return{uri:n,repoPath:e.path,rev:t,startLine:i,endLine:r}}}return o}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/commits?until=${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${t}\r${e}`)}async isReadyForForCrossForkPullRequestUrls(){let e=(0,l.p)(this.id),t=e&&await this.container.integrations.get(e);return t?.maybeConnected??t?.isConnected()??!1}async getUrlForCreatePullRequest(e,t){let{base:i,head:r,details:s}=e;s?.describeWithAI&&(s=await (0,R.ub)(this.container,e.repoPath,e,t??{source:"ai"}));let o=new URLSearchParams({sourceBranch:r.branch,targetBranch:i.branch??""}),[n,u]=this.splitPath(i.remote.path);if(i.remote.url!==r.remote.url){let e,t=(0,l.p)(this.id),i=t&&await this.container.integrations.get(t);if(i?.isConnected&&i instanceof a.T5&&(e=(await i.getRepoInfo?.({owner:n,name:u}))?.id),!e)return;o.set("targetRepoId",e)}s?.title&&o.set("title",s.title),s?.description&&o.set("description",s.description);let[c,h]=this.splitPath(r.remote.path);return`${this.encodeUrl(`${this.protocol}://${this.domain}/projects/${c}/repos/${h}/pull-requests?create`)}&${o.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#${r.start.line}`:`#${r.start.line}-${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${i}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${t}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/browse/${e}`)}${s}`}};var P=i(4808);let CustomRemote=class CustomRemote extends c.u{urls;constructor(e,t,i,r,s){super(e,t,r,s,!0),this.urls=i}get id(){return"custom"}get gkProviderId(){}get name(){return this.formatName("Custom")}get issueLinkPattern(){throw Error("unsupported")}get autolinks(){return[]}getLocalInfoFromRemoteUri(e,t){return Promise.resolve(void 0)}getUrlForRepository(){return this.getUrl(this.urls.repository,this.getContext())}getUrlForBranches(){return this.getUrl(this.urls.branches,this.getContext())}getUrlForBranch(e){return this.getUrl(this.urls.branch,this.getContext({branch:e}))}getUrlForCommit(e){return this.getUrl(this.urls.commit,this.getContext({id:e}))}getUrlForComparison(e,t,i){if(null!=this.urls.comparison)return this.getUrl(this.urls.comparison,this.getContext({ref1:e,ref2:t,notation:i}))}getUrlForCreatePullRequest({base:e,head:t}){if(null!=this.urls.createPullRequest)return this.getUrl(this.urls.createPullRequest,this.getContext({base:e.branch??"",head:t.branch}))}getUrlForFile(e,t,i,r){let s,o,n;s=null!=r?r.start.line===r.end.line?(0,P.GW)(this.urls.fileLine,{line:r.start.line,line_encoded:r.start.line}):(0,P.GW)(this.urls.fileRange,{start:r.start.line,start_encoded:r.start.line,end:r.end.line,end_encoded:r.end.line}):"",i?(o=this.urls.fileInCommit,n=this.getContext({id:i,file:e,line:s})):t?(o=this.urls.fileInBranch,n=this.getContext({branch:t,file:e,line:s})):(o=this.urls.file,n=this.getContext({file:e,line:s}));let a=(0,P.GW)(o,n);if((0,P.Vx)(o).some(e=>e.key.endsWith("_encoded")))return a;let l=a.includes("#");if(a=this.encodeUrl(a),l){let e=a.lastIndexOf("%23");-1!==e&&(a=`${a.substring(0,e)}#${a.substring(e+3)}`)}return a}getUrl(e,t){let i=(0,P.GW)(e,t);return(0,P.Vx)(e).some(e=>e.key.endsWith("_encoded"))?i:this.encodeUrl(i)}getContext(e){let[t,i]=this.splitPath(this.path),r={repo:this.path,repoBase:t,repoPath:i,...e};for(let[e,t]of Object.entries(r))r[`${e}_encoded`]=encodeURIComponent(t);return r}};let A=/^\/([^/]+)\/\+(.+)$/i,I=/^(\d+)$/;let GerritRemote=class GerritRemote extends c.u{constructor(e,t,i,r,s=!1,o=!0){o&&"ssh"!==i&&(t=t.replace(/^a\//,"")),super(e,t,i,r,s)}get issueLinkPattern(){return`${this.baseReviewUrl}/q/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"Change-Id: ",url:this.issueLinkPattern,alphanumeric:!0,ignoreCase:!0,title:`Open Change #<num> on ${this.name}`,description:`${this.name} Change #<num>`}]),this._autolinks}get icon(){return"gerrit"}get id(){return"gerrit"}get gkProviderId(){}get name(){return this.formatName("Gerrit")}get baseUrl(){return`${this.protocol}://${this.domain}/plugins/gitiles/${this.path}`}get baseReviewUrl(){return`${this.protocol}://${this.domain}`}async getLocalInfoFromRemoteUri(e,t){let i,r;if(t.authority!==this.domain||!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=I.exec(t.fragment);if(null!=e){let[,t]=e;t&&(i=parseInt(t,10))}}let s=A.exec(t.path);if(null==s)return;let[,,o]=s,n=o.indexOf("/",1);if(-1!==n){let t=o.substring(1,n);if((0,y.HH)(t)||"HEAD"===t){let r=await e.getAbsoluteOrBestRevisionUri(o.substring(n),t);if(null!=r)return{uri:r,repoPath:e.path,rev:t,startLine:i}}else if((0,y.HH)(t,!0)){let s=await e.getAbsoluteOrBestRevisionUri(o.substring(n),t);null!=s&&(r={uri:s,repoPath:e.path,rev:t,startLine:i})}}if(o.startsWith("/refs/heads/")){let t,r=o.substring(12),s=new Map;n=r.length;do n=r.lastIndexOf("/",n-1),t=r.substring(1,n),s.set(t,r.substring(n));while(n>0)if(s.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&s.has(e.getNameWithoutRemote())});for(let r of t){let t=r.getNameWithoutRemote(),o=s.get(t);if(null==o)continue;let a=await e.getAbsoluteOrBestRevisionUri(o.substring(n),t);if(null!=a)return{uri:a,repoPath:e.path,rev:t,startLine:i}}}return}if(o.startsWith("/refs/tags/")){let t,r=o.substring(11),s=new Map;n=r.length;do n=r.lastIndexOf("/",n-1),t=r.substring(1,n),s.set(t,r.substring(n));while(n>0)if(s.size){let{values:t}=await e.git.tags().getTags({filter:e=>s.has(e.name)});for(let r of t){let t=s.get(r.name);if(null==t)continue;let o=await e.getAbsoluteOrBestRevisionUri(t.substring(n),r.name);if(null!=o)return{uri:o,repoPath:e.path,rev:r.name,startLine:i}}}return}return r}getUrlForBranches(){return this.encodeUrl(`${this.baseReviewUrl}/admin/repos/${this.path},branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/+/refs/heads/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseReviewUrl}/q/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseReviewUrl}/q/${e}${i}${t}`)}getUrlForCreatePullRequest({base:e,head:t}){let i=new URLSearchParams({sourceBranch:t.branch,targetBranch:e.branch??""});return this.encodeUrl(`${this.baseReviewUrl}/createPullRequest?${i.toString()}`)}getUrlForFile(e,t,i,r){let s=null!=r?`#${r.start.line}`:"";return i?`${this.encodeUrl(`${this.baseUrl}/+/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.getUrlForBranch(t)}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/+/HEAD/${e}`)}${s}`}};let D=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,_=/^L(\d+)(?:-L(\d+))?$/;let GiteaRemote=class GiteaRemote extends c.u{constructor(e,t,i,r,s,o=!1){super(t,i,r,s,o),this.container=e}get issueLinkPattern(){return`${this.baseUrl}/issues/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"#",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!1,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`}]),this._autolinks}get icon(){return"gitea"}get id(){return"gitea"}get gkProviderId(){}get name(){return this.formatName("Gitea")}get supportedFeatures(){return{...super.supportedFeatures,createPullRequestWithDetails:!0}}async getLocalInfoFromRemoteUri(e,t){let i,r,s,o;if(t.authority!==this.domain||!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=_.exec(t.fragment);if(null!=e){let[,t,s]=e;t&&(i=parseInt(t,10),s&&(r=parseInt(s,10)))}}let n=D.exec(t.path);if(null==n)return;let[,,,a]=n;if(a.startsWith("/commit/")&&(s=8,-1!==(o=a.indexOf("/",s)))){let t=a.substring(s,o);if((0,y.HH)(t,!0)){let s=await e.getAbsoluteOrBestRevisionUri(a.substring(o),t);if(null!=s)return{uri:s,repoPath:e.path,rev:t,startLine:i,endLine:r}}}if(a.startsWith("/branch/")){let t,n=new Map;o=s=8;do t=a.substring(s,o),n.set(t,a.substring(o)),o=a.indexOf("/",o+1);while(o<a.length&&-1!==o)if(n.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&n.has(e.getNameWithoutRemote())});for(let s of t){let t=s.getNameWithoutRemote(),o=n.get(t);if(null==o)continue;let a=await e.getAbsoluteOrBestRevisionUri(o,t);if(null!=a)return{uri:a,repoPath:e.path,rev:t,startLine:i,endLine:r}}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/src/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}...${t}`)}async getUrlForCreatePullRequest(e,t){let{base:i,head:r,details:s}=e;s?.describeWithAI&&(s=await (0,R.ub)(this.container,e.repoPath,e,t??{source:"ai"}));let o=new URLSearchParams({head:r.branch,base:i.branch??""});return s?.title&&o.set("title",s.title),s?.description&&o.set("body",s.description),`${this.encodeUrl(`${this.baseUrl}/pulls/new`)}?${o.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/src/commit/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/src/branch/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}/src/${e}`)}${s}`}};var $=i(5225),T=i(1182),E=i(8845),x=i(1555),O=i(6732),F=i(4256),B=i(8027),L=Object.defineProperty,U=Object.getOwnPropertyDescriptor;let q=/\b([^/\s]+\/[^/\s]+?)(?:\\)?#([0-9]+)\b(?!]\()/g,N=/\b([^/\s]+\/[^/\s]+?)(?:\\)?!([0-9]+)\b(?!]\()/g,M=/^\/([^/]+)\/([^/]+?)\/-\/blob(.+)$/i,W=/^L(\d+)(?:-(\d+))?$/;let GitLabRemote=class GitLabRemote extends c.u{constructor(e,t,i,r,s,o=!1){super(t,i,r,s,o),this.container=e}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api`:`https://${this.domain}/api`}get issueLinkPattern(){return`${this.baseUrl}/-/issues/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"#",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!1,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"!",url:`${this.baseUrl}/-/merge_requests/<num>`,alphanumeric:!1,ignoreCase:!1,title:`Open Merge Request !<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Merge Request !<num>`},{tokenize:(e,t,i,r,s,o)=>"plaintext"===t?e:e.replace(q,(e,n,a)=>{let l,u=(0,O.W)(`${this.protocol}://${this.domain}/${(0,F.e8)(n)}/-/issues/${a}`),c=` "Open Issue #${a} from ${n} on ${this.name}"`,h=`\0${i.size}\0`;"markdown"===t?i.set(h,`[${e}](${u}${c})`):"html"===t&&i.set(h,`<a href="${u}" title=${c}>${e}</a>`);let d=r?.get(a)?.[0];if(d?.value!=null)if(d.paused)null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,B.xu)()} GitLab Issue ${n}#${a} $(loading~spin)](${u}${c}")`));else{let t=d.value,i=(0,F.FV)(t.title.trim());null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,B.xu)(t)} **${i}**](${u}${c})\\
${T.EO.Space.repeat(5)}${e} ${t.state} ${(0,E.PI)(t.closedDate??t.createdDate)}`))}else null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,B.xu)()} GitLab Issue ${n}#${a}](${u}${c})`));return h}),parse:(e,t)=>{let i,r,s;for(;null!=(s=q.exec(e));){[,i,r]=s;let[e,o]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/-/issues/${r}`,alphanumeric:!1,ignoreCase:!0,title:`Open Issue #<num> from ${i} on ${this.name}`,type:"issue",description:`${this.name} Issue ${i}#${r}`,descriptor:{key:this.remoteKey,owner:e,name:o}})}}},{tokenize:(e,t,i,r,s,o)=>"plaintext"===t?e:e.replace(N,(e,n,a)=>{let l,u=(0,O.W)(`${this.protocol}://${this.domain}/${n}/-/merge_requests/${a}`),c=` "Open Merge Request !${a} from ${n} on ${this.name}"`,h=`\0${i.size}\0`;"markdown"===t?i.set(h,`[${e}](${u}${c})`):"html"===t&&i.set(h,`<a href="${u}" title=${c}>${e}</a>`);let d=r?.get(a)?.[0];if(d?.value!=null)if(d.paused)null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,B.xu)()} ${this.name} Merge Request ${n}!${a} $(loading~spin)](${u}${c}")`));else{let t=d.value,i=(0,F.FV)(t.title.trim());null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,B.xu)(t)} **${i}**](${u}${c})\\
${T.EO.Space.repeat(5)}${e} ${t.state} ${(0,E.PI)(t.closedDate??t.createdDate)}`))}else null==o||s?.has(a)||(l=o.size+1,o.set(l,`[${(0,B.xu)()} ${this.name} Merge Request ${n}!${a}](${u}${c})`));return h}),parse:(e,t)=>{let i,r,s;for(;null!=(s=N.exec(e));){[,i,r]=s;let[e,o]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}!`,url:`${this.protocol}://${this.domain}/${i}/-/merge_requests/${r}`,alphanumeric:!1,ignoreCase:!0,title:`Open Merge Request !<num> from ${i} on ${this.name}`,type:"pullrequest",description:`${this.name} Merge Request !${r} from ${i}`,descriptor:{key:this.remoteKey,owner:e,name:o}})}}}]),this._autolinks}get icon(){return"gitlab"}get id(){return"gitlab"}get gkProviderId(){var e;return(e=this.domain,(0,P.Q_)(e,"gitlab.com"))?"gitlab":"gitlabSelfHosted"}get name(){return this.formatName("GitLab")}get repoDesc(){let[e,t]=this.splitPath(this.path);return{key:this.remoteKey,owner:e,name:t}}get supportedFeatures(){return{...super.supportedFeatures,createPullRequestWithDetails:!0}}async getLocalInfoFromRemoteUri(e,t){let i,r,s,o;if(t.authority!==this.domain||!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=W.exec(t.fragment);if(null!=e){let[,t,s]=e;t&&(i=parseInt(t,10),s&&(r=parseInt(s,10)))}}let n=M.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,y.HH)(t)){let s=await e.getAbsoluteOrBestRevisionUri(a.substring(l),t);if(null!=s)return{uri:s,repoPath:e.path,rev:t,startLine:i,endLine:r}}else if((0,y.HH)(t,!0)){let s=await e.getAbsoluteOrBestRevisionUri(a.substring(l),t);null!=s&&(o={uri:s,repoPath:e.path,rev:t,startLine:i,endLine:r})}}let u=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),s=a.substring(1,l),u.set(s,a.substring(l));while(l>0)if(u.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&u.has(e.getNameWithoutRemote())});for(let s of t){let t=s.getNameWithoutRemote(),o=u.get(t);if(null==o)continue;let n=await e.getAbsoluteOrBestRevisionUri(o.substring(l),t);if(null!=n)return{uri:n,repoPath:e.path,rev:t,startLine:i,endLine:r}}}return o}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/-/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/-/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/-/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/-/compare/${e}${i}${t}`)}async isReadyForForCrossForkPullRequestUrls(){let e=(0,l.p)(this.id),t=e&&await this.container.integrations.get(e);return t?.maybeConnected??t?.isConnected()??!1}async getUrlForCreatePullRequest(e,t){let{base:i,head:r,details:s}=e;s?.describeWithAI&&(s=await (0,R.ub)(this.container,e.repoPath,e,t??{source:"ai"}));let o=new URLSearchParams({utf8:"✓","merge_request[source_branch]":r.branch,"merge_request[target_branch]":i.branch??""});if(i.remote.url!==r.remote.url){let e,t={owner:i.remote.path.split("/")[0],name:i.remote.path.split("/")[1]},r=(0,l.p)(this.id),s=r&&await this.container.integrations.get(r);if(s?.isConnected&&s instanceof a.T5&&(e=(await s.getRepoInfo?.(t))?.id),!e)return;o.set("merge_request[target_project_id]",e)}return s?.title&&o.set("merge_request[title]",s.title),s?.description&&o.set("merge_request[description]",s.description),`${this.encodeUrl(`${this.getRepoBaseUrl(r.remote.path)}/-/merge_requests/new`)}?${o.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/-/blob/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/-/blob/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?U(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&L(t,i,o)})([(0,x.B)()],GitLabRemote.prototype,"repoDesc",1);let GoogleSourceRemote=class GoogleSourceRemote extends GerritRemote{constructor(e,t,i,r,s=!1){super(e,t,i,r,s,!1)}get id(){return"google-source"}get gkProviderId(){}get name(){return this.formatName("Google Source")}get issueLinkPattern(){throw Error("unsupported")}get autolinks(){return[]}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}get reviewDomain(){let[e,...t]=this.domain.split(".");return[`${e}-review`,...t].join(".")}get baseReviewUrl(){return`${this.protocol}://${this.reviewDomain}`}};let G=[{custom:!1,matcher:"bitbucket.org",creator:(e,t,i)=>new BitbucketRemote(t,i)},{custom:!1,matcher:"github.com",creator:(e,t,i)=>new $.K(e,t,i)},{custom:!1,matcher:"gitlab.com",creator:(e,t,i)=>new GitLabRemote(e,t,i)},{custom:!1,matcher:/\bdev\.azure\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(e,t,i)},{custom:!0,matcher:/^(.+\/(?:bitbucket|stash))\/scm\/(.+)$/i,creator:(e,t,i)=>new BitbucketServerRemote(e,t,i)},{custom:!1,matcher:/\bgitlab\b/i,creator:(e,t,i)=>new GitLabRemote(e,t,i)},{custom:!1,matcher:/\bvisualstudio\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(e,t,i,void 0,void 0,!0)},{custom:!1,matcher:/\bgitea\b/i,creator:(e,t,i)=>new GiteaRemote(e,t,i)},{custom:!1,matcher:/\bgerrithub\.io$/i,creator:(e,t,i)=>new GerritRemote(t,i)},{custom:!1,matcher:/\bgooglesource\.com$/i,creator:(e,t,i)=>new GoogleSourceRemote(t,i)}],H={[r.PY.CloudGitHubEnterprise]:(e,t,i)=>new $.K(e,t,i),[r.PY.CloudGitLabSelfHosted]:(e,t,i)=>new GitLabRemote(e,t,i),[r.PY.BitbucketServer]:(e,t,i,r)=>new BitbucketServerRemote(e,t,i,function(e){let t=e?.match(V);return t?.[1]??void 0}(r))},V=/(\w+)\W*/;function j(e,t){let i=[];if(e?.length)for(let t of e){let e,r=function(e){switch(e.type){case"AzureDevOps":return(t,i,r)=>new AzureDevOpsRemote(t,i,r,e.protocol,e.name,!0);case"Bitbucket":return(t,i,r)=>new BitbucketRemote(i,r,e.protocol,e.name,!0);case"BitbucketServer":return(t,i,r)=>new BitbucketServerRemote(t,i,r,e.protocol,e.name,!0);case"Custom":return(t,i,r)=>new CustomRemote(i,r,e.urls,e.protocol,e.name);case"Gerrit":return(t,i,r)=>new GerritRemote(i,r,e.protocol,e.name,!0);case"GoogleSource":return(t,i,r)=>new GoogleSourceRemote(i,r,e.protocol,e.name,!0);case"Gitea":return(t,i,r)=>new GiteaRemote(t,i,r,e.protocol,e.name,!0);case"GitHub":return(t,i,r)=>new $.K(t,i,r,e.protocol,e.name,!0);case"GitLab":return(t,i,r)=>new GitLabRemote(t,i,r,e.protocol,e.name,!0);default:return}}(t);if(null!=r){try{if(e=t.regex?RegExp(t.regex,"i"):t.domain?.toLowerCase(),null==e)throw Error("No matcher found")}catch(e){n.Vy.error(e,`Loading remote provider '${t.name??""}' failed`)}i.push({custom:!0,matcher:e,creator:r})}}if(t?.length)for(let e of t){let t=e.integrationId;if((0,s.Ii)(t)&&e.domain){let r=e.domain.toLocaleLowerCase(),s={custom:!1,matcher:r,creator:H[t]},o=i.findIndex(e=>e.matcher===r);-1!==o?i[o]=s:i.push(s)}}return i.push(...G),i}async function z(e,t){return null==t&&(t=j(o.H.get("remotes",null),await e.integrations.getConfigured())),(i,r,s,o)=>(function(e,t,i,r,s,o){try{let n=r.toLowerCase();for(let{custom:a,matcher:l,creator:u}of t){if("string"==typeof l){if(l===n)return u(e,r,s,o);continue}if(l.test(n))return u(e,r,s,o);if(!a)continue;let t=l.exec(i);if(null!=t)return u(e,t[1],t[2],o)}return}catch(e){n.Vy.error(e,"createRemoteProvider");return}})(e,t,i,r,s,o)}},1555:(e,t,i)=>{i.d(t,{B:()=>s});var r=i(4473);function s(e){return(t,i,s)=>{let o,n,a;if("function"==typeof s.value)o=s.value,n="value";else if("function"==typeof s.get)o=s.get,n="get";else throw Error("Not supported");if(null==o)throw Error("Not supported");let l=`$memoize$${i}`;s[n]=function(...t){let i=(0,r.q)(l,e,...t);return Object.prototype.hasOwnProperty.call(this,i)?a=this[i]:(Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!1,value:a=o.apply(this,t)}),a)}}}},1573:(e,t,i)=>{i.d(t,{z:()=>BlameAnnotationProviderBase});var r=i(1398),s=i(2624),o=i(9156),n=i(2870),a=i(6206),l=i(1176),u=i(7984),c=Object.defineProperty,h=Object.getOwnPropertyDescriptor;let d=0x40000000-1;let BlameAnnotationProviderBase=class BlameAnnotationProviderBase extends l.wJ{blame;hoverProviderDisposable;constructor(e,t,i,r,s){super(e,t,i,r,s),this.blame=e.git.getBlame(this.trackedDocument.uri,r.document),r.document.isDirty&&s.setForceDirtyStateChangeOnNextDocumentChange()}clear(){return null!=this.hoverProviderDisposable&&(this.hoverProviderDisposable.dispose(),this.hoverProviderDisposable=void 0),super.clear()}async validate(){let e=await this.blame;return!!e?.lines.length}async getBlame(e){e&&(this.blame=this.container.git.getBlame(this.trackedDocument.uri,this.editor.document));let t=await this.blame;if(t?.lines.length)return t}getComputedHeatmap(e){let t,i,r,s=[];for(let r of e.lines)i!==r.sha&&(i=r.sha,null!=(t=e.commits.get(r.sha))&&s.push(t.date));s.sort((e,t)=>e.getTime()-t.getTime());let o=new Date;o.setDate(o.getDate()-(n.H.get("heatmap.ageThreshold")||90));let a=o.getTime(),l=[],c=[];for(let e of s)e.getTime()<a?c.push(e):l.push(e);r=l.length&&c.length?{hot:p(l),cold:p(c)}:p(s);let h=(e,t)=>Array.isArray(r)?r:t?r.hot.concat(r.cold):e.getTime()<a?r.cold:r.hot,d=(e,t)=>{let i=e.getTime(),r=0;for(let e=0;e<t.length&&(r=e,!(i>=t[e]));e++);return r};return{coldThresholdTimestamp:a,colors:(0,u.v7)(),computeRelativeAge:e=>d(e,h(e)),computeOpacity:e=>{let t=h(e,!0);return Math.max(.2,Math.round((1-d(e,t)/t.length)*100)/100)}}}registerHoverProviders(e){let t=n.H.get("hovers");t.enabled&&t.annotations.enabled&&(e.details||e.changes)&&(this.hoverProviderDisposable?.dispose(),this.hoverProviderDisposable=r.languages.registerHoverProvider({pattern:this.editor.document.uri.fsPath},{provideHover:(t,i,r)=>this.provideHover(e,t,i,r)}))}async provideHover(e,t,i,a){if("line"!==n.H.get("hovers.annotations.over")&&0!==i.character||this.editor.document.uri.toString()!==t.uri.toString())return;let l=await this.getBlame();if(null==l)return;let u=l.lines[i.line],c=l.commits.get(u.sha);if(null==c)return;let h=(await Promise.all([e.details?this.getDetailsHoverMessage(c,t):void 0,e.changes?(0,o.PV)(this.container,c,await s.nk.fromUri(t.uri),i.line,t):void 0])).filter(e=>!!e);return new r.Hover(h,t.validateRange(new r.Range(i.line,0,i.line,d)))}async getDetailsHoverMessage(e,t){let i=this.editor.selection.active.line,r=i+1;i=(e.lines.find(e=>e.line===r)??e.lines[0]).originalLine-1;let a=n.H.get("hovers");return(0,o.MX)(this.container,e,await s.nk.fromUri(t.uri),i,{autolinks:a.autolinks.enabled,dateFormat:n.H.get("defaultDateFormat"),format:a.detailsMarkdownFormat,pullRequests:a.pullRequests.enabled,timeout:250})}};function p(e){let t=[],i=Math.floor(e.length/2),r=e.length%2?e[i].getTime():(e[i-1].getTime()+e[i].getTime())/2,s=(e[e.length-1].getTime()-r)/5;for(let e=5;e>0;e--)t.push(r+s*e);t.push(r),s=(r-e[0].getTime())/4;for(let e=1;e<=4;e++)t.push(r-s*e);return t}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&c(t,i,o)})([(0,a.Rm)({args:!1})],BlameAnnotationProviderBase.prototype,"getComputedHeatmap",1)},1667:(e,t,i)=>{i.d(t,{RK:()=>CommandMessageNode,S2:()=>MessageNode,cb:()=>LoadMoreNode});var r=i(1398),s=i(1182),o=i(2624),n=i(2870),a=i(5818);let MessageNode=class MessageNode extends a.eu{constructor(e,t,i,r,s,n,a,l){super("message",o.Bd,e,t),this.parent=t,this.message=i,this.description=r,this.tooltip=s,this.iconPath=n,this.contextValue=a,this.resourceUri=l}getChildren(){return[]}getTreeItem(){let e=new r.TreeItem(this.message,r.TreeItemCollapsibleState.None);return e.contextValue=this.contextValue??a.U0.Message,e.description=this.description,e.tooltip=this.tooltip,e.iconPath=this.iconPath,e.resourceUri=this.resourceUri,e}};let CommandMessageNode=class CommandMessageNode extends MessageNode{constructor(e,t,i,r,s,o,n,a,l){super(e,t,r,s,o,n,a,l),this.parent=t,this._command=i}getTreeItem(){let e=super.getTreeItem();return e instanceof r.TreeItem?(e.command=this._command,e):e.then(e=>(e.command=this._command,e))}};let PagerNode=class PagerNode extends a.eu{constructor(e,t,i,r,s){super("pager",o.Bd,e,t),this.message=i,this.previousNode=r,this.options=s}async loadAll(){let e=await this.options?.getCount?.()??0;return this.view.loadMoreNodeChildren(this.parent,5e3*(e>5e3),this.previousNode,this.options?.context)}loadMore(){return this.view.loadMoreNodeChildren(this.parent,this.options?.pageSize??n.H.get("views.pageItemLimit"),this.previousNode,this.options?.context)}getChildren(){return[]}getTreeItem(){let e=new r.TreeItem(this.message,r.TreeItemCollapsibleState.None);return e.contextValue=a.U0.Pager,e.command=this.getCommand(),e}getCommand(){return{title:"Load more",command:"gitlens.views.loadMoreChildren",arguments:[this]}}};let LoadMoreNode=class LoadMoreNode extends PagerNode{constructor(e,t,i,r){super(e,t,r?.message??(r?.pageSize===0?`Load all ${s.EO.Space}${s.EO.Dash}${s.EO.Space} this may take a while`:"Load more"),i,r)}}},1673:(e,t,i)=>{i.d(t,{x:()=>WebviewsController,c:()=>R});var r=i(1398),s=i(7808),o=i(4793),n=i(2141),a=i(6206),l=i(9091),u=i(4941),c=i(1003),h=i(5238);let WebviewCommandRegistrar=class WebviewCommandRegistrar{_commandRegistrations=new Map;dispose(){this._commandRegistrations.forEach(({subscription:e})=>void e.dispose())}registerCommand(e,t,i,r,s){let o=this._commandRegistrations.get(r);if(null==o){let e=new Map;o={subscription:(0,n.Ip)(r,(...t)=>{let[i]=t;if(!(0,h.RR)(i))return;let s=i.webviewInstance?`${i.webview}:${i.webviewInstance}`:i.webview,o=e.get(s);if(null==o)throw Error(`Unable to find Command '${r}' registration for Webview '${s}'`);o.callback.call(o.thisArg,i)},this),handlers:e},this._commandRegistrations.set(r,o)}let a=i?`${t}:${i}`:t;if(o.handlers.has(a))throw Error(`Command '${r}' has already been registered for Webview '${a}'`);return o.handlers.set(a,{callback:s,thisArg:e}),{dispose:()=>{o.handlers.delete(a),0===o.handlers.size&&(this._commandRegistrations.delete(r),o.subscription.dispose())}}}};var d=i(2692),p=Object.defineProperty,g=Object.getOwnPropertyDescriptor,m=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),f=e=>{throw TypeError(e)},w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?g(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&p(t,i,o),o},v=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&f("Object expected"),i&&(r=t[m("asyncDispose")]),void 0===r&&(r=t[m("dispose")],i&&(s=r)),"function"!=typeof r&&f("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},y=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let WebviewsController=class WebviewsController{constructor(e){this.container=e,this.disposables.push(this._commandRegistrar=new WebviewCommandRegistrar)}disposables=[];_commandRegistrar;_panels=new Map;_views=new Map;dispose(){this.disposables.forEach(e=>void e.dispose())}registerWebviewView(e,t,i){var s=[];try{let a=v(s,(0,c.bP)(`WebviewView(${e.id})`,!1)),l={descriptor:e};this._views.set(e.id,l);let h=[];h.push(r.window.registerWebviewViewProvider(e.id,{resolveWebviewView:async(i,s,n)=>{if(l.descriptor.plusFeature&&(!await (0,o.ZQ)()||n.isCancellationRequested))return;u.Vy.debug(a,"Resolving view"),i.webview.options={enableCommandUris:!0,enableScripts:!0,localResourceRoots:[r.Uri.file(this.container.context.extensionPath)],...e.webviewOptions},i.title=e.title;let c=await d.Id.create(this.container,this._commandRegistrar,e,void 0,i,t);l.controller?.dispose(),l.controller=c,h.push(c.onDidDispose(()=>{u.Vy.debug(a,"Disposing view"),l.pendingShowArgs=void 0,l.controller=void 0}),c);let[p,g]=l.pendingShowArgs??[];l.pendingShowArgs=void 0,null==g&&R(s)&&(g=[{state:s.state}]),u.Vy.debug(a,"Showing view"),await c.show(!0,p,...g??[])}},null!=e.webviewHostOptions?{webviewOptions:e.webviewHostOptions}:void 0));let p=r.Disposable.from(...h);return this.disposables.push(p),{id:e.id,get ready(){return l.controller?.ready??!1},get visible(){return l.controller?.visible??!1},dispose:function(){p.dispose()},refresh:function(e){return null!=l.controller?l.controller.refresh(e):Promise.resolve()},show:async function(t,...r){if(u.Vy.debug(a,"Showing view"),null!=l.controller)return l.controller.show(!1,t,...r);l.pendingShowArgs=[t,r],null!=i&&await i?.(...r),(0,n.S4)(`${e.id}.focus`,t)}}}catch(e){var a=e,l=!0}finally{y(s,a,l)}}registerWebviewPanel(e,t,i){var a=[];try{let g,m=v(a,(0,c.bP)(`WebviewPanel(${t.id})`,!1)),f={descriptor:t};this._panels.set(t.id,f);let w=[],{container:y,_commandRegistrar:R}=this;async function h(e,...t){let{descriptor:n}=f;if(n.plusFeature&&!await (0,o.ZQ)())return;y.usage.track(`${n.trackingFeature}:shown`).catch();let a=e?.column??n.column??r.ViewColumn.Beside;a===r.ViewColumn.Beside&&null==r.window.tabGroups.activeTabGroup.activeTab&&(a=r.ViewColumn.Active);let l=C(f,e,...t);if(null==l){let o;null!=g?(u.Vy.debug(m,"Restoring panel"),o=g,g=void 0):(u.Vy.debug(m,"Creating panel"),o=r.window.createWebviewPanel(n.id,n.title,{viewColumn:a,preserveFocus:e?.preserveFocus??!1},{enableCommandUris:!0,enableScripts:!0,localResourceRoots:[r.Uri.file(y.context.extensionPath)],...n.webviewOptions,...n.webviewHostOptions})),o.iconPath=r.Uri.file(y.context.asAbsolutePath(n.iconPath)),l=await d.Id.create(y,R,n,n.allowMultipleInstances?(0,s.uR)():void 0,o,i),f.controllers??=new Map,f.controllers.set(l.instanceId,l),w.push(l.onDidDispose(()=>{u.Vy.debug(m,`Disposing panel (${l.instanceId})`),f.controllers?.delete(l.instanceId)}),l),u.Vy.debug(m,`Showing panel (${l.instanceId})`),await l.show(!0,e,...t)}else u.Vy.debug(m,`Showing existing panel (${l.instanceId})`),await l.show(!1,e,...t)}async function p(e,t){g=e,u.Vy.debug(m,`Deserializing panel state=${null!=t?"<state>":"undefined"}`),await h({column:e.viewColumn,preserveFocus:!0,preserveInstance:!1},...null!=t?[{state:t}]:[])}let k=r.Disposable.from(...w,r.window.registerWebviewPanelSerializer(t.id,{deserializeWebviewPanel:p}),(0,n.Lb)(e.id,(t,...i)=>h({...e.options,...t},...i),this));return this.disposables.push(k),{id:t.id,get instances(){if(!f.controllers?.size)return[];return(0,l.Tj)(f.controllers.values(),e=>b(e))},getActiveInstance:function(){if(!f.controllers?.size)return;let e=(0,l.I6)(f.controllers.values(),e=>e.active??!1);return null!=e?b(e):void 0},getBestInstance:function(e,...t){let i=C(f,e,...t);return null!=i?b(i):void 0},splitActiveInstance:function(e){let t=null!=f.controllers?(0,l.I6)(f.controllers.values(),e=>e.active??!1):void 0,i=t?.getSplitArgs()??[];return h({...e,preserveInstance:!1},...i)},dispose:function(){k.dispose()},show:h}}catch(e){var g=e,m=!0}finally{y(a,g,m)}}};function b(e){return{id:e.id,instanceId:e.instanceId,ready:e.ready,active:e.active??!1,visible:e.visible,canReuseInstance:function(t,...i){return e.canReuseInstance(t,...i)},close:function(){e.parent.dispose()},dispose:function(){e.dispose()},refresh:function(t){return e.refresh(t)},show:function(t,...i){return e.show(!1,t,...i)}}}function C(e,t,...i){let r;if(e.controllers?.size)if(e.descriptor.allowMultipleInstances){if(t?.preserveInstance!==!1&&(t?.preserveInstance!=null&&"string"==typeof t.preserveInstance&&(r=e.controllers.get(t.preserveInstance)),null==r)){let s,o;for(let n of[...e.controllers.values()].sort((e,t)=>(e.active?-1:1)-(t.active?-1:1))){o??=n,n.active&&(s=n);let e=n.canReuseInstance(t,...i);if(!0===e){r=n;break}!1===e&&(o===n&&(o=void 0),s===n&&(s=void 0))}null==r&&t?.preserveInstance===!0&&(r=s??o)}}else r=(0,l.$1)(e.controllers)?.[1];return r}function R(e){return null!=e&&"object"==typeof e&&"state"in e&&null!=e.state&&"object"==typeof e.state}w([(0,a.Yz)({args:{0:e=>e.id,1:!1,2:!1},singleLine:!0})],WebviewsController.prototype,"registerWebviewView",1),w([(0,a.Yz)({args:{0:e=>e.id,1:e=>e.id,2:!1,3:!1},singleLine:!0})],WebviewsController.prototype,"registerWebviewPanel",1)},1678:(e,t,i)=>{i.d(t,{Dz:()=>u,H8:()=>c,MA:()=>p,XN:()=>m,aM:()=>g,cG:()=>h});var r=i(4478),s=i(1849),o=i(4941),n=i(8832),a=i(4269);function l(e){return void 0!==e.uuid}function u(e){let t=r.EntityType.Issue;"pullrequest"===e.type&&(t=r.EntityType.PullRequest);let i=function(e){switch(e){case"github":return r.EntityIdentifierProviderType.Github;case"cloud-github-enterprise":return r.EntityIdentifierProviderType.GithubEnterprise;case"cloud-gitlab-self-hosted":return r.EntityIdentifierProviderType.GitlabSelfHosted;case"gitlab":return r.EntityIdentifierProviderType.Gitlab;case"jira":return r.EntityIdentifierProviderType.Jira;case"azure":case"azureDevOps":case"azure-devops":return r.EntityIdentifierProviderType.Azure;case"bitbucket":return r.EntityIdentifierProviderType.Bitbucket;case"bitbucket-server":return r.EntityIdentifierProviderType.BitbucketServer;default:throw Error(`Unknown provider type '${e}'`)}}(e.provider.id),s=null;i!==r.EntityIdentifierProviderType.Github||(0,a.EO)(e.provider.domain)||(i=r.EntityIdentifierProviderType.GithubEnterprise,s=e.provider.domain),i!==r.EntityIdentifierProviderType.Gitlab||(0,a.Gz)(e.provider.domain)||(i=r.EntityIdentifierProviderType.GitlabSelfHosted,s=e.provider.domain);let o=null,n=null,u=null,c=null;if(i===r.EntityIdentifierProviderType.Jira){if("issue"!==e.type||null==e.project)throw Error("Jira issues must have a project");o=e.project.id,n=e.project.resourceId}else if(i===r.EntityIdentifierProviderType.Azure){let i=l(e)?e.underlyingPullRequest?.project:e.project;if(null==i)throw Error("Azure issues and PRs must have a project to be encoded");if(o=i.id,u=i.resourceName,c=l(e)?e.underlyingPullRequest?.repository.id:e.repository?.id,t===r.EntityType.PullRequest&&null==c)throw Error("Azure PRs must have a repository ID to be encoded")}else(i===r.EntityIdentifierProviderType.Bitbucket||i===r.EntityIdentifierProviderType.BitbucketServer)&&(c=l(e)?e.underlyingPullRequest?.repository.id:e.repository?.id);let h=l(e)?e.graphQLId:e.nodeId;return i===r.EntityIdentifierProviderType.Azure&&(h=l(e)?e.underlyingPullRequest?.id:e.id),{accountOrOrgId:null,organizationName:u,projectId:o,repoId:c??null,resourceId:n,provider:i,entityType:t,version:r.EntityVersion.One,domain:s,entityId:h}}function c(e){switch(e.provider){case r.EntityIdentifierProviderType.Github:return s.Q7.GitHub;case r.EntityIdentifierProviderType.GithubEnterprise:return d(e)&&e.metadata.isCloudEnterprise?s.PY.CloudGitHubEnterprise:s.PY.GitHubEnterprise;case r.EntityIdentifierProviderType.Gitlab:return s.Q7.GitLab;case r.EntityIdentifierProviderType.GitlabSelfHosted:return d(e)&&e.metadata.isCloudEnterprise?s.PY.CloudGitLabSelfHosted:s.PY.GitLabSelfHosted;case r.EntityIdentifierProviderType.Jira:return s.tp.Jira;case r.EntityIdentifierProviderType.Azure:return s.Q7.AzureDevOps;case r.EntityIdentifierProviderType.Bitbucket:return s.Q7.Bitbucket;case r.EntityIdentifierProviderType.BitbucketServer:return d(e)&&e.metadata.isCloudEnterprise?s.PY.BitbucketServer:void 0;default:return}}function h(e,t){let i={key:t.key,name:t.name,id:void 0,owner:void 0};if((0,n.yK)(t))i.owner=t.owner;else if((0,n.dQ)(t))i.id=t.id;else throw Error("Invalid owner");return{...u(e),metadata:{id:e.id,owner:i,createdDate:new Date().toISOString(),isCloudEnterprise:(0,a.Ii)(e.provider.id)}}}function d(e){return null!=e&&"object"==typeof e&&"provider"in e&&null!=e.provider&&"entityType"in e&&null!=e.entityType&&"version"in e&&null!=e.version&&"entityId"in e&&null!=e.entityId&&"metadata"in e&&null!=e.metadata&&"object"==typeof e.metadata&&"id"in e.metadata&&null!=e.metadata.id&&"owner"in e.metadata&&null!=e.metadata.owner&&"createdDate"in e.metadata&&null!=e.metadata.createdDate}function p(e){let t=JSON.parse(e);if(!(Array.isArray(t)&&t.every(e=>d(e))))return o.Vy.error("Invalid entity identifiers in git config"),[];for(let e of t)if(e.provider===r.EntityIdentifierProviderType.Jira&&(null==e.resourceId||null==e.projectId)){o.Vy.error("Invalid Jira issue in git config");continue}return t}async function g(e,t){if(t.entityType!==r.EntityType.Issue||t.provider!==r.EntityIdentifierProviderType.Jira&&t.provider!==r.EntityIdentifierProviderType.Github&&t.provider!==r.EntityIdentifierProviderType.Gitlab&&t.provider!==r.EntityIdentifierProviderType.GithubEnterprise&&t.provider!==r.EntityIdentifierProviderType.GitlabSelfHosted&&t.provider!==r.EntityIdentifierProviderType.Bitbucket&&t.provider!==r.EntityIdentifierProviderType.BitbucketServer&&t.provider!==r.EntityIdentifierProviderType.Azure)return;let i=c(t);if(null==i)return;let s=await e.integrations.get(i);if(null!=s)return s.getIssue({id:t.metadata.owner.id,key:t.metadata.owner.key,owner:t.metadata.owner.owner,name:t.metadata.owner.name},t.metadata.id)}function m(e){let t="azure"===e.provider.id||s.Q7.AzureDevOps||"azure-devops";return e.repository?{key:`${e.repository.owner}/${e.repository.repo}`,owner:e.repository.owner,name:e.repository.repo}:e.project?{key:t?e.project.id:e.project.resourceId,id:t?e.project.id:e.project.resourceId,owner:t?e.project.resourceName:void 0,name:t?e.project.name:e.project.resourceName}:void 0}},1705:(e,t,i)=>{i.d(t,{$j:()=>k,C6:()=>y,Do:()=>GitSearchError,HT:()=>CherryPickError,JW:()=>D,N$:()=>WorktreeDeleteError,O7:()=>S,Oo:()=>StashPushError,Uz:()=>StashApplyError,Vu:()=>PausedOperationContinueError,W:()=>v,a_:()=>w,iX:()=>WorktreeCreateError,ol:()=>ApplyPatchCommitError,z2:()=>P});var r,s,o,n,a,l,u,c,h,d,p,g,m,f=i(4808);let GitSearchError=class GitSearchError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,GitSearchError)}};var w=((r=w||{})[r.StashFailed=0]="StashFailed",r[r.CreateWorktreeFailed=1]="CreateWorktreeFailed",r[r.ApplyFailed=2]="ApplyFailed",r[r.ApplyAbortedWouldOverwrite=3]="ApplyAbortedWouldOverwrite",r[r.AppliedWithConflicts=4]="AppliedWithConflicts",r);let ApplyPatchCommitError=class ApplyPatchCommitError extends Error{static is(e,t){return e instanceof ApplyPatchCommitError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i){super(t||="Unable to apply patch"),this.original=i,this.reason=e,Error.captureStackTrace?.(this,ApplyPatchCommitError)}};var v=((s=v||{})[s.WorkingChanges=0]="WorkingChanges",s);let StashApplyError=class StashApplyError extends Error{static is(e,t){return e instanceof StashApplyError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;null==e?i="Unable to apply stash":"string"==typeof e?(i=e,r=void 0):(r=e,i="Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"),super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,StashApplyError)}};var y=((o=y||{})[o.ConflictingStagedAndUnstagedLines=0]="ConflictingStagedAndUnstagedLines",o[o.NothingToSave=1]="NothingToSave",o);let StashPushError=class StashPushError extends Error{static is(e,t){return e instanceof StashPushError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to stash";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 0:i="Changes were stashed, but the working tree cannot be updated because at least one file has staged and unstaged changes on the same line(s)";break;case 1:i="No files to stash";break;default:i="Unable to stash"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,StashApplyError)}};var b=((n=b||{})[n.RemoteAhead=0]="RemoteAhead",n[n.TipBehind=1]="TipBehind",n[n.PushRejected=2]="PushRejected",n[n.PushRejectedWithLease=3]="PushRejectedWithLease",n[n.PushRejectedWithLeaseIfIncludes=4]="PushRejectedWithLeaseIfIncludes",n[n.PermissionDenied=5]="PermissionDenied",n[n.RemoteConnection=6]="RemoteConnection",n[n.NoUpstream=7]="NoUpstream",n[n.Other=8]="Other",n),C=((a=C||{})[a.Conflict=0]="Conflict",a[a.GitIdentity=1]="GitIdentity",a[a.RemoteConnection=2]="RemoteConnection",a[a.UnstagedChanges=3]="UnstagedChanges",a[a.UnmergedFiles=4]="UnmergedFiles",a[a.UncommittedChanges=5]="UncommittedChanges",a[a.OverwrittenChanges=6]="OverwrittenChanges",a[a.RefLocked=7]="RefLocked",a[a.RebaseMultipleBranches=8]="RebaseMultipleBranches",a[a.TagConflict=9]="TagConflict",a[a.Other=10]="Other",a),R=((l=R||{})[l.NoFastForward=0]="NoFastForward",l[l.NoRemote=1]="NoRemote",l[l.RemoteConnection=2]="RemoteConnection",l[l.Other=3]="Other",l),k=((u=k||{})[u.AbortedWouldOverwrite=0]="AbortedWouldOverwrite",u[u.Conflicts=1]="Conflicts",u[u.EmptyCommit=2]="EmptyCommit",u[u.Other=3]="Other",u);let CherryPickError=class CherryPickError extends Error{static is(e,t){return e instanceof CherryPickError&&(null==t||e.reason===t)}original;reason;constructor(e,t,i){let r,s,o=`Unable to cherry-pick${i?.length?1===i.length?` commit '${i[0]}'`:` ${(0,f.td)("commit",i.length)}`:""}`;if(null==e)r=o;else if("string"==typeof e)r=e,s=void 0;else switch(s=e){case 0:r=`${o} as some local changes would be overwritten.`;break;case 1:r=`${o} due to conflicts.`;break;default:r=o}super(r),this.original=t,this.reason=s,Error.captureStackTrace?.(this,CherryPickError)}};var S=((c=S||{})[c.AlreadyCheckedOut=0]="AlreadyCheckedOut",c[c.AlreadyExists=1]="AlreadyExists",c);let WorktreeCreateError=class WorktreeCreateError extends Error{static is(e,t){return e instanceof WorktreeCreateError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to create worktree";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 0:i="Unable to create worktree because it is already checked out";break;case 1:i="Unable to create worktree because it already exists"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,WorktreeCreateError)}};var P=((h=P||{})[h.HasChanges=0]="HasChanges",h[h.DefaultWorkingTree=1]="DefaultWorkingTree",h[h.DirectoryNotEmpty=2]="DirectoryNotEmpty",h);let WorktreeDeleteError=class WorktreeDeleteError extends Error{static is(e,t){return e instanceof WorktreeDeleteError&&(null==t||e.reason===t)}original;reason;constructor(e,t){let i,r;if(null==e)i="Unable to delete worktree";else if("string"==typeof e)i=e,r=void 0;else switch(r=e){case 0:i="Unable to delete worktree because there are uncommitted changes";break;case 1:i="Cannot delete worktree because it is the default working tree"}super(i),this.original=t,this.reason=r,Error.captureStackTrace?.(this,WorktreeDeleteError)}};var A=((d=A||{})[d.TagAlreadyExists=0]="TagAlreadyExists",d[d.TagNotFound=1]="TagNotFound",d[d.InvalidTagName=2]="InvalidTagName",d[d.PermissionDenied=3]="PermissionDenied",d[d.RemoteRejected=4]="RemoteRejected",d[d.Other=5]="Other",d),I=((p=I||{})[p.NothingToAbort=0]="NothingToAbort",p),D=((g=D||{})[g.EmptyCommit=0]="EmptyCommit",g[g.NothingToContinue=1]="NothingToContinue",g[g.UnmergedFiles=2]="UnmergedFiles",g[g.UncommittedChanges=3]="UncommittedChanges",g[g.UnstagedChanges=4]="UnstagedChanges",g[g.UnresolvedConflicts=5]="UnresolvedConflicts",g[g.WouldOverwrite=6]="WouldOverwrite",g);let PausedOperationContinueError=class PausedOperationContinueError extends Error{static is(e,t){return e instanceof PausedOperationContinueError&&(null==t||e.reason===t)}original;reason;operation;constructor(e,t,i,r){super(i||="Unable to continue operation"),this.original=r,this.reason=e,this.operation=t,Error.captureStackTrace?.(this,PausedOperationContinueError)}};var _=((m=_||{})[m.AmbiguousArgument=0]="AmbiguousArgument",m[m.ChangesWouldBeOverwritten=1]="ChangesWouldBeOverwritten",m[m.DetachedHead=2]="DetachedHead",m[m.EntryNotUpToDate=3]="EntryNotUpToDate",m[m.PermissionDenied=4]="PermissionDenied",m[m.RefLocked=5]="RefLocked",m[m.Other=6]="Other",m[m.UnmergedChanges=7]="UnmergedChanges",m)},1820:(e,t,i)=>{i.d(t,{FH:()=>n,Fv:()=>l,a:()=>d,ej:()=>c,jI:()=>s,jh:()=>r,lh:()=>o,mJ:()=>a,xS:()=>h,zJ:()=>u});let r={id:"gitkraken",name:"GitKraken AI (Preview)",primary:!0,requiresAccount:!0,requiresUserKey:!1},s={id:"vscode",name:"Copilot",primary:!0,requiresAccount:!1,requiresUserKey:!1},o={id:"openai",name:"OpenAI",primary:!1,requiresAccount:!0,requiresUserKey:!0},n={id:"anthropic",name:"Anthropic",primary:!1,requiresAccount:!0,requiresUserKey:!0},a={id:"gemini",name:"Google",primary:!1,requiresAccount:!0,requiresUserKey:!0},l={id:"deepseek",name:"DeepSeek",primary:!1,requiresAccount:!0,requiresUserKey:!0},u={id:"xai",name:"xAI",primary:!1,requiresAccount:!0,requiresUserKey:!0},c={id:"github",name:"GitHub Models",primary:!1,requiresAccount:!0,requiresUserKey:!0},h={id:"huggingface",name:"Hugging Face",primary:!1,requiresAccount:!0,requiresUserKey:!0},d={id:"openrouter",name:"OpenRouter",primary:!1,requiresAccount:!0,requiresUserKey:!0}},1831:(e,t,i)=>{i.d(t,{e:()=>CommitNode});var r=i(1398),s=i(8103),o=i(2141),n=i(2870),a=i(9615),l=i(2812),u=i(9686),c=i(7864),h=i(4808),d=i(1016),p=i(5818),g=i(7273),m=i(4401),f=i(8902),w=i(6230);let CommitNode=class CommitNode extends g.t{constructor(e,t,i,r,s,o,n={}){super("commit",i.getGitUri(),e,t),this.commit=i,this.unpublished=r,this.branch=s,this.getBranchAndTagTips=o,this._options=n,this.updateContext({commit:i}),this._uniqueId=(0,p.pF)(this.type,this.context)}dispose(){super.dispose(),this.children=void 0}get id(){return this._uniqueId}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this.branch?.current&&this.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}_children;get children(){return this._children}set children(e){this._children!==e&&((0,d.lm)(this._children,e),this._children=e)}async getChildren(){if(null==this.children){let e,t,i=this.commit,r=[];if("tags"!==this.view.type&&!this.unpublished&&this.view.config.pullRequests?.enabled&&this.view.config.pullRequests?.showForCommits&&null==this.context.pullRequest&&(0,a.SD)("gitlens:repos:withHostingIntegrationsConnected")?.includes(i.repoPath)&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")){e=(0,c.v6)();let t=this.getAssociatedPullRequest(i);queueMicrotask(async()=>{await e?.promise;let r=!1,s=setTimeout(()=>{r=!0,this.view.triggerNodeChange(this)},250),o=await t;clearTimeout(s),null!=o&&null!=this.children&&this.children.unshift(new w.Xu(this.view,this,o,i)),(r||null!=o)&&this.view.triggerNodeChange(this)})}for(let e of(await i.getCommitsForFiles({include:{stats:!0}})))r.push(new m.k(this.view,this,e.file,e));if("list"!==this.view.config.files.layout){let e=(0,l.Ay)(r,e=>e.uri.relativePath.split("/"),(...e)=>(0,u.Fd)((0,u.HS)(...e)),this.view.config.files.compact);r=new f.x(this.view,this,e,this.repoPath,"",void 0).getChildren()}else r.sort((e,t)=>(0,h.wN)(e.label,t.label));null!=t&&r.unshift(new w.Xu(this.view,this,t,i)),this.children=r,setTimeout(()=>e?.fulfill(),1)}return this.children}async getTreeItem(){let e=s.c.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:n.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),t=new r.TreeItem(e,this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=`${p.U0.Commit}${this.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this.unpublished?"+unpublished":""}`,t.description=s.c.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:n.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),t.iconPath=null!=this.getState("pendingPullRequest")?new r.ThemeIcon("loading~spin"):this.unpublished?new r.ThemeIcon("arrow-up",new r.ThemeColor("gitlens.unpublishedCommitIconColor")):this.view.config.avatars?await this.commit.getAvatarUri({defaultStyle:n.H.get("defaultGravatarsStyle")}):void 0,t}getCommand(){return(0,o.gu)("gitlens.diffWithPrevious","Open Changes with Previous Revision",void 0,{commit:this.commit,uri:this.uri,line:0,showOptions:{preserveFocus:!0,preview:!0}})}refresh(e){super.refresh?.(e),this.children=void 0,e&&this.deleteState()}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}async getTooltip(e){let t,i,[o,a]=await Promise.allSettled([this.view.container.git.remotes(this.commit.repoPath).getBestRemotesWithProviders(e),this.commit.ensureFullDetails({include:{stats:!0}})]);if(e.isCancellationRequested)return;let l=(0,c.Ro)(o,[]),[u]=l;if(u?.hasIntegration()){let[r,s]=await Promise.allSettled([(0,c.zu)(this.commit.getEnrichedAutolinks(u),e),this.getAssociatedPullRequest(this.commit,u)]);if(e.isCancellationRequested)return;let o=(0,c.Ro)(r);o?.paused||(t=o?.value),i=(0,c.Ro)(s)}let h=await s.c.fromTemplateAsync(this.getTooltipTemplate(),this.commit,{enrichedAutolinks:t,dateFormat:n.H.get("defaultDateFormat"),getBranchAndTagTips:this.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequest:i,outputFormat:"markdown",remotes:l,unpublished:this.unpublished}),d=new r.MarkdownString(h,!0);return d.supportHtml=!0,d.isTrusted=!0,d}getTooltipTemplate(){return this.view.config.formats.commits.tooltip}}},1838:(e,t,i)=>{function r(e){if(!e.hasFullDetails())throw Error(`GitCommit(${e.sha}) is not fully loaded`)}function s(e){return null==e?0:"number"==typeof e?e:e.added+e.changed+e.deleted}function o(e){if(!e)return{summary:""};let t=e.trim(),i=t.indexOf(`
`);return i<0?{summary:t}:{summary:t.substring(0,i),body:t.substring(i+1).trim()}}i.d(t,{TH:()=>o,Zx:()=>s,aQ:()=>r})},1849:(e,t,i)=>{i.d(t,{LT:()=>h,PY:()=>a,Q7:()=>n,U4:()=>d,aT:()=>u,rK:()=>c,tp:()=>l});var r,s,o,n=((r=n||{}).GitHub="github",r.GitLab="gitlab",r.Bitbucket="bitbucket",r.AzureDevOps="azureDevOps",r),a=((s=a||{}).BitbucketServer="bitbucket-server",s.GitHubEnterprise="github-enterprise",s.CloudGitHubEnterprise="cloud-github-enterprise",s.CloudGitLabSelfHosted="cloud-gitlab-self-hosted",s.GitLabSelfHosted="gitlab-self-hosted",s),l=((o=l||{}).Jira="jira",o.Trello="trello",o);let u=["jira"],c=["github","cloud-github-enterprise","gitlab","cloud-gitlab-self-hosted","azureDevOps","bitbucket","bitbucket-server","jira"];function h(e){return c.includes(e)}let d=[{id:"github",name:"GitHub",icon:"gl-provider-github",supports:["prs","issues"],requiresPro:!1},{id:"cloud-github-enterprise",name:"GitHub Enterprise",icon:"gl-provider-github",supports:["prs","issues"],requiresPro:!0},{id:"gitlab",name:"GitLab",icon:"gl-provider-gitlab",supports:["prs","issues"],requiresPro:!1},{id:"cloud-gitlab-self-hosted",name:"GitLab Self-Hosted",icon:"gl-provider-gitlab",supports:["prs","issues"],requiresPro:!0},{id:"azureDevOps",name:"Azure DevOps",icon:"gl-provider-azdo",supports:["prs","issues"],requiresPro:!0},{id:"bitbucket",name:"Bitbucket",icon:"gl-provider-bitbucket",supports:["prs","issues"],requiresPro:!1},{id:"bitbucket-server",name:"Bitbucket Data Center",icon:"gl-provider-bitbucket",supports:["prs"],requiresPro:!0},{id:"jira",name:"Jira",icon:"gl-provider-jira",supports:["issues"],requiresPro:!0}]},1866:(e,t,i)=>{i.d(t,{y:()=>w});var r=i(2624),s=i(5853),o=i(6770),n=i(5962),a=i(7019),l=i(8397),u=i(2141),c=i(5231),h=i(4941),d=i(9442),p=i(7193),g=i(7945),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor;let w=class extends d.Zr{constructor(e){super(["gitlens.openCommitOnRemote","gitlens.copyRemoteCommitUrl"],["gitlens.openCommitInRemote"]),this.container=e}static createMarkdownCommandLink(e){return(0,c.J)("gitlens.openCommitOnRemote","string"==typeof e?{sha:e}:e)}preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line}),(0,g.j7)(e)){if(e.node.commit.isUncommitted)return Promise.resolve(void 0);t={...t,sha:e.node.commit.sha},i=e.node.uri}return(0,g.Bp)(e)&&(t={sha:e.item.ref},i=e.uri),"gitlens.copyRemoteCommitUrl"===e.command&&(t={...t,clipboard:!0}),this.execute(e.editor,i,t)}async execute(e,t,i){let c=null!=(t=(0,p.q)(t,e))?await r.nk.fromUri(t):void 0,d=(await (0,l.X)(c,e,i?.clipboard?"Copy Remote Commit URL":"Open Commit On Remote"))?.path;if(d){null==c&&(c=r.nk.fromRepoPath(d)),i={...i};try{if(null==i.sha){let t=i.line??e?.selection.active.line;if(null==t)return;let r=await this.container.git.getBlameForLine(c,t,e?.document);if(null==r)return void(0,a.gD)(i?.clipboard?"Unable to copy the commit SHA":"Unable to open the commit on the remote provider");i.sha=r.commit.isUncommitted?await r.commit.getPreviousSha()??o.nB:r.commit.sha}if(null==i.sha||i.sha===o.nB||(0,n._k)(i.sha))return void(0,a.pW)(i?.clipboard?"Unable to copy the commit SHA":"Unable to open the commit on the remote provider");await (0,u.RS)("gitlens.openOnRemote",{resource:{type:s.J.Commit,sha:i.sha},repoPath:d,clipboard:i.clipboard})}catch(e){h.Vy.error(e,"OpenCommitOnRemoteCommand"),(0,a.qQ)("Unable to open commit on remote provider")}}}};w=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o})([(0,u.G5)()],w)},1902:(e,t,i)=>{i.d(t,{X:()=>n});var r=i(1398),s=i(2099),o=i(2870);async function n(e,t){if(!o.H.get("cloudPatches.enabled")){let e={title:"Enable"};if(await r.window.showInformationMessage("Cloud Patches are currently disabled. Would you like to enable them?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return;await o.H.updateEffective("cloudPatches.enabled",!0)}return"create"===e.mode&&(t={...t,preserveFocus:!1,preserveVisibility:!1}),s.m.instance.views.patchDetails.show(t,e)}},1945:(e,t,i)=>{i.d(t,{c:()=>o});var r=i(1398),s=i(2476);let o=(0,i(6209).An)((e,t,i,o)=>(0,s.Ff)(e.integrations.ignoreSSLErrors({id:t,domain:i.domain}),async()=>{let e=await r.authentication.getSession(t,i.scopes,{createIfNone:o?.createIfNeeded,silent:o?.silent,forceNewSession:o?.forceNewSession});if(null!=e)return{...e,cloud:!1,domain:i.domain}}))},1957:(e,t,i)=>{i.d(t,{t:()=>PageableResult});let PageableResult=class PageableResult{constructor(e,t){this.fetch=e,this.cached=t}cached;async *values(){if(null!=this.cached)for(let e of this.cached.values)yield e;let e=this.cached;for(;null==e||e.paging?.more;)for(let t of(e=await this.fetch(e?.paging),null==this.cached?this.cached=e:(this.cached.values.push(...e.values),this.cached.paging=e.paging),e.values))yield t}}},1982:(e,t,i)=>{i.d(t,{L:()=>DraftService,y:()=>C});var r=i(928),s=i(3037),o=i(8219),n=i(1545),a=i(5962),l=i(6206),u=i(4941),c=i(1003),h=i(7864),d=i(4269),p=i(1678),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};let DraftService=class DraftService{constructor(e,t){this.container=e,this.connection=t}dispose(){}async createDraft(e,t,i,r){let s=(0,c.dQ)();try{let o,n,a,l=await Promise.allSettled(i.map(e=>this.getCreateDraftPatchRequestFromChange(e)));if(!l.length)throw Error("No changes found");let u=[],c=[];for(let e of l)"fulfilled"===e.status?e.value.contents&&(u.push(e.value),null==o&&(o=e.value.user)):c.push(e.reason);if(c.length)throw AggregateError(c,"Unable to create draft");if("suggested_pr_change"===e){if(r?.prEntityId==null)throw Error("No pull request info provided");a={prEntityId:r.prEntityId};let e=u[0].repository,t=await this.getProviderAuthFromRepoOrIntegrationId(e);if(null==t)throw Error("No provider integration found");n={"Provider-Auth":Buffer.from(JSON.stringify(t)).toString("base64")}}let h=await this.connection.fetchGkApi("v1/drafts",{method:"POST",body:JSON.stringify({type:e,title:t,description:r?.description,visibility:r?.visibility??"public"})});h.ok||await w("Unable to create draft",h,s);let d=(await h.json()).data.id,p=await this.connection.fetchGkApi(`v1/drafts/${d}/changesets`,{method:"POST",body:JSON.stringify({gitUserName:o?.name,gitUserEmail:o?.email,patches:u.map(e=>e.patch)}),headers:n});p.ok||await w(`Unable to create changeset for draft '${d}'`,p,s);let g=(await p.json()).data,m=[],f=0;for(let e of g.patches){let{url:t,method:i,headers:r}=e.secureUploadData,{contents:s,repository:o}=u[f++];if(null==s)throw Error(`No contents found for ${e.baseCommitSha}`);let n=await o.git.diff().getDiffFiles?.(s),a=n?.files.map(t=>({...t,gkRepositoryId:e.gitRepositoryId}))??[];await this.connection.fetch(t,{method:i,headers:{"Content-Type":"text/plain",...r},body:s});let l=b({...e,secureDownloadData:void 0},{contents:s,files:a,repository:o});m.push(l)}let C=await this.connection.fetchGkApi(`v1/drafts/${d}/publish`,{method:"POST",headers:n,body:null!=a?JSON.stringify(a):void 0});C.ok||await w(`Failed to publish draft '${d}'`,C,s);let R=await this.connection.fetchGkApi(`v1/drafts/${d}`,{method:"GET",headers:n});R.ok||await w(`Unable to open draft '${d}'`,R,s);let k=(await R.json()).data,{account:S}=await this.container.subscription.getSubscription(),P=v(k,{account:S});return P.changesets=[{...y({...g,patches:[]}),patches:m}],P}catch(e){throw u.Vy.error(e,s),e}}async getCreateDraftPatchRequestFromChange(e){let t,i=(0,a._k)(e.revision.to),[r,s,o,n,l]=await Promise.allSettled([i?e.repository.git.branches().getBranch().then(e=>null!=e?[e.name]:void 0):e.repository.git.branches().getBranchesWithCommits([e.revision.to,e.revision.from]),null==e.contents?e.repository.git.diff().getDiff?.(e.revision.to,e.revision.from):void 0,e.repository.git.commits().getInitialCommitSha?.(),e.repository.git.remotes().getBestRemoteWithProvider(),e.repository.git.config().getCurrentUser()]),u=(0,h.Ro)(o),c=(0,h.Ro)(n);if(null==c){if(null==u)throw Error("No remote or initial commit found");t={initialCommitSha:u}}else t={initialCommitSha:u,remote:{url:c.url,domain:c.domain,path:c.path},provider:c.provider.providerDesc};let d=(0,h.Ro)(s),p=e.contents??d?.contents;if(null==p)throw Error(`Unable to diff ${e.revision.from} and ${e.revision.to}`);let g=(0,h.Ro)(l),m=(0,h.Ro)(r),f=m?.[0]??"HEAD",w=e.revision.from;if(!(0,a.HH)(w)){let t=await this.container.git.commits(e.repository.uri).getCommit(w);null!=t&&(w=t.sha)}return{patch:{baseCommitSha:w,baseBranchName:f,gitRepoData:t,prEntityId:e.prEntityId},contents:p,repository:e.repository,user:g}}async deleteDraft(e){await this.connection.fetchGkApi(`v1/drafts/${e}`,{method:"DELETE"})}async archiveDraft(e,t){let i=(0,c.dQ)();try{let r,s=t?.providerAuth;if("provider_access"===e.visibility&&null==s&&(s=await this.getProviderAuthForDraft(e),null==s))throw Error("No provider integration found");null!=s&&(r={"Provider-Auth":Buffer.from(JSON.stringify(s)).toString("base64")});let o=await this.connection.fetchGkApi(`v1/drafts/${e.id}/archive`,{method:"POST",body:t?.archiveReason!=null?JSON.stringify({archiveReason:t.archiveReason}):void 0,headers:r});o.ok||await w(`Unable to archive draft '${e.id}'`,o,i)}catch(e){throw u.Vy.error(e,i),e}}async getDraft(e,t){let i,r=(0,c.dQ)();t?.providerAuth&&(i={"Provider-Auth":Buffer.from(JSON.stringify(t.providerAuth)).toString("base64")});let[s,o]=await Promise.allSettled([this.connection.fetchGkApi(`v1/drafts/${e}`,{method:"GET",headers:i}),this.getChangesets(e)]);if("rejected"===s.status)throw u.Vy.error(s.reason,r,`Unable to open draft '${e}': ${s.reason}`),Error(`Unable to open draft '${e}': ${s.reason}`);if("rejected"===o.status)throw u.Vy.error(o.reason,r,`Unable to open changeset for draft '${e}': ${o.reason}`),Error(`Unable to open changesets for draft '${e}': ${o.reason}`);let n=(0,h.Ro)(s);n?.ok||await w(`Unable to open draft '${e}'`,n,r);let a=(await n.json()).data,l=(0,h.Ro)(o),[d,p]=await Promise.allSettled([this.container.subscription.getSubscription(),this.container.organizations.getMembers(a.organizationId)]),g=v(a,{account:(0,h.Ro)(d)?.account,members:(0,h.Ro)(p)});return g.changesets=l,g}async getDrafts(e){return this.getDraftsCore(e?{isArchived:e}:void 0)}async getDraftsCore(e){let t,i=(0,c.dQ)(),r=[],s=!1;if(e?.prEntityId!=null){if(null==e.providerAuth)throw Error("No provider integration found");s=!0,r.push(`prEntityId=${encodeURIComponent(e.prEntityId)}`)}e?.isArchived&&r.push("archived=true"),e?.providerAuth&&(t={"Provider-Auth":Buffer.from(JSON.stringify(e.providerAuth)).toString("base64")});let o=await this.connection.fetchGkApi("/v1/drafts",{method:"GET",headers:t},{query:r.length?r.join("&"):void 0});o.ok||await w("Unable to open drafts",o,i);let n=(await o.json()).data;if(0===n.length)return[];let[a,l]=await Promise.allSettled([this.container.subscription.getSubscription(),this.container.organizations.getMembers()]),u=(0,h.Ro)(a)?.account,d=(0,h.Ro)(l);return n.map(e=>v(e,{account:u,members:d,fromPrEntityId:s}))}async getChangesets(e){let t=(0,c.dQ)();try{let i=await this.connection.fetchGkApi(`/v1/drafts/${e}/changesets`,{method:"GET"});i.ok||await w(`Unable to open changesets for draft '${e}'`,i,t);let r=(await i.json()).data,s=[];for(let e of r){let t=y(e);s.push(t)}return s}catch(e){throw u.Vy.error(e,t),e}}async getPatch(e){let t=await this.getPatchCore(e),i=await this.getPatchDetails(t);return t.contents=i.contents,t.files=i.files,t.repository=i.repository,t}async getPatchCore(e){let t=(0,c.dQ)(),i=await this.connection.fetchGkApi(`/v1/patches/${e}`,{method:"GET"});return i.ok||await w(`Unable to open patch '${e}'`,i,t),b((await i.json()).data)}async getPatchDetails(e){let t="string"==typeof e?await this.getPatchCore(e):e,[i,r]=await Promise.allSettled([this.getPatchContentsCore(t.secureLink),this.getRepositoryOrIdentity(t.draftId,t.gkRepositoryId,{openIfNeeded:!0,skipRefValidation:!0})]),s=(0,h.Ro)(i),n=(0,h.Ro)(r),a="";(0,o.Z6)(n)&&(a=n.path);let l=await this.container.git.diff(a).getDiffFiles?.(s),u=l?.files.map(e=>({...e,gkRepositoryId:t.gkRepositoryId}))??[];return{id:t.id,contents:s,files:u,repository:n}}async getPatchContentsCore(e){let{url:t,method:i,headers:r}=e;return(await this.connection.fetch(t,{method:i,headers:{Accept:"text/plain",...r}})).text()}async updateDraftVisibility(e,t){let i=(0,c.dQ)();try{let r=await this.connection.fetchGkApi(`/v1/drafts/${e}`,{method:"PATCH",body:JSON.stringify({visibility:t})});return r?.ok===!1&&await w(`Unable to update draft '${e}'`,r,i),(await r.json()).data}catch(e){throw u.Vy.error(e,i),e}}async getDraftUsers(e){let t=(0,c.dQ)();try{let i=await this.connection.fetchGkApi(`/v1/drafts/${e}/users`,{method:"GET"});return i?.ok===!1&&await w(`Unable to get users for draft '${e}'`,i,t),(await i.json()).data}catch(e){throw u.Vy.error(e,t),e}}async addDraftUsers(e,t){let i=(0,c.dQ)();try{if(0===t.length)throw Error("No changes found");let r=await this.connection.fetchGkApi(`/v1/drafts/${e}/users`,{method:"POST",body:JSON.stringify({id:e,users:t})});return r?.ok===!1&&await w(`Unable to add users for draft '${e}'`,r,i),(await r.json()).data}catch(e){throw u.Vy.error(e,i),e}}async removeDraftUser(e,t){let i=(0,c.dQ)();try{let r=await this.connection.fetchGkApi(`/v1/drafts/${e}/users/${t}`,{method:"DELETE"});return r?.ok===!1&&await w(`Unable to update user ${t} for draft '${e}'`,r,i),!0}catch(e){throw u.Vy.error(e,i),e}}async getRepositoryOrIdentity(e,t,i){let r=await this.getRepositoryIdentity(e,t);return await this.container.repositoryIdentity.getRepository(r,i)??r}async getRepositoryIdentity(e,t){let i,r=await this.connection.fetchGkApi(`/v1/drafts/${e}/git-repositories/${t}`,{method:"GET"}),s=(await r.json()).data;if("name"in s&&"string"==typeof s.name)i=s.name;else if(s.provider?.repoName!=null)i=s.provider.repoName;else if(s.remote?.url!=null&&s.remote?.domain!=null&&s.remote?.path!=null){let e=(await (0,n.m)(this.container))(s.remote.url,s.remote.domain,s.remote.path,void 0);i=e?.repoName??s.remote.path}else i=s.remote?.path??`Unknown ${s.initialCommitSha?` (${(0,a.pV)(s.initialCommitSha)})`:""}`;return{id:s.id,createdAt:new Date(s.createdAt),updatedAt:new Date(s.updatedAt),name:i,initialCommitSha:s.initialCommitSha,remote:s.remote,provider:s.provider}}async getProviderAuthFromRepoOrIntegrationId(e){let t;if((0,o.Z6)(e)){let i=await e.git.remotes().getBestRemoteWithIntegration();if(null==i)return;t=await i.getIntegration()}else{let i=d.Mt[e];if(null==i)return;t=await this.container.integrations.get(e,i.domain)}if(null==t)return;let i=await t.getSession("code-suggest");if(null!=i)return{provider:t.authProvider.id,token:i.accessToken}}async getProviderAuthForDraft(e){let t,i;if(null!=e.changesets&&0!==e.changesets.length){for(let i of e.changesets){let e=i.patches?.find(e=>e.repository??e.gkRepositoryId);null!=e&&(t=e)}if(null!=t){if(null!=t.repository&&(i=t.repository instanceof o.LN?t.repository:await this.container.repositoryIdentity.getRepository(t.repository)),null==i){let r=await this.getRepositoryOrIdentity(e.id,t.gkRepositoryId);if(!(r instanceof o.LN))return;i=r}return this.getProviderAuthFromRepoOrIntegrationId(i)}}}async getCodeSuggestions(e,t,i){if(!(0,d.Ac)(e.provider))return[];let s=(0,p.Dz)(e),o=r.EntityIdentifierUtils.encode(s),n=await this.getProviderAuthFromRepoOrIntegrationId(t);try{return await this.getDraftsCore({prEntityId:o,providerAuth:n,isArchived:i?.includeArchived==null||i.includeArchived})}catch{return[]}}async getCodeSuggestionCounts(e){let t=(0,c.dQ)(),i=e.filter(e=>(0,d.Ac)(e.provider)).map(e=>r.EntityIdentifierUtils.encode((0,p.Dz)(e)));if(0===i.length)return{};let s=JSON.stringify({prEntityIds:i});try{let e=await this.connection.fetchGkApi("v1/drafts/counts",{method:"POST",body:s},{query:"type=suggested_pr_change"});return e.ok||await w("Unable to open code suggestion counts",e,t),(await e.json()).data.counts}catch(e){throw u.Vy.error(e,t),e}}generateWebUrl(e){let t="string"==typeof e?e:e.id;return this.container.urls.getGkDevUrl(["drafts",t])}};async function w(e,t,i){let r;try{r=await t?.json()}catch{}let s="string"==typeof r?.error?r.error:r?.error?.message??t?.statusText,o=null!=t?`${e}: (${t?.status}) ${s}`:e;throw u.Vy.error(void 0,i,o),Error(o)}function v(e,t){let i,r=!1;if(e.createdBy===t?.account?.id)r=!0,i={id:e.createdBy,name:`${t.account.name} (you)`,email:t.account.email,avatarUri:(0,s.m_)(t.account.email)};else{let r;t?.members?.length&&(r=t.members.find(t=>t.id===e.createdBy)),i={id:e.createdBy,name:r?.name??"Unknown",email:r?.email,avatarUri:(0,s.m_)(r?.email)}}let o=e.role;return o||(o=t?.fromPrEntityId===!0?"editor":"viewer"),{draftType:"cloud",type:e.type,id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),author:i,isMine:r,organizationId:e.organizationId||void 0,role:o,isPublished:e.isPublished,title:e.title,description:e.description,deepLinkUrl:e.deepLink,visibility:e.visibility,isArchived:e.isArchived,archivedBy:e.archivedBy,archivedReason:e.archivedReason,archivedAt:null!=e.archivedAt?new Date(e.archivedAt):e.archivedAt,latestChangesetId:e.latestChangesetId}}function y(e){return{id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),draftId:e.draftId,parentChangesetId:e.parentChangesetId,userId:e.userId,gitUserName:e.gitUserName,gitUserEmail:e.gitUserEmail,deepLinkUrl:e.deepLink,patches:e.patches.map(e=>b(e))}}function b(e,t){return{type:"cloud",id:e.id,createdAt:new Date(e.createdAt),updatedAt:new Date(e.updatedAt??e.createdAt),draftId:e.draftId,changesetId:e.changesetId,userId:e.userId,baseBranchName:e.baseBranchName,baseRef:e.baseCommitSha,gkRepositoryId:e.gitRepositoryId,secureLink:e.secureDownloadData,commit:t?.commit,contents:t?.contents,files:t?.files,repository:t?.repository}}function C(e,t){return null!=e.prEntityId?r.EntityIdentifierUtils.decode(e.prEntityId):t?.prEntityId!=null?r.EntityIdentifierUtils.decode(t.prEntityId):void 0}f([(0,l.Rm)({args:{2:!1}})],DraftService.prototype,"createDraft",1),f([(0,l.Rm)()],DraftService.prototype,"deleteDraft",1),f([(0,l.Rm)({args:{1:e=>JSON.stringify({...e,providerAuth:void 0})}})],DraftService.prototype,"archiveDraft",1),f([(0,l.Rm)({args:{1:e=>JSON.stringify({...e,providerAuth:void 0})}})],DraftService.prototype,"getDraft",1),f([(0,l.Rm)()],DraftService.prototype,"getDrafts",1),f([(0,l.Rm)()],DraftService.prototype,"getChangesets",1),f([(0,l.Rm)()],DraftService.prototype,"getPatch",1),f([(0,l.Rm)({args:{0:e=>"string"==typeof e?e:e.id}})],DraftService.prototype,"getPatchDetails",1),f([(0,l.Rm)()],DraftService.prototype,"updateDraftVisibility",1),f([(0,l.Rm)()],DraftService.prototype,"getDraftUsers",1),f([(0,l.Rm)({args:{1:!1}})],DraftService.prototype,"addDraftUsers",1),f([(0,l.Rm)()],DraftService.prototype,"removeDraftUser",1),f([(0,l.Rm)()],DraftService.prototype,"getRepositoryOrIdentity",1),f([(0,l.Rm)()],DraftService.prototype,"getRepositoryIdentity",1),f([(0,l.Rm)({args:{0:e=>e.id,1:e=>(0,o.Z6)(e)?e.id:e}})],DraftService.prototype,"getCodeSuggestions",1),f([(0,l.Rm)({args:{0:e=>e.map(e=>e.id).join(",")}})],DraftService.prototype,"getCodeSuggestionCounts",1)},2099:(e,t,i)=>{let r;i.d(t,{m:()=>aT,u:()=>aE});var s,o,n=i(1398),a=i(8757),l=i(1182),u=i(1849),c=i(2320),h=i(2870),d=i(6206),p=i(669),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};let w=Object.freeze([]);let GitCache=class GitCache{constructor(e){this.container=e,this._useCaching=h.H.get("advanced.caching.enabled"),this._disposable=n.Disposable.from(h.H.onDidChange(e=>{h.H.changed(e,"advanced.caching.enabled")&&(this._useCaching=h.H.get("advanced.caching.enabled"),this._useCaching||this.reset(!0)),h.H.changed(e,"remotes")&&this.clearCaches(void 0,"remotes")}),e.events.on("git:cache:reset",e=>this.clearCaches(e.data.repoPath,...e.data.types??w)))}_disposable;dispose(){this.reset(),this._disposable.dispose()}_useCaching=!1;get useCaching(){return this._useCaching}_bestRemotesCache;get bestRemotes(){return this._bestRemotesCache??=new Map}_branchCache;get branch(){return this.useCaching?this._branchCache??=new Map:void 0}_branchesCache;get branches(){return this.useCaching?this._branchesCache??=new Map:void 0}_contributorsCache;get contributors(){return this.useCaching?this._contributorsCache??=new Map:void 0}_defaultBranchNameCache;get defaultBranchName(){return this.useCaching?this._defaultBranchNameCache??=new Map:void 0}_pausedOperationStatusCache;get pausedOperationStatus(){return this.useCaching?this._pausedOperationStatusCache??=new Map:void 0}_remotesCache;get remotes(){return this.useCaching?this._remotesCache??=new Map:void 0}_repoInfoCache;get repoInfo(){return this._repoInfoCache??=new Map}_stashesCache;get stashes(){return this.useCaching?this._stashesCache??=new Map:void 0}_tagsCache;get tags(){return this.useCaching?this._tagsCache??=new Map:void 0}_trackedPaths=new p.m9;get trackedPaths(){return this._trackedPaths}_worktreesCache;get worktrees(){return this.useCaching?this._worktreesCache??=new Map:void 0}clearCaches(e,...t){let i=new Set;for(let r of((!t.length||t.includes("branches"))&&(i.add(this._branchCache),i.add(this._branchesCache),i.add(this._defaultBranchNameCache)),(!t.length||t.includes("contributors"))&&i.add(this._contributorsCache),(!t.length||t.includes("remotes"))&&(i.add(this._remotesCache),i.add(this._bestRemotesCache),i.add(this._defaultBranchNameCache)),(!t.length||t.includes("providers"))&&i.add(this._bestRemotesCache),(!t.length||t.includes("stashes"))&&i.add(this._stashesCache),(!t.length||t.includes("status"))&&i.add(this._pausedOperationStatusCache),(!t.length||t.includes("tags"))&&i.add(this._tagsCache),(!t.length||t.includes("worktrees"))&&i.add(this._worktreesCache),t.length||(i.add(this._repoInfoCache),i.add(this._trackedPaths)),i))null!=e?r?.delete(e):r?.clear()}reset(e=!1){this._branchCache?.clear(),this._branchCache=void 0,this._branchesCache?.clear(),this._branchesCache=void 0,this._contributorsCache?.clear(),this._contributorsCache=void 0,this._pausedOperationStatusCache?.clear(),this._pausedOperationStatusCache=void 0,this._remotesCache?.clear(),this._remotesCache=void 0,this._stashesCache?.clear(),this._stashesCache=void 0,this._tagsCache?.clear(),this._tagsCache=void 0,this._worktreesCache?.clear(),this._worktreesCache=void 0,e||(this._repoInfoCache?.clear(),this._repoInfoCache=void 0,this._trackedPaths.clear())}};f([(0,d.Rm)({singleLine:!0})],GitCache.prototype,"clearCaches",1),f([(0,d.Rm)({singleLine:!0})],GitCache.prototype,"reset",1);var v=i(9823),y=i(8518),b=i(6821),C=i(6503),R=i(8219),k=i(6770),S=i(9181),P=i(5962),A=i(9615),I=i(745),D=i(9388),_=i(4941),$=i(1003),T=i(9686),E=i(7864),x=i(2624),O=i(553),F=i(797),B=i(5539),L=Object.defineProperty,U=Object.getOwnPropertyDescriptor,q=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?U(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&L(t,i,o),o};let GitDocumentState=class GitDocumentState{blameCache=new Map;diffCache=new Map;logCache=new Map;clearBlame(e){if(null==e)return void this.blameCache.clear();this.blameCache.delete(e)}clearDiff(e){if(null==e)return void this.diffCache.clear();this.diffCache.delete(e)}clearLog(e){if(null==e)return void this.logCache.clear();this.logCache.delete(e)}getBlame(e){return this.blameCache.get(e)}getDiff(e){return this.diffCache.get(e)}getLog(e){return this.logCache.get(e)}setBlame(e,t){if(null==t)return void this.blameCache.delete(e);this.blameCache.set(e,t)}setDiff(e,t){if(null==t)return void this.diffCache.delete(e);this.diffCache.set(e,t)}setLog(e,t){if(null==t)return void this.logCache.delete(e);this.logCache.set(e,t)}};let N=class{constructor(e,t,i,r,s){this.container=e,this.tracker=t,this.document=i,this._onDidChangeBlameState=r,this.dirty=s}static async create(e,t,i,r,s,o){let n=new N(e,t,i,r,o);return await n.initialize(s),n}state;_disposable;_disposed=!1;_tracked=!1;_pendingUpdates;_updateDebounced;_uri;dispose(){this.state=void 0,this._disposed=!0,this._disposable?.dispose()}_loading=!1;async initialize(e){this._uri=await x.nk.fromUri(this.document.uri),!this._disposed&&(this._pendingUpdates={...this._pendingUpdates,reason:"initialize",forceDirtyIdle:!0},e&&(this._loading=!0,this.update().finally(()=>this._loading=!1)))}get blameable(){return null==this._blameFailure&&this._tracked}get canDirtyIdle(){if(!this.document.isDirty)return!1;let e=h.H.get("advanced.blame.sizeThresholdAfterEdit");return!(e>0&&this.document.lineCount>e)}_dirtyIdle=!1;setDirtyIdle(){return this._dirtyIdle=this.canDirtyIdle,this._dirtyIdle}_forceDirtyStateChangeOnNextDocumentChange=!1;get forceDirtyStateChangeOnNextDocumentChange(){return this._forceDirtyStateChangeOnNextDocumentChange}get lineCount(){return this.document.lineCount}get uri(){return this._uri}async getStatus(){return null!=this._pendingUpdates&&await this.update(),{blameable:this.blameable,tracked:this._tracked,dirtyIdle:this._dirtyIdle}}is(e){return e===this.document}refresh(e){if(null==this._pendingUpdates&&"visible"===e)return;let t=(0,$.dQ)();switch(this._blameFailure=void 0,this._dirtyIdle=!1,null!=this.state&&(this.state=void 0,_.Vy.log(t,`Reset state, reason=${e}`)),e){case"changed":return;case"saved":this._pendingUpdates={...this._pendingUpdates,reason:e,forceBlameChange:!0};break;case"repositoryChanged":this._pendingUpdates={...this._pendingUpdates,reason:e}}(0,O.N6)(this.document)&&"visible"!==e?this.update():(0,O.Xc)(this.document)&&(this._updateDebounced??=(0,B.s)(this.update.bind(this),100),this._updateDebounced())}_blameFailure;setBlameFailure(e){let t=this.blameable;this._blameFailure=e,t&&(this._pendingUpdates={...this._pendingUpdates,reason:"blame-failed",forceBlameChange:!0},(0,O.N6)(this.document)&&this.update())}resetForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!1}setForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!0}async update(){let e=this._pendingUpdates;if(this._pendingUpdates=void 0,this._disposed||null==this._uri){this._tracked=!1;return}this._dirtyIdle=!!(this.document.isDirty&&e?.forceDirtyIdle&&this.canDirtyIdle);let t=e?.forceBlameChange?void 0:this.blameable,i=this.container.git.getRepository(this._uri);if(this._tracked=null!=i&&await this.container.git.isTracked(this._uri),this.tracker.updateContext(this.document.uri,this.blameable,this._tracked),!this._loading&&t!==this.blameable){let e={editor:(0,F.sP)(this.document),document:this,blameable:this.blameable};this._onDidChangeBlameState(e)}}};async function M(e,t,i,r,s,o){return N.create(e,t,i,r,s,o)}q([(0,d.Yz)()],N.prototype,"initialize",1),q([(0,d.Yz)()],N.prototype,"refresh",1),q([(0,d.Yz)()],N.prototype,"update",1),N=q([(0,d.Is)((e,t)=>`${t}(${_.Vy.toLoggable(e.document)})`)],N);var W=i(1945);async function G(e){try{let e=n.extensions.getExtension("ms-vscode.remote-repositories")??n.extensions.getExtension("GitHub.remotehub");if(null==e)throw _.Vy.log("GitHub Repositories extension is not installed or enabled"),new c.dU("GitHub Repositories","GitHub.remotehub");return e.isActive?e.exports:await e.activate()}catch(t){if(_.Vy.error(t,"Unable to get required api from the GitHub Repositories extension"),!(t instanceof c.dU),e)return;throw t}}var H=((s=H||{})[s.Branch=0]="Branch",s[s.RemoteBranch=1]="RemoteBranch",s[s.Tag=2]="Tag",s[s.Commit=3]="Commit",s),V=((o=V||{})[o.Branch=0]="Branch",o[o.Tag=1]="Tag",o[o.Commit=2]="Commit",o[o.PullRequest=3]="PullRequest",o[o.Tree=4]="Tree",o),j=i(9779),z=i(9013),Q=Object.defineProperty,Y=Object.getOwnPropertyDescriptor,K=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?Y(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Q(t,i,o),o};let Z=Object.freeze({values:[]});let BranchesGitSubProvider=class BranchesGitSubProvider{constructor(e,t,i){this.container=e,this.cache=t,this.provider=i}async getBranch(e,t){if(null!=t){let{values:[i]}=await this.getBranches(e,{filter:e=>e.name===t});return i}let i=this.cache.branch?.get(e);return null==i&&(i=(async function(){let{values:[t]}=await this.getBranches(e,{filter:e=>e.current});if(null!=t)return t;try{let{metadata:t}=await this.provider.ensureRepositoryContext(e),i=await t.getRevision();switch(i.type){case H.Tag:case H.Commit:return new j.Z(this.container,e,`refs/heads/${i.name}`,!0,void 0,i.revision,void 0,!1,!0)}return}catch(e){_.Vy.error(e,(0,$.dQ)());return}}).call(this),this.cache.branch?.set(e,i)),i}async getBranches(e,t){if(null==e)return Z;let i=(0,$.dQ)(),r=t?.paging?.cursor?void 0:this.cache.branches?.get(e);null==r&&(r=(async function(){try{let i,{metadata:r,github:s,session:o}=await this.provider.ensureRepositoryContext(e),n=[],a=await r.getRevision();switch(a.type){case H.Branch:i=a.name;break;case H.RemoteBranch:{let e=a.name.indexOf(":");i=-1===e?a.name:a.name.substring(e+1)}}let l=t?.paging?.cursor,u=null==l;for(;;){let t=await s.getBranches(o.accessToken,r.repo.owner,r.repo.name,{cursor:l});for(let r of t.values)!function(t,i,r){let s=new Date("author-date"===h.H.get("advanced.commitOrdering")?i.target.authoredDate:i.target.committedDate),o=i.target.oid;n.push(new j.Z(t,e,`refs/heads/${i.name}`,r,s,o,{name:`origin/${i.name}`,missing:!1,state:{ahead:0,behind:0}},!1),new j.Z(t,e,`refs/remotes/origin/${i.name}`,!1,s,o,void 0,!1))}(this.container,r,r.name===i);if(!t.paging?.more||!u)return{...t,values:n};l=t.paging.cursor}}catch(t){return _.Vy.error(t,i),this.cache.branches?.delete(e),Z}}).call(this),t?.paging?.cursor==null&&this.cache.branches?.set(e,r));let s=await r;return t?.filter!=null&&(s={...s,values:s.values.filter(t.filter)}),t?.sort!=null&&(0,z.Xn)(s.values,"boolean"==typeof t.sort?void 0:t.sort),s}async getBranchContributionsOverview(e,t){let i=(0,$.dQ)();try{let i,r,s=await this.getDefaultBranchName(e);if(null==s)return;let o=await this.provider.refs.getMergeBase(e,t,s);if(null==o)return;let n=await this.provider.contributors.getContributors(e,(0,P.Xn)(o,t,".."),{stats:!0});(0,z.tB)(n,{orderBy:"score:desc"});let a=0,l=0,u=0,c=0;for(let e of n){a+=e.commits,l+=e.stats?.files??0,u+=e.stats?.additions??0,c+=e.stats?.deletions??0;let t=e.firstCommitDate?.getTime(),s=e.latestCommitDate?.getTime();(null!=t||null!=s)&&(i=null!=i?Math.min(i,t??1/0,s??1/0):t??s,r=null!=r?Math.max(r,t??-1/0,s??-1/0):s??t)}return{repoPath:e,branch:t,baseOrTargetBranch:s,mergeBase:o,commits:a,files:l,additions:u,deletions:c,latestCommitDate:null!=r?new Date(r):void 0,firstCommitDate:null!=i?new Date(i):void 0,contributors:n}}catch(e){_.Vy.error(e,i);return}}async getBranchesWithCommits(e,t,i,r){if(null==e||r?.commitDate==null)return[];let s=(0,$.dQ)();try{let s,{metadata:o,github:n,session:a}=await this.provider.ensureRepositoryContext(e);return i?await n.getBranchWithCommit(a.accessToken,o.repo.owner,o.repo.name,i,t.map(e6),r?.mode??"contains",r?.commitDate):await n.getBranchesWithCommits(a.accessToken,o.repo.owner,o.repo.name,t.map(e6),r?.mode??"contains",r?.commitDate)}catch(e){return _.Vy.error(e,s),[]}}async getDefaultBranchName(e,t){if(null==e)return;let i=(0,$.dQ)();try{let{metadata:t,github:i,session:r}=await this.provider.ensureRepositoryContext(e);return await i.getDefaultBranchName(r.accessToken,t.repo.owner,t.repo.name)}catch(e){_.Vy.error(e,i);return}}};K([(0,D.G)(),(0,d.Rm)()],BranchesGitSubProvider.prototype,"getBranch",1),K([(0,d.Rm)({args:{1:!1}})],BranchesGitSubProvider.prototype,"getBranches",1),K([(0,d.Rm)()],BranchesGitSubProvider.prototype,"getBranchContributionsOverview",1),K([(0,d.Rm)()],BranchesGitSubProvider.prototype,"getBranchesWithCommits",1),K([(0,d.Rm)()],BranchesGitSubProvider.prototype,"getDefaultBranchName",1);var J=i(5042),X=i(9091),ee=i(3213);let et=/"/g;async function ei(e,t,i,r){let s=[];for(let[o,n]of i.entries())switch(o){case"message:":s.push(...(0,X.Tj)(n,e=>e.replace(/ /g,"+")));break;case"author:":{let i;for(let o of(n.has("@me")&&(i=await e.config.getCurrentUser(r)),n))if(o&&(o=o.replace(et,t.matchRegex?"\\b":""))){if("@me"===o){if(i?.username==null)continue;o=`@${i.username}`}(o=o.replace(/ /g,"+")).startsWith("@")?s.push(`author:${o.slice(1)}`):o.includes("@")?s.push(`author-email:${o}`):s.push(`author-name:${o}`)}}}return s}var er=Object.defineProperty,es=Object.getOwnPropertyDescriptor,eo=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?es(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&er(t,i,o),o};let en=Promise.resolve(void 0);let CommitsGitSubProvider=class CommitsGitSubProvider{constructor(e,t,i){this.container=e,this.cache=t,this.provider=i}async getCommit(e,t){if(null==e)return;let i=(0,$.dQ)();try{if((0,P._k)(t,!0)){var r,s,o,n;return r=this.container,s=new Date,o=await this.provider.config.getCurrentUser(e),new y.Yg(r,e,t,new y.M7("You",o?.email??void 0,s),new y.M7("You",o?.email??void 0,s),"Uncommitted changes",(void 0)??(t===k.id?["HEAD"]:[]),"Uncommitted changes",n?.fileset,n?.stats,[])}let{metadata:i,github:a,session:l}=await this.provider.ensureRepositoryContext(e),u=await a.getCommit(l.accessToken,i.repo.owner,i.repo.name,e6(t));if(null==u)return;let{viewer:c=l.account.label}=u,h=null!=c&&u.author.name===c?"You":u.author.name,d=null!=c&&u.committer.name===c?"You":u.committer.name;return new y.Yg(this.container,e,u.oid,new y.M7(h,u.author.email,new Date(u.author.date),u.author.avatarUrl),new y.M7(d,u.committer.email,new Date(u.committer.date)),u.message.split(`
`,1)[0],u.parents.nodes.map(e=>e.oid),u.message,{files:u.files?.map(t=>new b.l(this.container,e,t.filename??"",(0,ee.fromCommitFileStatus)(t.status)??C.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0}))??[],filtered:!1},{files:u.changedFiles??0,additions:u.additions??0,deletions:u.deletions??0},[])}catch(e){_.Vy.error(e,i);return}}async getCommitCount(e,t){if(null==e)return;let i=(0,$.dQ)();try{let{metadata:i,github:r,session:s}=await this.provider.ensureRepositoryContext(e);return await r.getCommitCount(s?.accessToken,i.repo.owner,i.repo.name,e6(t))}catch(e){_.Vy.error(e,i);return}}async getCommitForFile(e,t,i,r){if(null==e)return;let s=(0,$.dQ)();try{let{metadata:r,github:s,remotehub:o,session:n}=await this.provider.ensureRepositoryContext(e),a=this.provider.getRelativePath(t,o.getProviderRootUri(t));i=i&&"HEAD"!==i?i:(await r.getRevision()).revision;let l=await s.getCommitForFile(n.accessToken,r.repo.owner,r.repo.name,e6(i),a);if(null==l)return;let{viewer:u=n.account.label}=l,c=null!=u&&l.author.name===u?"You":l.author.name,h=null!=u&&l.committer.name===u?"You":l.committer.name;return new y.Yg(this.container,e,l.oid,new y.M7(c,l.author.email,new Date(l.author.date),l.author.avatarUrl),new y.M7(h,l.committer.email,new Date(l.committer.date)),l.message.split(`
`,1)[0],l.parents.nodes.map(e=>e.oid),l.message,null!=l.files?{files:l.files?.map(t=>new b.l(this.container,e,t.filename??"",(0,ee.fromCommitFileStatus)(t.status)??C.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),filtered:!0,pathspec:a}:void 0,{files:l.changedFiles??0,additions:l.additions??0,deletions:l.deletions??0},[])}catch(e){_.Vy.error(e,s);return}}async getCommitFileStatus(e,t,i){if(i===k.nB||(0,P._k)(i))return;let r=await this.getCommitForFile(e,t,i);if(null!=r)return r.findFile(t)}async getLeftRightCommitCount(e,t,i){if(null==e)return;let r=(0,$.dQ)(),{metadata:s,github:o,session:n}=await this.provider.ensureRepositoryContext(e);try{let e=await o.getComparison(n.accessToken,s.repo.owner,s.repo.name,e6(t));if(null==e)return;return{left:e.behind_by,right:e.ahead_by}}catch(e){_.Vy.error(e,r);return}}async getLog(e,t,i){if(null==e)return;let r=(0,$.dQ)(),s=this.provider.getPagingLimit(i?.limit);try{let{metadata:r,github:o,session:n}=await this.provider.ensureRepositoryContext(e);t=t&&"HEAD"!==t?t:(await r.getRevision()).revision;let a=await o.getCommits(n.accessToken,r.repo.owner,r.repo.name,e6(t),{all:i?.all,authors:i?.authors,after:i?.cursor,limit:s,since:i?.since?new Date(i.since):void 0}),l=new Map,{viewer:u=n.account.label}=a;for(let t of a.values){let i=null!=u&&t.author.name===u?"You":t.author.name,r=null!=u&&t.committer.name===u?"You":t.committer.name,s=l.get(t.oid);null==s&&(s=new y.Yg(this.container,e,t.oid,new y.M7(i,t.author.email,new Date(t.author.date),t.author.avatarUrl),new y.M7(r,t.committer.email,new Date(t.committer.date)),t.message.split(`
`,1)[0],t.parents.nodes.map(e=>e.oid),t.message,null!=t.files?{files:t.files.map(t=>new b.l(this.container,e,t.filename??"",(0,ee.fromCommitFileStatus)(t.status)??C.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),filtered:!1}:void 0,{files:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),l.set(t.oid,s))}let c={repoPath:e,commits:l,sha:t,range:void 0,count:l.size,limit:s,hasMore:a.paging?.more??!1,endingCursor:a.paging?.cursor,query:r=>this.getLog(e,t,{...i,limit:r})};return c.hasMore&&(c.more=this.getLogMoreFn(c,t,i)),c}catch(e){_.Vy.error(e,r);return}}async getLogShasOnly(e,t,i){let r=await this.getLog(e,t,i);if(null!=r)return new Set([...r.commits.values()].map(e=>e.ref))}getLogMoreFn(e,t,i){return async r=>{let s=null!=r&&"object"==typeof r?r.until:void 0,o="number"==typeof r?r:void 0;if(s&&(0,X.zN)(e.commits.values(),e=>e.ref===s))return e;o=this.provider.getPagingLimit(o);let n=await this.getLog(e.repoPath,t,{...i,limit:o,cursor:e.endingCursor});if(null==n)return{...e,hasMore:!1,more:void 0};let a=new Map([...e.commits,...n.commits]),l={repoPath:e.repoPath,commits:a,sha:e.sha,range:void 0,count:a.size,limit:null==s?(e.limit??0)+o:void 0,hasMore:null!=s||n.hasMore,startingCursor:(0,X.HV)(e.commits)?.[0],endingCursor:n.endingCursor,pagedCommits:()=>{for(let t of e.commits.keys())n.commits.delete(t);return n.commits},query:e.query};return l.hasMore&&(l.more=this.getLogMoreFn(l,t,i)),l}}async getLogForPath(e,t,i,r){if(null==e)return;let s=(0,$.dQ)(),o=this.provider.getRelativePath(t,e);if(null!=e&&e===o)throw Error(`File name cannot match the repository path; path=${o}`);(r={reverse:!1,...r}).renames=!1,r.all=!1;let n="log";null!=i&&(n+=`:${i}`),r.limit=this.provider.getPagingLimit(r?.limit),r.limit&&(n+=`:n${r.limit}`),r.ordering&&(n+=`:ordering=${r.ordering}`),r.renames&&(n+=":follow"),r.reverse&&(n+=":reverse"),r.since&&(n+=`:since=${r.since}`),r.skip&&(n+=`:skip${r.skip}`);let a=null==r.cursor&&null==r.range,l=await this.container.documentTracker.getOrAdd(x.nk.fromFile(o,e,i));if(a){if(null!=l.state){let o=l.state.getLog(n);if(null!=o)return _.Vy.debug(s,`Cache hit: '${n}'`),o.item;if(null!=i||null!=r.limit){let o=l.state.getLog(`log${r.renames?":follow":""}${r.reverse?":reverse":""}`);if(null!=o){if(null==i)return _.Vy.debug(s,`Cache hit: ~'${n}'`),o.item;_.Vy.debug(s,`Cache ?: '${n}'`);let a=await o.item;if(null!=a&&!a.hasMore&&a.commits.has(i)){_.Vy.debug(s,`Cache hit: '${n}'`);let o=!0,l=0,u=new Map((0,X.x1)(a.commits.entries(),([e,t])=>{if(o){if(e!==i)return;o=!1}if(l++,r?.limit==null||!(l>r.limit))return[e,t]})),c={...r};return{...a,limit:r.limit,count:u.size,commits:u,query:r=>this.getLogForPath(e,t,i,{...c,limit:r})}}}}}_.Vy.debug(s,`Cache miss: '${n}'`),l.state??=new GitDocumentState}let u=this.getLogForPathCore(e,o,i,l,n,s,r);return a&&null!=l.state&&(_.Vy.debug(s,`Cache add: '${n}'`),l.state.setLog(n,{item:u})),u}async getLogForPathCore(e,t,i,r,s,o,n){if(null==e)return;let a=this.provider.getPagingLimit(n?.limit);try{let r=await this.provider.ensureRepositoryContext(e);if(null==r)return;let{metadata:s,github:o,remotehub:l,session:u}=r,c=this.provider.getAbsoluteUri(t,e),h=this.provider.getRelativePath(c,l.getProviderRootUri(c));i=i&&"HEAD"!==i?i:(await s.getRevision()).revision;let d=await o.getCommits(u.accessToken,s.repo.owner,s.repo.name,e6(i),{all:n?.all,after:n?.cursor,path:h,limit:a,since:n?.since?new Date(n.since):void 0}),p=new Map,{viewer:g=u.account.label}=d;for(let t of d.values){let i=null!=g&&t.author.name===g?"You":t.author.name,r=null!=g&&t.committer.name===g?"You":t.committer.name,s=p.get(t.oid);if(null==s){let o=t.files?.map(t=>new b.l(this.container,e,t.filename??"",(0,ee.fromCommitFileStatus)(t.status)??C.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0}));if(null!=o&&!(0,T.Np)(h)&&1===t.changedFiles){let i=o.findIndex(e=>e.path===h);-1!==i&&o.splice(i,1,new b.l(this.container,e,h,C.NO.Modified,void 0,void 0,1===t.changedFiles?{additions:t.additions??0,deletions:t.deletions??0,changes:0}:void 0))}s=new y.Yg(this.container,e,t.oid,new y.M7(i,t.author.email,new Date(t.author.date),t.author.avatarUrl),new y.M7(r,t.committer.email,new Date(t.committer.date)),t.message.split(`
`,1)[0],t.parents.nodes.map(e=>e.oid),t.message,null!=o?{files:o,filtered:!0,pathspec:h}:void 0,{files:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),p.set(t.oid,s)}}let m={repoPath:e,commits:p,sha:i,range:void 0,count:p.size,limit:a,hasMore:d.paging?.more??!1,endingCursor:d.paging?.cursor,query:r=>this.getLogForPath(e,t,i,{...n,limit:r})};return m.hasMore&&(m.more=this.getLogForPathMoreFn(m,t,i,n)),m}catch(e){if(null!=r.state&&n?.range==null&&!n?.reverse){let t=e?.toString()??"";return _.Vy.debug(o,`Cache replace (with empty promise): '${s}'`),r.state.setLog(s,{item:en,errorMessage:t}),en}return}}getLogForPathMoreFn(e,t,i,r){return async s=>{let o=null!=s&&"object"==typeof s?s.until:void 0,n="number"==typeof s?s:void 0;if(o&&(0,X.zN)(e.commits.values(),e=>e.ref===o))return e;n=this.provider.getPagingLimit(n);let a=await this.getLogForPath(e.repoPath,t,i,{...r,limit:null==o?n:0,cursor:e.endingCursor});if(null==a)return{...e,hasMore:!1,more:void 0};let l=new Map([...e.commits,...a.commits]),u={repoPath:e.repoPath,commits:l,sha:e.sha,range:e.range,count:l.size,limit:null==o?(e.limit??0)+n:void 0,hasMore:null!=o||a.hasMore,endingCursor:a.endingCursor,query:e.query};return u.hasMore&&(u.more=this.getLogForPathMoreFn(u,t,i,r)),u}}getOldestUnpushedShaForPath(e,t){return Promise.resolve(void 0)}hasCommitBeenPushed(e,t){return Promise.resolve(!0)}async isAncestorOf(e,t,i){if(null==e)return!1;let r=(0,$.dQ)(),{metadata:s,github:o,session:n}=await this.provider.ensureRepositoryContext(e);try{let e=await o.getComparison(n.accessToken,s.repo.owner,s.repo.name,(0,P.Xn)(e6(t),e6(i),"..."));switch(e?.status){case"ahead":case"diverged":default:return!1;case"identical":case"behind":return!0}}catch(e){return _.Vy.error(e,r),!1}}async searchCommits(e,t,i){if(null==e)return;let r=(0,$.dQ)(),s=(0,J.OM)(t),o=s.get("commit:");if(o?.size){let t=await this.getCommit(e,(0,X.$1)(o));if(null==t)return;return{repoPath:e,commits:new Map([[t.sha,t]]),sha:t.sha,range:void 0,count:1,limit:1,hasMore:!1}}let n=await ei(this.provider,t,s,e);if(0===n.length)return;let a=this.provider.getPagingLimit(i?.limit);try{let{metadata:r,github:s,session:o}=await this.provider.ensureRepositoryContext(e),l=`repo:${r.repo.owner}/${r.repo.name}+${n.join("+").trim()}`,u=await s.searchCommits(o.accessToken,l,{cursor:i?.cursor,limit:a,sort:i?.ordering==="date"?"committer-date":i?.ordering==="author-date"?"author-date":void 0});if(null==u)return;let c=new Map,h=o.account.label;for(let t of u.values){let i=null!=h&&t.author.name===h?"You":t.author.name,r=null!=h&&t.committer.name===h?"You":t.committer.name,s=c.get(t.oid);null==s&&(s=new y.Yg(this.container,e,t.oid,new y.M7(i,t.author.email,new Date(t.author.date),t.author.avatarUrl),new y.M7(r,t.committer.email,new Date(t.committer.date)),t.message.split(`
`,1)[0],t.parents.nodes.map(e=>e.oid),t.message,null!=t.files?{files:t.files.map(t=>new b.l(this.container,e,t.filename??"",(0,ee.fromCommitFileStatus)(t.status)??C.NO.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})),filtered:!1}:void 0,{files:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),c.set(t.oid,s))}let d={repoPath:e,commits:c,sha:void 0,range:void 0,count:c.size,limit:a,hasMore:u.pageInfo?.hasNextPage??!1,endingCursor:u.pageInfo?.endCursor??void 0,query:t=>this.getLog(e,void 0,{...i,limit:t})};if(d.hasMore){let e=function(r){return async s=>{s=this.provider.getPagingLimit(s);let o=await this.searchCommits(r.repoPath,t,{...i,limit:s,cursor:r.endingCursor});if(null==o)return{...r,hasMore:!1,more:void 0};let n=new Map([...r.commits,...o.commits]),a={repoPath:r.repoPath,commits:n,sha:r.sha,range:void 0,count:n.size,limit:(r.limit??0)+s,hasMore:o.hasMore,endingCursor:o.endingCursor,query:r.query};return a.hasMore&&(a.more=e.call(this,a)),a}};d.more=e.call(this,d)}return d}catch(e){_.Vy.error(e,r);return}}};eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"getCommit",1),eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"getCommitCount",1),eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"getCommitForFile",1),eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"getCommitFileStatus",1),eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"getLeftRightCommitCount",1),eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"getLog",1),eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"getLogShasOnly",1),eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"getLogForPath",1),eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"getOldestUnpushedShaForPath",1),eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"hasCommitBeenPushed",1),eo([(0,d.Rm)()],CommitsGitSubProvider.prototype,"isAncestorOf",1),eo([(0,d.Rm)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],CommitsGitSubProvider.prototype,"searchCommits",1);var ea=Object.defineProperty,el=Object.getOwnPropertyDescriptor;let ConfigGitSubProvider=class ConfigGitSubProvider{constructor(e,t,i){this.container=e,this.cache=t,this.provider=i}async getCurrentUser(e){if(!e)return;let t=(0,$.dQ)(),i=this.cache.repoInfo.get(e),r=i?.user;if(null!=r)return r;if(null!==r)try{let{metadata:t,github:s,session:o}=await this.provider.ensureRepositoryContext(e);return r=await s.getCurrentUser(o.accessToken,t.repo.owner,t.repo.name),this.cache.repoInfo.set(e,{...i,user:r??null}),r}catch(r){_.Vy.error(r,t),this.cache.repoInfo.set(e,{...i,user:null});return}}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?el(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ea(t,i,o)})([(0,D.G)(),(0,d.Rm)()],ConfigGitSubProvider.prototype,"getCurrentUser",1);var eu=i(6458),ec=Object.defineProperty,eh=Object.getOwnPropertyDescriptor,ed=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eh(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ec(t,i,o),o};let ContributorsGitSubProvider=class ContributorsGitSubProvider{constructor(e,t,i){this.container=e,this.cache=t,this.provider=i}async getContributors(e,t,i){if(null==e)return[];let r=(0,$.dQ)();try{let{metadata:t,github:i,session:r}=await this.provider.ensureRepositoryContext(e),a=await i.getContributors(r.accessToken,t.repo.owner,t.repo.name),l=await this.provider.config.getCurrentUser(e),u=[];for(let t of a)if("User"===t.type){var s,o,n;u.push(new eu.s(e,t.name??t.login??"",t.email,(s=t.name,o=t.email,n=t.login,null!=l&&(null!=l.name||null!=l.email||null!=l.username)&&(null==l.name||l.name===s)&&(null==l.email||l.email===o)&&(null==l.username||l.username===n)),t.contributions,void 0,void 0,void 0,t.login,t.avatar_url,t.node_id))}return u}catch(e){return _.Vy.error(e,r),[]}}async getContributorsStats(e,t){if(null==e)return;let i=(0,$.dQ)();try{let{metadata:t,github:i,session:r}=await this.provider.ensureRepositoryContext(e),s=(await i.getContributors(r.accessToken,t.repo.owner,t.repo.name)).map(e=>e.contributions).sort((e,t)=>t-e);return{count:s.length,contributions:s}}catch(e){_.Vy.error(e,i);return}}};ed([(0,d.Rm)()],ContributorsGitSubProvider.prototype,"getContributors",1),ed([(0,d.Rm)()],ContributorsGitSubProvider.prototype,"getContributorsStats",1);var ep=i(1838),eg=Object.defineProperty,em=Object.getOwnPropertyDescriptor,ef=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?em(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eg(t,i,o),o};let DiffGitSubProvider=class DiffGitSubProvider{constructor(e,t,i){this.container=e,this.cache=t,this.provider=i}async getChangedFilesCount(e,t){if(!t)return;let i=await this.provider.commits.getCommit(e,t);if(i?.stats==null)return;let{stats:r}=i,s=(0,ep.Zx)(r.files);return{additions:r.additions,deletions:r.deletions,files:s}}async getDiffStatus(e,t,i,r){let s,o;if(null==e)return;let n=(0,$.dQ)(),{metadata:a,github:l,session:u}=await this.provider.ensureRepositoryContext(e);if((0,P.p8)(t)){if(s=t,!(0,P.p8)(t,"qualified")){let e=(0,P.jY)(t);s=(0,P.Xn)(e?.left||"HEAD",e?.right||"HEAD",e?.notation??"...")}}else s=(0,P.Xn)(t||"HEAD",i||"HEAD","...");if((0,P.p8)(s,"qualified-double-dot")){let e=(0,P.jY)(s);s=(0,P.Xn)(e.left,e.right,"..."),o=(0,P.Xn)(e.right,e.left,"...")}try{let t=await l.getComparison(u.accessToken,a.repo.owner,a.repo.name,e6(s)),i=t?.files,r=i;if(o){t=await l.getComparison(u.accessToken,a.repo.owner,a.repo.name,e6(o));let e=t?.files;r=[...new Set((0,X.KC)(i,e))]}return r?.map(t=>new b.l(this.container,e,t.filename??"",(0,ee.fromCommitFileStatus)(t.status)??C.NO.Modified,t.previous_filename,void 0,o?void 0:{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0}))}catch(e){_.Vy.error(e,n);return}}async getNextComparisonUris(e,t,i,r=0){if(!i)return;let s=(0,$.dQ)();try{let s=await this.provider.ensureRepositoryContext(e);if(null==s)return;let{metadata:o,github:n,remotehub:a,session:l}=s,u=this.provider.getRelativePath(t,a.getProviderRootUri(t)),c=(await o.getRevision()).revision;"HEAD"===i&&(i=c);let h=await n.getNextCommitRefs(l.accessToken,o.repo.owner,o.repo.name,c,u,e6(i));return{current:0===r?x.nk.fromFile(u,e,i):new x.nk(await this.provider.getBestRevisionUri(e,u,h[r-1])),next:new x.nk(await this.provider.getBestRevisionUri(e,u,h[r]))}}catch(e){throw _.Vy.error(e,s),e}}async getPreviousComparisonUris(e,t,i,r=0){if(i===k.nB)return;let s=(0,$.dQ)();i===k.SU&&(i=void 0);try{let s=await this.provider.ensureRepositoryContext(e);if(null==s)return;let{metadata:o,github:n,remotehub:a,session:l}=s,u=this.provider.getRelativePath(t,a.getProviderRootUri(t)),c=+(null!=i),h=await n.getCommitRefs(l.accessToken,o.repo.owner,o.repo.name,e6(!i||"HEAD"===i?(await o.getRevision()).revision:i),{path:u,first:c+r+1});if(null==h)return;let d=0===r?x.nk.fromFile(u,e,i):new x.nk(await this.provider.getBestRevisionUri(e,u,h.values[c+r-1]?.oid??k.nB));if(null==d||d.sha===k.nB)return;return{current:d,previous:new x.nk(await this.provider.getBestRevisionUri(e,u,h.values[c+r]?.oid??k.nB))}}catch(e){throw _.Vy.error(e,s),e}}async getPreviousComparisonUrisForLine(e,t,i,r,s=0){if(r===k.nB)return;let o=(0,$.dQ)();try{let o,n=await this.provider.ensureRepositoryContext(e);if(null==n)return;let{remotehub:a}=n,l=this.provider.getRelativePath(t,a.getProviderRootUri(t)),u=x.nk.fromFile(l,e,r),c=i,h=i,d=i;for(let t=0;t<Math.max(0,s)+2;t++){let t=await this.provider.getBlameForLine(o??u,d,void 0,{forceSingleLine:!0});if(null==t)break;r=t.commit.sha,l=t.commit.file?.path??t.commit.file?.originalPath??l,d=t.line.originalLine-1;let i=x.nk.fromFile(l,e,r);null==o||(u=o,c=h),o=i,h=d}if(null==u)return;return{current:u,previous:o,line:(c??i)+1}}catch(e){throw _.Vy.error(e,o),e}}};ef([(0,d.Rm)()],DiffGitSubProvider.prototype,"getChangedFilesCount",1),ef([(0,d.Rm)()],DiffGitSubProvider.prototype,"getDiffStatus",1),ef([(0,d.Rm)()],DiffGitSubProvider.prototype,"getNextComparisonUris",1),ef([(0,d.Rm)()],DiffGitSubProvider.prototype,"getPreviousComparisonUris",1),ef([(0,d.Rm)()],DiffGitSubProvider.prototype,"getPreviousComparisonUrisForLine",1);var ew=i(5119),ev=i(1705),ey=i(8027),eb=i(3631),eC=i(7660),eR=i(5277),ek=i(5238),eS=Object.defineProperty,eP=Object.getOwnPropertyDescriptor,eA=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eP(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eS(t,i,o),o};let eI=/"/g;let GraphGitSubProvider=class GraphGitSubProvider{constructor(e,t,i){this.container=e,this.cache=t,this.provider=i}async getGraph(e,t,i,r){let s=r?.limit??h.H.get("graph.defaultItemLimit")??5e3,o=h.H.get("graph.commitOrdering",void 0,"date"),n=h.H.get("graph.avatars",void 0,!0),[a,l,u,c,d,p]=await Promise.allSettled([this.provider.commits.getLog(e,t,{all:!0,ordering:o,limit:s}),this.provider.branches.getBranch(e),this.provider.branches.getBranches(e,{filter:e=>e.remote}),this.provider.remotes.getRemotes(e),this.provider.tags.getTags(e),this.provider.config.getCurrentUser(e)]),g=new Map,m=(0,E.Ro)(l),f=new Map,w=new Map;null!=m&&(f.set(m.name,m),null!=m.sha&&w.set(m.sha,[m.name]));let v=(0,E.Ro)(u)?.values;if(null!=v)for(let e of v){if(f.set(e.name,e),null==e.sha)continue;let t=w.get(e.sha);null==t?w.set(e.sha,[e.name]):t.push(e.name)}let y=new Set,b=(0,E.Ro)(c)[0],C=null!=b?new Map([[b.name,b]]):new Map,R=new Map,k=new Map,S=(0,E.Ro)(d)?.values;if(null!=S)for(let e of S){if(null==e.sha)continue;let t=k.get(e.sha);null==t?k.set(e.sha,[e.name]):t.push(e.name)}return this.getGraphCore(e,i,(0,E.Ro)(a),m,f,w,b,C,R,k,(0,E.Ro)(p),g,y,void 0,void 0,void 0,{...r,useAvatars:n})}getGraphCore(e,t,i,r,s,o,n,a,l,u,c,h,d,p,g,m,f){let w,v,y,b,C,R,k,S,P,A={...f?.include,stats:!0},I=new Map;if(null==i)return{repoPath:e,avatars:h,ids:d,includes:A,branches:s,remotes:a,downstreams:I,stashes:p,worktrees:g,worktreesByBranch:m,rows:[]};let D=(i.pagedCommits?.()??i.commits)?.values();if(null==D)return{repoPath:e,avatars:h,ids:d,includes:A,branches:s,remotes:a,downstreams:I,stashes:p,worktrees:g,worktreesByBranch:m,rows:[]};let _=[],$=!1,T=!1,E=r.upstream?.name;for(let i of D){if(d.add(i.sha),$=i.sha===r.sha)if(y={webviewItem:`gitlens:branch${$?"+current":""}${r?.upstream!=null?"+tracking":""}`,webviewItemValue:{type:"branch",ref:(0,eC.kA)(r.name,e,{id:r.id,refType:"branch",name:r.name,remote:!1,upstream:r.upstream})}},C=[{id:r.id,name:r.name,isCurrentHead:!0,context:(0,ek.C9)(y),upstream:null!=r.upstream?{name:r.upstream.name,id:(0,eb.Yk)(e,!0,r.upstream.name)}:void 0}],null!=r.upstream){if(S=(0,eb.Yk)(e,!0,r.name),w=((f?.useAvatars?n.provider?.avatarUri:void 0)??(0,ey.Wf)(this.container,n,t))?.toString(!0),y={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,eC.kA)(r.name,e,{id:S,refType:"branch",name:r.name,remote:!0,upstream:{name:n.name,missing:!1}})}},R=[{id:S,name:r.name,owner:n.name,url:n.url,avatarUrl:w,context:(0,ek.C9)(y),current:!0,hostingServiceType:n.provider?.gkProviderId}],null!=E){let e=I.get(E);null==e&&(e=[],I.set(E,e)),e.push(r.name)}}else R=[];else{C=[],R=[];let r=o.get(i.sha);if(null!=r)for(let i of r)S=(0,eb.Yk)(e,!0,i),v=(0,eb.km)(i),w=((f?.useAvatars?n.provider?.avatarUri:void 0)??(0,ey.Wf)(this.container,n,t))?.toString(!0),y={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,eC.kA)(i,e,{id:S,refType:"branch",name:i,remote:!0,upstream:{name:n.name,missing:!1}})}},R.push({id:S,name:v,owner:n.name,url:n.url,avatarUrl:w,context:(0,ek.C9)(y),hostingServiceType:n.provider?.gkProviderId})}k=[];let s=u.get(i.sha);if(null!=s)for(let t of s)P=(0,eR.gt)(e,t),y={webviewItem:"gitlens:tag",webviewItemValue:{type:"tag",ref:(0,eC.kA)(t,e,{id:P,refType:"tag",name:t})}},k.push({id:P,name:t,annotated:!0,context:(0,ek.C9)(y)});if(i.author.email&&!h.has(i.author.email)){let e=i.getCachedAvatarUri();null!=e&&h.set(i.author.email,e.toString(!0))}T="You"===i.author.name,b={row:(0,ek.C9)({webviewItem:`gitlens:commit${$?"+HEAD":""}+current`,webviewItemValue:{type:"commit",ref:(0,eC.kA)(i.sha,e,{refType:"revision",message:i.message})}}),avatar:(0,ek.C9)({webviewItem:`gitlens:contributor${T?"+current":""}`,webviewItemValue:{type:"contributor",repoPath:e,name:T&&c?.name!=null?c.name:i.author.name,email:i.author.email,current:T}})},_.push({sha:i.sha,parents:i.parents,author:i.author.name,email:i.author.email??"",date:i.committer.date.getTime(),message:(0,ew.E)(i.message&&String(i.message).length?i.message:i.summary),type:i.parents.length>1?"merge-node":"commit-node",heads:C,remotes:R,tags:k,contexts:b}),null!=i.stats&&l.set(i.sha,{files:(0,ep.Zx)(i.stats.files),additions:i.stats.additions,deletions:i.stats.deletions})}return f?.ref==="HEAD"?f.ref=(0,X.$1)(i.commits.values())?.sha:f?.ref!=null&&(f.ref=void 0),{repoPath:e,avatars:h,ids:d,includes:A,branches:s,remotes:a,downstreams:I,stashes:p,worktrees:g,worktreesByBranch:m,rows:_,id:f?.ref,paging:{limit:i.limit,startingCursor:i.startingCursor,hasMore:i.hasMore},more:async w=>{let v=await i.more?.(w);return this.getGraphCore(e,t,v,r,s,o,n,a,l,u,c,h,d,p,g,m,f)}}}async searchGraph(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};let r=(0,J.b4)(t);try{let o=new Map,n=(0,J.OM)(t),a=n.get("commit:");if(null!=a){let s=await Promise.allSettled((0,X.Tj)(a,t=>this.provider.commits.getCommit(e,t.replace(eI,"")))),n=0;for(let e of s){let t=(0,E.Ro)(e);null!=t&&o.set(t.sha,{i:n++,date:Number(i?.ordering==="author-date"?t.author.date:t.committer.date)})}return{repoPath:e,query:t,comparisonKey:r,results:o}}let l=await ei(this.provider,t,n,e);if(0===l.length)return{repoPath:e,query:t,comparisonKey:r,results:o};let{metadata:u,github:c,session:d}=await this.provider.ensureRepositoryContext(e),p=`repo:${u.repo.owner}/${u.repo.name}+${l.join("+").trim()}`;async function s(n,a){if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:o};n=this.provider.getPagingLimit(n??h.H.get("advanced.maxSearchItems"));let l=await c.searchCommitShas(d.accessToken,p,{cursor:a,limit:n,sort:i?.ordering==="date"?"committer-date":i?.ordering==="author-date"?"author-date":void 0});if(null==l||i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:o};for(let e of l.values)o.set(e.sha,{i:o.size,date:Number(i?.ordering==="author-date"?e.authorDate:e.committerDate)});return a=l.pageInfo?.endCursor??void 0,{repoPath:e,query:t,comparisonKey:r,results:o,paging:l.pageInfo?.hasNextPage?{limit:n,hasMore:!0}:void 0,more:async e=>s.call(this,e,a)}}return await s.call(this,i?.limit)}catch(e){if(e instanceof ev.Do)throw e;throw new ev.Do(e)}}};eA([(0,d.Rm)()],GraphGitSubProvider.prototype,"getGraph",1),eA([(0,d.Rm)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`,2:e=>`limit=${e?.limit}, ordering=${e?.ordering}`}})],GraphGitSubProvider.prototype,"searchGraph",1);var eD=Object.defineProperty,e_=Object.getOwnPropertyDescriptor,e$=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?e_(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eD(t,i,o),o};let eT=/^[^/](?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\x00-\x1F\x7F ~^:?*[\\]+[^./]$/;let RefsGitSubProvider=class RefsGitSubProvider{constructor(e,t,i){this.container=e,this.cache=t,this.provider=i}checkIfCouldBeValidBranchOrTagName(e,t){return Promise.resolve(eT.test(e))}async getMergeBase(e,t,i,r){if(null==e)return;let s=(0,$.dQ)(),{metadata:o,github:n,session:a}=await this.provider.ensureRepositoryContext(e);try{let e=await n.getComparison(a.accessToken,o.repo.owner,o.repo.name,(0,P.Xn)(e6(t),e6(i),"..."));return e?.merge_base_commit?.sha}catch(e){_.Vy.error(e,s);return}}async getReference(e,t){if(t&&t!==k.nB&&await this.isValidReference(e,t)){if("HEAD"!==t&&!(0,P.X$)(t)){let i=await this.provider.branches.getBranch(e,t);if(null!=i)return(0,eC.kA)(i.ref,e,{id:i.id,refType:"branch",name:i.name,remote:i.remote,upstream:i.upstream});let r=await this.provider.tags.getTag(e,t);if(null!=r)return(0,eC.kA)(r.ref,e,{id:r.id,refType:"tag",name:r.name})}return(0,eC.kA)(t,e,{refType:"revision"})}}async hasBranchOrTag(e,t){let[{values:i},{values:r}]=await Promise.all([this.provider.branches.getBranches(e,{filter:t?.filter?.branches,sort:!1}),this.provider.tags.getTags(e,{filter:t?.filter?.tags,sort:!1})]);return 0!==i.length||0!==r.length}isValidReference(e,t,i){return Promise.resolve(!0)}async resolveReference(e,t,i,r){let s;if(null!=i&&(0,P.RK)(t)&&(t="HEAD"),!t||t===k.nB||null==i&&(0,P.HH)(t)||null!=i&&(0,P._k)(t))return t;if(null!=i)s=this.provider.getRelativePath(i,e);else if(!(0,P.X$)(t)||t.endsWith("^3"))return t;let o=await this.provider.ensureRepositoryContext(e);if(null==o)return t;let{metadata:n,github:a,session:l}=o,u=await a.resolveReference(l.accessToken,n.repo.owner,n.repo.name,e6(t),s);return null!=u?u:s?k.nB:t}};e$([(0,d.Rm)()],RefsGitSubProvider.prototype,"checkIfCouldBeValidBranchOrTagName",1),e$([(0,d.Rm)()],RefsGitSubProvider.prototype,"getMergeBase",1),e$([(0,d.Rm)()],RefsGitSubProvider.prototype,"getReference",1),e$([(0,d.Rm)()],RefsGitSubProvider.prototype,"hasBranchOrTag",1),e$([(0,d.Rm)()],RefsGitSubProvider.prototype,"isValidReference",1),e$([(0,d.Rm)()],RefsGitSubProvider.prototype,"resolveReference",1);var eE=i(8601),ex=i(1545),eO=i(4808),eF=Object.defineProperty,eB=Object.getOwnPropertyDescriptor,eL=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eB(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eF(t,i,o),o};let RemotesGitProviderBase=class RemotesGitProviderBase{constructor(e,t,i){this.container=e,this.cache=t,this.provider=i}async getRemote(e,t,i){if(null!=e)return(await this.getRemotes(e,void 0,i)).find(e=>e.name===t)}async getDefaultRemote(e,t){let i=await this.getRemotes(e,void 0,t);return(0,S.ft)(i)}async getRemotesWithProviders(e,t,i){return(await this.getRemotes(e,t,i)).filter(e=>null!=e.provider)}async getRemotesWithIntegrations(e,t,i){return(await this.getRemotes(e,t,i)).filter(e=>e.hasIntegration())}async getBestRemoteWithProvider(e,t){return(await this.getBestRemotesWithProviders(e,t))[0]}async getBestRemotesWithProviders(e,t){if(null==e)return[];let i=this.cache.bestRemotes.get(e);return null==i&&(i=(async function(){let i=await this.getRemotesWithProviders(e,{sort:!0},t);if(0===i.length)return[];if(1===i.length)return[...i];if(t?.isCancellationRequested)throw new c.AL;let r=i.find(e=>e.default)?.name,s=(await this.provider.branches.getBranch(i[0].repoPath))?.getRemoteName(),o=[],n=!1;for(let e of i){let i;switch(e.name){case r:i=1e3;break;case s:i=6;break;case"upstream":i=5;break;case"origin":i=4;break;default:i=0}if(i>0&&i<1e3&&!n){let r=await e.getIntegration();if(null!=r&&(r.maybeConnected||void 0===r.maybeConnected&&await r.isConnected())){if(t?.isCancellationRequested)throw new c.AL;let s=await r.getRepositoryMetadata(e.provider.repoDesc,{cancellation:t});if(t?.isCancellationRequested)throw new c.AL;null!=s&&(i+=s.isFork?-3:3,n=!s.isFork)}}o.push([i,e])}return o.sort(([e,t],[i,r])=>0===i&&0===e?(0,eO.wN)(t.name,r.name):i-e),o.map(e=>e[1])}).call(this),this.cache.bestRemotes.set(e,i)),[...await i]}async getBestRemoteWithIntegration(e,t,i){let r=await this.getBestRemotesWithProviders(e,i),s=t?.includeDisconnected??!1;for(let e of r)if(e.hasIntegration()){let i=await e.getIntegration();if(null!=i){if(t?.filter?.(e,i)===!1)continue;if(s||!0===i.maybeConnected||void 0===i.maybeConnected&&(e.default||1===r.length)&&await i.isConnected())return e}}}async setRemoteAsDefault(e,t,i=!0){await this.container.storage.storeWorkspace("remote:default",i?t:void 0),this.container.events.fire("git:repo:change",{repoPath:e,changes:[R.Z_.Remotes,R.Z_.RemoteProviders]})}};eL([(0,d.Rm)()],RemotesGitProviderBase.prototype,"getRemote",1),eL([(0,d.Rm)()],RemotesGitProviderBase.prototype,"getDefaultRemote",1),eL([(0,d.Rm)()],RemotesGitProviderBase.prototype,"getRemotesWithProviders",1),eL([(0,d.Rm)()],RemotesGitProviderBase.prototype,"getRemotesWithIntegrations",1),eL([(0,d.Rm)()],RemotesGitProviderBase.prototype,"getBestRemoteWithProvider",1),eL([(0,d.Rm)()],RemotesGitProviderBase.prototype,"getBestRemotesWithProviders",1),eL([(0,d.Rm)()],RemotesGitProviderBase.prototype,"getBestRemoteWithIntegration",1),eL([(0,d.Rm)()],RemotesGitProviderBase.prototype,"setRemoteAsDefault",1);var eU=Object.defineProperty,eq=Object.getOwnPropertyDescriptor;let RemotesGitSubProvider=class RemotesGitSubProvider extends RemotesGitProviderBase{async getRemotes(e,t){if(null==e)return[];let i=(0,ex.P)(h.H.get("remotes",null),void 0),[,r,s]=n.Uri.parse(e,!0).path.split("/",3),o=`https://github.com/${r}/${s}.git`,a="https",l="github.com",u=`${r}/${s}`;return[new eE.X(this.container,e,"origin",a,l,u,(await (0,ex.m)(this.container,i))(o,l,u,a),[{type:"fetch",url:o},{type:"push",url:o}])]}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eU(t,i,o)})([(0,d.Rm)({args:{1:!1}})],RemotesGitSubProvider.prototype,"getRemotes",1);var eN=Object.defineProperty,eM=Object.getOwnPropertyDescriptor,eW=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eM(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eN(t,i,o),o};let RevisionGitSubProvider=class RevisionGitSubProvider{constructor(e,t){this.container=e,this.provider=t}async getRevisionContent(e,t,i){let r=t?this.provider.createProviderUri(e,t,i):this.provider.createVirtualUri(e,t,i);return n.workspace.fs.readFile(r)}async getTreeEntryForRevision(e,t,i){if(null==e||!i)return;if(i&&(i=this.provider.getRelativePath(i,e)),"HEAD"===t){let i=await this.provider.ensureRepositoryContext(e);if(null==i)return;let r=await i.metadata.getRevision();t=r?.revision}let r=t?this.provider.createProviderUri(e,t,i):this.provider.createVirtualUri(e,t,i),s=await n.workspace.fs.stat(r);if(null!=s)return{ref:t,oid:"",path:this.provider.getRelativePath(r,e),size:s.size,type:(s.type&n.FileType.Directory)===n.FileType.Directory?"tree":"blob"}}async getTreeForRevision(e,t){if(null==e)return[];if("HEAD"===t){let i=await this.provider.ensureRepositoryContext(e);if(null==i)return[];let r=await i.metadata.getRevision();t=r?.revision}let i=t?this.provider.createProviderUri(e,t):this.provider.createVirtualUri(e,t),r=await n.workspace.fs.readDirectory(i);if(null==r)return[];let s=[];for(let[e,o]of r){let r=this.provider.getAbsoluteUri(e,i);s.push({ref:t,oid:"",path:this.provider.getRelativePath(e,r),size:0,type:(o&n.FileType.Directory)===n.FileType.Directory?"tree":"blob"})}return[]}};eW([(0,D.G)(),(0,d.Rm)()],RevisionGitSubProvider.prototype,"getRevisionContent",1),eW([(0,D.G)(),(0,d.Rm)()],RevisionGitSubProvider.prototype,"getTreeEntryForRevision",1),eW([(0,D.G)(),(0,d.Rm)()],RevisionGitSubProvider.prototype,"getTreeForRevision",1);var eG=i(1555),eH=i(9385),eV=Object.defineProperty,ej=Object.getOwnPropertyDescriptor,ez=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ej(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eV(t,i,o),o};let GitStatus=class GitStatus{constructor(e,t,i,r,s,o,n=!1){this.container=e,this.repoPath=t,this.branch=i,this.sha=r,this.files=s,this.upstream=o,this.rebasing=n,this.detached=(0,eb.xM)(i),this.detached&&(this.branch=(0,eb.n$)(this.sha))}detached;get branchStatus(){return null==this.upstream?this.detached?"detached":"local":this.upstream.missing?"missingUpstream":this.upstream.state.ahead&&this.upstream.state.behind?"diverged":this.upstream.state.ahead?"ahead":this.upstream.state.behind?"behind":"upToDate"}get hasChanges(){return 0!==this.files.length}get hasConflicts(){return this.files.some(e=>e.conflicted)}get conflicts(){return this.files.filter(e=>e.conflicted)}get hasUntrackedChanges(){return this.files.some(e=>e.workingTreeStatus===C.KZ.Untracked)}get untrackedChanges(){return this.files.filter(e=>e.workingTreeStatus===C.KZ.Untracked)}get hasWorkingTreeChanges(){return this.files.some(e=>null!=e.workingTreeStatus)}get workingTreeChanges(){return this.files.filter(e=>null!=e.workingTreeStatus)}get ref(){return this.detached?this.sha:this.branch}computeWorkingTreeStatus(){let e=0,t=0,i=0,r=0,s=0,o=0,n=0,a=0,l=0,u=[],c=[],h=[];for(let d of this.files){switch(d.conflictStatus){case void 0:break;case C.Vk.AddedByBoth:case C.Vk.AddedByUs:case C.Vk.AddedByThem:e++,c.push(d);break;case C.Vk.DeletedByBoth:case C.Vk.DeletedByUs:case C.Vk.DeletedByThem:t++;break;default:i++,u.push(d)}switch(d.indexStatus){case void 0:break;case C.NO.Added:r++,c.push(d);break;case C.NO.Deleted:a++;break;default:o++,c.push(d)}switch(d.workingTreeStatus){case void 0:case C.KZ.Ignored:break;case C.KZ.Added:case C.KZ.Untracked:s++,h.push(d);break;case C.KZ.Deleted:l++;break;default:n++,h.push(d)}}let d=e+i+t,p=r+o+a,g=s+n+l;return{conflicted:d,conflictedAddsAndChanges:u,conflictedStatus:d>0?`+${e} ~${i} -${t}`:"",staged:p,stagedStatus:p>0?`+${r} ~${o} -${a}`:"",stagedAddsAndChanges:c,unstaged:g,unstagedStatus:g>0?`+${s} ~${n} -${l}`:"",unstagedAddsAndChanges:h}}getDiffStatus(){let e={added:0,deleted:0,changed:0};if(0===this.files.length)return e;for(let t of this.files)switch(t.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}return e}getFormattedDiffStatus({compact:e,empty:t,expand:i,prefix:r="",separator:s=" ",suffix:o=""}={}){let{added:n,changed:a,deleted:l}=this.getDiffStatus();if(0===n&&0===a&&0===l)return t??"";if(i){let e="";return n&&(e+=`${(0,eO.td)("file",n)} added`),a&&(e+=`${0===e.length?"":s}${(0,eO.td)("file",a)} changed`),l&&(e+=`${0===e.length?"":s}${(0,eO.td)("file",l)} deleted`),`${r}${e}${o}`}let u="";return e?(0!==n&&(u+=`+${n}`),0!==a&&(u+=`${0===u.length?"":s}~${a}`),0!==l&&(u+=`${0===u.length?"":s}-${l}`)):u+=`+${n}${s}~${a}${s}-${l}`,`${r}${u}${o}`}async getRemote(){if(null==this.upstream)return;let e=await this.container.git.remotes(this.repoPath).getRemotesWithProviders();if(0===e.length)return;let t=(0,eb.Zq)(this.upstream?.name);return e.find(e=>e.name===t)}getUpstreamStatus(e){return(0,eH.u)(this.upstream,e)}};ez([(0,eG.B)()],GitStatus.prototype,"hasConflicts",1),ez([(0,eG.B)()],GitStatus.prototype,"conflicts",1),ez([(0,eG.B)()],GitStatus.prototype,"hasUntrackedChanges",1),ez([(0,eG.B)()],GitStatus.prototype,"untrackedChanges",1),ez([(0,eG.B)()],GitStatus.prototype,"hasWorkingTreeChanges",1),ez([(0,eG.B)()],GitStatus.prototype,"workingTreeChanges",1),ez([(0,eG.B)()],GitStatus.prototype,"computeWorkingTreeStatus",1),ez([(0,eG.B)()],GitStatus.prototype,"getDiffStatus",1),ez([(0,eG.B)()],GitStatus.prototype,"getRemote",1);var eQ=Object.defineProperty,eY=Object.getOwnPropertyDescriptor;let StatusGitSubProvider=class StatusGitSubProvider{constructor(e,t){this.container=e,this.provider=t}async getStatus(e){if(null==e)return;let t=await this.provider.ensureRepositoryContext(e);if(null==t)return;let i=await t.metadata.getRevision();if(null!=i)return new GitStatus(this.container,e,i.name,i.revision,[],i.type===H.Branch||i.type===H.RemoteBranch?{name:`origin/${i.name}`,missing:!1,state:{ahead:0,behind:0}}:void 0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eY(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eQ(t,i,o)})([(0,D.G)(),(0,d.Rm)()],StatusGitSubProvider.prototype,"getStatus",1);var eK=i(3219),eZ=Object.defineProperty,eJ=Object.getOwnPropertyDescriptor,eX=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eJ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eZ(t,i,o),o};let e0=Object.freeze({values:[]});let TagsGitSubProvider=class TagsGitSubProvider{constructor(e,t,i){this.container=e,this.cache=t,this.provider=i}async getTag(e,t){let{values:[i]}=await this.getTags(e,{filter:e=>e.name===t});return i}async getTags(e,t){if(null==e)return e0;let i=(0,$.dQ)(),r=t?.paging?.cursor?void 0:this.cache.tags?.get(e);null==r&&(r=(async function(){try{let i,r,{metadata:s,github:o,session:n}=await this.provider.ensureRepositoryContext(e),a=[],l=t?.paging?.cursor,u=null==l;for(;;){let t=await o.getTags(n.accessToken,s.repo.owner,s.repo.name,{cursor:l});for(let s of t.values)i=s.target.authoredDate??s.target.target?.authoredDate??s.target.tagger?.date,r=s.target.committedDate??s.target.target?.committedDate??s.target.tagger?.date,a.push(new eK.r(this.container,e,s.name,s.target.target?.oid??s.target.oid,s.target.message??s.target.target?.message??"",null!=i?new Date(i):void 0,null!=r?new Date(r):void 0));if(!t.paging?.more||!u)return{...t,values:a};l=t.paging.cursor}}catch(t){return _.Vy.error(t,i),this.cache.tags?.delete(e),e0}}).call(this),t?.paging?.cursor==null&&this.cache.tags?.set(e,r));let s=await r;return t?.filter!=null&&(s={...s,values:s.values.filter(t.filter)}),t?.sort!=null&&(0,z.uO)(s.values,"boolean"==typeof t.sort?void 0:t.sort),s}async getTagsWithCommit(e,t,i){if(null==e||i?.commitDate==null)return[];let r=(0,$.dQ)();try{let{metadata:r,github:s,session:o}=await this.provider.ensureRepositoryContext(e);return await s.getTagsWithCommit(o.accessToken,r.repo.owner,r.repo.name,e6(t),i?.commitDate)}catch(e){return _.Vy.error(e,r),[]}}};eX([(0,d.Rm)()],TagsGitSubProvider.prototype,"getTag",1),eX([(0,d.Rm)({args:{1:!1}})],TagsGitSubProvider.prototype,"getTags",1),eX([(0,d.Rm)()],TagsGitSubProvider.prototype,"getTagsWithCommit",1);var e1=Object.defineProperty,e2=Object.getOwnPropertyDescriptor,e4=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?e2(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e1(t,i,o),o};let e5=Promise.resolve(void 0),e7=["repo","read:user","user:email"];let GitHubGitProvider=class GitHubGitProvider{constructor(e){this.container=e,this._cache=new GitCache(this.container),this._disposables.push(this._onDidChange,this._onWillChangeRepository,this._onDidChangeRepository,this._onDidCloseRepository,this._onDidOpenRepository,this._cache,n.authentication.onDidChangeSessions(this.onAuthenticationSessionsChanged,this))}descriptor={id:"github",name:"GitHub",virtual:!0};authenticationDescriptor={domain:"github.com",scopes:e7};authenticationProviderId=u.Q7.GitHub;supportedSchemes=new Set([l.xB.Virtual,l.xB.GitHub,l.xB.PRs]);_onDidChange=new n.EventEmitter;get onDidChange(){return this._onDidChange.event}_onWillChangeRepository=new n.EventEmitter;get onWillChangeRepository(){return this._onWillChangeRepository.event}_onDidChangeRepository=new n.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}_onDidCloseRepository=new n.EventEmitter;get onDidCloseRepository(){return this._onDidCloseRepository.event}_onDidOpenRepository=new n.EventEmitter;get onDidOpenRepository(){return this._onDidOpenRepository.event}_cache;_disposables=[];dispose(){this._disposables.forEach(e=>void e.dispose())}onAuthenticationSessionsChanged(e){e.provider.id===this.authenticationProviderId&&(this._sessionPromise=void 0,this.ensureSession(!1,!0))}onRepositoryChanged(e,t){this._cache.clearCaches(e.path),this._onWillChangeRepository.fire(t)}async discoverRepositories(e,t){if(!this.supportedSchemes.has(e.scheme))return[];try{let{remotehub:i}=await this.ensureRepositoryContext(e.toString(),!0),r=i.getVirtualWorkspaceUri(e);if(null==r)return[];return this.openRepository(void 0,r,!0,void 0,t?.silent)}catch(t){return t.message.startsWith("No provider registered with")&&(_.Vy.error(t,"No GitHub provider registered with Remote Repositories (yet); queuing pending discovery"),this._pendingDiscovery.add(e),this.ensurePendingRepositoryDiscovery()),[]}}_pendingDiscovery=new Set;_pendingTimer;ensurePendingRepositoryDiscovery(){null==this._pendingTimer&&0!==this._pendingDiscovery.size&&(this._pendingTimer=setTimeout(async()=>{try{let e=await G();for(let t of this._pendingDiscovery){if(null==e.getProvider(t)){this._pendingTimer=void 0,this.ensurePendingRepositoryDiscovery();return}this._pendingDiscovery.delete(t)}this._pendingTimer=void 0,setTimeout(()=>this._onDidChange.fire(),1),0!==this._pendingDiscovery.size&&this.ensurePendingRepositoryDiscovery()}catch{this._pendingTimer=void 0,this.ensurePendingRepositoryDiscovery()}},250))}updateContext(){(0,A.o)("gitlens:hasVirtualFolders",this.container.git.hasOpenRepositories(this.descriptor.id))}openRepository(e,t,i,r,s){return[new R.LN(this.container,{onDidRepositoryChange:this._onDidChangeRepository,onRepositoryChanged:this.onRepositoryChanged.bind(this)},this.descriptor,e??n.workspace.getWorkspaceFolder(t),t,i,r??!n.window.state.focused,s)]}async supports(e){let t;return t="timeline"===e,(0,A.o)(`gitlens:feature:unsupported:${e}`,!t),t}async visibility(e){let t=await this.remotes.getRemotes(e,{sort:!0});if(0===t.length)return["local",void 0];for await(let e of(0,E.w)(t.map(e=>this.getRemoteVisibility(e))))if("fulfilled"===e.status&&"public"===e.value[0])return["public",(0,S.U6)(e.value[1])];return["private",(0,S.U6)(t)]}async getRemoteVisibility(e){if(e.provider?.id!=="github")return["private",e];{let{github:t,metadata:i,session:r}=await this.ensureRepositoryContext(e.repoPath);return[await t.getRepositoryVisibility(r.accessToken,i.repo.owner,i.repo.name)??"private",e]}}async getOpenScmRepositories(){return[]}async getScmRepository(e){}async getOrOpenScmRepository(e){}canHandlePathOrUri(e,t){if(this.supportedSchemes.has(e))return"string"==typeof t?t:t.toString()}getAbsoluteUri(e,t){if("string"==typeof t)if((0,T.bm)(t))t=n.Uri.parse(t,!0);else throw n.window.showErrorMessage(`Unable to get absolute uri between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be a uri`),Error(`Base path '${t}' must be a uri`);if("string"==typeof e&&!(0,T.bm)(e)){let i=(0,T.Fd)(e);if(!(0,T.oP)(i))return n.Uri.joinPath(t,i)}let i=this.getRelativePath(e,t);return n.Uri.joinPath(t,i)}async getBestRevisionUri(e,t,i){return i?this.createProviderUri(e,i,t):this.createVirtualUri(e,i,t)}getRelativePath(e,t){let i;if("string"==typeof t)if((0,T.bm)(t))t=n.Uri.parse(t,!0);else throw n.window.showErrorMessage(`Unable to get relative path between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be a uri`),Error(`Base path '${t}' must be a uri`);if("string"==typeof e)if(!(0,T.bm)(e))return e=(0,T.Fd)(e),(i=(0,T.oP)(e)&&e.startsWith(t.path)?e.slice(t.path.length):e).charCodeAt(0)===l.s7.Slash&&(i=i.slice(1)),i;else e=n.Uri.parse(e,!0);return(0,T.Fd)((0,I.V8)(t.path.slice(1),e.path.slice(1)))}getRevisionUri(e,t,i){let r=this.createProviderUri(e,t,i);return t===k.nB?r.with({query:"~"}):r}async getWorkingUri(e,t){return this.createVirtualUri(e,void 0,t.path)}async excludeIgnoredUris(e,t){return t}async findRepositoryUri(e,t){let i=(0,$.dQ)();try{let t=await this.ensureRemoteHubApi();return await e8(e,t,e=>t.getProviderRootUri(e).with({scheme:l.xB.Virtual}))}catch(e){c.dU,_.Vy.error(e,i);return}}async getBlame(e,t){let i=(0,$.dQ)();if(t?.isDirty)return;let r="blame";null!=e.sha&&(r+=`:${e.sha}`);let s=await this.container.documentTracker.getOrAdd(e);if(null!=s.state){let e=s.state.getBlame(r);if(null!=e)return _.Vy.debug(i,`Cache hit: '${r}'`),e.item}_.Vy.debug(i,`Cache miss: '${r}'`),null==s.state&&(s.state=new GitDocumentState);let o=this.getBlameCore(e,s,r,i);return null!=s.state&&(_.Vy.debug(i,`Cache add: '${r}'`),s.state.setBlame(r,{item:o})),o}async getBlameCore(e,t,i,r){try{let t=await this.ensureRepositoryContext(e.repoPath);if(null==t)return;let{metadata:i,github:r,remotehub:s,session:o}=t,a=s.getVirtualUri(s.getProviderRootUri(e)),u=this.getRelativePath(e,a);if(e.scheme===l.xB.Virtual){let[t,i]=await Promise.allSettled([n.workspace.fs.stat(e),n.workspace.fs.stat(e.with({scheme:l.xB.GitHub}))]);if("fulfilled"!==t.status||"fulfilled"!==i.status||t.value.mtime!==i.value.mtime)return}let c=e.sha&&"HEAD"!==e.sha?e.sha:(await i.getRevision()).revision,h=await r.getBlame(o.accessToken,i.repo.owner,i.repo.name,c,u),d=new Map,p=new Map,g=[];for(let t of h.ranges){let i=t.commit,{viewer:r=o.account.label}=h,s=null!=r&&i.author.name===r?"You":i.author.name,n=null!=r&&i.committer.name===r?"You":i.committer.name,l=d.get(s);null==l&&(l={name:s,lineCount:0},d.set(s,l)),l.lineCount+=t.endingLine-t.startingLine+1;let c=p.get(i.oid);null==c&&(c=new y.Yg(this.container,e.repoPath,i.oid,new y.M7(s,i.author.email,new Date(i.author.date),i.author.avatarUrl),new y.M7(n,i.committer.email,new Date(i.author.date)),i.message.split(`
`,1)[0],i.parents.nodes[0]?.oid?[i.parents.nodes[0]?.oid]:[],i.message,{files:[new b.l(this.container,a.toString(),u,C.NO.Modified)],filtered:!0,pathspec:u},{files:i.changedFiles??0,additions:i.additions??0,deletions:i.deletions??0},[]),p.set(i.oid,c));for(let e=t.startingLine;e<=t.endingLine;e++){let t={sha:i.oid,originalLine:e,line:e};c.lines.push(t),g[e-1]=t}}let m=new Map([...d.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount));return{repoPath:e.repoPath,authors:m,commits:p,lines:g}}catch(e){if(null!=t.state&&!String(e).includes("No provider registered with")){let s=e?.toString()??"";return _.Vy.debug(r,`Cache replace (with empty promise): '${i}'`),t.state.setBlame(i,{item:e5,errorMessage:s}),t.setBlameFailure(e),e5}return}}async getBlameContents(e,t){}async getBlameForLine(e,t,i,r){let s=(0,$.dQ)();if(!i?.isDirty){if(!r?.forceSingleLine){let i=await this.getBlame(e);if(null==i)return;let r=i.lines[t];if(null==r){if(i.lines.length!==t)return;r=i.lines[t-1]}let s=i.commits.get(r.sha);if(null==s)return;return{author:{...i.authors.get(s.author.name),lineCount:s.lines.length},commit:s,line:r}}try{let i=await this.ensureRepositoryContext(e.repoPath);if(null==i)return;let{metadata:r,github:s,remotehub:o,session:n}=i,a=o.getVirtualUri(o.getProviderRootUri(e)),l=this.getRelativePath(e,a),u=e.sha&&"HEAD"!==e.sha?e.sha:(await r.getRevision()).revision,c=await s.getBlame(n.accessToken,r.repo.owner,r.repo.name,u,l),h=t+1,d=c.ranges.find(e=>e.startingLine===h);if(null==d)return;let p=d.commit,{viewer:g=n.account.label}=c,m=null!=g&&p.author.name===g?"You":p.author.name,f=null!=g&&p.committer.name===g?"You":p.committer.name,w=new y.Yg(this.container,e.repoPath,p.oid,new y.M7(m,p.author.email,new Date(p.author.date),p.author.avatarUrl),new y.M7(f,p.committer.email,new Date(p.author.date)),p.message.split(`
`,1)[0],p.parents.nodes[0]?.oid?[p.parents.nodes[0]?.oid]:[],p.message,{files:[new b.l(this.container,a.toString(),l,C.NO.Modified)],filtered:!0,pathspec:l},{files:p.changedFiles??0,additions:p.additions??0,deletions:p.deletions??0},[]);for(let e=d.startingLine;e<=d.endingLine;e++){let t={sha:p.oid,originalLine:e,line:e};w.lines.push(t)}return{author:{name:m,lineCount:d.endingLine-d.startingLine+1},commit:w,line:{sha:p.oid,originalLine:d.startingLine,line:d.startingLine}}}catch(e){_.Vy.error(e,s);return}}}async getBlameForLineContents(e,t,i,r){}async getBlameForRange(e,t){let i=await this.getBlame(e);if(null!=i)return this.getBlameRange(i,e,t)}async getBlameForRangeContents(e,t,i){let r=await this.getBlameContents(e,i);if(null!=r)return this.getBlameRange(r,e,t)}getBlameRange(e,t,i){if(0===e.lines.length||0===i.start.line&&i.end.line===e.lines.length-1)return e;let r=e.lines.slice(i.start.line,i.end.line+1),s=new Set(r.map(e=>e.sha)),o=i.start.line+1,n=i.end.line+1,a=new Map,l=new Map;for(let t of e.commits.values()){if(!s.has(t.sha))continue;let e=t.with({lines:t.lines.filter(e=>e.line>=o&&e.line<=n)});l.set(t.sha,e);let i=a.get(e.author.name);null==i&&(i={name:e.author.name,lineCount:0},a.set(i.name,i)),i.lineCount+=e.lines.length}let u=new Map([...a.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount));return{repoPath:t.repoPath,authors:u,commits:l,lines:r}}async getDiffForFile(e,t,i){}async getDiffForFileContents(e,t,i){}async getDiffForLine(e,t,i,r){}async getLastFetchedTimestamp(e){}isTrackable(e){return this.supportedSchemes.has(e.scheme)}async isTracked(e){if(!this.isTrackable(e)||null==this.container.git.getRepository(e))return!1;let t=e.with({scheme:l.xB.GitHub});return null!=await n.workspace.fs.stat(t)}_branches;get branches(){return this._branches??=new BranchesGitSubProvider(this.container,this._cache,this)}_commits;get commits(){return this._commits??=new CommitsGitSubProvider(this.container,this._cache,this)}_config;get config(){return this._config??=new ConfigGitSubProvider(this.container,this._cache,this)}_contributors;get contributors(){return this._contributors??=new ContributorsGitSubProvider(this.container,this._cache,this)}_diff;get diff(){return this._diff??=new DiffGitSubProvider(this.container,this._cache,this)}_graph;get graph(){return this._graph??=new GraphGitSubProvider(this.container,this._cache,this)}_refs;get refs(){return this._refs??=new RefsGitSubProvider(this.container,this._cache,this)}_remotes;get remotes(){return this._remotes??=new RemotesGitSubProvider(this.container,this._cache,this)}_revision;get revision(){return this._revision??=new RevisionGitSubProvider(this.container,this)}_status;get status(){return this._status??=new StatusGitSubProvider(this.container,this)}_tags;get tags(){return this._tags??=new TagsGitSubProvider(this.container,this._cache,this)}async ensureRepositoryContext(e,t){let i,r,s=n.Uri.parse(e,!0);if(!/^github\+?/.test(s.authority))throw new c.gK(e,c.ax.NotAGitHubRepository);if(!t){let t=this.container.git.getRepository(s);if(null==t)throw new c.gK(e,c.ax.NotAGitHubRepository);s=t.uri}let o=this._remotehub;if(null==o)try{o=await this.ensureRemoteHubApi()}catch(t){throw!(t instanceof c.dU),new c.gK(e,c.ax.RemoteHubApiNotFound,t)}let a=await e8(s,o,e=>o?.getMetadata(e));if(a?.provider.id!=="github")throw new c.gK(e,c.ax.NotAGitHubRepository);let l=(0,v.JG)(s.authority);if(l.metadata?.ref?.type===V.PullRequest){let e=await a.getRevision();if(e.type===H.RemoteBranch){let[t]=e.name.split(":");t!==a.repo.owner&&(a.repo.owner=t)}}try{[i,r]=await Promise.all([this.ensureGitHub(),this.ensureSession()])}catch(t){if(t instanceof c.v3)throw new c.gK(e,t.reason===c.R.UserDidNotConsent?c.ax.GitHubAuthenticationDenied:c.ax.GitHubAuthenticationNotFound,t);throw new c.gK(e)}if(null==i)throw new c.gK(e);return{github:i,metadata:a,remotehub:o,session:r}}_github;async ensureGitHub(){if(null==this._github){let e=await this.container.github;null!=e&&this._disposables.push(e.onDidReauthenticate(()=>void this.ensureSession(!0))),this._github=e}return this._github}_remotehub;_remotehubPromise;async ensureRemoteHubApi(e){if(null==this._remotehubPromise&&(this._remotehubPromise=G(),this._remotehubPromise.then(e=>this._remotehub=e,()=>this._remotehub=void 0)),!e)return this._remotehubPromise;try{return await this._remotehubPromise}catch{return}}_sessionPromise;async ensureSession(e=!1,t=!1){if(e||null==this._sessionPromise){async function i(){let r=this.container.storage.get(`provider:authentication:skip:${this.descriptor.id}`,!1);try{let i;if(e?(r=!1,this.container.storage.delete(`provider:authentication:skip:${this.descriptor.id}`),i=await (0,W.c)(this.container,u.Q7.GitHub,this.authenticationDescriptor,{forceNewSession:!0})):i=r||t?await (0,W.c)(this.container,u.Q7.GitHub,this.authenticationDescriptor):await (0,W.c)(this.container,u.Q7.GitHub,this.authenticationDescriptor,{createIfNeeded:!0}),null!=i)return i;throw Error("User did not consent")}catch(s){if(s instanceof Error&&s.message.includes("User did not consent")){if(!t&&(await this.container.storage.store(`provider:authentication:skip:${this.descriptor.id}`,!0),!r))return e||queueMicrotask(async()=>{let e="Re-enable";await n.window.showInformationMessage("GitLens has been disabled. Authentication is required for GitLens to work with remote GitHub repositories.",e)===e&&this.ensureSession(!0)}),e=!1,i.call(this);throw new c.v3("github",c.R.UserDidNotConsent)}throw _.Vy.error(s),new c.v3("github",void 0,s)}}this._sessionPromise=i.call(this)}return this._sessionPromise}createVirtualUri(e,t,i){var r;let s;if("string"==typeof t)t&&(s=(0,P.HH)(t)?{v:1,ref:{id:t,type:2}}:{v:1,ref:{id:t,type:4}});else switch(t?.refType){case"revision":case"stash":s={v:1,ref:{id:t.ref,type:2}};break;case"branch":case"tag":s={v:1,ref:{id:t.name,type:4}}}if("string"==typeof e&&(e=n.Uri.parse(e,!0)),i){let t=e.path;t.endsWith("/")&&(t=t.slice(0,-1)),i=this.getRelativePath(i,e),i=`${t}/${i.startsWith("/")?i.slice(0,-1):i}`}return e.with({scheme:l.xB.Virtual,authority:(r=s,`github${null!=r?`+${(0,a.l)(JSON.stringify(r))}`:""}`),path:i??e.path})}createProviderUri(e,t,i){let r=this.createVirtualUri(e,t,i);return null==this._remotehub?r.scheme!==l.xB.Virtual?r:r.with({scheme:l.xB.GitHub}):this._remotehub.getProviderUri(r)}getPagingLimit(e){return 0===(e=Math.min(100,e??h.H.get("advanced.maxListItems")??100))&&(e=100),e}async resolveReferenceCore(e,t,i){if(null==i||"HEAD"===i)return(await t.getRevision()).revision;if((0,P.HH)(i))return i;if((0,P.p8)(i))return;let[r,s]=await Promise.allSettled([this.branches.getBranches(e,{filter:e=>e.name===i}),this.tags.getTags(e,{filter:e=>e.name===i})]);return i=(0,E.Ro)(r)?.values[0]?.sha??(0,E.Ro)(s)?.values[0]?.sha}};async function e8(e,t,i){let s=!1;for(;;)try{return await i(e)}catch(i){if(!s&&(/No provider registered/i.test(i.message)||null==t.getProvider(e))){r??=t.loadWorkspaceContents(e);try{await r,s=!0;continue}catch{}}throw i}}function e6(e){return e?.replace(/(?:^|(?<=..))origin\//,"")}e4([(0,d.Rm)()],GitHubGitProvider.prototype,"getBestRevisionUri",1),e4([(0,d.Rm)()],GitHubGitProvider.prototype,"getWorkingUri",1),e4([(0,d.Rm)({args:{1:e=>e.length}})],GitHubGitProvider.prototype,"excludeIgnoredUris",1),e4([(0,D.G)(),(0,d.Yz)()],GitHubGitProvider.prototype,"findRepositoryUri",1),e4([(0,D.G)((e,t)=>`${e.toString()}|${t?.isDirty}`),(0,d.Rm)({args:{1:e=>e?.isDirty}})],GitHubGitProvider.prototype,"getBlame",1),e4([(0,d.Rm)({args:{1:"<contents>"}})],GitHubGitProvider.prototype,"getBlameContents",1),e4([(0,D.G)((e,t,i,r)=>`${e.toString()}|${t}|${i?.isDirty}|${r?.forceSingleLine}`),(0,d.Rm)({args:{2:e=>e?.isDirty}})],GitHubGitProvider.prototype,"getBlameForLine",1),e4([(0,d.Rm)({args:{2:"<contents>"}})],GitHubGitProvider.prototype,"getBlameForLineContents",1),e4([(0,d.Rm)()],GitHubGitProvider.prototype,"getBlameForRange",1),e4([(0,d.Rm)({args:{2:"<contents>"}})],GitHubGitProvider.prototype,"getBlameForRangeContents",1),e4([(0,d.Rm)({args:{0:"<blame>"}})],GitHubGitProvider.prototype,"getBlameRange",1),e4([(0,d.Rm)()],GitHubGitProvider.prototype,"getDiffForFile",1),e4([(0,d.Rm)({args:{1:e=>"<contents>"}})],GitHubGitProvider.prototype,"getDiffForFileContents",1),e4([(0,d.Rm)()],GitHubGitProvider.prototype,"getDiffForLine",1),e4([(0,D.G)()],GitHubGitProvider.prototype,"ensureRepositoryContext",1),e4([(0,D.G)()],GitHubGitProvider.prototype,"ensureGitHub",1);var e3=i(7500),e9=i(8103),te=i(9156),tt=i(3361),ti=i(7984),tr=Object.defineProperty,ts=Object.getOwnPropertyDescriptor,to=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ts(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tr(t,i,o),o};let tn=n.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:n.DecorationRangeBehavior.OpenOpen}),ta=0x40000000-1;let LineAnnotationController=class LineAnnotationController{constructor(e){this.container=e,this._disposable=n.Disposable.from((0,tt.Oo)(e.onReady)(this.onReady,this),h.H.onDidChange(this.onConfigurationChanged,this),e.fileAnnotations.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),e.integrations.onDidChangeConnectionState((0,B.s)(()=>void this.refresh(n.window.activeTextEditor),250)))}_cancellation;_disposable;_editor;_enabled=!1;dispose(){this.clearAnnotations(this._editor),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){h.H.changed(e,"currentLine")&&(h.H.changed(e,"currentLine.enabled")&&(h.H.get("currentLine.enabled")?(this._enabled=!0,this.resume()):(this._enabled=!1,this.setLineTracker(!1))),this.refresh(n.window.activeTextEditor))}_suspended=!1;get suspended(){return!this._enabled||this._suspended}resume(){return this.setLineTracker(!0),!!this._suspended&&(this._suspended=!1,!0)}suspend(){return this.setLineTracker(!1),!this._suspended&&(this._suspended=!0,!0)}onActiveLinesChanged(e){if(!e.pending&&void 0!==e.selections)return void this.refresh(e.editor);this.clear(e.editor)}onFileAnnotationsToggled(){this.refresh(n.window.activeTextEditor)}clear(e){this._cancellation?.cancel(),this._editor!==e&&null!=this._editor&&this.clearAnnotations(this._editor),this.clearAnnotations(e)}async toggle(e){this._enabled=!(this._enabled&&!this.suspended),this._enabled?this.resume()&&await this.refresh(e):this.suspend()&&await this.refresh(e)}clearAnnotations(e){void 0!==e&&!0!==e._disposed&&e.setDecorations(tn,[])}getPullRequestsForLines(e,t){let i=new Map;if(0===t.size)return i;let r=this.container.git.remotes(e).getBestRemoteWithIntegration();for(let[,e]of t){if(e.commit.isUncommitted)continue;let t=i.get(e.commit.ref);null==t&&(t=r.then(t=>e.commit.getAssociatedPullRequest(t)),i.set(e.commit.ref,t))}return i}async refresh(e){let t;if(null==e&&null==this._editor)return;let i=(0,$.dQ)(),r=this.container.lineTracker.selections;if(null==e||null==r||!(0,F.oU)(e)){(0,$.TT)(i,` ${l.EO.Dot} Skipped because there is no valid editor or no valid selections`),this.clear(this._editor);return}this._editor!==e&&(this.clear(this._editor),this._editor=e);let s=h.H.get("currentLine");if(this.suspended){(0,$.TT)(i,` ${l.EO.Dot} Skipped because the controller is suspended`),this.clear(e);return}let o=await this.container.documentTracker.getOrAdd(e.document),a=await o?.getStatus();if(!a?.blameable&&this.suspended){(0,$.TT)(i,` ${l.EO.Dot} Skipped because the ${this.suspended?"controller is suspended":"document is not blameable"}`),this.clear(e);return}if(null==e.document||!this.container.lineTracker.includes(r))return void(0,$.TT)(i,` ${l.EO.Dot} Skipped because the ${null==e.document?"editor is gone":`selection=${r.map(e=>`[${e.anchor}-${e.active}]`).join()} are no longer current`}`);(0,$.TT)(i,` ${l.EO.Dot} selection=${r.map(e=>`[${e.anchor}-${e.active}]`).join()}`);let u=!0;if(e.document.uri.scheme===l.xB.Vsls||e.document.uri.scheme===l.xB.VslsScc){let e=h.H.get("hovers");t={autolinks:e.autolinks.enabled,dateFormat:h.H.get("defaultDateFormat"),format:e.detailsMarkdownFormat,pullRequests:e.pullRequests.enabled}}let c=new Map,d=new Map;for(let e of r){let r=this.container.lineTracker.getState(e.active);if(r?.commit==null){_.Vy.debug(i,`Line ${e.active} returned no commit`);continue}null==t||null!=r.commit.message||c.has(r.commit.ref)||c.set(r.commit.ref,r.commit.ensureFullDetails()),d.set(e.active,r),r.commit.isUncommitted||(u=!1)}let p=o.uri.repoPath,g=!u&&null!=p&&s.pullRequests.enabled&&e9.c.has(s.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState");this._cancellation?.cancel(),this._cancellation=new n.CancellationTokenSource;let m=this._cancellation.token,f=e9.c.has(s.format,"tips")?this.container.git.getBranchesAndTagsTipsLookup(p):void 0;async function w(e,i,r,a,u){let c={family:s.fontFamily,size:s.fontSize,style:s.fontStyle,weight:s.fontWeight},p=[];for(let[g,m]of d){let d=m.commit;if(null==d||d.isUncommitted&&""===s.uncommittedChangesFormat)continue;let f=a?.get(d.ref),w=(0,ti.iS)(d,d.isUncommitted?s.uncommittedChangesFormat??s.format:s.format,{dateFormat:null===s.dateFormat?h.H.get("defaultDateFormat"):s.dateFormat,getBranchAndTagTips:r,pullRequest:f?.value,pullRequestPendingMessage:`PR ${l.EO.Ellipsis}`},c,s.scrollable);w.range=i.document.validateRange(new n.Range(g,ta,g,ta)),null!=t&&(w.hoverMessage=await (0,te.MX)(e,d,o.uri,g,{...t,pullRequest:f?.value,timeout:u})),p.push(w)}i.setDecorations(tn,p)}let v=g?await (0,E.wD)(this.getPullRequestsForLines(p,d),!0,m,100,async t=>{if("timedout"!==t.reason||m.isCancellationRequested||e!==this._editor)return;_.Vy.debug(i,`${l.EO.Dot} pull request queries took too long (over 100 ms)`);let[r,s]=await Promise.allSettled([f,t.value]);if(m.isCancellationRequested||e!==this._editor)return;let o=(0,E.Ro)(s),n=(0,E.Ro)(r);_.Vy.debug(i,`${l.EO.Dot} pull request queries completed; updating...`),w(this.container,e,n,o)}):void 0,[y]=await Promise.allSettled([f,...c.values()]);m.isCancellationRequested||await w(this.container,e,(0,E.Ro)(y),v,100)}setLineTracker(e){if(e){this.container.lineTracker.subscribed(this)||this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this));return}this.container.lineTracker.unsubscribe(this)}};to([(0,d.Rm)()],LineAnnotationController.prototype,"resume",1),to([(0,d.Rm)()],LineAnnotationController.prototype,"suspend",1),to([(0,d.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineAnnotationController.prototype,"onActiveLinesChanged",1),to([(0,d.Yz)({args:!1,singleLine:!0})],LineAnnotationController.prototype,"clear",1),to([(0,d.Rm)({args:!1})],LineAnnotationController.prototype,"toggle",1),to([(0,d.Yz)()],LineAnnotationController.prototype,"refresh",1);var tl=i(8577),tu=i(8832),tc=i(7687),th=i(8845),td=i(6732),tp=i(4256);let PromiseCache=class PromiseCache{constructor(e){this.options=e}cache=new Map;async get(e,t){let i=Date.now(),r=this.cache.get(e);if(null!=r&&!this.expired(r,i))return r.accessed=i,r.promise;let s=t();return r={promise:s,created:i,accessed:i},this.cache.set(e,r),(this.options?.createTTL!=null||this.options?.accessTTL!=null)&&this.cache.size>1&&queueMicrotask(()=>this.cleanupExpired()),this.options?.expireOnError&&s.catch(()=>this.cache.delete(e)),s}cleanupExpired(){let e=Date.now();for(let[t,i]of this.cache.entries())this.expired(i,e)&&this.cache.delete(t)}expired(e,t){return this.options?.createTTL!=null&&t-e.created>=this.options?.createTTL||this.options?.accessTTL!=null&&t-e.accessed>=this.options?.accessTTL}clear(){this.cache.clear()}delete(e){this.cache.delete(e)}};var tg=i(1350),tm=Object.defineProperty,tf=Object.getOwnPropertyDescriptor,tw=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?tf(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tm(t,i,o),o};let tv=Object.freeze(new Map);let AutolinksProvider=class AutolinksProvider{constructor(e){this.container=e,this._disposable=n.Disposable.from(h.H.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConfiguredIntegrations(this.onConfiguredIntegrationsChanged,this)),this.setAutolinksFromConfig()}_disposable;_references=[];_refsetCache=new PromiseCache({accessTTL:36e5});dispose(){this._disposable?.dispose()}onConfigurationChanged(e){h.H.changed(e,"autolinks")&&(this.setAutolinksFromConfig(),this._refsetCache.clear())}onConfiguredIntegrationsChanged(e){this._refsetCache.clear()}setAutolinksFromConfig(){let e=h.H.get("autolinks");this._references=e?.filter(e=>e.prefix&&e.url)?.map(e=>({prefix:e.prefix,url:e.url,alphanumeric:e.alphanumeric??!1,ignoreCase:e.ignoreCase??!1,title:e.title??void 0}))??[]}async collectIntegrationAutolinks(e,t){let i=tg.jn.map(async e=>this.container.integrations.get(e));e?.provider!=null&&i.push(e.getIntegration());let r=new Set,s=[];for(let e of(await Promise.allSettled(i))){let i=(0,E.Ro)(e);if(null!=i&&!1!==i.maybeConnected&&!r.has(i)){r.add(i);let e=i.autolinks();(0,E.yL)(e)?s.push(e.then(e=>{e.length&&t.push([i,e])})):e.length&&t.push([i,e])}}0!==s.length&&await Promise.allSettled(s)}collectRemoteAutolinks(e,t){e?.provider?.autolinks.length&&t.push([e.provider,e.provider.autolinks])}collectCustomAutolinks(e){this._references.length&&e.push([void 0,this._references])}async getRefSets(e){return this._refsetCache.get(e?.remoteKey,async()=>{let t=[];return await this.collectIntegrationAutolinks(e,t),this.collectRemoteAutolinks(e,t),this.collectCustomAutolinks(t),t})}async getBranchAutolinks(e,t){let i=await this.getRefSets(t);return 0===i.length?tv:(0,tg.Xn)(e,i)}async getAutolinks(e,t){let i=await this.getRefSets(t);return 0===i.length?tv:(0,tg.b9)(e,i)}getAutolinkEnrichableId(e){return e.provider?.id===u.tp.Jira?`${e.prefix}${e.id}`:e.id}async getEnrichedAutolinks(e,t){if("string"==typeof e&&(e=await this.getAutolinks(e,t)),0===e.size)return;let i=await t?.getIntegration();null!=i&&((i.maybeConnected??await i.isConnected())&&await i.access()||(i=void 0));let r=new Map;for(let[s,o]of e){let e,n;if(null!=o.provider){null==(e=o.provider instanceof tu.sT?o.provider.id:(0,tc.p)(o.provider.id))&&(e=o.provider.id);try{n=await this.container.integrations.get(e)}catch(e){_.Vy.error(e,`Failed to get integration for ${o.provider.id}`),n=void 0}}null!=n&&((n.maybeConnected??await n.isConnected())&&await n.access()||(n=void 0));let a=t?.provider!=null&&null!=i&&e===i.id&&o.provider?.domain===i.domain?i.getIssueOrPullRequest(o.descriptor??t.provider.repoDesc,this.getAutolinkEnrichableId(o),{type:o.type}):null!=o.descriptor?n?.getIssueOrPullRequest(o.descriptor,this.getAutolinkEnrichableId(o),{type:o.type}):void 0;r.set(s,[a,o])}return r}linkify(e,t,i,r,s,o){let n="plaintext"===t&&null==o;n&&(o=new Map);let a=new Map;if(r?.size)for(let[,[,i]]of r)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,a,r,s,o));else{for(let i of this._references)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,a,r,s,o));if(i?.length){for(let n of i=[...i].sort((e,t)=>{let i=e.maybeIntegrationConnected,r=t.maybeIntegrationConnected;return i!==r?i?-1:+!!r:0}))if(null!=n.provider)for(let i of n.provider.autolinks)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,a,r,s,o))}}return 0!==a.size&&(e=e.replace(/(\x00\d+\x00)/g,(e,t)=>a.get(t)??t)),n&&o?.size&&(e+=`
${l.EO.Dash.repeat(2)}
${(0,X.fj)((0,X.Tj)(o,([e,t])=>`${(0,eO.VU)(e)} ${t}`),`
`)}`),e}ensureAutolinkCached(e){if((0,tg.Q)(e))return!0;if(!e.prefix||!e.url)return!1;if(void 0!==e.tokenize||null===e.tokenize)return!0;try{e.tokenize=(t,i,r,s,o,n)=>{let a;switch(i){case"markdown":return(0,tg.IT)(e,i),t.replace(e.messageMarkdownRegex,(t,i,u,c)=>{let h=(0,td.W)(e.url.replace(tg.eB,c)),d="";if(e.title){d=` "${e.title.replace(tg.eB,c)}`;let t=s?.get(c)?.[0];if(t?.value!=null)if(t.paused){if(null!=n&&!o?.has(c)){let t=e.description?.replace(tg.eB,c);null==t&&(t=`Custom Autolink ${e.prefix}${c}`),a=n.size+1,n.set(a,`[${(0,ey.xu)()} ${t} $(loading~spin)](${h}${d}")`)}d+=`
${l.EO.Dash.repeat(2)}
Loading...`}else{let e=t.value,i=(0,tp.FV)(e.title.trim()),r=i.replace(/"/g,'\\"');null==n||o?.has(c)||(a=n.size+1,n.set(a,`[${(0,ey.xu)(e)} **${i}**](${h}${d}")\\
${l.EO.Space.repeat(5)}${u} ${e.state} ${(0,th.PI)(e.closedDate??e.createdDate)}`)),d+=`
${l.EO.Dash.repeat(2)}
${r}
${(0,eO.ZH)(e.state)}, ${(0,th.PI)(e.closedDate??e.createdDate)}`}else if(null!=n&&!o?.has(c)){let t=e.description?.replace(tg.eB,c);null==t&&(t=`Custom Autolink ${e.prefix}${c}`),a=n.size+1,n.set(a,`[${(0,ey.xu)()} ${t}](${h}${d}")`)}d+='"'}let p=`\0${r.size}\0`;return r.set(p,`[${u}](${h}${d})`),`${i}${p}`});case"html":return(0,tg.IT)(e,i),t.replace(e.messageHtmlRegex,(t,i,u,c)=>{let h=(0,td.W)(e.url.replace(tg.eB,c)),d="";if(e.title){d=`"${(0,eO.yz)(e.title.replace(tg.eB,c))}`;let t=s?.get(c)?.[0];if(t?.value!=null)if(t.paused){if(null!=n&&!o?.has(c)){let t=e.description?.replace(tg.eB,c);null==t&&(t=`Custom Autolink ${e.prefix}${c}`),a=n.size+1,n.set(a,`<a href="${h}" title=${d}>${(0,ey.nL)()} ${t}</a>`)}d+=`
${l.EO.Dash.repeat(2)}
Loading...`}else{let e=t.value,i=(0,eO.yz)(e.title.trim()),r=i.replace(/"/g,"&quot;");null==n||o?.has(c)||(a=n.size+1,n.set(a,`<a href="${h}" title=${d}>${(0,ey.nL)(e)} <b>${i}</b></a><br /><span>${l.EO.Space.repeat(5)}${u} ${e.state} ${(0,th.PI)(e.closedDate??e.createdDate)}</span>`)),d+=`
${l.EO.Dash.repeat(2)}
${r}
${(0,eO.ZH)(e.state)}, ${(0,th.PI)(e.closedDate??e.createdDate)}`}else if(null!=n&&!o?.has(c)){let t=e.description?.replace(tg.eB,c);null==t&&(t=`Custom Autolink ${e.prefix}${c}`),a=n.size+1,n.set(a,`<a href="${h}" title=${d}>${(0,ey.nL)()} ${t}</a>`)}d+='"'}let p=`\0${r.size}\0`;return r.set(p,`<a href="${h}" title=${d}>${u}</a>`),`${i}${p}`});default:return(0,tg.IT)(e,i),t.replace(e.messageRegex,(e,t,i,u)=>{let c=s?.get(u)?.[0];if(c?.value==null)return i;null==n||o?.has(u)||(a=n.size+1,n.set(a,`${i}: ${c.paused?"Loading...":`${c.value.title}  ${l.EO.Dot}  ${(0,eO.ZH)(c.value.state)}, ${(0,th.PI)(c.value.closedDate??c.value.createdDate)}`}`));let h=`\0${r.size}\0`;return r.set(h,`${i}${(0,eO.VU)(a)}`),`${t}${h}`})}}}catch(t){_.Vy.error(t,`Failed to create autolink generator: prefix=${e.prefix}, url=${e.url}, title=${e.title}`),e.tokenize=null}return!0}};tw([(0,d.Yz)({args:{0:"<message>",1:!1}})],AutolinksProvider.prototype,"getAutolinks",1),tw([(0,d.Yz)({args:{0:e=>"string"==typeof e?"<message>":`autolinks=${e.size}`,1:e=>e?.remoteKey}})],AutolinksProvider.prototype,"getEnrichedAutolinks",1),tw([(0,d.Yz)({args:{0:"<text>",2:e=>e?.length,3:e=>e?.size,4:e=>e?.size}})],AutolinksProvider.prototype,"linkify",1);var ty=i(3037);let CacheProvider=class CacheProvider{_cache=new Map;constructor(e){}dispose(){this._cache.clear()}delete(e,t){this._cache.delete(`${e}:${t}`)}get(e,t,i,r,s){let o,n=this._cache.get(`${e}:${t}`);if(null!=n&&(o="number"==typeof s?.expiryOverride&&s.expiryOverride>0?n.cachedAt+s.expiryOverride:n.expiresAt),null==n||s?.expiryOverride===!0||null!=o&&o>0&&o<Date.now()||null!=n.etag&&n.etag!==i){let{value:s,expiresAt:o}=r();return this.set(e,t,s,i,o)?.value}return n.value}getCurrentAccount(e,t,i){var r;let{key:s,etag:o}={key:(r=e).id,etag:`${r.id}:${r.maybeConnected??!1}`};return this.get("currentAccount",`id:${s}`,o,t,i)}getIssueOrPullRequest(e,t,i,r,s,o){let{key:n,etag:a}=tb(i,r);return null==i?this.get("issuesOrPrsById",`id:${e}:${n}:${t??"unknown"}`,a,s,o):this.get("issuesOrPrsByIdAndRepo",`id:${e}:${n}:${t??"unknown"}:${JSON.stringify(i)}}`,a,s,o)}getIssue(e,t,i,r,s){let{key:o,etag:n}=tb(t,i);return null==t?this.get("issuesById",`id:${e}:${o}:issue`,n,r,s):this.get("issuesByIdAndResource",`id:${e}:${o}:issue:${JSON.stringify(t)}}`,n,r,s)}getPullRequest(e,t,i,r,s){let{key:o,etag:n}=tb(t,i);return null==t?this.get("prsById",`id:${e}:${o}:pullrequest`,n,r,s):this.get("prsById",`id:${e}:${o}:pullrequest:${JSON.stringify(t)}}`,n,r,s)}getPullRequestForBranch(e,t,i,r,s){let{key:o,etag:n}=tb(t,i);return this.get("prByBranch",`branch:${e}:${o}`,n,this.wrapPullRequestCacheable(r,o,n),s)}getPullRequestForSha(e,t,i,r,s){let{key:o,etag:n}=tb(t,i);return this.get("prsBySha",`sha:${e}:${o}`,n,this.wrapPullRequestCacheable(r,o,n),s)}getRepositoryDefaultBranch(e,t,i,r){let{key:s,etag:o}=tb(e,t);return this.get("defaultBranch",`repo:${s}`,o,i,r)}getRepositoryMetadata(e,t,i,r){let{key:s,etag:o}=tb(e,t);return this.get("repoMetadata",`repo:${s}`,o,i,r)}set(e,t,i,r,s){let o;return(0,E.yL)(i)?(i.then(i=>{this.set(e,t,i,r,s)},()=>{this.delete(e,t)}),o={value:i,etag:r,cachedAt:Date.now()}):o={value:i,etag:r,cachedAt:Date.now(),expiresAt:s??function(e,t){let i=Date.now(),r=i+36e5;switch(e){case"defaultBranch":case"repoMetadata":case"currentAccount":return 0;case"issuesById":case"issuesByIdAndResource":{if(null==t)return 0;if(!t.closed)return r;let e=i-(t.closedDate??t.updatedDate).getTime();return i+(e>12096e5?12:1)*36e5}case"issuesOrPrsById":case"issuesOrPrsByIdAndRepo":{if(null==t)return 0;if(!t.closed)return r;let e=i-(t.closedDate??t.updatedDate).getTime();return i+(e>12096e5?12:1)*36e5}case"prByBranch":case"prsById":case"prsBySha":{if(null==t)return"prByBranch"===e?r:0;if("opened"===t.state)return r;let s=i-(t.closedDate??t.mergedDate??t.updatedDate).getTime();return i+(s>12096e5?12:1)*36e5}default:return null==t?0:r}}(e,i)},this._cache.set(`${e}:${t}`,o),o}wrapPullRequestCacheable(e,t,i){return()=>{let r=e();return(0,E.yL)(r.value)&&r.value.then(e=>{null!=e&&this.set("issuesOrPrsById",`id:${e.id}:${t}:pullrequest`,e,i)}),r}}};function tb(e,t){return{key:e.key,etag:`${e.key}:${t?.maybeConnected??!1}`}}var tC=Object.defineProperty,tR=Object.getOwnPropertyDescriptor,tk=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),tS=e=>{throw TypeError(e)},tP=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&tS("Object expected"),i&&(r=t[tk("asyncDispose")]),void 0===r&&(r=t[tk("dispose")],i&&(s=r)),"function"!=typeof r&&tS("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},tA=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let GitCodeLensController=class GitCodeLensController{constructor(e){this.container=e,this._disposable=n.Disposable.from((0,tt.Oo)(e.onReady)(this.onReady,this),h.H.onDidChange(this.onConfigurationChanged,this))}_canToggle=!1;_disposable;_provider;_providerDisposable;dispose(){this._providerDisposable?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){var t=[];try{let i=tP(t,(0,$.bP)(`${(0,_.zu)(this)}.onConfigurationChanged`,!1));if(h.H.changed(e,["codeLens","defaultDateFormat","defaultDateSource","defaultDateStyle"])){null!=e&&_.Vy.log(i,"resetting CodeLens provider");let t=h.H.get("codeLens");t.enabled&&(t.recentChange.enabled||t.authors.enabled)?this.ensureProvider():(this._providerDisposable?.dispose(),this._provider=void 0),this._canToggle=t.recentChange.enabled||t.authors.enabled,(0,A.o)("gitlens:disabledToggleCodeLens",!this._canToggle)}}catch(e){var i=e,r=!0}finally{tA(t,i,r)}}onBlameStateChanged(e){var t=[];try{if(null==this._provider||!e.blameable)return;let i=tP(t,(0,$.bP)(`${(0,_.zu)(this)}.onBlameStateChanged`,!1));_.Vy.log(i,"resetting CodeLens provider"),this._provider.reset()}catch(e){var i=e,r=!0}finally{tA(t,i,r)}}async onDirtyIdleTriggered(e){var t=[];try{if(null==this._provider)return;let i=tP(t,(0,$.bP)(`${(0,_.zu)(this)}.onDirtyIdleTriggered`,!1));if(!(await e.document.getStatus()).blameable)return;_.Vy.log(i,"resetting CodeLens provider"),this._provider.reset()}catch(e){var i=e,r=!0}finally{tA(t,i,r)}}toggleCodeLens(){let e=(0,$.dQ)();if(!this._canToggle){null!=e&&(0,$.TT)(e," • skipped, disabled");return}if(null!=this._provider){this._providerDisposable?.dispose(),this._provider=void 0;return}this.ensureProvider()}async ensureProvider(){if(null!=this._provider)return void this._provider.reset();this._providerDisposable?.dispose();let{GitCodeLensProvider:e}=await Promise.resolve().then(i.bind(i,7153));this._provider=new e(this.container),this._providerDisposable=n.Disposable.from(this._provider,n.languages.registerCodeLensProvider(e.selector,this._provider),this.container.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tR(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tC(t,i,o)})([(0,d.Rm)()],GitCodeLensController.prototype,"toggleCodeLens",1);var tI=i(6529);let tD=new Set(["commit:selected","draft:selected","file:selected"]),t_=new Map;let EventBus=class EventBus{_emitter=new n.EventEmitter;dispose(){this._emitter.dispose()}fire(e,t,i){var r;r=e,tD.has(r)&&t_.set(e,t),this._emitter.fire({name:e,data:t,source:i?.source})}fireAsync(e,t,i){queueMicrotask(()=>this.fire(e,t,i))}getCachedEventArgs(e){return t_.get(e)}on(e,t,i){return this._emitter.event(function(r){e===r.name&&t.call(i,r)},i)}};var t$=i(6741);let tT={done:!0,value:void 0};let StringIterator=class StringIterator{_value="";_pos=0;reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}};let PathIterator=class PathIterator{constructor(e=!0,t=!0){this._splitOnBackslash=e,this._caseSensitive=t}_value;_from;_to;reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){let t=this._value.charCodeAt(this._to);if(t===l.s7.Slash||this._splitOnBackslash&&t===l.s7.Backslash)if(e)this._from++;else break;else e=!1}return this}cmp(e){return this._caseSensitive?(0,eO.lF)(e,this._value,0,e.length,this._from,this._to):(0,eO.zd)(e,this._value,0,e.length,this._from,this._to)}value(){return this._value.substring(this._from,this._to)}};let TernarySearchTreeNode=class TernarySearchTreeNode{segment;value;key;left;mid;right;isEmpty(){return!this.left&&!this.mid&&!this.right&&!this.value}};let TernarySearchTree=class TernarySearchTree{static forPaths(){return new TernarySearchTree(new PathIterator)}static forStrings(){return new TernarySearchTree(new StringIterator)}_iter;_root;constructor(e){this._iter=e}clear(){this._root=void 0}set(e,t){let i,r=this._iter.reset(e);for(this._root||(this._root=new TernarySearchTreeNode,this._root.segment=r.value()),i=this._root;;){let e=r.cmp(i.segment);if(e>0)i.left||(i.left=new TernarySearchTreeNode,i.left.segment=r.value()),i=i.left;else if(e<0)i.right||(i.right=new TernarySearchTreeNode,i.right.segment=r.value()),i=i.right;else if(r.hasNext())r.next(),i.mid||(i.mid=new TernarySearchTreeNode,i.mid.segment=r.value()),i=i.mid;else break}let s=i.value;return i.value=t,i.key=e,s}get(e){return this._getNode(e)?.value}_getNode(e){let t=this._iter.reset(e),i=this._root;for(;i;){let e=t.cmp(i.segment);if(e>0)i=i.left;else if(e<0)i=i.right;else if(t.hasNext())t.next(),i=i.mid;else break}return i}has(e){let t=this._getNode(e);return t?.value!==void 0||t?.mid!==void 0}delete(e){this._delete(e,!1)}deleteSuperstr(e){this._delete(e,!0)}_delete(e,t){let i=this._iter.reset(e),r=[],s=this._root;for(;s;){let e=i.cmp(s.segment);if(e>0)r.push([1,s]),s=s.left;else if(e<0)r.push([-1,s]),s=s.right;else if(i.hasNext())i.next(),r.push([0,s]),s=s.mid;else{for(t?(s.left=void 0,s.mid=void 0,s.right=void 0):s.value=void 0;r.length>0&&s.isEmpty();){let[e,t]=r.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case -1:t.right=void 0}s=t}break}}}findSubstr(e){let t,i=this._iter.reset(e),r=this._root;for(;r;){let e=i.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else if(i.hasNext())i.next(),t=r.value||t,r=r.mid;else break}return r?.value||t}findSuperstr(e,t=!1){let i=this._iter.reset(e),r=this._root;for(;r;){let e=i.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else if(i.hasNext())i.next(),r=r.mid;else{if(!r.mid)return;return r=r.mid,{[Symbol.iterator]:()=>this._nodeIterator(r,t)}}}}_nodeIterator(e,t=!1){let i,r,s;return{next:()=>(s||(s=[],r=0,this._forEach(e,e=>s.push(e),t)),r>=s.length)?tT:(i?i.value=s[r++]:i={done:!1,value:s[r++]},i)}}forEach(e){this._forEach(this._root,e)}_forEach(e,t,i=!1){void 0!==e&&(this._forEach(e.left,t,i),e.value&&t(e.value,e.key),i||this._forEach(e.mid,t,i),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}count(e){return void 0===this._root||this._root.isEmpty()?0:(0,X.U9)(this.entries(),void 0===e?void 0:([,t])=>e(t))}entries(){return this._iterator(this._root)}values(){return(0,X.Tj)(this.entries(),([,e])=>e)}highlander(){let e,t;if(void 0===this._root||this._root.isEmpty())return;let i=this.entries(),r=0;for(;!(e=i.next()).done;)if(t=e.value,++r>1)return;return t}some(e){return!(void 0===this._root||this._root.isEmpty())&&(0,X.zN)(this.entries(),([,t])=>e(t))}*[Symbol.iterator](){yield*this._iterator(this._root)}*_iterator(e){e&&(yield*this._iterator(e.left),e.value&&(yield[e.key,e.value]),yield*this._iterator(e.mid),yield*this._iterator(e.right))}};var tE=Object.defineProperty,tx=Object.getOwnPropertyDescriptor,tO=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?tx(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tE(t,i,o),o};let tF=new Uint8Array(0);function tB(e){let t=(0,x.t5)(e)?e:x.nk.fromRevisionUri(e);return{path:t.relativePath,ref:t.sha,repoPath:t.repoPath}}let GitFileSystemProvider=class GitFileSystemProvider{constructor(e){this.container=e,this._disposable=n.Disposable.from(this._onDidChangeFile,n.workspace.registerFileSystemProvider(l.xB.GitLens,this,{isCaseSensitive:t$.j9,isReadonly:!0}))}_onDidChangeFile=new n.EventEmitter;get onDidChangeFile(){return this._onDidChangeFile.event}_disposable;_searchTreeMap=new Map;dispose(){this._disposable.dispose()}copy(e,t,i){throw n.FileSystemError.NoPermissions(e)}createDirectory(e){throw n.FileSystemError.NoPermissions(e)}delete(e,t){throw n.FileSystemError.NoPermissions(e)}async readDirectory(e){let{path:t,ref:i,repoPath:r}=tB(e),s=await this.getTree(t,i,r);if(void 0===s)throw n.FileSystemError.FileNotFound(e);return[...(0,X.Tj)(s,e=>[null!=t&&0!==t.length?(0,T.Fd)((0,I.V8)(t,e.path)):e.path,tL(e.type)])]}async readFile(e){let{path:t,ref:i,repoPath:r}=tB(e);if(i===k.nB)return tF;let s=await this.container.git.revision(r).getRevisionContent(i,t);return null!=s?s:tF}rename(e,t,i){throw n.FileSystemError.NoPermissions(e)}async stat(e){let t,{path:i,ref:r,repoPath:s}=tB(e);if(r===k.nB)return{type:n.FileType.File,size:0,ctime:0,mtime:0};let o=this._searchTreeMap.get(r);if(null!=o)t=(await o).get(`/~/${i}`);else{if(null==i||0===i.length){if(null==await this.getTree(i,r,s))throw n.FileSystemError.FileNotFound(e);return{type:n.FileType.Directory,size:0,ctime:0,mtime:0}}t=await this.container.git.revision(s).getTreeEntryForRevision(r,i)}if(null==t)throw n.FileSystemError.FileNotFound(e);return{type:tL(t.type),size:t.size,ctime:0,mtime:0}}watch(){return{dispose:()=>{}}}writeFile(e){throw n.FileSystemError.NoPermissions(e)}async createSearchTree(e,t){let i=TernarySearchTree.forPaths(),r=await this.container.git.revision(t).getTreeForRevision(e);for(let e of(i.set("~",{ref:"",oid:"",path:"~",size:0,type:"tree"}),r))i.set(`~/${e.path}`,e);return i}getOrCreateSearchTree(e,t){let i=this._searchTreeMap.get(e);return void 0===i&&(i=this.createSearchTree(e,t),this._searchTreeMap.set(e,i)),i}async getTree(e,t,i){return(await this.getOrCreateSearchTree(t,i)).findSuperstr(`/~/${e}`,!0)}};function tL(e){switch(e){case"blob":return n.FileType.File;case"tree":return n.FileType.Directory;default:return n.FileType.Unknown}}tO([(0,d.Yz)()],GitFileSystemProvider.prototype,"readDirectory",1),tO([(0,d.Yz)()],GitFileSystemProvider.prototype,"readFile",1),tO([(0,d.Yz)()],GitFileSystemProvider.prototype,"stat",1);var tU=i(3911),tq=i(3864),tN=i(9975),tM=i(2919),tW=i(2141),tG=i(2812);function tH(e,t){return e.name===t.name&&e.email===t.email&&e.username===t.username}var tV=Object.defineProperty,tj=Object.getOwnPropertyDescriptor,tz=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),tQ=e=>{throw TypeError(e)},tY=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?tj(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tV(t,i,o),o},tK=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&tQ("Object expected"),i&&(r=t[tz("asyncDispose")]),void 0===r&&(r=t[tz("dispose")],i&&(s=r)),"function"!=typeof r&&tQ("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},tZ=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let tJ=Object.freeze([]),tX=Object.freeze({dispose:()=>{}}),t0=new Map([["master",100],["main",15],["default",10],["develop",5],["development",1]]);let GitProviderService=class GitProviderService{constructor(e){this.container=e,this._initializing=(0,E.v6)(),this._disposable=n.Disposable.from(this._onDidChangeProviders,this._onDidChangeRepositories,e.subscription.onDidChange(this.onSubscriptionChanged,this),n.window.onDidChangeWindowState(this.onWindowStateChanged,this),n.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),h.H.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConnectionState(e=>{"connected"===e.reason&&(0,ty.H3)("failed"),this.resetCaches("providers"),this.updateContext()}),n.workspace.isTrusted?tX:n.workspace.onDidGrantWorkspaceTrust(()=>{n.workspace.isTrusted&&n.workspace.workspaceFolders?.length&&this.discoverRepositories(n.workspace.workspaceFolders,{force:!0})}),...this.registerCommands()),this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.CommitShaFormatting.reset(),this.container.PullRequestDateFormatting.reset(),this.updateContext()}_onDidChangeProviders=new n.EventEmitter;get onDidChangeProviders(){return this._onDidChangeProviders.event}fireProvidersChanged(e,t){this.container.telemetry.enabled&&this.container.telemetry.setGlobalAttributes({"providers.count":this._providers.size,"providers.ids":(0,X.fj)(this._providers.keys(),",")}),this._onDidChangeProviders.fire({added:e??[],removed:t??[],etag:this._etag})}_onDidChangeRepositories=new n.EventEmitter;get onDidChangeRepositories(){return this._onDidChangeRepositories.event}fireRepositoriesChanged(e,t){if(this.container.telemetry.enabled){let i=this.openRepositories.map(e=>e.uri.scheme);this.container.telemetry.setGlobalAttributes({"repositories.count":i.length,"repositories.schemes":(0,tG.EG)(i,",")}),this.container.telemetry.sendEvent("repositories/changed",{"repositories.added":e?.length??0,"repositories.removed":t?.length??0})}this.clearAccessCache(),this._reposVisibilityCache=void 0,this._onDidChangeRepositories.fire({added:e??[],removed:t??[],etag:this._etag}),e?.length&&this.container.telemetry.enabled&&setTimeout(()=>{Promise.allSettled(e.map(async e=>{let t,i,r="1.year.ago",[s,o]=await Promise.allSettled([e.git.remotes().getRemotes(),e.git.contributors().getContributorsStats({since:r})]),n=(0,E.Ro)(s)??[],a=new Set;for(let e of n)a.add(e.provider?.id??"unknown");let l=(0,E.Ro)(o);null!=l&&(i=Math.round((t=(0,X.cz)(l.contributions))/l.count));let u=function(e,t){if(null==e)return{};let i={[`${t}[1]`]:0,[`${t}[2-5]`]:0,[`${t}[6-10]`]:0,[`${t}[11-50]`]:0,[`${t}[51-100]`]:0,[`${t}[101+]`]:0};for(let r of e.contributions)1===r?i[`${t}[1]`]++:r<=5?i[`${t}[2-5]`]++:r<=10?i[`${t}[6-10]`]++:r<=50?i[`${t}[11-50]`]++:r<=100?i[`${t}[51-100]`]++:i[`${t}[101+]`]++;return i}(l,"repository.contributors.distribution.");this.container.telemetry.sendEvent("repository/opened",{"repository.id":e.idHash,"repository.scheme":e.uri.scheme,"repository.closed":e.closed,"repository.folder.scheme":e.folder?.uri.scheme,"repository.provider.id":e.provider.id,"repository.remoteProviders":(0,X.fj)(a,","),"repository.contributors.commits.count":t,"repository.contributors.commits.avgPerContributor":i,"repository.contributors.count":l?.count,"repository.contributors.since":r,...u})}))},0)}_onDidChangeRepository=new n.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}supportedSchemes=new Set;_disposable;_initializing;_pendingRepositories=new Map;_providers=new Map;_repositories=new tM.PB;_visitedPaths=new p.ZZ;dispose(){this._disposable.dispose(),this._providers.clear(),this._repositories.forEach(e=>e.dispose()),this._repositories.clear()}_etag=0;get etag(){return this._etag}onConfigurationChanged(e){(h.H.changed(e,"defaultDateFormat")||h.H.changed(e,"defaultDateSource")||h.H.changed(e,"defaultDateStyle"))&&(this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.PullRequestDateFormatting.reset()),h.H.changed(e,"advanced.abbreviatedShaLength")&&this.container.CommitShaFormatting.reset(),h.H.changed(e,"views.contributors.showAllBranches")&&this.resetCaches("contributors"),null!=e&&h.H.changed(e,"integrations.enabled")&&this.updateContext()}registerCommands(){return[(0,tW.Lb)("gitlens.plus.refreshRepositoryAccess",()=>this.clearAllOpenRepoVisibilityCaches())]}onSubscriptionChanged(e){this.clearAccessCache(),this._subscription=e.current}onWindowStateChanged(e){e.focused?this._repositories.forEach(e=>e.resume()):this._repositories.forEach(e=>e.suspend())}onWorkspaceFoldersChanged(e){if(this.container.telemetry.enabled){let e=n.workspace.workspaceFolders?.map(e=>e.uri.scheme);this.container.telemetry.setGlobalAttributes({"folders.count":e?.length??0,"folders.schemes":null!=e?(0,tG.EG)(e,", "):""})}if(e.added.length&&(this._etag=Date.now(),this.discoverRepositories(e.added)),e.removed.length){this._etag=Date.now();let t=[];for(let i of e.removed){let e=this._repositories.getClosest(i.uri);null!=e&&(this._repositories.remove(e.uri,!1),t.push(e))}t.length&&(this.updateContext(),queueMicrotask(()=>{this.fireRepositoriesChanged([],t),t.forEach(e=>e.dispose())}))}}get hasProviders(){return 0!==this._providers.size}get registeredProviders(){return[...(0,X.Tj)(this._providers.values(),e=>({...e.descriptor}))]}get openRepositories(){if(0===this.repositoryCount)return tJ;let e=[...(0,X.pb)(this.repositories,e=>!e.closed)];return 0===e.length?e:(0,z.ZE)(e)}get openRepositoryCount(){return 0===this.repositoryCount?0:(0,X.U9)(this.repositories,e=>!e.closed)}get repositories(){return this._repositories.values()}get repositoryCount(){return this._repositories.count}get highlander(){return 1===this.repositoryCount||1===this.openRepositoryCount?(0,X.$1)(this._repositories.values()):void 0}register(e,t){if(e!==t.descriptor.id)throw Error(`Id '${e}' must match provider id '${t.descriptor.id}'`);if(this._providers.has(e))throw Error(`Provider '${e}' has already been registered`);for(let i of(this._providers.set(e,t),t.supportedSchemes))this.supportedSchemes.add(i);let i=[],r=t.openRepositoryInitWatcher?.();null!=r&&i.push(r,r.onDidCreate(e=>{let t=n.workspace.getWorkspaceFolder(e);null!=t&&this.discoverRepositories([t],{force:!0})}));let s=n.Disposable.from(t,...i,t.onDidChange(()=>{var e=[];try{this._etag=Date.now();let i=tK(e,(0,$.bP)(`${(0,_.zu)(t)}.onDidChange`,!1));_.Vy.debug(i,"");let{workspaceFolders:r}=n.workspace;r?.length&&this.discoverRepositories(r,{force:!0})}catch(e){var i=e,r=!0}finally{tZ(e,i,r)}}),t.onDidChangeRepository(async e=>{var i=[];try{this._etag=Date.now();let r=tK(i,(0,$.bP)(`${(0,_.zu)(t)}.onDidChangeRepository(e=${e.repository.toString()})`,!1));if(_.Vy.debug(r,""),e.changed(R.Z_.Closed,R.Ti.Any)?(this.updateContext(),queueMicrotask(()=>this.fireRepositoriesChanged([],[e.repository]))):e.changed(R.Z_.Opened,R.Ti.Any)&&(this.updateContext(),queueMicrotask(()=>this.fireRepositoriesChanged([e.repository],[]))),e.changed(R.Z_.Remotes,R.Ti.Any)){let i=this.getVisibilityInfoFromCache(e.repository.path);null!=i&&await this.checkVisibilityCachedRemotes(e.repository.path,i,()=>t.remotes.getRemotes(e.repository.path))}this._onDidChangeRepository.fire(e)}catch(e){var r=e,s=!0}finally{tZ(i,r,s)}}),t.onDidCloseRepository(e=>{var i=[];try{this._etag=Date.now();let r=this._repositories.get(e.uri),s=tK(i,(0,$.bP)(`${(0,_.zu)(t)}.onDidCloseRepository(e=${e.uri.toString()})`,!1));_.Vy.debug(s,`repository=${r?.toString()}`),null!=r&&(r.closed=!0)}catch(e){var r=e,s=!0}finally{tZ(i,r,s)}}),t.onDidOpenRepository(e=>{var i=[];try{this._etag=Date.now();let r=this._repositories.get(e.uri),s=tK(i,(0,$.bP)(`${(0,_.zu)(t)}.onDidOpenRepository(e=${e.uri.toString()})`,!1));_.Vy.debug(s,`repository=${r?.toString()}`),null!=r?r.closed=!1:this.getOrOpenRepository(e.uri)}catch(e){var r=e,s=!0}finally{tZ(i,r,s)}}));return this._etag=Date.now(),this.fireProvidersChanged([t]),null==this._initializing&&this.onWorkspaceFoldersChanged({added:n.workspace.workspaceFolders??[],removed:[]}),{dispose:()=>{this._etag=Date.now(),s.dispose(),this._providers.delete(e);let i=[];for(let t of[...this._repositories.values()])t?.provider.id===e&&(this._repositories.remove(t.uri,!1),i.push(t));let{deactivating:r}=this.container;r||this.updateContext(),i.length&&queueMicrotask(()=>{r||this.fireRepositoriesChanged([],i),i.forEach(e=>e.dispose())}),r||this.fireProvidersChanged([],[t])}}}async registrationComplete(){let e=(0,$.dQ)(),{workspaceFolders:t}=n.workspace;t?.length?(await this.discoverRepositories(t),0===this.repositoryCount&&t$.HZ&&setTimeout(()=>{({workspaceFolders:t}=n.workspace),t?.length&&this.discoverRepositories(t,{force:!0})},1e3)):(this._initializing?.fulfill(this._etag),this._initializing=void 0,this.updateContext());let i=h.H.getCore("git.autoRepositoryDetection");this.container.telemetry.enabled&&setTimeout(()=>this.container.telemetry.sendEvent("providers/registrationComplete",{"config.git.autoRepositoryDetection":i}),0),(0,$.TT)(e,` ${l.EO.Dot} repositories=${this.repositoryCount}, workspaceFolders=${t?.length}, git.autoRepositoryDetection=${i}`)}getOpenProviders(){return[...this.getOpenRepositoriesByProvider().keys()].map(e=>this._providers.get(e))}getOpenRepositories(e){return(0,X.pb)(this.repositories,t=>!t.closed&&(null==e||e===t.provider.id))}getOpenRepositoriesByProvider(){let e=[...(0,X.pb)(this.repositories,e=>!e.closed)];return 0===e.length?new Map:(0,X.Fi)(e,e=>e.provider.id)}hasOpenRepositories(e){return(0,X.zN)(this.repositories,t=>!t.closed&&(null==e||e===t.provider.id))}_discoveredWorkspaceFolders=new Map;_discoveringRepositories;get isDiscoveringRepositories(){return(0,E.FO)(this._discoveringRepositories)??(0,E.FO)(this._initializing)}async discoverRepositories(e,t){this._discoveringRepositories?.pending&&(await this._discoveringRepositories.promise,this._discoveringRepositories=void 0);let i=this._initializing??(0,E.v6)();this._discoveringRepositories=i,this._initializing=void 0;try{let i=[];for(let r of e){if(!t?.force&&this._discoveredWorkspaceFolders.has(r))continue;let e=this.discoverRepositoriesCore(r);i.push(e),this._discoveredWorkspaceFolders.set(r,e)}if(0===i.length)return;let r=await Promise.allSettled(i),s=(0,X.qI)((0,X.pb)(r,e=>"fulfilled"===e.status),e=>e.value),o=[];for(let e of s)this._repositories.add(e),e.closed||o.push(e);this.updateContext(),o.length&&(this._etag=Date.now(),queueMicrotask(()=>{this.storeRepositoriesLocation(o),this.fireRepositoriesChanged(o)}))}finally{queueMicrotask(()=>{i.fulfill(this._etag)})}}async discoverRepositoriesCore(e){let{provider:t}=this.getProvider(e.uri);try{return await t.discoverRepositories(e.uri)}catch(i){return this._discoveredWorkspaceFolders.delete(e),_.Vy.error(i,`${t.descriptor.name} Provider(${t.descriptor.id}) failed discovering repositories in ${e.uri.toString(!0)}`),[]}}async findRepositories(e,t){let{provider:i}=this.getProvider(e);return i.discoverRepositories(e,t)}_subscription;async getSubscription(){return this._subscription??(this._subscription=await this.container.subscription.getSubscription())}_accessCache=new Map;_accessCacheByRepo=new Map;clearAccessCache(){this._accessCache.clear(),this._accessCacheByRepo.clear()}async access(e,t){if(null==t){let t=this._accessCache.get(e);return null==t&&(t=this.accessCore(e),this._accessCache.set(e,t)),t}let{path:i}=this.getProvider(t),r=this._accessCacheByRepo.get(i);return null==r&&(r=this.accessCore(e,t),this._accessCacheByRepo.set(i,r)),r}async accessCore(e,t){let i=await this.getSubscription();this.container.telemetry.enabled&&queueMicrotask(()=>void this.visibility());let r=i.plan.effective.id;if((0,tN.zx)(r))return{allowed:i.account?.verified!==!1,subscription:{current:i}};if(null!=e&&((0,tq.dJ)(e)||(0,tq.f0)(e)))return{allowed:!1,subscription:{current:i,required:tU.qn.Pro}};function s(e,t=!1){let{path:r}=this.getProvider(e),o=t?void 0:this._accessCacheByRepo.get(r);return null==o&&(o=this.visibility(e).then(e=>"private"===e?{allowed:!1,subscription:{current:i,required:tU.qn.Pro},visibility:e}:{allowed:!0,subscription:{current:i},visibility:e},()=>({allowed:!0,subscription:{current:i}})),this._accessCacheByRepo.set(r,o)),o}if(null==t){let e=this.openRepositories;if(0===e.length)return{allowed:!1,subscription:{current:i}};if(1===e.length)return s.call(this,e[0].path);switch(await this.visibility()){case"private":return{allowed:!1,subscription:{current:i,required:tU.qn.Pro},visibility:"private"};case"mixed":return{allowed:"mixed",subscription:{current:i,required:tU.qn.Pro}};default:return{allowed:!0,subscription:{current:i},visibility:"public"}}}return s.call(this,t,!0)}async ensureAccess(e,t){let{allowed:i,subscription:r}=await this.access(e,t);if(!1===i)throw new c.Uk(r.current,r.required)}supports(e,t){let{provider:i}=this.getProvider(e);return i.supports(t)}_reposVisibilityCache;_repoVisibilityCache;ensureRepoVisibilityCache(){if(null==this._repoVisibilityCache){let e=this.container.storage.get("repoVisibility")?.map(([e,t])=>[e,{visibility:t.visibility,timestamp:t.timestamp,remotesHash:t.remotesHash}]);this._repoVisibilityCache=new Map(e)}}async clearRepoVisibilityCache(e){if(null==e)this._repoVisibilityCache=void 0,this.container.storage.delete("repoVisibility");else{e?.forEach(e=>this._repoVisibilityCache?.delete(e));let t=Array.from(this._repoVisibilityCache?.entries()??[]);0===t.length?await this.container.storage.delete("repoVisibility"):await this.container.storage.store("repoVisibility",t)}}getVisibilityInfoFromCache(e){this.ensureRepoVisibilityCache();let t=this._repoVisibilityCache?.get(e);return null==t?void 0:Date.now()-t.timestamp>2592e6?void this.clearRepoVisibilityCache([e]):t}async checkVisibilityCachedRemotes(e,t,i){if(null==t)return!0;if("public"===t.visibility){let r=await i();if(0===r.length||!r.some(e=>e.remoteKey===t.remotesHash))return this.clearRepoVisibilityCache([e]),!1}else if("private"===t.visibility&&(0,S.U6)(await i())!==t.remotesHash)return this.clearRepoVisibilityCache([e]),!1;return!0}updateVisibilityCache(e,t){this.ensureRepoVisibilityCache(),this._repoVisibilityCache?.set(e,t),this.container.storage.store("repoVisibility",Array.from(this._repoVisibilityCache.entries())).catch()}clearAllRepoVisibilityCaches(){return this.clearRepoVisibilityCache()}clearAllOpenRepoVisibilityCaches(){let e=this.openRepositories.map(e=>this.getProvider(e.path).path);return this.clearRepoVisibilityCache(e)}async visibility(e){if(null==e){let e=this._reposVisibilityCache;return null==e&&(e=await this.visibilityCore(),this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttribute("repositories.visibility",e),this.container.telemetry.sendEvent("repositories/visibility",{"repositories.visibility":e})),this._reposVisibilityCache=e),e}let{path:t}=this.getProvider(e),i=this.getVisibilityInfoFromCache(t)?.visibility;return null==i&&(i=await this.visibilityCore(e),this.container.telemetry.enabled&&setTimeout(()=>{let t=this.getRepository(e);this.container.telemetry.sendEvent("repository/visibility",{"repository.visibility":i,"repository.id":t?.idHash,"repository.scheme":t?.uri.scheme,"repository.closed":t?.closed,"repository.folder.scheme":t?.folder?.uri.scheme,"repository.provider.id":t?.provider.id})},0)),i}async visibilityCore(e){async function t(e){let{provider:t,path:i}=this.getProvider(e),r=this.getVisibilityInfoFromCache(i);if(null==r||!await this.checkVisibilityCachedRemotes(i,r,()=>t.remotes.getRemotes(i,{sort:!0}))){let[e,r]=await t.visibility(i);return"local"!==e&&this.updateVisibilityCache(i,{visibility:e,timestamp:Date.now(),remotesHash:r}),e}return r.visibility}if(null==e){let e=this.openRepositories;if(0===e.length)return"private";if(1===e.length)return t.call(this,e[0].path);let i=!1,r=!1,s=!1;for await(let o of(0,E.w)(e.map(e=>t.call(this,e.path))))if("fulfilled"===o.status){if("public"===o.value){if(s||r)return"mixed";i=!0}else if("local"===o.value){if(i||r)return"mixed";s=!0}else if("private"===o.value){if(i||s)return"mixed";r=!0}}return i?"public":s?"local":"private"}return t.call(this,e)}_context={enabled:!1,disabled:!1};async setEnabledContext(e){let t=!e;if(e||null==this._initializing||(t=!this.container.storage.getWorkspace("assumeRepositoriesOnStartup")),this.container.telemetry.setGlobalAttribute("enabled",e),this._context.enabled===e&&this._context.disabled===t)return;let i=[];this._context.enabled!==e&&(this._context.enabled=e,i.push((0,A.o)("gitlens:enabled",e))),this._context.disabled!==t&&(this._context.disabled=t,i.push((0,A.o)("gitlens:disabled",t))),await Promise.allSettled(i),null==this._initializing&&this.container.storage.storeWorkspace("assumeRepositoriesOnStartup",e).catch()}_sendProviderContextTelemetryDebounced;updateContext(){if(this.container.deactivating)return;let e=this.openRepositoryCount,t=0!==e;async function i(){let e=h.H.get("integrations.enabled"),i=new Set,r=new Set,s=new Set,o=new Set;async function n(t){let n=!1,a=!1,l=await t.git.remotes().getRemotes();for(let u of l)if(i.add(u.provider?.id??"unknown"),r.add(t.uri.toString()),r.add(t.path),e&&(!n||!a)&&u.hasIntegration()){n=!0,s.add(t.uri.toString()),s.add(t.path);let e=u.maybeIntegrationConnected;if(null==e&&(u.default||1===l.length)){let t=await u.getIntegration();e=await t?.isConnected()}e&&(a=!0,o.add(t.uri.toString()),o.add(t.path))}}t&&await Promise.allSettled((0,X.Tj)(this._repositories.values(),n)),this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttributes({"repositories.hasRemotes":0!==r.size,"repositories.hasRichRemotes":0!==s.size,"repositories.hasConnectedRemotes":0!==o.size,"repositories.withRemotes":r.size/2,"repositories.withHostingIntegrations":s.size/2,"repositories.withHostingIntegrationsConnected":o.size/2,"repositories.remoteProviders":(0,X.fj)(i,",")}),null==this._sendProviderContextTelemetryDebounced&&(this._sendProviderContextTelemetryDebounced=(0,B.s)(()=>this.container.telemetry.sendEvent("providers/context"),2500)),this._sendProviderContextTelemetryDebounced()),await Promise.allSettled([(0,A.o)("gitlens:repos:withRemotes",r.size?[...r]:void 0),(0,A.o)("gitlens:repos:withHostingIntegrations",s.size?[...s]:void 0),(0,A.o)("gitlens:repos:withHostingIntegrationsConnected",o.size?[...o]:void 0)])}this.setEnabledContext(t),null==this._initializing&&(this.container.telemetry.setGlobalAttributes({enabled:t,"repositories.count":e}),t&&(i.call(this),this._providers.forEach(e=>e.updateContext?.())))}getProvider(e){let t;if(null==e||"string"!=typeof e&&!this.supportedSchemes.has(e.scheme))throw new c.ND(e);"string"==typeof e?t=(0,T.my)(e)??l.xB.File:{scheme:t}=e;let i=new Set;for(let r of this._providers.values()){let s=r.canHandlePathOrUri(t,e);null!=s&&i.add({provider:r,path:s})}if(0===i.size)throw new c.ND(e);if(i.size>1){for(let e of i)if(this.hasOpenRepositories(e.provider.descriptor.id))return e}return(0,X.$1)(i)}getAbsoluteUri(e,t){if(null==t)return"string"==typeof e?(0,T.bm)(e)?n.Uri.parse(e,!0):n.Uri.file(e):e;if("string"!=typeof t&&"string"==typeof e){let i=(0,T.Fd)(e);if(!(0,T.oP)(i))return n.Uri.joinPath(t,i)}let{provider:i}=this.getProvider(t);return i.getAbsoluteUri(e,t)}async getBestRevisionUri(e,t,i){if(null==e||i===k.nB)return;let{provider:r,path:s}=this.getProvider(e);return r.getBestRevisionUri(s,r.getRelativePath(t,s),i)}getRelativePath(e,t){let{provider:i}=this.getProvider(e instanceof n.Uri?e:t);return i.getRelativePath(e,t)}getRevisionUri(e,t,i){let r="string"==typeof i?i:i?.originalPath??i?.path??"",{provider:s,path:o}=this.getProvider(e);return s.getRevisionUri(o,t,s.getRelativePath(r,o))}getRevisionUriFromGitUri(e){let t=(0,I.Sp)(e),{provider:i,path:r}=this.getProvider(e.repoPath);return i.getRevisionUri(r,e.sha,i.getRelativePath(t,r))}getWorkingUri(e,t){let{provider:i,path:r}=this.getProvider(e);return i.getWorkingUri(r,t)}async reset(e,t={},i){let{provider:r,path:s}=this.getProvider(e);if(null==r.reset)throw new c.Vq(r.descriptor.name);return r.reset(s,i,t)}applyChangesToWorkingFile(e,t,i){let{provider:r}=this.getProvider(e);if(null==r.applyChangesToWorkingFile)throw new c.Vq(r.descriptor.name);return r.applyChangesToWorkingFile(e,t,i)}checkout(e,t,i){let{provider:r,path:s}=this.getProvider(e);if(null==r.checkout)throw new c.Vq(r.descriptor.name);return r.checkout(s,t,i)}async clone(e,t){let{provider:i}=this.getProvider(t);return i.clone?.(e,t)}resetCaches(...e){this.container.events.fire("git:cache:reset",{types:e})}excludeIgnoredUris(e,t){let{provider:i,path:r}=this.getProvider(e);return i.excludeIgnoredUris(r,t)}fetch(e,t){let{provider:i,path:r}=this.getProvider(e);if(null==i.fetch)throw new c.Vq(i.descriptor.name);return i.fetch(r,t)}async fetchAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length)return void await e[0].fetch(t);await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Fetching ${e.length} repositories`},()=>Promise.allSettled(e.map(e=>e.fetch({progress:!1,...t}))))}}pull(e,t){let{provider:i,path:r}=this.getProvider(e);if(null==i.pull)throw new c.Vq(i.descriptor.name);return i.pull(r,t)}async pullAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length)return void await e[0].pull(t);await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Pulling ${e.length} repositories`},()=>Promise.allSettled(e.map(e=>e.pull({progress:!1,...t}))))}}push(e,t){let{provider:i,path:r}=this.getProvider(e);if(null==i.push)throw new c.Vq(i.descriptor.name);return i.push(r,t)}async pushAll(e,t){if(null==e&&(e=this.openRepositories),0!==e.length){if(1===e.length)return void await e[0].push(t);await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Pushing ${e.length} repositories`},()=>Promise.allSettled(e.map(e=>e.push({progress:!1,...t}))))}}async getBlame(e,t){let{provider:i}=this.getProvider(e);return i.getBlame(e,t)}async getBlameContents(e,t){let{provider:i}=this.getProvider(e);return i.getBlameContents(e,t)}async getBlameForLine(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getBlameForLine(e,t,i,r)}async getBlameForLineContents(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getBlameForLineContents(e,t,i,r)}async getBlameForRange(e,t){let{provider:i}=this.getProvider(e);return i.getBlameForRange(e,t)}async getBlameForRangeContents(e,t,i){let{provider:r}=this.getProvider(e);return r.getBlameForRangeContents(e,t,i)}getBlameRange(e,t,i){let{provider:r}=this.getProvider(t);return r.getBlameRange(e,t,i)}async getBranchAheadRange(e){if(e.upstream?.state.ahead)return(0,P.Xn)(e.upstream?.name,e.ref,"..");if(null==e.upstream){let{values:t}=await this.branches(e.repoPath).getBranches({filter:e=>t0.has(e.name)});if(t.length>0){let i;for(let e of t){let t=t0.get(e.name);if((null==i||i.weight<t)&&(i={weight:t,branch:e}),100===i.weight)break}let r=i.branch.upstream?.name??i.branch.ref;if(r!==e.ref)return(0,P.Xn)(r,e.ref,"..")}}}async getBranchesAndTagsTipsLookup(e,t){if(null==e)return()=>void 0;let[i,r,s]=await Promise.allSettled([this.branches(e).getBranches(),this.tags(e).getTags(),this.remotes(e).getRemotes()]),o=(0,E.Ro)(i)?.values??[],n=(0,E.Ro)(r)?.values??[],a=(0,E.Ro)(s)??[],u=(0,X.fA)(o.concat(n),e=>e.sha,e=>{let i;if("branch"===e.refType)if(e.remote){let t=a.find(t=>t.name===e.getRemoteName());i=`$(${(0,S.O5)(t)}) `}else i=e.current?"$(target) ":"$(git-branch) ";else i="$(tag) ";return{name:e.name,icon:i,compactName:t&&"branch"===e.refType&&e.getNameWithoutRemote()===t?e.getRemoteName():void 0,type:e.refType}});return(e,i)=>{let r,s=u.get(e);if(!s?.length)return;let o=t&&i?.compact?s.filter(e=>e.name!==t):s;function n(e){let t=(i?.compact?e.compactName:void 0)??e.name;return`${i?.icons?`${e.icon}${i?.pills?"&nbsp;":" "}`:""}${t}`}if(i?.compact){if(!o.length)return;let[e]=o;r=[`${n(e)}${o.length>1?`, ${l.EO.Ellipsis}`:""}`]}else r=o.map(n);return i?.pills?r.map(e=>`<span style="color:#ffffff;background-color:#1d76db;border-radius:3px;"${"object"==typeof i.pills?` class="${i.pills.cssClass}"`:""}>&nbsp;${e}&nbsp;&nbsp;</span>`).join("&nbsp;&nbsp;"):r.join(", ")}}getDiffForFile(e,t,i){let{provider:r}=this.getProvider(e);return r.getDiffForFile(e,t,i)}getDiffForFileContents(e,t,i){let{provider:r}=this.getProvider(e);return r.getDiffForFileContents(e,t,i)}getDiffForLine(e,t,i,r){let{provider:s}=this.getProvider(e);return s.getDiffForLine(e,t,i,r)}getLastFetchedTimestamp(e){let{provider:t,path:i}=this.getProvider(e);return t.getLastFetchedTimestamp(i)}getBestRepository(e,t){let i=this.repositoryCount;if(0!==i){if(1===i)return this.highlander;if(null!=e&&e instanceof n.Uri){let t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??n.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??this.highlander}}getBestRepositoryOrFirst(e,t){let i=this.repositoryCount;if(0!==i){if(1===i)return(0,X.$1)(this._repositories.values());if(null!=e&&e instanceof n.Uri){let t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??n.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??(0,X.$1)(this._repositories.values())}}async getOrOpenRepository(e,t){let i,r,s;if(null==e)return;let o=(0,$.dQ)();if("string"==typeof e){if(!e)return;i=this.getAbsoluteUri(e)}else i=e;let a=(0,I.Sp)(i);if(null==(r=this.getRepository(i))&&this._discoveringRepositories?.pending&&(await this._discoveringRepositories.promise,r=this.getRepository(i)),t?.detectNested??h.H.get("detectNestedRepositories",i)){if(!t?.force&&this._visitedPaths.has(a))return r;let e=await n.workspace.fs.stat(i),l=(0,I.Sp)(i);if(_.Vy.debug(o,`Ensuring URI is a folder; repository=${r?.toString()}, uri=${i.toString(!0)} stats.type=${e.type}, bestPath=${l}, visitedPaths.has=${this._visitedPaths.has(l)}`),(e.type&n.FileType.Directory)!==n.FileType.Directory&&(i=n.Uri.joinPath(i,".."),!t?.force&&this._visitedPaths.has(l)))return r;s=!0}else if(null!=r)return r;let l=(0,tM.dX)(i),u=this._pendingRepositories.get(l);return null==u&&(u=(async function(){let e,{provider:n}=this.getProvider(i),u=await n.findRepositoryUri(i,s);if(this._visitedPaths.set(a),null==u)return;if(0!==this._repositories.count){if(null!=(r=this._repositories.get(u)))return r;e=this._repositories.getClosest(n.getAbsoluteUri(i,u))}let c=h.H.getCore("git.autoRepositoryDetection")??!0,d=t?.closeOnOpen??(!0!==c&&"openEditors"!==c);!d&&t?.closeOnOpen!==!1&&!s&&i.path.includes("/.git/")&&(d=!0),_.Vy.log(o,`Repository found in '${u.toString(!0)}'`);let p=n.openRepository(e?.folder,u,!1,void 0,d),g=[];for(let e of p)this._repositories.add(e),e.closed||g.push(e);return this._pendingRepositories.delete(l),this.updateContext(),g.length&&(this._etag=Date.now(),queueMicrotask(()=>{this.storeRepositoriesLocation(g),this.fireRepositoriesChanged(g)})),r=1===p.length?p[0]:this.getRepository(i)}).call(this),this._pendingRepositories.set(l,u)),u}async storeRepositoriesLocation(e){let t=(0,$.dQ)();for(let i of e)try{await this.container.repositoryIdentity.storeRepositoryLocation(i)}catch(e){_.Vy.error(e,t)}}async getOrOpenRepositoryForEditor(e){return null==(e=e??n.window.activeTextEditor)?this.highlander:this.getOrOpenRepository(e.document.uri)}getRepository(e){if(0!==this.repositoryCount&&null!=e){if("string"==typeof e){if(!e)return;return this._repositories.getClosest(this.getAbsoluteUri(e))}return this._repositories.getClosest(e)}}async getLocalInfoFromRemoteUri(e){for(let t of this.openRepositories)for(let i of(await t.git.remotes().getRemotes())){let r=await i?.provider?.getLocalInfoFromRemoteUri(t,e);if(null!=r)return r}}async getUniqueRepositoryId(e){return this.commits(e).getInitialCommitSha?.()}hasUnsafeRepositories(){for(let e of this._providers.values())if(e.hasUnsafeRepositories?.())return!0;return!1}isRepositoryForEditor(e,t){return null!=(t=t??n.window.activeTextEditor)&&e===this.getRepository(t.document.uri)}isTrackable(e){if(!this.supportedSchemes.has(e.scheme))return!1;let{provider:t}=this.getProvider(e);return t.isTrackable(e)}async isTracked(e){if(!this.supportedSchemes.has(e.scheme))return!1;let{provider:t}=this.getProvider(e);return t.isTracked(e)}async runGitCommandViaTerminal(e,t,i,r){let{provider:s,path:o}=this.getProvider(e);return s.runGitCommandViaTerminal?.(o,t,i,r)}_subProviderProxies=new Map;getSubProviderProxy(e,t){let{provider:i,path:r}=this.getProvider(e),s=this._subProviderProxies.get(i);null==s&&(s=new Map,this._subProviderProxies.set(i,s));let o=`${t}|${r}`,n=s.get(o);if(null==n){let e=i[t];if(null==e)return;n=new Proxy(e,{get:(e,t)=>{let i=e[t];return"function"==typeof i?(...t)=>i.call(e,r,...t):i}}),s.set(o,n)}return n}branches(e){return this.getSubProviderProxy(e,"branches")}commits(e){return this.getSubProviderProxy(e,"commits")}config(e){return this.getSubProviderProxy(e,"config")}contributors(e){return this.getSubProviderProxy(e,"contributors")}diff(e){return this.getSubProviderProxy(e,"diff")}graph(e){return this.getSubProviderProxy(e,"graph")}patch(e){return this.getSubProviderProxy(e,"patch")}refs(e){return this.getSubProviderProxy(e,"refs")}remotes(e){return this.getSubProviderProxy(e,"remotes")}revision(e){return this.getSubProviderProxy(e,"revision")}staging(e){return this.getSubProviderProxy(e,"staging")}stash(e){return this.getSubProviderProxy(e,"stash")}status(e){return this.getSubProviderProxy(e,"status")}tags(e){return this.getSubProviderProxy(e,"tags")}worktrees(e){return this.getSubProviderProxy(e,"worktrees")}async getOpenScmRepositories(){let e=await Promise.allSettled([...this._providers.values()].map(e=>e.getOpenScmRepositories()));return[...(0,X.qI)((0,X.pb)(e,e=>"fulfilled"===e.status),e=>e.value)]}getScmRepository(e){let{provider:t,path:i}=this.getProvider(e);return t.getScmRepository(i)}getOrOpenScmRepository(e){let{provider:t,path:i}=this.getProvider(e);return t.getOrOpenScmRepository(i)}};tY([(0,d.Yz)({args:{0:e=>`(${e?.length??0}) ${e?.map(e=>e.descriptor.id).join(", ")}`,1:e=>`(${e?.length??0}) ${e?.map(e=>e.descriptor.id).join(", ")}`}})],GitProviderService.prototype,"fireProvidersChanged",1),tY([(0,d.Yz)({args:{0:e=>`(${e?.length??0}) ${e?.map(e=>e.id).join(", ")}`,1:e=>`(${e?.length??0}) ${e?.map(e=>e.id).join(", ")}`}})],GitProviderService.prototype,"fireRepositoriesChanged",1),tY([(0,d.Yz)()],GitProviderService.prototype,"onSubscriptionChanged",1),tY([(0,d.Yz)({args:{0:e=>`focused=${e.focused}`}})],GitProviderService.prototype,"onWindowStateChanged",1),tY([(0,d.Yz)({args:{0:e=>`added=${e.added.length}, removed=${e.removed.length}`},singleLine:!0})],GitProviderService.prototype,"onWorkspaceFoldersChanged",1),tY([(0,d.Rm)({args:{1:!1},singleLine:!0})],GitProviderService.prototype,"register",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"registrationComplete",1),tY([(0,d.Rm)({args:{0:e=>e.length}})],GitProviderService.prototype,"discoverRepositories",1),tY([(0,d.Yz)({exit:!0})],GitProviderService.prototype,"discoverRepositoriesCore",1),tY([(0,d.Rm)()],GitProviderService.prototype,"findRepositories",1),tY([(0,d.Yz)({exit:!0})],GitProviderService.prototype,"access",1),tY([(0,d.Yz)({exit:!0})],GitProviderService.prototype,"accessCore",1),tY([(0,d.Yz)({exit:!0})],GitProviderService.prototype,"supports",1),tY([(0,d.Yz)({exit:e=>`returned ${e?.visibility}`})],GitProviderService.prototype,"getVisibilityInfoFromCache",1),tY([(0,d.Yz)()],GitProviderService.prototype,"clearAllRepoVisibilityCaches",1),tY([(0,d.Yz)()],GitProviderService.prototype,"clearAllOpenRepoVisibilityCaches",1),tY([(0,d.Yz)({exit:!0})],GitProviderService.prototype,"visibility",1),tY([(0,d.Yz)({exit:!0})],GitProviderService.prototype,"visibilityCore",1),tY([(0,d.Yz)()],GitProviderService.prototype,"setEnabledContext",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getBestRevisionUri",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getRevisionUri",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getRevisionUriFromGitUri",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getWorkingUri",1),tY([(0,d.Rm)()],GitProviderService.prototype,"reset",1),tY([(0,d.Rm)()],GitProviderService.prototype,"applyChangesToWorkingFile",1),tY([(0,d.Rm)()],GitProviderService.prototype,"checkout",1),tY([(0,d.Rm)()],GitProviderService.prototype,"clone",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"resetCaches",1),tY([(0,d.Rm)({args:{1:e=>e.length}})],GitProviderService.prototype,"excludeIgnoredUris",1),tY([(0,D.G)(),(0,d.Rm)()],GitProviderService.prototype,"fetch",1),tY([(0,D.G)((e,t)=>`${null==e?"":e.map(e=>e.id).join(",")}|${JSON.stringify(t)}`),(0,d.Rm)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"fetchAll",1),tY([(0,D.G)(),(0,d.Rm)()],GitProviderService.prototype,"pull",1),tY([(0,D.G)((e,t)=>`${null==e?"":e.map(e=>e.id).join(",")}|${JSON.stringify(t)}`),(0,d.Rm)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"pullAll",1),tY([(0,D.G)(),(0,d.Rm)()],GitProviderService.prototype,"push",1),tY([(0,D.G)(e=>null==e?"":e.map(e=>e.id).join(",")),(0,d.Rm)({args:{0:e=>e?.map(e=>e.name).join(", ")}})],GitProviderService.prototype,"pushAll",1),tY([(0,d.Rm)({args:{1:e=>e?.isDirty}})],GitProviderService.prototype,"getBlame",1),tY([(0,d.Rm)({args:{1:"<contents>"}})],GitProviderService.prototype,"getBlameContents",1),tY([(0,d.Rm)({args:{2:e=>e?.isDirty}})],GitProviderService.prototype,"getBlameForLine",1),tY([(0,d.Rm)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForLineContents",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getBlameForRange",1),tY([(0,d.Rm)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForRangeContents",1),tY([(0,d.Rm)({args:{0:"<blame>"}})],GitProviderService.prototype,"getBlameRange",1),tY([(0,d.Rm)({args:{0:e=>e.name}})],GitProviderService.prototype,"getBranchAheadRange",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getBranchesAndTagsTipsLookup",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getDiffForFile",1),tY([(0,d.Rm)({args:{1:"<contents>"}})],GitProviderService.prototype,"getDiffForFileContents",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getDiffForLine",1),tY([(0,d.Yz)()],GitProviderService.prototype,"getLastFetchedTimestamp",1),tY([(0,d.Rm)({exit:!0})],GitProviderService.prototype,"getBestRepository",1),tY([(0,d.Rm)({exit:!0})],GitProviderService.prototype,"getBestRepositoryOrFirst",1),tY([(0,d.Rm)({exit:!0})],GitProviderService.prototype,"getOrOpenRepository",1),tY([(0,D.G)(),(0,d.Rm)()],GitProviderService.prototype,"storeRepositoriesLocation",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getOrOpenRepositoryForEditor",1),tY([(0,d.Rm)({exit:!0})],GitProviderService.prototype,"getRepository",1),tY([(0,d.Rm)({exit:!0})],GitProviderService.prototype,"getUniqueRepositoryId",1),tY([(0,d.Rm)({exit:!0})],GitProviderService.prototype,"hasUnsafeRepositories",1),tY([(0,d.Rm)({exit:!0})],GitProviderService.prototype,"isRepositoryForEditor",1),tY([(0,d.Rm)({args:!1})],GitProviderService.prototype,"runGitCommandViaTerminal",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"branches",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"commits",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"config",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"contributors",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"diff",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"graph",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"patch",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"refs",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"remotes",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"revision",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"staging",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"stash",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"status",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"tags",1),tY([(0,d.Rm)({singleLine:!0})],GitProviderService.prototype,"worktrees",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getOpenScmRepositories",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getScmRepository",1),tY([(0,d.Rm)()],GitProviderService.prototype,"getOrOpenScmRepository",1);var t1=i(811),t2=Object.defineProperty,t4=Object.getOwnPropertyDescriptor,t5=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?t4(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t2(t,i,o),o};let t7=0x40000000-1;let LineHoverController=class LineHoverController{constructor(e){this.container=e,this._disposable=n.Disposable.from((0,tt.Oo)(e.onReady)(this.onReady,this),h.H.onDidChange(this.onConfigurationChanged,this))}_disposable;_hoverProviderDisposable;_uri;dispose(){this.unregister(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(!h.H.changed(e,"hovers.enabled")&&!h.H.changed(e,"hovers.currentLine.enabled"))return;let t=h.H.get("hovers");t.enabled&&t.currentLine.enabled?(this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)),this.register(n.window.activeTextEditor)):(this.container.lineTracker.unsubscribe(this),this.unregister())}onActiveLinesChanged(e){if(!e.pending){if(null==e.editor||null==e.selections)return void this.unregister();this.isRegistered(e.editor?.document.uri)||this.register(e.editor)}}async provideDetailsHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;let r=this.container.lineTracker.getState(t.line),s=r?.commit;if(null==s)return;let o=h.H.get("hovers");if(o.annotations.details&&"blame"===await this.container.fileAnnotations.getAnnotationType(n.window.activeTextEditor))return;let a="line"===o.currentLine.over;if(!a&&this.container.lineAnnotations.suspended)return;let l=e.validateRange(new n.Range(t.line,a?t.character:t7,t.line,t7));if(!a&&l.start.character!==t.character)return;let u=t.line,c=u+1;u=(s.lines.find(e=>e.line===c)??s.lines[0]).originalLine-1;let d=await this.container.documentTracker.get(e);if(null==d||i.isCancellationRequested)return;let p=await (0,te.MX)(this.container,s,d.uri,u,{autolinks:o.autolinks.enabled,cancellation:i,dateFormat:h.H.get("defaultDateFormat"),format:o.detailsMarkdownFormat,pullRequests:o.pullRequests.enabled,timeout:250})??"Cancelled";return new n.Hover(p,l)}async provideChangesHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;let r=this.container.lineTracker.getState(t.line),s=r?.commit;if(null==s)return;let o=h.H.get("hovers");if(o.annotations.changes&&"blame"===await this.container.fileAnnotations.getAnnotationType(n.window.activeTextEditor))return;let a="line"===o.currentLine.over;if(!a&&this.container.lineAnnotations.suspended)return;let l=e.validateRange(new n.Range(t.line,a?t.character:t7,t.line,t7));if(!a&&l.start.character!==t.character)return;let u=await this.container.documentTracker.get(e);if(null==u)return;let c=await (0,te.PV)(this.container,s,u.uri,t.line,u.document);if(null!=c)return new n.Hover(c,l)}isRegistered(e){return null!=this._hoverProviderDisposable&&(0,t1.k)(this._uri,e)}register(e){if(this.unregister(),null==e)return;let t=h.H.get("hovers");if(!t.enabled||!t.currentLine.enabled||!t.currentLine.details&&!t.currentLine.changes)return;this._uri=e.document.uri;let i=[];t.currentLine.changes&&i.push(n.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),t.currentLine.details&&i.push(n.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=n.Disposable.from(...i)}unregister(){this._uri=void 0,null!=this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}};t5([(0,d.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineHoverController.prototype,"onActiveLinesChanged",1),t5([(0,d.Yz)({args:{0:e=>_.Vy.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideDetailsHover",1),t5([(0,d.Yz)({args:{0:e=>_.Vy.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideChangesHover",1);var t8=i(1820),t6=i(4692),t3=i(9207),t9=i(4357);let ie={iconPath:new n.ThemeIcon("trash"),tooltip:"Clear AI Key"},it={iconPath:new n.ThemeIcon("key"),tooltip:"Configure AI Key..."};async function ii(e,t){if(!(0,A.SD)("gitlens:gk:organization:ai:enabled",!0))return void await n.window.showQuickPick([{label:"OK"}],{title:"AI is Disabled",placeHolder:"GitLens AI features have been disabled by your GitKraken admin",canPickMany:!1});let[i,r,s]=await Promise.allSettled([e.ai.getProvidersConfiguration(),e.ai.getModel({silent:!0},{source:"ai:picker"}),e.subscription.getSubscription()]),o=(0,E.Ro)(i)??new Map,a=(0,E.Ro)(r)?.name,l=(0,E.Ro)(s),u=(0,tN.zx)(l.plan.effective.id)&&l.account?.verified,c=n.window.createQuickPick();c.ignoreFocusOut=(0,t6.dW)(),c.title="Select AI Provider",c.placeholder="Choose an AI provider to use";let h=[];try{let i=t?.provider??o.get("vscode")?.configured?"vscode":o.get("gitkraken")?.configured?"gitkraken":void 0,r=!1;for(;;){let s=[];for(let e of o.values())e.primary||r||(r=!0,s.push((0,t3.uK)("Requires API Key"))),s.push({label:e.name,iconPath:new n.ThemeIcon(e.id===t?.provider?"check":"blank"),provider:e.id,picked:e.id===i,detail:e.id===t?.provider&&a?`      ${a}`:"gitkraken"===e.id?"      Models provided by GitKraken":void 0,buttons:e.primary?void 0:e.configured?[ie]:[it],description:"gitkraken"===e.id?u?"  included in your plan":"  included in GitLens Pro":void 0});let l=await new Promise(t=>{h.push(c.onDidHide(()=>t(void 0)),c.onDidAccept(()=>{0!==c.activeItems.length&&t(c.activeItems[0])}),c.onDidTriggerItemButton(i=>{i.button===ie?(e.ai.resetProviderKey(i.item.provider),o.set(i.item.provider,{...o.get(i.item.provider),configured:!1}),t("refresh")):i.button===it&&t(i.item)})),c.items=s,c.activeItems=s.filter(e=>e.picked),c.show()});if("refresh"!==l)return l}}finally{c.dispose(),h.forEach(e=>void e.dispose())}}async function ir(e,t,i){if(!(0,A.SD)("gitlens:gk:organization:ai:enabled",!0))return void await n.window.showQuickPick([{label:"OK"}],{title:"AI is Disabled",placeHolder:"GitLens AI features have been disabled by your GitKraken admin",canPickMany:!1});let r=await e.ai.getModels(t)??[],s=[];for(let e of r){if(e.hidden)continue;let t=e.provider.id===i?.provider&&e.id===i?.model;s.push({label:e.name,description:e.default?"  recommended":void 0,iconPath:new n.ThemeIcon(t?"check":"blank"),model:e,picked:t})}let o=n.window.createQuickPick();o.ignoreFocusOut=(0,t6.dW)();let a=[];try{return await new Promise(e=>{a.push(o.onDidHide(()=>e(void 0)),o.onDidAccept(()=>{0!==o.activeItems.length&&e(o.activeItems[0])}),o.onDidTriggerButton(t=>{t===n.QuickInputButtons.Back&&e(t9.WL.Back)})),o.title="Select AI Model",o.placeholder="Choose an AI model to use",o.matchOnDescription=!0,o.matchOnDetail=!0,o.items=s,o.activeItems=s.filter(e=>e.picked),o.buttons=[n.QuickInputButtons.Back],o.show()})}finally{o.dispose(),a.forEach(e=>void e.dispose())}}var is=i(4435),io=i(711);let ia=`You are an advanced AI programming assistant and are tasked with summarizing code changes into a concise but meaningful commit message. You will be provided with a code diff and optional additional context. Your goal is to analyze the changes and create a clear, informative commit message that accurately represents the modifications made to the code.

First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

Now, if provided, use this context to understand the motivation behind the changes and any relevant background information:
<~~additional-context~~>
\${context}
</~~additional-context~~>

To create an effective commit message, follow these steps:

1. Carefully analyze the diff and context, focusing on:
   - The purpose and rationale of the changes
   - Any problems addressed or benefits introduced
   - Any significant logic changes or algorithmic improvements
2. Ensure the following when composing the commit message:
   - Emphasize the 'why' of the change, its benefits, or the problem it addresses
   - Use an informal yet professional tone
   - Use a future-oriented manner, third-person singular present tense (e.g., 'Fixes', 'Updates', 'Improves', 'Adds', 'Removes')
   - Be clear and concise
   - Synthesize only meaningful information from the diff and context
   - Avoid outputting code, specific code identifiers, names, or file names unless crucial for understanding
   - Avoid repeating information, broad generalities, and unnecessary phrases like "this", "this commit", or "this change"
3. Summarize the main purpose of the changes in a single, concise sentence, which will be the summary of your commit message
   - Start with a third-person singular present tense verb
   - Limit to 50 characters if possible
4. If necessary, provide a brief explanation of the changes, which will be the body of your commit message
   - Add line breaks for readability and to separate independent ideas
   - Focus on the "why" rather than the "what" of the changes.
5. If the changes are related to a specific issue or ticket, include the reference (e.g., "Fixes #123" or "Relates to JIRA-456") at the end of the commit message.

Don't over explain and write your commit message summary inside <summary> tags and your commit message body inside <body> tags and include no other text:

<summary>
Implements user authentication feature
</summary>
<body>
Adds login and registration endpoints
Updates user model to include password hashing
Integrates JWT for secure token generation

Fixes #789
</body>

\${instructions}

Based on the provided code diff and any additional context, create a concise but meaningful commit message following the instructions above.`,il=`You are an advanced AI programming assistant and are tasked with summarizing code changes into a concise but meaningful pull request title and description. You will be provided with a code diff and a list of commits. Your goal is to analyze the changes and create a clear, informative title and description that accurately represents the modifications made to the code.
First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

Then, review the list of commits to help understand the motivation behind the changes and any relevant background information:
<~~data~~>
\${data}
</~~data~~>

Now, if provided, use this context to understand the motivation behind the changes and any relevant background information:
<~~additional-context~~>
\${context}
</~~additional-context~~>

To create an effective pull request title and description, follow these steps:

1. Carefully analyze the diff, commit messages, context, focusing on:
   - The purpose and rationale of the changes
   - Any problems addressed or benefits introduced
   - Any significant logic changes or algorithmic improvements
2. Ensure the following when composing the pull request title and description:
   - Emphasize the 'why' of the change, its benefits, or the problem it addresses
   - Use an informal yet professional tone
   - Use a future-oriented manner, third-person singular present tense (e.g., 'Fixes', 'Updates', 'Improves', 'Adds', 'Removes')
   - Be clear and concise
   - Synthesize only meaningful information from the diff and context
   - Avoid outputting code, specific code identifiers, names, or file names unless crucial for understanding
   - Avoid repeating information, broad generalities, and unnecessary phrases like "this", "this commit", or "this change"
3. Summarize the main purpose of the changes in a single, concise sentence, which will be the title of your pull request message
   - Start with a third-person singular present tense verb
   - Limit to 50 characters if possible
4. If necessary, provide a brief explanation of the changes, which will be the body of your pull request message
   - Add line breaks for readability and to separate independent ideas
   - Focus on the "why" rather than the "what" of the changes.
   - Structure the body with markdown bullets and headings for clarity
5. If the changes are related to a specific issue or ticket, include the reference (e.g., "Fixes #123" or "Relates to JIRA-456") at the end of the pull request message.

Write your title inside <summary> tags and your description inside <body> tags and include no other text:

<summary>
Implements user authentication feature
</summary>
<body>
Adds login and registration endpoints:
- Updates user model to include password hashing
- Integrates JWT for secure token generation

Fixes #789
</body>
\${instructions}

Based on the provided code diff, commit list, and any additional context, create a concise but meaningful pull request title and body following the instructions above.`,iu=`You are an advanced AI programming assistant and are tasked with creating a concise but descriptive stash message. You will be provided with a code diff of uncommitted changes. Your goal is to analyze the changes and create a clear, single-line stash message that accurately represents the work in progress being stashed.

First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

To create an effective stash message, follow these steps:

1. Analyze the changes and focus on:
   - The primary feature or bug fix was being worked on
   - The overall intent of the changes
   - Any notable file or areas being modified
2. Create a single-line message that:
   - Briefly describes the changes being stashed but must be descriptive enough to identify later
   - Prioritizes the most significant change if multiple changes are present. If multiple related changes are significant, try to summarize them concisely
   - Use a future-oriented manner, third-person singular present tense (e.g., 'Fixes', 'Updates', 'Improves', 'Adds', 'Removes')

Write your stash message inside <summary> tags and include no other text:

<summary>
Adds new awesome feature
</summary>

\${instructions}

Based on the provided code diff, create a concise but descriptive stash message following the instructions above.`,ic=`You are an advanced AI programming assistant and are tasked with summarizing code changes into a concise and meaningful title and description. You will be provided with a code diff and optional additional context. Your goal is to analyze the changes and create a clear, informative title and description that accurately represents the modifications made to the code.

First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

Now, if provided, use this context to understand the motivation behind the changes and any relevant background information:
<~~additional-context~~>
\${context}
</~~additional-context~~>

To create an effective title and description, follow these steps:

1. Carefully analyze the diff and context, focusing on:
   - The purpose and rationale of the changes
   - Any problems addressed or benefits introduced
   - Any significant logic changes or algorithmic improvements
2. Ensure the following when composing the title and description:
   - Emphasize the 'why' of the change, its benefits, or the problem it addresses
   - Use an informal yet professional tone
   - Use a future-oriented manner, third-person singular present tense (e.g., 'Fixes', 'Updates', 'Improves', 'Adds', 'Removes')
   - Be clear and concise
   - Synthesize only meaningful information from the diff and context
   - Avoid outputting code, specific code identifiers, names, or file names unless crucial for understanding
   - Avoid repeating information, broad generalities, and unnecessary phrases like "this", "this commit", or "this change"
3. Summarize the main purpose of the changes in a single, concise sentence, which will be the title.
4. If necessary, provide a brief explanation of the changes, which will be the description.
   - Add line breaks for readability and to separate independent ideas
   - Focus on the "why" rather than the "what" of the changes.

Write your title inside <summary> tags and your description inside <body> tags and include no other text:

<summary>
Implements user authentication feature
</summary>
<body>
Adds login and registration endpoints
Updates user model to include password hashing
Integrates JWT for secure token generation
</body>

\${instructions}

Based on the provided code diff and any additional context, create a concise but meaningful title and description following the instructions above.`,ih=`You are an advanced AI programming assistant and are tasked with summarizing code changes into a concise and meaningful code review title and description. You will be provided with a code diff and optional additional context. Your goal is to analyze the changes and create a clear, informative code review title and description that accurately represents the modifications made to the code.

First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

Now, if provided, use this context to understand the motivation behind the changes and any relevant background information:
<~~additional-context~~>
\${context}
</~~additional-context~~>

To create an effective title and description, follow these steps:

1. Carefully analyze the diff and context, focusing on:
   - The purpose and rationale of the changes
   - Any problems addressed or benefits introduced
   - Any significant logic changes or algorithmic improvements
2. Ensure the following when composing the title and description:
   - Emphasize the 'why' of the change, its benefits, or the problem it addresses
   - Use an informal yet professional tone
   - Use a future-oriented manner, third-person singular present tense (e.g., 'Fixes', 'Updates', 'Improves', 'Adds', 'Removes')
   - Be clear and concise
   - Synthesize only meaningful information from the diff and context
   - Avoid outputting code, specific code identifiers, names, or file names unless crucial for understanding
   - Avoid repeating information, broad generalities, and unnecessary phrases like "this", "this commit", or "this change"
3. Summarize the main purpose of the changes in a single, concise sentence, which will be the title.
4. If necessary, provide a brief explanation of the changes, which will be the description.
   - Add line breaks for readability and to separate independent ideas
   - Focus on the "why" rather than the "what" of the changes.

Write your title inside <summary> tags and your description inside <body> tags and include no other text:

<summary>
Implements user authentication feature
</summary>
<body>
Adds login and registration endpoints
Updates user model to include password hashing
Integrates JWT for secure token generation
</body>

\${instructions}

Based on the provided code diff and any additional context, create a concise but meaningful code review title and description following the instructions above.`,id=`You are an advanced AI programming assistant and are tasked with creating clear, technical summaries of code changes that help reviewers understand the modifications and their implications. You will analyze a code diff and the author-provided message to produce a structured summary that captures the essential aspects of the changes.

First, examine the following code changes provided in Git diff format:
<~~diff~~>
\${diff}
</~~diff~~>

Now, review the author-provided message to help understand the motivation behind the changes and any relevant background information:
<~~message~~>
\${message}
</~~message~~>

Analysis Instructions:
1. Examine the technical changes and their direct implications
2. Consider the scope of changes (small fix vs. major modification)
3. Identify any structural or behavioral changes
4. Look for potential side effects or dependencies
5. Note any obvious testing implications

Write your summary inside <summary> and <body> tags in the following structured markdown format, text in [] brackets should be replaced with your own text, if applicable, not including the brackets:

<summary>
[Concise, one-line description of the change]

[2-3 sentences explaining the core changes and their purpose]
</summary>
<body>
### Changes
- [Key technical modifications]
- [Important structural changes]
- [Modified components/files]

### Impact
- [Behavioral changes]
- [Dependencies affected]
- [Breaking changes, if any]
- [Performance implications, if apparent]
</body>

Guidelines:
- Keep the initial description under 80 characters
- Use clear, technical language
- Focus on observable changes from the diff
- Highlight significant code structure changes
- Base conclusions only on the code diff and message
- Avoid assumptions about business context
- Include specific file/component names only when relevant

\${instructions}

Based on the provided code diff and message, create a focused technical summary following the format above.`,ip=`You are an expert at creating changelogs in the "Keep a Changelog" format (https://keepachangelog.com). Your task is to create a set of clear, informative changelog entries.

First, carefully examine the following JSON data containing commit messages and associated issues. The data is structured as an array of "change" objects. Each "change" contains a \`message\` (the commit message) and an \`issues\` array. The \`issues\` array contains objects representing associated issues, each with an \`id\`, \`url\`, and optional \`title\`.

<~~data~~>
\${data}
</~~data~~>

Guidelines for creating the changelog:

1. Analyze the commit messages and associated issue titles (if available) to understand the changes made. Be sure to read every commit message and associated issue titles to understand the purpose of each change.
2. Group changes into these categories (only include categories with actual changes):
   - Added: New features or capabilities
   - Changed: Changes to existing functionality
   - Deprecated: Features that will be removed in upcoming releases
   - Removed: Features that were removed
   - Fixed: Bug fixes
   - Security: Security-related changes
3. Order entries by importance within each category
4. Write a clear, concise, user-friendly descriptions for each change that focuses on the impact to users
   - Follow the example structure below of the Keep a Changelog format for each entry
   - Start with a third-person singular present tense verb (e.g., "Adds", "Changes", "Improves", "Removes", "Deprecates", "Fixes", etc.)
   - Avoid technical implementation details unless directly relevant to users
   - Combine related changes into single entries when appropriate, grouping the associated issues together as well
   - Focus on the what and why, not the how. One sentence is often sufficient, though bullets can be used for multiple related points
5. Prioritize user-facing changes. If a commit message describes internal refactoring or implementation details, try to infer the user-facing impact (if any) from the issue titles or other commits. If there's no user-facing impact, and no clear external benefit, omit the change
6. Use Markdown headings, links, and bullet points, adhering to Keep a Changelog structure
7. Provide only the changelog entry\u2014no additional text or commentary outside of the changelog

Example output structure:

### Added
- Adds brief description of the added feature ([#Issue-ID](Issue-URL))

### Changed
- Changes brief description of how something changed ([#Issue-ID](Issue-URL))
- Improves brief description of how something improved ([#Issue-ID](Issue-URL))

### Fixed
- Fixes Issue Title or brief description if no title ([#Issue-ID](Issue-URL))

\${instructions}

Based on the provided commit messages and associated issues, create a set of markdown changelog entries following the instructions above. Do not include any explanatory text or metadata`;var ig=i(3151);let im=["diff"];async function iw(e,t,i,r,s,o){i.instructions&&(o["config.usedCustomInstructions"]=!0);let n=(0,tG.x1)(Object.entries(i),([e,i])=>{if(t.variables.includes(e)&&(null==i||"string"==typeof i))return[e,i??""]}),a=t.template.length+(0,X.cz)(n,([,e])=>e.length),l=!1,u=r*ig.PR;for(let i of(a>u&&(l=!0,n=n.map(([t,i])=>{if(!im.includes(t))return[t,i];let r=u-(a-i.length);if(r>i.length)throw new c.V9(c.zK.RequestTooLarge,Error(`Unable to truncate context to fit within the ${(0,eO.Lu)(e.provider.name)} limits`));return[t,i.substring(0,r)]})),t.variables))n.some(([e])=>e===i)||n.push([i,""]);let d=(0,eO.GW)(t.template,Object.fromEntries(n)),p=Math.ceil(d.length/ig.PR),g=h.H.get("ai.largePromptWarningThreshold",void 0,1e4);if(o["retry.count"]=s,o["input.length"]=d.length,o["config.largePromptThreshold"]=g,0===s&&(o["warning.promptTruncated"]=l,l&&(0,ig.Xs)(e),p>g)&&(o["warning.exceededLargePromptThreshold"]=!0,!await (0,ig.Vt)(100*Math.ceil(p/100),g)))throw o["failed.reason"]="user-cancelled",o["failed.cancelled.reason"]="large-prompt",new c.AL;return{prompt:d,truncated:l}}let iv=new Map([["gitkraken",{...t8.jh,type:(0,is.R)(async()=>(await Promise.resolve().then(i.bind(i,5700))).GitKrakenProvider)}],["vscode",{...t8.jI,type:(0,is.R)(async()=>(await Promise.resolve().then(i.bind(i,5408))).VSCodeAIProvider)}],["openai",{...t8.lh,type:(0,is.R)(async()=>(await Promise.resolve().then(i.bind(i,4460))).OpenAIProvider)}],["anthropic",{...t8.FH,type:(0,is.R)(async()=>(await Promise.resolve().then(i.bind(i,5134))).AnthropicProvider)}],["gemini",{...t8.mJ,type:(0,is.R)(async()=>(await Promise.resolve().then(i.bind(i,7841))).GeminiProvider)}],["deepseek",{...t8.Fv,type:(0,is.R)(async()=>(await Promise.resolve().then(i.bind(i,5772))).DeepSeekProvider)}],["xai",{...t8.zJ,type:(0,is.R)(async()=>(await Promise.resolve().then(i.bind(i,8608))).XAIProvider)}],["openrouter",{...t8.a,type:(0,is.R)(async()=>(await Promise.resolve().then(i.bind(i,9043))).OpenRouterProvider)}],["github",{...t8.ej,type:(0,is.R)(async()=>(await Promise.resolve().then(i.bind(i,9759))).GitHubModelsProvider)}],["huggingface",{...t8.xS,type:(0,is.R)(async()=>(await Promise.resolve().then(i.bind(i,8772))).HuggingFaceProvider)}]]);let AIProviderService=class AIProviderService{constructor(e,t){this.container=e,this.connection=t,this._disposable=this.container.subscription.onDidChange(()=>this._promptTemplates.clear())}_onDidChangeModel=new n.EventEmitter;get onDidChangeModel(){return this._onDidChangeModel.event}_disposable;_model;_promptTemplates=new PromiseCache({createTTL:432e5,expireOnError:!0});_provider;_providerDisposable;dispose(){this._disposable.dispose(),this._onDidChangeModel.dispose(),this._providerDisposable?.dispose(),this._provider?.dispose()}getConfiguredModel(){let e=h.H.get("ai.model")??void 0;if(null==e)return;let t=e.indexOf(":"),i=-1===t?e:e.substring(0,t),r=-1===t?void 0:e.substring(t+1);if(null!=i&&this.supports(i)){if(null!=r)return{provider:i,model:r};else if(iR(i)&&null!=(r=h.H.get(`ai.${i}.model`)??void 0)&&/^(.+):(.+)$/.test(r))return{provider:i,model:r}}}async getModels(e){let t=async e=>e.value.then(async e=>{let t=new e(this.container,this.connection);try{return await t.getModels()}finally{t.dispose()}});if(null!=e&&this.supports(e)){let i=iv.get(e)?.type;return null==i?[]:t(i)}return(await Promise.allSettled((0,X.Tj)(iv.values(),e=>t(e.type)))).flatMap(e=>(0,E.Ro)(e,[]))}async getModel(e,t){let i,r,s=this.getConfiguredModel();if(!e?.force&&s?.provider!=null&&s?.model!=null){let e=await this.getOrUpdateModel(s.provider,s.model);if(null!=e)return e}if(e?.silent)return;for(!e?.force&&(0!==(await this.getModels("vscode")).length?i="vscode":(await this.container.subscription.getSubscription()).account?.verified&&(i="gitkraken",r=(await this.getModels("gitkraken")).find(e=>e.default)));;){if(null==(i??=(await ii(this.container,s))?.provider))return;let e=iv.get(i);if(null==e||!await this.ensureProviderConfigured(e,!1))return;if(null==r){let e=await ir(this.container,i,s);if(null==e||(0,t9.qT)(e)&&e!==t9.WL.Back)return;if(e===t9.WL.Back){i=void 0;continue}r=e.model}break}let o=await this.getOrUpdateModel(r);return this.container.telemetry.sendEvent("ai/switchModel",null!=o?{"model.id":o.id,"model.provider.id":o.provider.id,"model.provider.name":o.provider.name}:{failed:!0},t),await iy(this.container.storage),o}async getProvidersConfiguration(){let e=await Promise.allSettled((0,X.Tj)(iv.values(),async e=>[e.id,{...e,type:void 0,configured:await this.ensureProviderConfigured(e,!0)}]));return new Map((0,E.aj)(e))}async ensureProviderConfigured(e,t){if(e.id===this._provider?.id)return this._provider.configured(t);let i=await e.type.value;if(null==i)return!1;let r=new i(this.container,this.connection);try{return await r.configured(t)}finally{r.dispose()}}async getOrUpdateModel(e,t){let i,r;i="string"==typeof e?e:(r=e).provider.id;let s=!1;if(i!==this._provider?.id){s=!0,this._providerDisposable?.dispose(),this._provider?.dispose();let e=await iv.get(i)?.type.value;if(null==e){this._provider=void 0,this._model=void 0;return}this._provider=new e(this.container,this.connection),this._providerDisposable=this._provider?.onDidChange?.((0,B.s)(async()=>{null==this._model&&null!=await this.getModel({silent:!0})&&this._onDidChangeModel.fire({model:this._model})},250),this)}if(null==r)if(null!=t&&t===this._model?.id)r=this._model;else{s=!0;let e=await this._provider.getModels();if(null==(r=e?.find(e=>e.id===t))){this._model=void 0;return}}else r.id!==this._model?.id&&(s=!0);return this._model=r,s&&(iR(r.provider.id)?(await h.H.updateEffective("ai.model",r.provider.id),await h.H.updateEffective(`ai.${r.provider.id}.model`,r.id)):await h.H.updateEffective("ai.model",`${r.provider.id}:${r.id}`),this._onDidChangeModel.fire({model:r})),r}async ensureOrgAccess(){return!1!==(0,A.SD)("gitlens:gk:organization:ai:enabled")||(await n.window.showErrorMessage("AI features have been disabled for your organization."),!1)}async ensureFeatureAccess(e,t){return!!await this.ensureOrgAccess()&&("generate-commitMessage"===e||!!await (0,io.L9)(this.container,(0,tq.f0)(e)?"Advanced AI features require a trial or GitLens Advanced.":"Pro AI features require a trial or GitLens Pro.",e,t))}async explainCommit(e,t,i){let{type:r,...s}=t,o=await this.sendRequest("explain-changes",async(t,i,r,s,o)=>{let n=await this.container.git.diff(e.repoPath).getDiff?.(e.ref);if(!n?.contents)throw new c.d0("No changes found to explain.");if(r.isCancellationRequested)throw new c.AL;let a=(0,y.WM)(e)?e:await this.container.git.commits(e.repoPath).getCommit(e.ref);if(null==a)throw new c.d0("Unable to find commit");if(r.isCancellationRequested||!a.hasFullDetails()&&(await a.ensureFullDetails(),(0,ep.aQ)(a),r.isCancellationRequested))throw new c.AL;let{prompt:l}=await this.getPrompt("explain-changes",t,{diff:n.contents,message:a.message,instructions:h.H.get("ai.explainChanges.customInstructions")},s,o,i);if(r.isCancellationRequested)throw new c.AL;return[{role:"user",content:l}]},e=>`Explaining changes with ${e.name}...`,s,e=>({key:"ai/explain",data:{type:"change",changeType:r,"model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),i);return null!=o?{...o,parsed:ib(o.content)}:void 0}async generateCommitMessage(e,t,i){let r=await this.sendRequest("generate-commitMessage",async(t,r,s,o,n)=>{let a=await this.getChanges(e);if(null==a)throw new c.d0("No changes to generate a commit message from.");if(s.isCancellationRequested)throw new c.AL;let{prompt:l}=await this.getPrompt("generate-commitMessage",t,{diff:a,context:i?.context,instructions:h.H.get("ai.generateCommitMessage.customInstructions")},o,n,r);if(s.isCancellationRequested)throw new c.AL;return[{role:"user",content:l}]},e=>`Generating commit message with ${e.name}...`,t,e=>({key:"ai/generate",data:{type:"commitMessage","model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),{...i,modelOptions:{outputTokens:4096}});return null!=r?{...r,parsed:ib(r.content)}:void 0}async generateCreatePullRequest(e,t,i,r,s){let o=await this.sendRequest("generate-create-pullRequest",async(r,o,n,a,l)=>{let[u,d]=await Promise.allSettled([e.git.diff().getDiff?.(i,t,{notation:"..."}),e.git.commits().getLog(`${t}..${i}`)]),p=(0,E.Ro)(u),g=(0,E.Ro)(d);if(!p?.contents||!g?.commits?.size)throw new c.d0("No changes to generate a pull request from.");if(n.isCancellationRequested)throw new c.AL;let m=[];for(let e of[...g.commits.values()].sort((e,t)=>e.date.getTime()-t.date.getTime()))m.push(e.message??e.summary);let{prompt:f}=await this.getPrompt("generate-create-pullRequest",r,{diff:p.contents,data:m.join(`
`),context:s?.context,instructions:h.H.get("ai.generateCreatePullRequest.customInstructions")},a,l,o);if(n.isCancellationRequested)throw new c.AL;return[{role:"user",content:f}]},e=>`Generating pull request details with ${e.name}...`,r,e=>({key:"ai/generate",data:{type:"createPullRequest","model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),s);return null!=o?{...o,parsed:ib(o.content)}:void 0}async generateCreateDraft(e,t,i){let{type:r,...s}=t,o=await this.sendRequest(i?.codeSuggestion?"generate-create-codeSuggestion":"generate-create-cloudPatch",async(t,r,s,o,n)=>{let a=await this.getChanges(e);if(null==a)throw new c.d0(`No changes to generate a ${i?.codeSuggestion?"code suggestion":"cloud patch"} from.`);if(s.isCancellationRequested)throw new c.AL;let{prompt:l}=await this.getPrompt(i?.codeSuggestion?"generate-create-codeSuggestion":"generate-create-cloudPatch",t,{diff:a,context:i?.context,instructions:i?.codeSuggestion?h.H.get("ai.generateCreateCodeSuggest.customInstructions"):h.H.get("ai.generateCreateCloudPatch.customInstructions")},o,n,r);if(s.isCancellationRequested)throw new c.AL;return[{role:"user",content:l}]},e=>`Generating ${i?.codeSuggestion?"code suggestion":"cloud patch"} description with ${e.name}...`,s,e=>({key:"ai/generate",data:{type:"draftMessage",draftType:r,"model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),i);return null!=o?{...o,parsed:ib(o.content)}:void 0}async generateStashMessage(e,t,i){let r=await this.sendRequest("generate-stashMessage",async(t,r,s,o,n)=>{let a=await this.getChanges(e);if(null==a)throw new c.d0("No changes to generate a stash message from.");if(s.isCancellationRequested)throw new c.AL;let{prompt:l}=await this.getPrompt("generate-stashMessage",t,{diff:a,context:i?.context,instructions:h.H.get("ai.generateStashMessage.customInstructions")},o,n,r);if(s.isCancellationRequested)throw new c.AL;return[{role:"user",content:l}]},e=>`Generating stash message with ${e.name}...`,t,e=>({key:"ai/generate",data:{type:"stashMessage","model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),{...i,modelOptions:{outputTokens:1024}});return null!=r?{...r,parsed:ib(r.content)}:void 0}async generateChangelog(e,t,i){let r=await this.sendRequest("generate-changelog",async(t,i,r,s,o)=>{let{changes:n}=await e.value;if(!n.length)throw new c.d0("No changes to generate a changelog from.");if(r.isCancellationRequested)throw new c.AL;let{prompt:a}=await this.getPrompt("generate-changelog",t,{data:JSON.stringify(n),instructions:h.H.get("ai.generateChangelog.customInstructions")},s,o,i);if(r.isCancellationRequested)throw new c.AL;return[{role:"user",content:a}]},e=>`Generating changelog with ${e.name}...`,t,e=>({key:"ai/generate",data:{type:"changelog","model.id":e.id,"model.provider.id":e.provider.id,"model.provider.name":e.provider.name,"retry.count":0}}),i);return null!=r?{...r}:void 0}async sendRequest(e,t,i,r,s,o){if(!await this.ensureFeatureAccess(e,r))return;let a=await this.getModel(void 0,r);if(null==a||o?.cancellation?.isCancellationRequested)return void o?.generating?.cancel();let l=s(a),u=new n.CancellationTokenSource;o?.cancellation&&o.cancellation.onCancellationRequested(()=>u.cancel());let h=u.token;if(!await iy(this.container.storage)||h.isCancellationRequested){this.container.telemetry.sendEvent(l.key,{...l.data,"failed.reason":h.isCancellationRequested?"user-cancelled":"user-declined"},r),o?.generating?.cancel();return}let d=await this._provider.getApiKey(!1);if(null==d||h.isCancellationRequested){this.container.telemetry.sendEvent(l.key,h.isCancellationRequested?{...l.data,"failed.reason":"user-cancelled"}:{...l.data,"failed.reason":"error","failed.error":"Not authorized"},r),o?.generating?.cancel();return}let p=this._provider.sendRequest(e,a,d,t.bind(this,a,l.data,h),{cancellation:h,modelOptions:o?.modelOptions});o?.generating?.fulfill(a);let g=Date.now();try{let e=await (o?.progress!=null?n.window.withProgress({...o.progress,cancellable:!0,title:i(a)},(e,t)=>(t.onCancellationRequested(()=>u.cancel()),p)):p);return l.data["output.length"]=e?.content?.length,l.data["usage.promptTokens"]=e?.usage?.promptTokens,l.data["usage.completionTokens"]=e?.usage?.completionTokens,l.data["usage.totalTokens"]=e?.usage?.totalTokens,l.data["usage.limits.used"]=e?.usage?.limits?.used,l.data["usage.limits.limit"]=e?.usage?.limits?.limit,l.data["usage.limits.resetsOn"]=e?.usage?.limits?.resetsOn?.toISOString(),this.container.telemetry.sendEvent(l.key,{...l.data,duration:Date.now()-g},r),e}catch(e){if(e instanceof c.AL)return void this.container.telemetry.sendEvent(l.key,{...l.data,duration:Date.now()-g,"failed.reason":"user-cancelled"},r);if(e instanceof c.V9){switch(this.container.telemetry.sendEvent(l.key,{...l.data,duration:Date.now()-g,"failed.error":String(e),"failed.error.detail":String(e.original)},r),e.reason){case c.zK.NoRequestData:n.window.showErrorMessage(e.message);break;case c.zK.NoEntitlement:{let e=await this.container.subscription.getSubscription();if((0,tN.A_)(e)){let t=0>=(0,tN.x3)(e.plan.actual.id,tU.qn.Advanced)?tU.qn.Business:tU.qn.Advanced,i={title:`Upgrade to ${(0,tN.pG)(t)}`};await n.window.showErrorMessage("This AI feature isn't included in your current plan. Please upgrade and try again.",i)===i&&this.container.subscription.manageSubscription(r)}else{let e={title:"Upgrade to Pro"};await n.window.showErrorMessage("Please upgrade to GitLens Pro to access this AI feature and try again.",e)===e&&this.container.subscription.upgrade(tU.qn.Pro,r)}break}case c.zK.RequestTooLarge:{let e={title:"Switch Model"};await n.window.showErrorMessage("Your request is too large. Please reduce the size of your request or switch to a different model, and then try again.",e)===e&&this.switchModel(r);break}case c.zK.UserQuotaExceeded:{let e={title:"Increase Limit"};await n.window.showErrorMessage("Your request could not be completed because you've reached the weekly Al usage limit for your current plan. Upgrade to unlock more Al-powered actions.",e)===e&&this.container.subscription.manageSubscription(r);break}case c.zK.RateLimitExceeded:{let e={title:"Switch Model"};await n.window.showErrorMessage("Rate limit exceeded. Please wait a few moments or switch to a different model, and then try again.",e)===e&&this.switchModel(r);break}case c.zK.RateLimitOrFundsExceeded:{let e={title:"Switch Model"};await n.window.showErrorMessage("Rate limit exceeded, or your account is out of funds. Please wait a few moments, check your account balance, or switch to a different model, and then try again.",e)===e&&this.switchModel(r);break}case c.zK.ServiceCapacityExceeded:return void n.window.showErrorMessage("GitKraken AI is temporarily unable to process your request due to high volume. Please wait a few moments and try again. If this issue persists, please contact support.","OK");case c.zK.ModelNotSupported:{let e={title:"Switch Model"};await n.window.showErrorMessage("The selected model is not supported for this request. Please select a different model and try again.",e)===e&&this.switchModel(r);break}case c.zK.Unauthorized:{let e={title:"Switch Model"};await n.window.showErrorMessage("You do not have access to the selected model. Please select a different model and try again.",e)===e&&this.switchModel(r);break}case c.zK.DeniedByUser:{let e={title:"Switch Model"};await n.window.showErrorMessage("You have denied access to the selected model. Please provide access or select a different model, and then try again.",e)===e&&this.switchModel(r)}}return}throw this.container.telemetry.sendEvent(l.key,{...l.data,duration:Date.now()-g,"failed.error":String(e),"failed.error.detail":e.original?String(e.original):void 0},r),e}}async getChanges(e,t){let i;if("string"==typeof e)i=e;else if(Array.isArray(e))i=e.join(`
`);else{let r=await e.git.diff().getDiff?.(k.id);if(!r?.contents&&(r=await e.git.diff().getDiff?.(k.SU),!r?.contents))throw Error("No changes to generate a commit message from.");if(t?.cancellation?.isCancellationRequested)return;i=r.contents}return i}async getPrompt(e,t,i,r,s,o){let n=await this.getPromptTemplate(e,t);if(null==n)throw Error(`No prompt template found for ${e}`);return await iw(t,n,i,r,s,o)}async getPromptTemplate(e,t){if((await this.container.subscription.getSubscription()).account){let t=(0,$.dQ)();try{return await this._promptTemplates.get(e,async()=>{let t=this.container.urls.getGkAIApiUrl(`templates/message-prompt/${e}`),i=await fetch(t,{headers:await this.connection.getGkHeaders(void 0,void 0,{Accept:"application/json"})});if(!i.ok)throw Error(`Getting prompt template (${t}) failed: ${i.status} (${i.statusText})`);let r=await i.json();if(null!=r.error)throw Error(`Getting prompt template (${t}) failed: ${String(r.error)}`);return{id:r.data.id,template:r.data.template,variables:r.data.variables}})}catch(i){i instanceof c.WT||_.Vy.error(i,t,`Unable to get prompt template for '${e}'`)}}switch(e){case"generate-commitMessage":return{template:ia,variables:["diff","context","instructions"]};case"generate-stashMessage":return{template:iu,variables:["diff","context","instructions"]};case"generate-changelog":return{template:ip,variables:["data","instructions"]};case"generate-create-cloudPatch":return{template:ic,variables:["diff","context","instructions"]};case"generate-create-codeSuggestion":return{template:ih,variables:["diff","context","instructions"]};case"generate-create-pullRequest":return{template:il,variables:["diff","data","context","instructions"]};case"explain-changes":return{template:id,variables:["diff","message","instructions"]};default:return}}async reset(e){let t,{_provider:i}=this;null==i&&(await this.getModel({silent:!0}),i=this._provider);let r={title:"Reset Current"},s={title:"Reset All"},o={title:"Cancel",isCloseAffordance:!0};if(t=e?s:null==i?await n.window.showInformationMessage("Do you want to reset all of the stored AI keys?",{modal:!0},s,o):await n.window.showInformationMessage(`Do you want to reset the stored key for the current provider (${i.name}) or reset all of the stored AI keys?`,{modal:!0},r,s,o),null!=i&&t===r)this.resetProviderKey(i.id),this.resetConfirmations();else if(t===s){let e=[];for(let t of iv.keys())e.push(await this.container.storage.getSecret(`gitlens.${t}.key`)),this.resetProviderKey(t,!0);this.resetConfirmations(),n.env.clipboard.writeText(e.join(`
`)),n.window.showInformationMessage("All stored AI keys have been reset. The configured keys were copied to your clipboard.")}}resetConfirmations(){this.container.storage.deleteWithPrefix("confirm:ai:tos"),this.container.storage.deleteWorkspaceWithPrefix("confirm:ai:tos")}resetProviderKey(e,t){t||this.container.storage.getSecret(`gitlens.${e}.key`).then(e=>{e&&(n.env.clipboard.writeText(e),n.window.showInformationMessage("The stored AI key has been reset. The configured key was copied to your clipboard."))}),this.container.storage.deleteSecret(`gitlens.${e}.key`)}supports(e){return iv.has(e)}switchModel(e){return this.getModel({force:!0},e)}};async function iy(e){if(e.get("confirm:ai:tos",!1)||e.getWorkspace("confirm:ai:tos",!1))return!0;let t={title:"Accept"},i={title:"Accept Only for this Workspace"},r=await n.window.showInformationMessage("GitLens AI features can send code snippets, diffs, and other context to your selected AI provider for analysis.",{modal:!0},t,i,{title:"Cancel",isCloseAffordance:!0});return r===i?(e.storeWorkspace("confirm:ai:tos",!0).catch(),!0):r===t&&(e.store("confirm:ai:tos",!0).catch(),!0)}function ib(e){e=e.trim();let t=e.match(/<summary>\s?([\s\S]*?)\s?(<\/summary>|$)/)?.[1]?.trim()??"",i=e.match(/<body>\s?([\s\S]*?)\s?(<\/body>|$)/)?.[1]?.trim()??"";if(!t&&!i)return iC(e);if(t&&!i){if(!(i=e.replace(/<summary>[\s\S]*?<\/summary>/,"")?.trim()??""))return iC(t)}else if(!t&&i&&!(t=e.replace(/<body>[\s\S]*?<\/body>/,"").trim()??""))return iC(i);return{summary:t,body:i}}function iC(e){let t=e.indexOf(`
`);return -1===t?{summary:e,body:""}:{summary:e.substring(0,t).trim(),body:e.substring(t+1).trim()}}function iR(e){return iv.get(e)?.primary===!0}var ik=i(1982),iS=i(7808),iP=i(4152),iA=Object.defineProperty,iI=Object.getOwnPropertyDescriptor,iD=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iI(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iA(t,i,o),o};let i_="login",i$="did-authenticate";let AuthenticationConnection=class AuthenticationConnection{constructor(e,t){this.container=e,this.connection=t}_cancellationSource;_deferredCodeExchanges=new Map;_pendingStates=new Map;_statusBarItem;dispose(){}abort(){return null==this._cancellationSource?Promise.resolve():(this._cancellationSource.cancel(),new Promise(e=>setTimeout(e,50)))}async getAccountInfo(e){let t,i=(0,$.dQ)();try{t=await this.connection.fetchGkApi("user",void 0,{token:e})}catch(e){throw _.Vy.error(e,i),e}if(!t.ok)throw _.Vy.error(void 0,`Getting account info failed: (${t.status}) ${t.statusText}`),Error(t.statusText);let r=await t.json();return{id:r.id,accountName:r.username}}async login(e,t,i=!1,r){let s=(0,$.dQ)();this.updateStatusBarItem(!0);let o=(0,iS.uR)(),a=this._pendingStates.get(t)??[];this._pendingStates.set(t,[...a,o]);let l=await n.env.asExternalUri(n.Uri.parse(`${n.env.uriScheme}://${this.container.context.extension.id}/${i$}`)),u=this.container.urls.getGkDevUrl(i?"register":"login",`${e.includes("gitlens")?"source=gitlens&":""}${null!=r?`context=${r}&`:""}state=${encodeURIComponent(o)}&redirect_uri=${encodeURIComponent(l.toString(!0))}`);if(!await (0,iP.CZ)(u))throw _.Vy.error(void 0,s,"Opening login URL failed"),this._pendingStates.delete(t),this.updateStatusBarItem(!1),Error("Cancelled");let c=this._deferredCodeExchanges.get(t);null==c&&(c=(0,tt.I7)(this.container.uri.onDidReceiveAuthenticationUri,this.getUriHandlerDeferredExecutor()),this._deferredCodeExchanges.set(t,c)),this._cancellationSource?.cancel(),this._cancellationSource=new n.CancellationTokenSource;try{let e=await Promise.race([c.promise,new Promise((e,t)=>this.openCompletionInputFallback(this._cancellationSource.token,e,t)),new Promise((e,t)=>this._cancellationSource?.token.onCancellationRequested(()=>t("Cancelled"))),new Promise((e,t)=>setTimeout(t,12e4,"Cancelled"))]);return await this.getTokenFromCodeAndState(e,o,t)}catch(e){throw _.Vy.error(e,s),e}finally{this._cancellationSource?.cancel(),this._cancellationSource=void 0,this._pendingStates.delete(t),c?.cancel(),this._deferredCodeExchanges.delete(t),this.updateStatusBarItem(!1)}}async openCompletionInputFallback(e,t,i){let r,s=n.window.createInputBox();s.ignoreFocusOut=!0;let o=[];try{if(e.isCancellationRequested)return;r=await new Promise(t=>{o.push(e.onCancellationRequested(()=>s.hide()),s.onDidHide(()=>t(void 0)),s.onDidChangeValue(e=>{if(!e){s.validationMessage="Please enter a valid code";return}s.validationMessage=void 0}),s.onDidAccept(()=>t(s.value))),s.title="GitLens Sign In",s.placeholder="Please enter the provided authorization code",s.prompt="If the auto-redirect fails, paste the authorization code",s.show()})}finally{s.dispose(),o.forEach(e=>void e.dispose())}null!=r?t(r):i("Cancelled")}async getTokenFromCodeAndState(e,t,i){if(null!=t&&null!=i){let e=this._pendingStates.get(i);if(!e?.includes(t))throw Error("Getting token failed: Invalid state")}let r=await this.connection.fetchGkApi("oauth/access_token",{method:"POST",body:JSON.stringify({grant_type:"authorization_code",client_id:"gitkraken.gitlens",code:e,state:t??""})},{token:!1});if(!r.ok)throw Error(`Getting token failed: (${r.status}) ${r.statusText}`);let s=await r.json();if(null==s.access_token)throw Error("Getting token failed: No access token returned");return s.access_token}getUriHandlerDeferredExecutor(){return(e,t,i)=>{let r=new URLSearchParams(e.query).get("code");if(null==r)return void i("Code not returned");t(r)}}updateStatusBarItem(e){e&&null==this._statusBarItem&&(this._statusBarItem=n.window.createStatusBarItem("gitlens.plus.signIn",n.StatusBarAlignment.Left),this._statusBarItem.name="GitLens Sign in",this._statusBarItem.text="Signing in to GitKraken...",this._statusBarItem.show()),e||null==this._statusBarItem||(this._statusBarItem.dispose(),this._statusBarItem=void 0)}async getExchangeToken(e){let t=null!=e?await n.env.asExternalUri(n.Uri.parse(`${n.env.uriScheme}://${this.container.context.extension.id}/${e}`)):void 0,i=await this.connection.fetchGkApi("v1/login/auth-exchange",{method:"POST",body:JSON.stringify({source:"gitlens",redirectUrl:t?.toString()})});if(!i.ok)throw Error(`Failed to get exchange token: (${i.status}) ${i.statusText}`);return(await i.json()).data.exchangeToken}};iD([(0,d.Yz)({args:!1,exit:e=>`returned ${e.id}`})],AuthenticationConnection.prototype,"getAccountInfo",1),iD([(0,d.Yz)()],AuthenticationConnection.prototype,"login",1);var iT=Object.defineProperty,iE=Object.getOwnPropertyDescriptor,ix=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),iO=e=>{throw TypeError(e)},iF=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iE(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iT(t,i,o),o},iB=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&iO("Object expected"),i&&(r=t[ix("asyncDispose")]),void 0===r&&(r=t[ix("dispose")],i&&(s=r)),"function"!=typeof r&&iO("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},iL=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let iU=["gitlens"];let AccountAuthenticationProvider=class AccountAuthenticationProvider{constructor(e,t){this.container=e,this._authConnection=new AuthenticationConnection(e,t),this._sessionsPromise=this.getSessionsFromStorage(),this._disposable=n.Disposable.from(this._onDidChangeSessions,this._authConnection,this.container.storage.onDidChangeSecrets(()=>this.checkForUpdates()))}_onDidChangeSessions=new n.EventEmitter;get onDidChangeSessions(){return this._onDidChangeSessions.event}_disposable;_authConnection;_sessionsPromise;_optionsByScope;dispose(){this._disposable.dispose()}get secretStorageKey(){return`gitlens.plus.auth:${this.container.env}`}abort(){return this._authConnection.abort()}setOptionsForScopes(e,t){this._optionsByScope??=new Map,this._optionsByScope.set(iq(e),t)}clearOptionsForScopes(e){this._optionsByScope?.delete(iq(e))}async createSession(e){let t=(0,$.dQ)(),i=this._optionsByScope?.get(iq(e));null!=i&&this._optionsByScope?.delete(iq(e));let r=iq(e=e.sort());try{let t=i?.signIn!=null?await this._authConnection.getTokenFromCodeAndState(i.signIn.code,i.signIn.state):await this._authConnection.login(e,r,i?.signUp,i?.context),s=await this.createSessionForToken(t,e),o=await this._sessionsPromise,n=o.findIndex(e=>e.id===s.id||iq(e.scopes)===r);return n>-1?o.splice(n,1,s):o.push(s),await this.storeSessions(o),this._onDidChangeSessions.fire({added:[s],removed:[],changed:[]}),s}catch(e){if("Cancelled"===e||"Cancelled"===e.message)throw e;throw _.Vy.error(e,t),n.window.showErrorMessage(`Unable to sign in to GitKraken: ${e instanceof c.AL?"request timed out":e}. Please try again. If this issue persists, please contact support.`),e}}async getSessions(e){let t=(0,$.dQ)(),i=iq(e=e?.sort()),r=await this._sessionsPromise,s=null!=e?r.filter(e=>iq(e.scopes)===i):r;return(0,$.TT)(t,` \u2022 Found ${s.length} sessions`),s}async removeSession(e){let t=(0,$.dQ)();try{let t=await this._sessionsPromise,i=t.findIndex(t=>t.id===e);if(-1===i)return void _.Vy.log(`Unable to remove session ${e}; Not found`);let r=t[i];t.splice(i,1),await this.storeSessions(t),this._onDidChangeSessions.fire({added:[],removed:[r],changed:[]})}catch(e){throw _.Vy.error(e,t),n.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async removeSessionsByScopes(e){let t=(0,$.dQ)();try{e=e?.sort();let t=iq(e),i=[],r=0,s=await this._sessionsPromise;for(let e of s){if(iq(e.scopes)!==t){r++;continue}s.splice(r,1),i.push(e)}if(0===i.length)return;await this.storeSessions(s),this._onDidChangeSessions.fire({added:[],removed:i,changed:[]})}catch(e){throw _.Vy.error(e,t),n.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async checkForUpdates(){var e=[];try{let t=iB(e,(0,$.bP)(`${(0,_.zu)(this)}.checkForUpdates`,!1)),i=await this._sessionsPromise;this._sessionsPromise=this.getSessionsFromStorage();let r=await this._sessionsPromise,s=[],o=[];for(let e of r)i.some(t=>t.id===e.id)||s.push(e);for(let e of i)r.some(t=>t.id===e.id)||o.push(e);(s.length||o.length)&&(_.Vy.debug(t,`firing sessions changed event; added=${s.length}, removed=${o.length}`),this._onDidChangeSessions.fire({added:s,removed:o,changed:[]}))}catch(e){var t=e,i=!0}finally{iL(e,t,i)}}async getOrCreateSession(e,t){let i=(await this.getSessions(e))[0];return null!=i?i:t?this.createSession(e):void 0}async createSessionForToken(e,t){let i=await this._authConnection.getAccountInfo(e);return{id:(0,iS.uR)(),accessToken:e,account:{label:i.accountName,id:i.id},scopes:t}}async getSessionsFromStorage(){var e=[];try{let t,i=iB(e,(0,$.bP)(`${(0,_.zu)(this)}.getSessionsFromStorage`,!1));try{let e=await this.container.storage.getSecret(this.secretStorageKey);if(!e||"[]"===e)return[];try{t=JSON.parse(e)}catch(e){try{await this.container.storage.deleteSecret(this.secretStorageKey)}catch{}throw e}}catch(e){return _.Vy.error(e,i,"Unable to read sessions from storage"),[]}let r=t.map(async e=>{let t,r=iq(e.scopes);if(_.Vy.debug(i,`read session from storage with scopes=${r}`),null==e.account)try{t=await this._authConnection.getAccountInfo(e.accessToken),_.Vy.debug(i,`verified session with scopes=${r}`)}catch(e){if("Unauthorized"===e.message)return}return{id:e.id,account:{label:null!=e.account?e.account.label??e.account.displayName??"<unknown>":t?.accountName??"<unknown>",id:e.account?.id??t?.id??"<unknown>"},scopes:e.scopes,accessToken:e.accessToken}}),s=(await Promise.allSettled(r)).filter(e=>"fulfilled"===e.status).map(e=>e.value).filter(e=>!!e);return _.Vy.debug(i,`found ${s.length} verified sessions`),s.length!==t.length&&await this.storeSessions(s),s}catch(e){var t=e,i=!0}finally{iL(e,t,i)}}async storeSessions(e){try{this._sessionsPromise=Promise.resolve(e),await this.container.storage.storeSecret(this.secretStorageKey,JSON.stringify(e))}catch(t){_.Vy.error(t,`Unable to store ${e.length} sessions`)}}async getExchangeToken(e){return this._authConnection.getExchangeToken(e)}};function iq(e){return e?.join("|")}iF([(0,d.Yz)()],AccountAuthenticationProvider.prototype,"createSession",1),iF([(0,d.Yz)()],AccountAuthenticationProvider.prototype,"getSessions",1),iF([(0,d.Yz)()],AccountAuthenticationProvider.prototype,"removeSession",1),iF([(0,d.Yz)()],AccountAuthenticationProvider.prototype,"removeSessionsByScopes",1);var iN=i(6209),iM=Object.defineProperty,iW=Object.getOwnPropertyDescriptor,iG=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iW(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iM(t,i,o),o};let OrganizationService=class OrganizationService{constructor(e,t){this.container=e,this.connection=t,this._disposable=n.Disposable.from((0,iN.Oo)(e.onReady)(async()=>{let e=await this.getActiveOrganizationId();this.updateOrganizationPermissions(e)}),e.subscription.onDidChange(this.onSubscriptionChanged,this))}_disposable;_organizations;_organizationSettings;_organizationMembers;dispose(){this._disposable.dispose()}async getOrganizations(e){let t=(0,$.dQ)(),i=e?.userId??(await this.container.subscription.getSubscription(!0))?.account?.id;if(null==i)return this.updateOrganizations(void 0),this._organizations;if(void 0===this._organizations||e?.force){let r;if(!e?.force&&(this.loadStoredOrganizations(i),null!=this._organizations))return this._organizations;try{r=await this.connection.fetchGkApi("user/organizations-light",{method:"GET"},{token:e?.accessToken})}catch(e){return _.Vy.error(e,t),n.window.showErrorMessage(`Unable to get organizations due to error: ${e}`,"OK"),this.updateOrganizations(void 0),this._organizations}if(!r.ok)return _.Vy.error(void 0,t,`Unable to get organizations; status=(${r.status}): ${r.statusText}`),n.window.showErrorMessage(`Unable to get organizations; Status: ${r.statusText}`,"OK"),this.updateOrganizations(null),this._organizations;let s=(await r.json()).map(e=>({id:e.id,name:e.name,role:e.role}));await this.storeOrganizations(s,i),this.updateOrganizations(s)}return this._organizations}loadStoredOrganizations(e){let t=this.container.storage.get(`gk:${e}:organizations`);if(null==t)return;let{timestamp:i,data:r}=t;null==i||Date.now()-i>864e5||this.updateOrganizations(r)}async storeOrganizations(e,t){return this.container.storage.store(`gk:${t}:organizations`,{v:1,timestamp:Date.now(),data:e})}onSubscriptionChanged(e){e.current?.account?.id==null&&this.updateOrganizations(void 0),this.updateOrganizationPermissions(e.current?.activeOrganization?.id)}updateOrganizations(e){this._organizations=e,(0,A.o)("gitlens:gk:hasOrganizations",(e??[]).length>1)}async updateOrganizationPermissions(e){let t=null!=e?await this.getOrganizationSettings(e):void 0;(0,A.o)("gitlens:gk:organization:ai:enabled",t?.aiSettings.enabled??!0),(0,A.o)("gitlens:gk:organization:drafts:byob",t?.draftsSettings.bucket!=null),(0,A.o)("gitlens:gk:organization:drafts:enabled",t?.draftsSettings.enabled??!0)}async getMembers(e,t){if(null==e&&null==(e=await this.getActiveOrganizationId()))return[];if(!this._organizationMembers?.has(e)||t?.force===!0){let t=await this.connection.fetchGkApi(`organization/${e}/members`,{method:"GET"});if(!t.ok)return _.Vy.error("",(0,$.dQ)(),`Unable to get organization members; status=(${t.status}): ${t.statusText}`),[];let i=(await t.json()).members;i.sort((e,t)=>(e.name??e.username).localeCompare(t.name??t.username)),this._organizationMembers??=new Map,this._organizationMembers.set(e,i)}return this._organizationMembers.get(e)??[]}async getMemberById(e,t){return(await this.getMembers(t)).find(t=>t.id===e)}async getMembersByIds(e,t){return(await this.getMembers(t)).filter(t=>e.includes(t.id))}async getActiveOrganizationId(e=!0){let t=await this.container.subscription.getSubscription(e);return t?.activeOrganization?.id}async getOrganizationSettings(e,t){let i=e??await this.getActiveOrganizationId();if(null!=i){if(!this._organizationSettings?.has(i)||t?.force===!0){let e=await this.connection.fetchGkApi("v1/organizations/settings",{method:"GET"},{organizationId:i});if(!e.ok)return void _.Vy.error("",(0,$.dQ)(),`Unable to get organization settings; status=(${e.status}): ${e.statusText}`);let t=await e.json();if(null!=t.error)return void _.Vy.error("",(0,$.dQ)(),`Unable to get organization settings; status=(${e.status}): ${t.error}`);null==this._organizationSettings&&(this._organizationSettings=new Map),this._organizationSettings.set(i,t.data)}return this._organizationSettings.get(i)}}};iG([(0,D.G)()],OrganizationService.prototype,"getOrganizations",1),iG([(0,D.G)()],OrganizationService.prototype,"loadStoredOrganizations",1),iG([(0,D.G)()],OrganizationService.prototype,"getMembers",1),iG([(0,D.G)()],OrganizationService.prototype,"getOrganizationSettings",1);let iH=Object.freeze({String:e=>"string"==typeof e,Number:e=>"number"==typeof e,Boolean:e=>"boolean"==typeof e,Object:e=>null!=e&&"object"==typeof e,Array:e=>t=>Array.isArray(t)&&t.every(e),Enum:(...e)=>t=>e.includes(t),Optional:e=>t=>void 0===t||e(t)});function iV(e){return t=>!!iH.Object(t)&&Object.entries(e).every(([e,i])=>i(t[e]))}var ij=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),iz=e=>{throw TypeError(e)},iQ=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&iz("Object expected"),i&&(r=t[ij("asyncDispose")]),void 0===r&&(r=t[ij("dispose")],i&&(s=r)),"function"!=typeof r&&iz("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},iY=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let ProductConfigProvider=class ProductConfigProvider{_lazyConfig;constructor(e,t){this._lazyConfig=(0,is.R)(async()=>{var i=[];try{let r,s=iQ(i,(0,$.bP)(`${(0,_.zu)(this)}.load`,!1)),o={validation:!1,exception:void 0,statusCode:void 0};try{let i=await t.fetchGkConfig("product.json");if(i.ok){if(r=await i.json(),(function(){let e=iH.Enum("account","badge","gate","home"),t=iH.Enum(tU.zZ.VerificationRequired,tU.zZ.Community,tU.zZ.ProPreview,tU.zZ.ProPreviewExpired,tU.zZ.ProTrial,tU.zZ.ProTrialExpired,tU.zZ.ProTrialReactivationEligible,tU.zZ.Paid),i=iV({detail:iH.String}),r=iV({html:iH.Optional(iH.String)}),s=e=>"string"==typeof e&&e.startsWith("gitlens."),o=iV({html:iH.String,title:iH.String,command:iH.Optional(e=>s(e))}),n=iV({info:iH.Optional(r),link:iH.Optional(o)}),a=iV({quickpick:i,webview:iH.Optional(n)}),l=iV({key:iH.String,code:iH.Optional(iH.String),states:iH.Optional(iH.Array(t)),expiresOn:iH.Optional(iH.String),startsOn:iH.Optional(iH.String),locations:iH.Optional(iH.Array(e)),content:iH.Optional(a),percentile:iH.Optional(iH.Number)});return iV({v:iH.Number,promos:iH.Array(l)})})()(r)){let t={promos:r.promos.map(e=>({key:e.key,code:e.code,states:e.states,expiresOn:null==e.expiresOn?void 0:new Date(e.expiresOn).getTime(),startsOn:null==e.startsOn?void 0:new Date(e.startsOn).getTime(),locations:e.locations,content:e.content,percentile:e.percentile}))};return await e.storage.store("product:config",{data:t,v:1,timestamp:Date.now()}),t}o.validation=!0}else o.statusCode=i.status}catch(e){o.exception=e,_.Vy.error(e,s)}e.telemetry.sendEvent("productConfig/failed",{reason:o.validation?"validation":"fetch",json:JSON.stringify(r),exception:null!=o.exception?String(o.exception):void 0,statusCode:o.statusCode});let n=e.storage.get("product:config");if(n?.data!=null)return n.data;return{promos:[{key:"pro50",states:[tU.zZ.Community,tU.zZ.ProPreview,tU.zZ.ProPreviewExpired,tU.zZ.ProTrial,tU.zZ.ProTrialExpired,tU.zZ.ProTrialReactivationEligible],locations:["home","account","badge","gate"],content:{quickpick:{detail:"$(star-full) Save 50% on GitLens Pro"},webview:{info:{html:"<b>Save 50%</b> on GitLens Pro"},link:{html:"<b>Save 50%</b> on GitLens Pro",title:"Upgrade now and Save 50% on GitLens Pro"}}}}]}}catch(e){var r=e,s=!0}finally{iY(i,r,s)}})}async getApplicablePromo(e,t){if(null!=e){var i=await this.getPromos(),r=e,s=t;if(null!=r){for(let e of i)if(function(e,t){let i=Date.now();return(null==e.states||e.states.includes(t))&&(null==e.expiresOn||e.expiresOn>i)&&(null==e.startsOn||e.startsOn<i)&&(null==e.percentile||t6.r$<=e.percentile)}(e,r)){if(null==s||null==e.locations||e.locations.includes(s))return e;break}}return}}getConfig(){return this._lazyConfig.value}async getPromos(){return(await this.getConfig()).promos}};var iK=i(2476),iZ=i(7019),iJ=Object.defineProperty,iX=Object.getOwnPropertyDescriptor,i0=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iX(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iJ(t,i,o),o};let ServerConnection=class ServerConnection{constructor(e,t){this.container=e,this.urls=t}dispose(){}get userAgent(){return`${this.container.debugging?"GitLens-Debug":this.container.prerelease?"GitLens-Pre":"GitLens"}/${this.container.version} (${n.env.appName}/${n.version}; ${(0,t$.uo)()})`}get clientName(){return this.container.debugging?"gitlens-vsc-debug":this.container.prerelease?"gitlens-vsc-pre":"gitlens-vsc"}async fetch(e,t,i){let r,s=(0,$.dQ)();if(i?.cancellation?.isCancellationRequested)throw new c.AL;let o=new AbortController;i?.cancellation!=null?(r=i.timeout,i.cancellation.onCancellationRequested(()=>o.abort())):r=i?.timeout??6e4;let n=null!=r?setTimeout(()=>o.abort(),r):void 0;try{let i=(0,iK.hd)(e,{agent:(0,iK.cQ)(),...t,headers:{"User-Agent":this.userAgent,...t?.headers},signal:o?.signal});return i.finally(()=>clearTimeout(n)),await i}catch(e){if(_.Vy.error(e,s),"AbortError"===e.name)throw new c.AL(e);throw e}}async fetchGkApi(e,t,i){return this.gkFetch(this.urls.getGkApiUrl(e),t,i)}async fetchGkConfig(e,t,i){return this.fetch(this.urls.getGkConfigUrl(e),t,i)}async fetchGkApiGraphQL(e,t,i,r){return this.fetchGkApi(e,{method:"POST",...i,body:JSON.stringify(t)},r)}async getGkHeaders(e,t,i){let r={"Content-Type":"application/json","Client-Name":this.clientName,"Client-Version":this.container.version,"User-Agent":this.userAgent,...i};return(e??=await this.getAccessToken())&&(r.Authorization=`Bearer ${e}`),(t??=(await this.container.subscription.getSubscription(!0)).activeOrganization?.id)&&(r["gk-org-id"]=t),r}async gkFetch(e,t,i){if(this.requestsAreBlocked)throw new c.Vp;let r=(0,$.dQ)();try{let s=await this.getGkHeaders(i?.token,i?.organizationId,t?.headers?{...t?.headers}:void 0);i?.query!=null&&(e instanceof URL?e.search=i.query:"string"==typeof e&&(e=`${e}?${i.query}`));let o=await this.fetch(e,{...t,headers:s},i);return o.ok?this.resetRequestExceptionCount():await this.handleGkUnsuccessfulResponse(o,r),o}catch(e){throw this.handleGkRequestError("gitkraken",e,r),e}}buildRequestRateLimitError(e,t){let i,r=t.response?.headers?.["x-ratelimit-reset"];return null!=r&&Number.isNaN(i=parseInt(r,10))&&(i=void 0),new c.HG(t,e,i)}async handleGkUnsuccessfulResponse(e,t){let i;switch(e.status){case 403:e.statusText.includes("rate limit")&&this.trackRequestException();return;case 429:this.trackRequestException();return;case 500:this.trackRequestException(),(0,iZ.AQ)("GitKraken failed to respond and might be experiencing issues. Please visit the [GitKraken status page](https://cloud.gitkrakenstatus.com) for more information.");return;case 502:i=await e.clone().text(),_.Vy.error(void 0,t,`GitKraken request failed: ${i} (${e.statusText})`),i.includes("timeout")&&(this.trackRequestException(),(0,iZ.Ng)());return;case 503:i=await e.clone().text(),_.Vy.error(void 0,t,`GitKraken request failed: ${i} (${e.statusText})`),this.trackRequestException(),(0,iZ.AQ)("GitKraken failed to respond and might be experiencing issues. Please visit the [GitKraken status page](https://cloud.gitkrakenstatus.com) for more information.");return}e.status>=400&&e.status<500||_.Vy.isDebugging&&(i??=await e.clone().text(),n.window.showErrorMessage(`DEBUGGING: GitKraken request failed: ${i} (${e.statusText})`))}handleGkRequestError(e,t,i){if(t instanceof c.AL)throw t;if("AbortError"===t.name)throw new c.AL(t);switch(t.status){case 404:throw new c.LN(t);case 410:throw new c.ly(t);case 422:throw new c.ts(t);case 401:throw new c.v3("gitkraken",c.R.Unauthorized,t);case 429:throw this.trackRequestException(),this.buildRequestRateLimitError(e,t);case 403:if(t.message.includes("rate limit"))throw this.trackRequestException(),this.buildRequestRateLimitError(e,t);throw new c.v3("gitkraken",c.R.Forbidden,t);case 500:_.Vy.error(t,i),null!=t.response&&(this.trackRequestException(),(0,iZ.AQ)("GitKraken failed to respond and might be experiencing issues. Please visit the [GitKraken status page](https://cloud.gitkrakenstatus.com) for more information."));return;case 502:_.Vy.error(t,i),t.message.includes("timeout")&&(this.trackRequestException(),(0,iZ.Ng)());break;case 503:_.Vy.error(t,i),this.trackRequestException(),(0,iZ.AQ)("GitKraken failed to respond and might be experiencing issues. Please visit the [GitKraken status page](https://cloud.gitkrakenstatus.com) for more information.");return;default:if(t.status>=400&&t.status<500)throw new c.tk(t)}_.Vy.isDebugging&&n.window.showErrorMessage(`DEBUGGING: GitKraken request failed: ${t.response?.errors?.[0]?.message??t.message}`)}async getAccessToken(){let e=await this.container.subscription.getAuthenticationSession();if(null!=e)return e.accessToken;throw new c.WT}requestExceptionCount=0;requestsAreBlocked=!1;resetRequestExceptionCount(){this.requestExceptionCount=0,this.requestsAreBlocked=!1}trackRequestException(){this.requestExceptionCount++,this.requestExceptionCount>=5&&!this.requestsAreBlocked&&((0,iZ.iJ)(),this.requestsAreBlocked=!0,this.requestExceptionCount=0)}};i0([(0,eG.B)()],ServerConnection.prototype,"userAgent",1),i0([(0,eG.B)()],ServerConnection.prototype,"clientName",1);var i1=i(5231),i2=i(9638),i4=i(5485),i5=i(6549),i7=i(4793);function i8(){return h.H.get("gitkraken.activeOrganizationId")??h.H.getAny("gitlens.gitKraken.activeOrganizationId")??void 0}async function i6(e){await h.H.updateEffective("gitkraken.activeOrganizationId",e)}function i3(e,t,i){let r,s,o,n={id:e.user.id,name:e.user.name,email:e.user.email,verified:"activated"===e.user.status,createdOn:e.user.createdDate},a=Object.entries(e.licenses.effectiveLicenses),l=Object.entries(e.licenses.paidLicenses);(l=l.filter(e=>"expired"!==e[1].latestStatus&&"cancelled"!==e[1].latestStatus)).length>1&&l.sort((e,t)=>(0,tN.Nm)(i9(t[0]))+rt(t[1].latestStatus)-((0,tN.Nm)(i9(e[0]))+rt(e[1].latestStatus))),a.length>1&&a.sort((e,t)=>(0,tN.Nm)(i9(t[0]))+rt(t[1].latestStatus)-((0,tN.Nm)(i9(e[0]))+rt(e[1].latestStatus)));let u=new Map,c=new Map;for(let e of a){let[,t]=e;null!=t.organizationId&&null==u.get(t.organizationId)&&u.set(t.organizationId,e)}for(let e of l){let[,t]=e;null!=t.organizationId&&null==c.get(t.organizationId)&&c.set(t.organizationId,e)}let h=t.filter(e=>!c.has(e.id)&&!u.has(e.id));null!=i&&(l=l.filter(([,e])=>e.organizationId===i||null==e.organizationId),a=a.filter(([,e])=>e.organizationId===i||null==e.organizationId));let d=l.length>0?l[0]:void 0,p=a.length>0?a[0]:void 0,g=null!=i?c.get(i)??d:d;if(null!=g){let[e,t]=g;r=(0,tN.le)(i9(e),re(e),t.reactivationCount??0,t.organizationId,new Date(t.latestStartDate),new Date(t.latestEndDate))}null==r&&(r=(0,tN.le)(tU.qn.CommunityWithAccount,!1,0,void 0,null!=e.user.firstGitLensCheckIn?new Date(e.user.firstGitLensCheckIn):null!=e.user.createdDate?new Date(e.user.createdDate):void 0,void 0,void 0,e.nextOptInDate));let m=null!=i?u.get(i)??p:p;if(null!=m){let[t,i]=m;s=(0,tN.le)(i9(t),re(t),i.reactivationCount??0,i.organizationId,new Date(i.latestStartDate),new Date(i.latestEndDate),"cancelled"===i.latestStatus,i.nextOptInDate??e.nextOptInDate)}return(null==s||(0,tN.x3)(r.id,s.id)>=0)&&(s={...r}),null!=i?o=t.find(e=>e.id===i):s?.organizationId!=null?o=t.find(e=>e.id===s.organizationId):h.length>0&&(o=h[0]),{plan:{actual:r,effective:s},account:n,activeOrganization:o}}function i9(e){switch(e){case"gitlens-pro":case"bundle-pro":case"gitkraken_v1-pro":case"gitkraken-v1-pro":default:return tU.qn.Pro;case"gitlens-teams":case"bundle-teams":case"gitkraken_v1-teams":case"gitkraken-v1-teams":return tU.qn.Business;case"gitlens-advanced":case"bundle-advanced":case"gitkraken_v1-advanced":case"gitkraken-v1-advanced":return tU.qn.Advanced;case"gitlens-hosted-enterprise":case"gitlens-self-hosted-enterprise":case"gitlens-standalone-enterprise":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":case"gitkraken_v1-hosted-enterprise":case"gitkraken_v1-self-hosted-enterprise":case"gitkraken_v1-standalone-enterprise":case"gitkraken-v1-hosted-enterprise":case"gitkraken-v1-self-hosted-enterprise":case"gitkraken-v1-standalone-enterprise":return tU.qn.Enterprise}}function re(e){switch(e){case"bundle-pro":case"bundle-advanced":case"bundle-teams":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":return!0;default:return!1}}function rt(e){switch(e){case"active":return 100;case"expired":case"cancelled":return -100;case"in_trial":case"trial":return 1;case"canceled":case"non_renewing":return 0;default:return -200}}var ri=Object.defineProperty,rr=Object.getOwnPropertyDescriptor,rs=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),ro=e=>{throw TypeError(e)},rn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rr(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ri(t,i,o),o},ra=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&ro("Object expected"),i&&(r=t[rs("asyncDispose")]),void 0===r&&(r=t[rs("dispose")],i&&(s=r)),"function"!=typeof r&&ro("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},rl=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let SubscriptionService=class SubscriptionService{constructor(e,t,i){this.container=e,this.connection=t,this._disposable=n.Disposable.from(this._onDidChange,this._onDidChangeFeaturePreview,this._onDidCheckIn,(0,iN.Oo)(e.onReady)(this.onReady,this),this.container.accountAuthentication.onDidChangeSessions(e=>setTimeout(()=>this.onAuthenticationChanged(e),0),this),h.H.onDidChange(e=>{h.H.changed(e,"plusFeatures")&&this.updateContext()}),e.uri.onDidReceiveSubscriptionUpdatedUri(()=>this.checkUpdatedSubscription(void 0),this),e.uri.onDidReceiveLoginUri(this.onLoginUri,this));let r=this.getStoredSubscription();this._getCheckInData=()=>Promise.resolve(void 0),null!=r&&((0,i5.ib)(i,"< 14.0")&&(r.previewTrial=void 0),r.account?.id!=null&&(this._getCheckInData=()=>this.loadStoredCheckInData(r.account.id))),this.changeSubscription(r,void 0,{silent:!0}),setTimeout(()=>void this.ensureSession(!1,void 0),1e4)}_onDidChange=new n.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeFeaturePreview=new n.EventEmitter;get onDidChangeFeaturePreview(){return this._onDidChangeFeaturePreview.event}_onDidCheckIn=new n.EventEmitter;get onDidCheckIn(){return this._onDidCheckIn.event}_disposable;_subscription;_getCheckInData;_statusBarSubscription;_validationTimer;dispose(){this._statusBarSubscription?.dispose(),this._disposable.dispose()}async onAuthenticationChanged(e){let t=this._session;if(null==t&&null!=this._sessionPromise&&(t=await this._sessionPromise),null!=t&&e.removed?.some(e=>e.id===t.id)){this._session=void 0,this._sessionPromise=void 0,this.logout(void 0);return}let i=e.added?.[0]??e.changed?.[0];null!=i&&(i.id!==t?.id||i.accessToken!==t?.accessToken)&&(this._session=t,this.validate({force:!0}))}_etag=0;get etag(){return this._etag}onReady(){this._disposable=n.Disposable.from(this._disposable,this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),...this.registerCommands()),this.updateContext()}onRepositoriesChanged(e){this.updateContext()}registerCommands(){return[(0,tW.Lb)("gitlens.plus.login",e=>this.loginOrSignUp(!1,e)),(0,tW.Lb)("gitlens.plus.signUp",e=>this.loginOrSignUp(!0,e)),(0,tW.Lb)("gitlens.plus.logout",e=>this.logout(e)),(0,tW.Lb)("gitlens.plus.referFriend",e=>this.referFriend(e)),(0,tW.Lb)("gitlens.gk.switchOrganization",e=>this.switchOrganization(e)),(0,tW.Lb)("gitlens.plus.manage",e=>this.manageAccount(e)),(0,tW.Lb)("gitlens.plus.showPlans",e=>this.showPlans(e)),(0,tW.Lb)("gitlens.plus.startPreviewTrial",e=>this.startPreviewTrial(e)),(0,tW.Lb)("gitlens.plus.reactivateProTrial",e=>this.reactivateProTrial(e)),(0,tW.Lb)("gitlens.plus.resendVerification",e=>this.resendVerification(e)),(0,tW.Lb)("gitlens.plus.upgrade",e=>this.upgrade(e?.plan,e?{source:e.source,detail:e.detail}:void 0)),(0,tW.Lb)("gitlens.plus.hide",e=>this.setProFeaturesVisibility(!1,e)),(0,tW.Lb)("gitlens.plus.restore",e=>this.setProFeaturesVisibility(!0,e)),(0,tW.Lb)("gitlens.plus.validate",e=>this.validate({force:!0},e)),(0,tW.Lb)("gitlens.plus.continueFeaturePreview",({feature:e})=>this.continueFeaturePreview(e))]}async getAuthenticationSession(e=!1){return this.ensureSession(e,void 0)}async getSubscription(e=!1){let t=this.ensureSession(!1,void 0);return e||await t,this._subscription}async continueFeaturePreview(e){let t=this.getStoredFeaturePreview(e),i=(0,tq.Zd)(t);if("active"===i)return;if("expired"===i)return void n.window.showInformationMessage(`Your ${tU.Kt}-day preview of the ${(0,tq.V)(e)} has expired.`);let r=new Date,s=[...t.usages,{startedOn:r.toISOString(),expiresOn:(0,th.Tl)(r,{days:tU.tY}).toISOString()}];if(await this.storeFeaturePreview(e,s),this._onDidChangeFeaturePreview.fire({feature:e,usages:s}),this.container.telemetry.enabled){let t={action:`start-preview-trial:${e}`,...ru({feature:e,usages:s})};this.container.telemetry.sendEvent("subscription/action",t,{source:e})}}getFeaturePreview(e){return this.getStoredFeaturePreview(e)}getFeaturePreviews(){return tq.g5.map(e=>this.getStoredFeaturePreview(e))}async learnAboutPro(e,t){switch(null!=t&&(e.detail={..."string"==typeof e.detail?{action:e.detail}:e.detail,...(0,i2.Bq)(t,"original")}),(await this.getSubscription()).state){case tU.zZ.VerificationRequired:case tU.zZ.Community:(0,tW.RS)("gitlens.openWalkthrough",{step:"get-started-community",source:e});break;case tU.zZ.ProTrial:case tU.zZ.ProPreview:(0,tW.RS)("gitlens.openWalkthrough",{step:"welcome-in-trial",source:e});break;case tU.zZ.ProTrialReactivationEligible:case tU.zZ.ProTrialExpired:case tU.zZ.ProPreviewExpired:(0,tW.RS)("gitlens.openWalkthrough",{step:"welcome-in-trial-expired",source:e});break;case tU.zZ.Paid:(0,tW.RS)("gitlens.openWalkthrough",{step:"welcome-paid",source:e})}}async showPlanMessage(e){if(!await this.ensureSession(!1,e))return;let{account:t,plan:{actual:i,effective:r}}=this._subscription;if(t?.verified===!1){let t={title:"Resend Email"};await n.window.showInformationMessage("Welcome to GitLens",{modal:!0,detail:"Verify the email we just sent you to start your Pro trial."},t,{title:"Continue",isCloseAffordance:!0})===t&&this.resendVerification(e)}else if((0,tN.A_)(this._subscription)){let t={title:"Learn More"};await n.window.showInformationMessage(`You are now on ${i.name} and have full access to all GitLens Pro features.`,{modal:!0},{title:"Continue",isCloseAffordance:!0},t)===t&&this.learnAboutPro({source:"prompt",detail:{action:"upgraded"}},e)}else if((0,tN.Mt)(this._subscription)){let t=(0,tN.NK)(this._subscription,"days")??0,i={title:"Learn More"};await n.window.showInformationMessage(`Welcome to your ${r.name} Trial.

You now have full access to all GitLens Pro features for ${t<1?"<1 more day":(0,eO.td)("day",t,{infix:" more "})}.`,{modal:!0,detail:"Your trial also includes access to the GitKraken DevEx platform, unleashing powerful Git visualization & productivity capabilities everywhere you work: IDE, desktop, browser, and terminal."},{title:"Continue",isCloseAffordance:!0},i)===i&&this.learnAboutPro({source:"prompt",detail:{action:"trial-started"}},e)}else{let t={title:"Upgrade to Pro"},r={title:"Community vs. Pro"},s=await n.window.showInformationMessage(`You are now on ${i.name}.`,{modal:!0,detail:"You only have access to Pro features on publicly-hosted repos. For full access to all Pro features, please upgrade to GitLens Pro."},t,r,{title:"Continue",isCloseAffordance:!0});s===t?this.upgrade(tU.qn.Pro,e):s===r&&this.learnAboutPro({source:"prompt",detail:{action:"trial-ended"}},e)}}async loginOrSignUp(e,t){if(!await (0,i7.ZQ)())return!1;this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:e?"sign-up":"sign-in"},t);let i=rh(t);return this.loginCore({signUp:e,source:t,context:i})}async loginWithCode(e,t){return!!await (0,i7.ZQ)()&&(this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"sign-in"},t),null!=await this.ensureSession(!1,t)&&await this.logout(t),this.loginCore({signIn:e,source:t}))}async loginCore(e){await this.container.accountAuthentication.abort(),this.showAccountView();let t=!!await this.ensureSession(!0,e?.source,{signIn:e?.signIn,signUp:e?.signUp,context:e?.context});return t&&this.showPlanMessage(e?.source),t}async logout(e){return this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"sign-out"},e),this.logoutCore(e)}async logoutCore(e){this.connection.resetRequestExceptionCount(),this._lastValidatedDate=void 0,null!=this._validationTimer&&(clearInterval(this._validationTimer),this._validationTimer=void 0),await this.container.accountAuthentication.abort(),this._sessionPromise=void 0,null!=this._session?(this.container.accountAuthentication.removeSession(this._session.id),this._session=void 0):this.container.accountAuthentication.removeSessionsByScopes(iU),this.changeSubscription((0,tN.RW)(this._subscription),e)}async manageAccount(e){let t=(0,$.dQ)();this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"manage"},e);try{let e=await this.container.accountAuthentication.getExchangeToken();return await (0,iP.CZ)(this.container.urls.getGkDevUrl("account",`token=${e}`))}catch(e){return _.Vy.error(e,t),(0,iP.CZ)(this.container.urls.getGkDevUrl("account"))}}async manageSubscription(e){return this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"manage-subscription"},e),(0,iP.CZ)(this.container.urls.getGkDevUrl("subscription/edit"))}async reactivateProTrial(e){let t=(0,$.dQ)();if(!await (0,i7.ZQ)())return;this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"reactivate"},e);let i=await this.ensureSession(!1,e);if(null!=i){try{let e=await this.connection.fetchGkApi("user/reactivate-trial",{method:"POST",body:JSON.stringify({client:"gitlens"})});if(!e.ok){if(409===e.status)return void n.window.showErrorMessage("You are not eligible to reactivate your Pro trial. If you feel that is an error, please contact support.","OK");n.window.showErrorMessage(`Unable to reactivate trial: (${e.status}) ${e.statusText}. Please try again. If this issue persists, please contact support.`,"OK");return}}catch(e){if(e instanceof c.Vp)return void n.window.showErrorMessage("Unable to reactivate trial: Too many failed requests. Please reload the window and try again.","OK");n.window.showErrorMessage("Unable to reactivate trial. Please try again. If this issue persists, please contact support.","OK"),_.Vy.error(e,t);return}try{if(await this.checkInAndValidate(i,e,{force:!0}),(0,tN.Mt)(this._subscription)){let e=(0,tN.NK)(this._subscription,"days"),t={title:"See What's New"};await n.window.showInformationMessage(`Your GitLens Pro trial has been reactivated! Experience all the new Pro features for another ${(0,eO.td)("day",e??0)}.`,{modal:!0},{title:"OK",isCloseAffordance:!0},t)===t&&(0,iP.CZ)(l.DS.releaseNotes)}}catch(e){_.Vy.error(e,t)}}}async referFriend(e){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"refer-friend"},e),await (0,iP.CZ)(this.container.urls.getGkDevUrl(void 0,"referral_portal=true&source=gitlens"))}async resendVerification(e){if(this._subscription.account?.verified)return!0;let t=(0,$.dQ)();this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"resend-verification"},e),this.showAccountView(!0);let i=await this.ensureSession(!1,e);if(null==i)return!1;try{let r=await this.connection.fetchGkApi("resend-email",{method:"POST",body:JSON.stringify({id:i.account.id})},{token:i.accessToken});if(!r.ok)return _.Vy.error("",t,`Unable to resend verification email; status=(${r.status}): ${r.statusText}`),n.window.showErrorMessage(`Unable to resend verification email; Status: ${r.statusText}`,"OK"),!1;let s={title:"Recheck"};if(await n.window.showInformationMessage("Once you have verified your email address, click 'Recheck'.",s,{title:"Cancel"})===s)return await this.validate({force:!0},e),!0}catch(e){_.Vy.error(e,t),n.window.showErrorMessage("Unable to resend verification email","OK")}return!1}setProFeaturesVisibility(e,t){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"visibility",visible:e},t),h.H.updateEffective("plusFeatures.enabled",e)}async showAccountView(e=!1){(!e||h.H.get("plusFeatures.enabled",void 0,!0))&&(this.container.views.home.visible||await (0,tW.RS)("gitlens.showAccountView"))}showPlans(e){this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"pricing"},e),(0,iP.CZ)(l.DS.pricing)}async startPreviewTrial(e){if(!await (0,i7.ZQ)())return;this.container.telemetry.enabled&&this.container.telemetry.sendEvent("subscription/action",{action:"start-preview-trial"},e);let{plan:t,previewTrial:i}=this._subscription;if(null!=i){if(this.showAccountView(),t.effective.id===tU.qn.Community){let t={title:"Try GitLens Pro"},i={title:"Sign In"},r=await n.window.showInformationMessage(`Do you want to start your free ${tU.kj}-day Pro trial for full access to all GitLens Pro features?`,{modal:!0},t,i,{title:"Cancel",isCloseAffordance:!0});(r===t||r===i)&&this.loginOrSignUp(r===t,e)}return}if((0,tN.yV)(this._subscription))return;let r=tU.Ep,s=(0,tN.KA)(r,this._subscription);this.changeSubscription(s,e),setTimeout(async()=>{let t={title:"Learn More"};await n.window.showInformationMessage(`You can now preview local Pro features for ${r<1?"1 day":(0,eO.td)("day",r)}, or for full access to all GitLens Pro features, [start your free ${tU.kj}-day Pro trial](${(0,i1.U)("gitlens.plus.signUp",e)} "Try GitLens Pro") \u2014 no credit card required.`,{title:"Continue"},t)===t&&this.learnAboutPro({source:"notification",detail:{action:"preview-started"}},e)},1)}async upgrade(e,t){var i=[];try{let r=(0,$.dQ)();if(!await (0,i7.ZQ)())return!1;e??=tU.qn.Pro;let s=!1,o=await this.container.productConfig.getApplicablePromo(this._subscription.state),a=ra(i,this.container.telemetry.enabled?(0,i4.Nx)(()=>{this.container.telemetry.sendEvent("subscription/action",{action:"upgrade",aborted:s,"promo.key":o?.key,"promo.code":o?.code},t)},{once:!0}):void 0),l=null!=this._subscription.account;if(l)try{let i=await this.ensureSession(!1,t);if(null!=i&&await this.checkUpdatedSubscription(t)===tU.zZ.Paid&&(0,tN.x3)(this._subscription.plan.effective.id,e)>=0)return!0}catch{}let u=new URLSearchParams;u.set("source","gitlens"),u.set("product","gitlens"),u.set("planType",(0,tN.Ld)(e)),o?.code!=null&&u.set("promoCode",o.code);let c=this._subscription.activeOrganization?.id;null!=c&&u.set("org",c);let h=rh(t);null!=h&&u.set("context",h);try{if(l)try{let e=await this.container.accountAuthentication.getExchangeToken(tN.Kg);u.set("token",e)}catch(e){_.Vy.error(e,r)}if(!u.has("token")){let e=await n.env.asExternalUri(n.Uri.parse(`${n.env.uriScheme}://${this.container.context.extension.id}/${i_}`));u.set("success_uri",e.toString(!0))}}catch(e){_.Vy.error(e,r)}if(s=!await (0,iP.CZ)(this.container.urls.getGkDevUrl("purchase/checkout",u)))return!1;a?.dispose();let d=[new Promise(e=>setTimeout(()=>e(!1),3e5))];return l?d.push(new Promise(e=>(0,tt.s)(n.window.onDidChangeWindowState,2)(t=>{t.focused&&e(!0)})),new Promise(e=>(0,iN.Oo)(this.container.uri.onDidReceiveSubscriptionUpdatedUri)(()=>e(!1)))):d.push(new Promise(e=>(0,iN.Oo)(this.container.uri.onDidReceiveLoginUri)(()=>e(!1)))),await Promise.race(d)&&this.checkUpdatedSubscription(t),!0}catch(e){var r=e,s=!0}finally{rl(i,r,s)}}async validate(e,t){let i=(0,$.dQ)(),r=await this.ensureSession(!1,t);if(null==r)return void this.changeSubscription(this._subscription,t);try{await this.checkInAndValidate(r,t,e)}catch(e){_.Vy.error(e,i)}}_lastValidatedDate;async checkInAndValidate(e,t,i){let r=(0,$.dQ)();if(!i?.force&&null!=this._lastValidatedDate&&Date.now()-this._lastValidatedDate.getTime()<432e5&&!(0,tN.Jc)(this._subscription))return void(0,$.TT)(r,` (${(0,th.PI)(this._lastValidatedDate.getTime(),!0)})...`,"skipped");let s=this.checkInAndValidateCore(e,t,i?.organizationId);if(!i?.showSlowProgress)return s;let o=await (0,E.wW)(s,void 0,3e3);return o.paused?n.window.withProgress({location:n.ProgressLocation.Notification,title:"Validating your account..."},()=>o.value):o.value}async checkInAndValidateCore(e,t,i){let r=(0,$.dQ)();this._lastValidatedDate=void 0;try{let r={id:e.account.id,platform:(0,t$.uo)(),gitlensVersion:this.container.version,machineId:n.env.machineId,sessionId:n.env.sessionId,vscodeEdition:n.env.appName,vscodeHost:n.env.appHost,vscodeVersion:n.version,previewStartedOn:this._subscription.previewTrial?.startedOn,previewExpiresOn:this._subscription.previewTrial?.expiresOn},s=await this.connection.fetchGkApi("gitlens/checkin",{method:"POST",body:JSON.stringify(r)},{token:e.accessToken,organizationId:i});if(!s.ok)throw this._getCheckInData=()=>Promise.resolve(void 0),new c.pf("Unable to validate account",void 0,s.status,s.statusText);this._onDidCheckIn.fire();let o=await s.json();return this._getCheckInData=()=>Promise.resolve(o),this.storeCheckInData(o),await this.validateAndUpdateSubscriptions(o,e,t),o}catch(e){if(this._getCheckInData=()=>Promise.resolve(void 0),_.Vy.error(e,r),this.changeSubscription(this._subscription,t),e instanceof c.pf)throw e;throw new c.pf("Unable to validate account",e)}finally{this.startDailyValidationTimer()}}startDailyValidationTimer(){null!=this._validationTimer&&clearInterval(this._validationTimer),this._validationTimer=setInterval(()=>{(null==this._lastValidatedDate||this._lastValidatedDate.getDate()!==new Date().getDate())&&this.ensureSession(!1,void 0,{force:!0})},216e5)}storeCheckInData(e){e.user?.id!=null&&this.container.storage.store(`gk:${e.user.id}:checkin`,{v:1,timestamp:Date.now(),data:e}).catch()}async loadStoredCheckInData(e){let t=(0,$.dQ)(),i=this.container.storage.get(`gk:${e}:checkin`);if(i?.timestamp==null||Date.now()-i.timestamp>864e5){let e=await this.getAuthenticationSession(!1);if(null==e)return;try{return await this.checkInAndValidate(e,void 0,{force:!0})}catch(e){_.Vy.error(e,t);return}}return i?.data}async validateAndUpdateSubscriptions(e,t,i){let r,s=(0,$.dQ)();try{r=await this.container.organizations.getOrganizations({force:!0,accessToken:t.accessToken,userId:t.account.id})??[]}catch(e){_.Vy.error(e,s),r=[]}let o=i8();""===o?o=void 0:null==o||r.some(e=>e.id===o)||(o=void 0,i6(void 0));let n=i3(e,r,o);this._lastValidatedDate=new Date,this.changeSubscription({...this._subscription,...n},i,{store:!0})}_sessionPromise;_session;async ensureSession(e,t,i){return(null!=this._sessionPromise&&await this._sessionPromise,i?.force||null==this._session)?null!==this._session||e?(void 0===this._sessionPromise&&(this._sessionPromise=this.getOrCreateSession(e,t,{signUp:i?.signUp,signIn:i?.signIn,context:i?.context}).then(e=>(this._session=e,this._sessionPromise=void 0,this._session),()=>(this._session=null,this._sessionPromise=void 0,this._session))),await this._sessionPromise??void 0):void 0:this._session}async getOrCreateSession(e,t,i){let r,s=(0,$.dQ)();try{null!=i&&e&&this.container.accountAuthentication.setOptionsForScopes(iU,i),r=await this.container.accountAuthentication.getOrCreateSession(iU,e)}catch(o){if(r=null,null!=i&&e&&this.container.accountAuthentication.clearOptionsForScopes(iU),o instanceof Error&&o.message.includes("User did not consent"))return(0,$.TT)(s," • User declined authentication"),await this.logoutCore(t),null;_.Vy.error(o,s)}if(null==r)return(0,$.TT)(s," • No valid session was found"),await this.logoutCore(t),r??null;try{await this.checkInAndValidate(r,t,{showSlowProgress:e,force:e})}catch(i){if(_.Vy.error(i,s),this.container.telemetry.sendEvent("account/validation/failed",{"account.id":r.account.id,exception:String(i),code:i.original?.code,statusCode:i.statusCode}),(0,$.TT)(s,` \u2022 Account validation failed (${i.statusCode??i.original?.code})`,"FAILED"),i instanceof c.pf){let s=r.account.label;if(i.original?.code!=="ENOTFOUND"&&null!=i.statusCode&&i.statusCode<500&&i.statusCode>=400){if(r=null,await this.logoutCore(t),e){let e=401===i.statusCode;queueMicrotask(async()=>{let t={title:"Retry Sign In"};await n.window.showErrorMessage(`Unable to sign in to your (${s}) account. Please try again. If this issue persists, please contact support.${e?"":` Error=${i.message}`}`,t)===t&&this.loginOrSignUp(!1,{source:"subscription",detail:{error:"validation-failed","error.message":i.message}})})}}else r=r??null}}return this.connection.resetRequestExceptionCount(),r}changeSubscription(e,t,i){null==e&&(e={plan:{actual:(0,tN.le)(tU.qn.Community,!1,0,void 0),effective:(0,tN.le)(tU.qn.Community,!1,0,void 0)},account:void 0,state:tU.zZ.Community}),(0,tN.Jc)(e)&&(e={...e,plan:{...e.plan,effective:e.plan.actual}}),!(0,tN.A_)(e)&&null!=e.previewTrial&&((0,tN.Cj)(e.previewTrial.expiresOn)??0)>0&&(e={...e,plan:{...e.plan,effective:(0,tN.le)(tU.qn.Pro,!1,0,void 0,new Date(e.previewTrial.startedOn),new Date(e.previewTrial.expiresOn))}}),e.state=(0,tN.UJ)(e),(0,tN.JP)(e),(0,A.o)("gitlens:promo",void 0);let r=this.container.productConfig.getApplicablePromo(e.state).catch(()=>void 0);r.then(e=>void(0,A.o)("gitlens:promo",e?.key));let s=this._subscription,o=null!=s&&JSON.stringify(s)===JSON.stringify(e);if(o){i?.store&&this.storeSubscription(e).catch();return}queueMicrotask(async()=>{let i=rc(e,void 0,this.getFeaturePreviews(),await r);this.container.telemetry.setGlobalAttributes(i),i={...i,...!o?rc(s,"previous"):{}},this.container.telemetry.sendEvent(null==s?"subscription":"subscription/changed",i,t)}),i?.store!==!1&&this.storeSubscription(e).catch(),this._subscription=e,this._etag=Date.now(),i?.silent||(this.updateContext(),null!=s&&this._onDidChange.fire({current:e,previous:s,etag:this._etag}))}getStoredSubscription(){let e,t,i=this.container.storage.get("premium:subscription");return i?.data!=null?({lastValidatedAt:e,...t}=i.data,this._lastValidatedDate=null!=e?new Date(e):void 0):t=void 0,null!=t&&(t.plan.actual.name=(0,tN.SB)(t.plan.actual.id),t.plan.effective.name=(0,tN.SB)(t.plan.effective.id),(t.previewTrial?.expiresOn==null||new Date(t.previewTrial.expiresOn)>=new Date)&&(t.previewTrial={startedOn:t.previewTrial?.startedOn??new Date(0).toISOString(),...t.previewTrial,expiresOn:new Date(0).toISOString()})),t}async storeSubscription(e){return this.container.storage.store("premium:subscription",{v:1,data:{...e,lastValidatedAt:this._lastValidatedDate?.getTime()}})}getStoredFeaturePreview(e){return{feature:e,usages:this.container.storage.get(`plus:preview:${e}:usages`,[])}}storeFeaturePreview(e,t){return this.container.storage.store(`plus:preview:${e}:usages`,t)}_cancellationSource;_updateAccessContextDebounced;updateContext(){this._updateAccessContextDebounced?.cancel(),null==this._updateAccessContextDebounced&&(this._updateAccessContextDebounced=(0,B.s)(this.updateAccessContext.bind(this),500)),null!=this._cancellationSource&&this._cancellationSource.cancel(),this._cancellationSource=new n.CancellationTokenSource,this._updateAccessContextDebounced(this._cancellationSource.token),this.updateStatusBar();let{plan:{actual:e},state:t}=this._subscription;(0,A.o)("gitlens:plus",e.id!==tU.qn.Community?e.id:void 0),(0,A.o)("gitlens:plus:state",t)}async updateAccessContext(e){let t,i=!1;if(0!==this.container.git.repositoryCount&&({allowed:i}=await this.container.git.access(),e.isCancellationRequested))return;let r=h.H.get("plusFeatures.enabled")??!0;if(!r&&"mixed"===i)for(let i of(t=[],this.container.git.repositories)){if(i.closed)continue;let r=await this.container.git.access(void 0,i.uri);if(e.isCancellationRequested)return;r.allowed||t.push(i.uri.toString())}(0,A.o)("gitlens:plus:enabled",!!i||r),(0,A.o)("gitlens:plus:required",!1===i),(0,A.o)("gitlens:plus:disallowedRepos",t)}updateStatusBar(){let{account:e,plan:{effective:t}}=this._subscription;if(t.id===tU.qn.Community){this._statusBarSubscription?.dispose(),this._statusBarSubscription=void 0;return}let i=(0,tN.Mt)(this._subscription),r=this._subscription.state===tU.zZ.ProTrialReactivationEligible;if(!(i||r)&&e?.verified!==!1){this._statusBarSubscription?.dispose(),this._statusBarSubscription=void 0;return}if(null==this._statusBarSubscription&&(this._statusBarSubscription=n.window.createStatusBarItem("gitlens.plus.subscription",n.StatusBarAlignment.Right)),this._statusBarSubscription.name="GitLens Pro",this._statusBarSubscription.text="$(gitlens-gitlens)",this._statusBarSubscription.command="gitlens.showAccountView",this._statusBarSubscription.backgroundColor=void 0,e?.verified===!1)this._statusBarSubscription.text=`$(gitlens-gitlens)\xa0\xA0$(warning)`,this._statusBarSubscription.backgroundColor=new n.ThemeColor("statusBarItem.warningBackground"),this._statusBarSubscription.tooltip=new n.MarkdownString(i?`**GitLens Pro \u2014 verify your email**

You must verify your email before you can start your **${t.name}** trial.`:`**GitLens Pro \u2014 verify your email**

You must verify your email before you can use Pro features on privately-hosted repos.`,!0);else{let e;if(r)e=`**GitLens Pro \u2014 reactivate your Pro trial**

Experience full access to all the [new Pro features](${l.DS.releaseNotes}) \u2014 free for another ${(0,eO.td)("day",tU.kj)}.`;else if(i){let t=(0,tN.NK)(this._subscription,"days")??0;e=`**GitLens Pro \u2014 trial**

You now have full access to all GitLens Pro features for ${(0,eO.td)("day",t,{infix:" more "})}.`}this._statusBarSubscription.tooltip=new n.MarkdownString(e,!0)}this._statusBarSubscription.show()}async switchOrganization(e){let t,i=(0,$.dQ)();if(null==this._session)return;try{t=await this.container.organizations.getOrganizations()}catch(e){_.Vy.error(e,i);return}if(null==t||0===t.length)return;let r=t.map(e=>({label:e.name,org:e})),s=await n.window.showQuickPick(r,{title:"Switch Organization",placeHolder:"Choose an active organization for your account"}),o=this._subscription?.activeOrganization;if(s?.org==null||null!=o&&s.org.id===o.id)return;await this.checkInAndValidate(this._session,e,{force:!0,organizationId:s.org.id});let a=await this._getCheckInData();if(null==a)return;let l=i3(a,t,s.org.id);i8()!==s.org.id&&await i6(s.org.id),this.changeSubscription({...this._subscription,...l},e,{store:!0})}onLoginUri(e){let t=(0,$.dQ)(),i=new URLSearchParams(e.query),r=i.get("code"),s=i.get("state"),o=i.get("context"),a="sign in to GitKraken";if("start_trial"===o&&(a="start a Pro trial"),null==r){_.Vy.error(void 0,t,`No code provided. Link: ${e.toString(!0)}`),n.window.showErrorMessage(`Unable to ${a} with that link. Please try clicking the link again. If this issue persists, please contact support.`);return}this.loginWithCode({code:r,state:s??void 0},{source:"deeplink"})}async checkUpdatedSubscription(e){if(null==this._session)return;let t=this._subscription.state;return await this.checkInAndValidate(this._session,e,{force:!0}),t!==this._subscription.state&&this.showPlanMessage({source:"subscription"}),this._subscription.state}};function ru(e){let t=(0,tq.Zd)(e);return"eligible"===t?{feature:e.feature,status:t}:{feature:e.feature,status:t,day:e.usages.length,startedOn:e.usages[0].startedOn,...Object.fromEntries(e.usages.map((e,t)=>[`day.${t+1}.startedOn`,e.startedOn]))}}function rc(e,t,i,r){if(null==e)return{};let s=e.state;(s===tU.zZ.ProPreview||s===tU.zZ.ProPreviewExpired)&&(s=tU.zZ.Community);let o=null!=i?function(e){let t=Object.create(null);for(let i of e){let{feature:e,...r}=ru(i);Object.assign(t,(0,i2.Bq)(r,`subscription.featurePreviews.${i.feature}`))}return t}(i):{};return{...(0,i2.Bq)(e.account,`${t?`${t}.`:""}account`,{joinArrays:!0,skipPaths:["name","email"]}),...(0,i2.Bq)(e.plan,`${t?`${t}.`:""}subscription`,{skipPaths:["actual.name","effective.name"]}),...(0,i2.Bq)(e.previewTrial,`${t?`${t}.`:""}subscription.previewTrial`,{skipPaths:["actual.name","effective.name"]}),"subscription.promo.key":r?.key,"subscription.promo.code":r?.code,"subscription.state":s,"subscription.stateString":(0,tN.wC)(s),...o}}function rh(e){switch(e?.source){case"graph":return"graph";case"launchpad":return"launchpad";case"timeline":return"visual_file_history";case"quick-wizard":if(null!=e.detail&&"string"!=typeof e.detail&&"action"in e.detail)switch(e.detail.action){case"worktree":return"worktrees";case"launchpad":return"launchpad"}break;case"worktrees":return"worktrees"}}rn([(0,D.G)(),(0,d.Rm)()],SubscriptionService.prototype,"continueFeaturePreview",1),rn([(0,d.Yz)()],SubscriptionService.prototype,"learnAboutPro",1),rn([(0,d.Rm)()],SubscriptionService.prototype,"loginOrSignUp",1),rn([(0,d.Rm)()],SubscriptionService.prototype,"logout",1),rn([(0,d.Rm)()],SubscriptionService.prototype,"manageAccount",1),rn([(0,d.Rm)()],SubscriptionService.prototype,"manageSubscription",1),rn([(0,D.G)(()=>""),(0,d.Rm)()],SubscriptionService.prototype,"reactivateProTrial",1),rn([(0,d.Rm)()],SubscriptionService.prototype,"referFriend",1),rn([(0,D.G)(()=>""),(0,d.Rm)()],SubscriptionService.prototype,"resendVerification",1),rn([(0,d.Rm)()],SubscriptionService.prototype,"showAccountView",1),rn([(0,d.Rm)()],SubscriptionService.prototype,"showPlans",1),rn([(0,D.G)(()=>""),(0,d.Rm)()],SubscriptionService.prototype,"startPreviewTrial",1),rn([(0,d.Rm)()],SubscriptionService.prototype,"upgrade",1),rn([(0,D.G)(e=>`${e?.force??!1}`),(0,d.Rm)()],SubscriptionService.prototype,"validate",1),rn([(0,d.Yz)({args:{0:e=>e?.account?.label}})],SubscriptionService.prototype,"checkInAndValidate",1),rn([(0,D.G)(e=>e.account.id),(0,d.Yz)({args:{0:e=>e?.account?.label}})],SubscriptionService.prototype,"checkInAndValidateCore",1),rn([(0,d.Yz)()],SubscriptionService.prototype,"validateAndUpdateSubscriptions",1),rn([(0,D.G)(),(0,d.Yz)()],SubscriptionService.prototype,"ensureSession",1),rn([(0,d.Yz)()],SubscriptionService.prototype,"getOrCreateSession",1),rn([(0,d.Yz)()],SubscriptionService.prototype,"changeSubscription",1);var rd=Object.defineProperty,rp=Object.getOwnPropertyDescriptor,rg=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rp(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rd(t,i,o),o};let UrlsProvider=class UrlsProvider{constructor(e){this.env=e}get baseGkApiUri(){return"staging"===this.env?n.Uri.parse("https://staging-api.gitkraken.dev"):"dev"===this.env?n.Uri.parse("https://dev-api.gitkraken.dev"):n.Uri.parse("https://api.gitkraken.dev")}get baseGkDevUri(){return"staging"===this.env?n.Uri.parse("https://staging.gitkraken.dev"):"dev"===this.env?n.Uri.parse("https://dev.gitkraken.dev"):n.Uri.parse("https://gitkraken.dev")}getGkAIApiUrl(...e){return n.Uri.joinPath(this.baseGkApiUri,"v1","ai-tasks",...e).toString()}getGkApiUrl(...e){return n.Uri.joinPath(this.baseGkApiUri,...e).toString()}getGkConfigUrl(...e){return n.Uri.joinPath(n.Uri.parse("https://configs.gitkraken.dev"),"gitlens",...e).toString()}getGkDevUrl(e,t){"string"==typeof(e??=[])&&(e=[e]);let i=e.length?n.Uri.joinPath(this.baseGkDevUri,...e):this.baseGkDevUri;return"string"==typeof(t??="source=gitlens")?(t.includes("source=gitlens")||(t=`source=gitlens&${t}`),i=i.with({query:t})):(t.has("source")||t.set("source","gitlens"),i=i.with({query:t.toString()})),i.toString(!0)}};rg([(0,eG.B)()],UrlsProvider.prototype,"baseGkApiUri",1),rg([(0,eG.B)()],UrlsProvider.prototype,"baseGkDevUri",1);let GraphStatusBarController=class GraphStatusBarController{_disposable;_statusBarItem;constructor(e){this._disposable=n.Disposable.from(h.H.onDidChange(this.onConfigurationChanged,this),e.subscription.onDidChange(this.onSubscriptionChanged,this),(0,iN.Oo)(e.onReady)(()=>queueMicrotask(()=>this.updateStatusBar())),(0,A.wt)(e=>{("gitlens:enabled"===e||"gitlens:plus:enabled"===e)&&this.updateStatusBar()}),{dispose:()=>this._statusBarItem?.dispose()})}dispose(){this._disposable.dispose()}onConfigurationChanged(e){(h.H.changed(e,"graph.statusBar.enabled")||h.H.changed(e,"plusFeatures.enabled"))&&this.updateStatusBar()}onSubscriptionChanged(e){this.updateStatusBar()}updateStatusBar(){h.H.get("graph.statusBar.enabled")&&(0,A.SD)("gitlens:enabled")&&(0,i7.LK)()?(null==this._statusBarItem&&(this._statusBarItem=n.window.createStatusBarItem("gitlens.graph",n.StatusBarAlignment.Left,9998),this._statusBarItem.name="GitLens Commit Graph",this._statusBarItem.command="gitlens.showGraph",this._statusBarItem.text="$(gitlens-graph)",this._statusBarItem.tooltip=new n.MarkdownString("Visualize commits on the Commit Graph"),this._statusBarItem.accessibilityInformation={label:"Show the GitLens Commit Graph"}),this._statusBarItem.show()):(this._statusBarItem?.dispose(),this._statusBarItem=void 0)}};var rm=i(4269);let ConfiguredIntegrationService=class ConfiguredIntegrationService{constructor(e){this.container=e}_onDidChange=new n.EventEmitter;get onDidChange(){return this._onDidChange.event}_configured;dispose(){this._onDidChange.dispose()}get configured(){if(null==this._configured)for(let[e,t]of(this._configured=new Map,Object.entries(this.container.storage.get("integrations:configured")??{}))){if(null==t)continue;let i=t.map(e=>({...e,expiresAt:e.expiresAt?new Date(e.expiresAt):void 0}));this._configured.set(e,i)}return this._configured}async getConfigured(e){let t=[],i=e?.id!=null?this.configured.get(e.id):[...(0,X.Bq)(this.configured.values())];if(null!=i&&(e?.domain!=null||e?.type!=null))for(let r of i)(e?.domain==null||r.domain===e.domain)&&(e?.type!=="cloud"||r.cloud)&&(e?.type==="local"&&r.cloud||t.push(r));else t.push(...i??[]);if((e?.id==null||e.id===u.Q7.GitHub)&&e?.type!=="cloud"&&!this.configured.get(u.Q7.GitHub)){let e=await (0,W.c)(this.container,u.Q7.GitHub,{domain:rm.Mt[u.Q7.GitHub].domain,scopes:rm.Mt[u.Q7.GitHub].scopes},{silent:!0});null!=e&&t.push({integrationId:u.Q7.GitHub,domain:void 0,expiresAt:e.expiresAt,scopes:rm.Mt[u.Q7.GitHub].scopes.join(","),cloud:!1})}return t}getConfiguredLite(e){let t=[],i=e?.id!=null?this.configured.get(e.id):[...(0,X.Bq)(this.configured.values())];if(null==i)return t;if(e?.domain!=null||e?.type!=null)for(let r of i)(e?.domain==null||r.domain===e.domain)&&(e?.type!=="cloud"||r.cloud)&&(e?.type==="local"&&r.cloud||t.push(r));else t.push(...i);return t}async storeConfigured(){let e={};for(let[t,i]of this.configured)e[t]=i.map(e=>({...e,expiresAt:e.expiresAt?e.expiresAt instanceof Date?e.expiresAt.toISOString():e.expiresAt:void 0}));await this.container.storage.store("integrations:configured",e)}async addConfigured(e){let t=this.configured.get(e.integrationId)??[],i=t.find(t=>t.domain===e.domain&&t.integrationId===e.integrationId&&t.cloud===e.cloud);if(null!=i){if(i.expiresAt===e.expiresAt&&i.scopes===e.scopes)return;let r=t.indexOf(i);t.splice(r,1)}t.push(e),this.configured.set(e.integrationId,t),this.queueDidChange(e.integrationId),await this.storeConfigured()}async removeConfigured(e,t){let i=this.configured.get(e)?.filter(e=>t?.type==="cloud"?!0!==e.cloud||e.domain!==t?.domain:t?.type==="local"&&!1!==e.cloud||e.domain!==t?.domain);null!=i&&0===i.length&&this.configured.delete(e),this.configured.set(e,i??[]),this.queueDidChange(e),await this.storeConfigured()}async storeSession(e,t){await this.writeSecret(e,t)}async getStoredSession(e,t,i="local"){let r=this.getSessionId(t),s=await this.readSecret(e,r,"local");if("cloud"!==i)return rf(s,t,!1);let o=!1;return null!=s&&null!=s.expiresAt&&(o=!0,await Promise.allSettled([this.deleteSecrets(e,s.id),this.writeSecret(e,s)])),null==s&&(o=!0,s=await this.readSecret(e,r,"cloud")),rf(s,t,o)}async deleteStoredSessions(e,t,i){await this.deleteSecrets(e,this.getSessionId(t),i)}async deleteAllStoredSessions(e,t){await this.deleteAllSecrets(e,t)}async deleteSecrets(e,t,i){(null==i||"local"===i)&&await this.container.storage.deleteSecret(this.getLocalSecretKey(e,t)),(null==i||"cloud"===i)&&await this.container.storage.deleteSecret(this.getCloudSecretKey(e,t)),await this.removeConfigured(e,{domain:(0,rm.NT)(e)?t:void 0,type:i})}async deleteAllSecrets(e,t){if((0,rm.NT)(e)){let i=this.configured.get(e)?.map(e=>e.domain);if(null!=i)for(let r of i)await this.deleteSecrets(e,r,t);return}await this.deleteSecrets(e,rm.Mt[e].domain,t)}async writeSecret(e,t){await this.container.storage.storeSecret(this.getSecretKey(e,t.id,t.cloud?"cloud":"local"),JSON.stringify(t)),await this.addConfigured({integrationId:e,domain:(0,rm.NT)(e)?t.domain:void 0,expiresAt:t.expiresAt,scopes:t.scopes.join(","),cloud:t.cloud??!1})}async readSecret(e,t,i="local"){let r;try{let s=await this.container.storage.getSecret(this.getSecretKey(e,t,i));if(s&&(r=JSON.parse(s),null!=r)){let t=this.configured.get(e),i=(0,rm.NT)(e)?r.id:void 0;null!=t&&0!==t.length&&t.some(t=>t.domain===i&&t.integrationId===e)||await this.addConfigured({integrationId:e,domain:i,expiresAt:r.expiresAt,scopes:r.scopes.join(","),cloud:r.cloud??!1})}}catch{try{await this.deleteSecrets(e,t,i)}catch{}}return r}getSecretKey(e,t,i="local"){return"cloud"===i?this.getCloudSecretKey(e,t):this.getLocalSecretKey(e,t)}getLocalSecretKey(e,t){return`gitlens.integration.auth:${e}|${t}`}getCloudSecretKey(e,t){return`gitlens.integration.auth.cloud:${e}|${t}`}getSessionId(e){return e.domain}changedIds=new Set;debouncedFireDidChange;queueDidChange(e){this.debouncedFireDidChange??=(0,B.s)(()=>{this._onDidChange.fire({ids:[...this.changedIds]}),this.changedIds.clear()},300),this.changedIds.add(e),this.debouncedFireDidChange()}};function rf(e,t,i){if(null!=e)return{id:e.id,accessToken:e.accessToken,account:{id:e.account?.id??"",label:e.account?.label??""},scopes:e.scopes,cloud:e.cloud??i,expiresAt:e.expiresAt?new Date(e.expiresAt):void 0,domain:e.domain??t.domain,protocol:e.protocol}}var rw=i(8576),rv=i(225),ry=Object.defineProperty,rb=Object.getOwnPropertyDescriptor,rC=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rb(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ry(t,i,o),o};let IntegrationAuthenticationService=class IntegrationAuthenticationService{constructor(e,t){this.container=e,this.configuredIntegrationService=t}providers=new Map;dispose(){this.providers.forEach(e=>void e.dispose()),this.providers.clear()}async get(e){return this.ensureProvider(e)}async reset(){await Promise.allSettled(rm.bT.map(async e=>(await this.ensureProvider(e)).deleteAllSessions()))}supports(e){switch(e){case u.Q7.AzureDevOps:case u.Q7.Bitbucket:case u.PY.GitHubEnterprise:case u.Q7.GitLab:case u.PY.GitLabSelfHosted:case u.tp.Jira:return!0;case u.Q7.GitHub:return(0,rv.LT)(u.Q7.GitHub);default:return!1}}async ensureProvider(e){let t=this.providers.get(e);if(null==t){switch(e){case u.Q7.AzureDevOps:t=new(await Promise.resolve().then(i.bind(i,2949))).AzureDevOpsAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case u.Q7.Bitbucket:t=new(await Promise.resolve().then(i.bind(i,1090))).BitbucketAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case u.PY.BitbucketServer:t=new(await Promise.resolve().then(i.bind(i,1090))).BitbucketServerAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case u.Q7.GitHub:t=(0,rv.LT)(u.Q7.GitHub)?new(await Promise.resolve().then(i.bind(i,3276))).GitHubAuthenticationProvider(this.container,this,this.configuredIntegrationService):new rw.Ht(this.container,this,this.configuredIntegrationService,e);break;case u.PY.CloudGitHubEnterprise:t=new(await Promise.resolve().then(i.bind(i,3276))).GitHubEnterpriseCloudAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case u.PY.GitHubEnterprise:t=new(await Promise.resolve().then(i.bind(i,3276))).GitHubEnterpriseAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case u.Q7.GitLab:t=(0,rv.LT)(u.Q7.GitLab)?new(await Promise.resolve().then(i.bind(i,1308))).GitLabCloudAuthenticationProvider(this.container,this,this.configuredIntegrationService):new(await Promise.resolve().then(i.bind(i,1308))).GitLabLocalAuthenticationProvider(this.container,this,this.configuredIntegrationService,u.Q7.GitLab);break;case u.PY.CloudGitLabSelfHosted:t=new(await Promise.resolve().then(i.bind(i,1308))).GitLabSelfHostedCloudAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;case u.PY.GitLabSelfHosted:t=new(await Promise.resolve().then(i.bind(i,1308))).GitLabLocalAuthenticationProvider(this.container,this,this.configuredIntegrationService,u.PY.GitLabSelfHosted);break;case u.tp.Jira:t=new(await Promise.resolve().then(i.bind(i,9827))).JiraAuthenticationProvider(this.container,this,this.configuredIntegrationService);break;default:t=new rw.Ht(this.container,this,this.configuredIntegrationService,e)}this.providers.set(e,t)}return t}};rC([(0,d.Rm)()],IntegrationAuthenticationService.prototype,"reset",1),rC([(0,D.G)()],IntegrationAuthenticationService.prototype,"ensureProvider",1);var rR=i(6527),rk=i(6162),rS=i(4898),rP=i(5853),rA=i(3130),rI=Object.defineProperty,rD=Object.getOwnPropertyDescriptor,r_=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rD(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rI(t,i,o),o};let RepositoryIdentityService=class RepositoryIdentityService{constructor(e,t){this.container=e,this.locator=t}dispose(){}getRepository(e,t){return this.locateRepository(e,t)}async getRepositoryIdentity(e){let[t,i]=await Promise.allSettled([e.git.remotes().getBestRemoteWithProvider(),e.git.commits().getInitialCommitSha?.()]),r=(0,E.Ro)(t);return{name:e.name,initialCommitSha:(0,E.Ro)(i),remote:r,provider:r?.provider?.providerDesc}}async locateRepository(e,t){let i,r=null!=e.initialCommitSha&&"-"!==e.initialCommitSha,s=e?.remote?.url!=null,o=e.provider?.id!=null&&null!=e.provider.repoDomain&&null!=e.provider.repoName;if(!r&&!s&&!o)return;let a=s||o?await this.locator?.getLocation(e.remote?.url,null!=e.provider?{provider:e.provider.id,owner:e.provider.repoDomain,repoName:e.provider.repoName}:void 0):[];if(a?.length){for(let e of a){let t=this.container.git.getRepository(n.Uri.file(e));if(null!=t){i=t;break}}null==i&&t?.openIfNeeded&&(i=await this.container.git.getOrOpenRepository(n.Uri.file(a[0]),{closeOnOpen:!t?.keepOpen}))}else{let[,s,o]=e.remote?.url!=null?(0,rA.BX)(e.remote.url):[];for(let n of this.container.git.repositories)if(null!=s&&null!=o&&(await n.git.remotes().getRemotes({filter:e=>e.matches(s,o)})).length>0||!t?.skipRefValidation&&r&&await n.git.refs().isValidReference(e.initialCommitSha)){i=n;break}}if(null==i&&t?.prompt){let r={title:"Locate Repository"};if(await n.window.showInformationMessage(`Unable to find a repository for '${e.name}'.
Would you like to locate it?`,{modal:!0},r,{title:"Cancel",isCloseAffordance:!0})!==r)return;let s=(await n.window.showOpenDialog({title:`Choose a location for ${e.name}`,canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0];if(null==s)return;let o=await this.container.git.getOrOpenRepository(s,{closeOnOpen:!t?.keepOpen,detectNested:!1});if(null==o)return;(null==e.initialCommitSha||await o.git.refs().isValidReference(e.initialCommitSha))&&(i=o,await this.storeRepositoryLocation(i,e))}return i}async storeRepositoryLocation(e,t){if(e.virtual||null==this.locator)return;let[i,r]=await Promise.allSettled([null==t?this.getRepositoryIdentity(e):void 0,e.git.remotes().getRemotes()]);t??=(0,E.Ro)(i);let s=(0,E.Ro)(r)??[],o=e.uri.fsPath;for(let e of s){let t=await e.provider?.url({type:rP.J.Repo});null!=t&&await this.locator.storeLocation(o,t)}t?.provider?.id!=null&&t?.provider?.repoDomain!=null&&t?.provider?.repoName!=null&&await this.locator.storeLocation(o,void 0,{provider:t.provider.id,owner:t.provider.repoDomain,repoName:t.provider.repoName})}};r_([(0,d.Rm)()],RepositoryIdentityService.prototype,"getRepository",1),r_([(0,d.Rm)()],RepositoryIdentityService.prototype,"getRepositoryIdentity",1),r_([(0,d.Rm)()],RepositoryIdentityService.prototype,"locateRepository",1),r_([(0,d.Rm)({args:{1:!1}})],RepositoryIdentityService.prototype,"storeRepositoryLocation",1);var r$=i(326),rT=Object.defineProperty,rE=Object.getOwnPropertyDescriptor,rx=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rE(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rT(t,i,o),o};let WorkspacesApi=class WorkspacesApi{constructor(e,t){this.container=e,this.connection=t}async getWorkspace(e,t){let i;if(t?.includeRepositories){let e=`(first: ${t?.repoCount??100}`;t?.repoPage&&(e+=`, page: ${t.repoPage}`),e+=")",i=`
				provider_data {
					repositories ${e} {
						total_count
						page_info {
							end_cursor
							has_next_page
						}
						nodes {
							id
							name
							repository_id
							provider
							provider_project_name
							provider_organization_id
							provider_organization_name
							url
						}
					}
				}
			`}let r=`
			id
			description
			name
			organization {
				id
			}
			provider
			azure_organization_id
			azure_project
			repo_relation
			${i??""}
		`,s=`
			query getWorkspace {
				project(id: "${e}") { ${r} }
			}
		`,o=await this.fetch({query:s});if(!o.ok)throw _.Vy.error(void 0,`Getting workspace failed: (${o.status}) ${o.statusText}`),Error(o.statusText);return await o.json()}async getWorkspaces(e){let t,i;if(e?.includeRepositories){let i=`(first: ${e?.repoCount??100}`;e?.repoPage&&(i+=`, page: ${e.repoPage}`),i+=")",t=`
				provider_data {
					repositories ${i} {
						total_count
						page_info {
							end_cursor
							has_next_page
						}
						nodes {
							id
							name
							repository_id
							provider
							provider_project_name
							provider_organization_id
							provider_organization_name
							url
						}
					}
				}
			`}let r=`
			total_count
			page_info {
				end_cursor
				has_next_page
			}
			nodes {
				id
				description
				name
				organization {
					id
				}
				provider
				azure_organization_id
				azure_project
				repo_relation
				${t??""}
			}
		`,s=`(first: ${e?.count??100}`;e?.cursor?s+=`, after: "${e.cursor}"`:e?.page&&(s+=`, page: ${e.page}`),s+=")";let o=`
			query getWorkpaces {
				memberProjects: projects ${s} { ${r} }
			}
		`,n=await this.fetch({query:o});if(!n.ok)throw _.Vy.error(void 0,`Getting workspaces failed: (${n.status}) ${n.statusText}`),Error(n.statusText);let a=new Set,l=await n.json();if(l?.data!=null){for(let e of Object.values(l.data))if(null!=e)if(null==i)for(let t of(i={data:{projects:e}},e.nodes))a.add(t.id);else for(let t of e.nodes)a.has(t.id)||(a.add(t.id),i.data.projects.nodes.push(t));return null!=i&&(i.data.projects.total_count=a.size),i}}async getWorkspaceRepositories(e,t){let i=`(first: ${t?.count??100}`;t?.cursor?i+=`, after: "${t.cursor}"`:t?.page&&(i+=`, page: ${t.page}`),i+=")";let r=await this.fetch({query:`
					query getWorkspaceRepos {
						project (id: "${e}") {
							provider_data {
								repositories ${i} {
									total_count
									page_info {
										end_cursor
										has_next_page
									}
									nodes {
										id
										name
										repository_id
										provider
										provider_project_name
										provider_organization_id
										provider_organization_name
										url
									}
								}
							}
						}
					}
				`});if(!r.ok)throw _.Vy.error(void 0,`Getting workspace repos failed: (${r.status}) ${r.statusText}`),Error(r.statusText);return await r.json()}async createWorkspace(e){if(!e.name||!e.description||!e.provider||e.provider===r$.y1.Azure&&(!e.azureOrganizationName||!e.azureProjectName)||(e.provider===r$.y1.GitHubEnterprise||e.provider===r$.y1.GitLabSelfHosted)&&!e.hostUrl)return;let t=await this.fetch({query:`
					mutation createWorkspace {
						create_project(
							input: {
						  		type: GK_PROJECT
						  		name: "${e.name}"
						  		description: "${e.description}"
						  		provider: ${e.provider}
								${e.hostUrl?`host_url: "${e.hostUrl}"`:""}
								${e.azureOrganizationName?`azure_organization_id: "${e.azureOrganizationName}"`:""}
								${e.azureProjectName?`azure_project: "${e.azureProjectName}"`:""}
						  		profile_id: "shared-services"
							}
						) {
							id,
							name,
							description,
							organization {
								id
							}
							provider
							azure_organization_id
							azure_project
							repo_relation
						}
					}
				`});if(!t.ok)throw _.Vy.error(void 0,`Creating workspace failed: (${t.status}) ${t.statusText}`),Error(t.statusText);return await t.json()}async deleteWorkspace(e){let t=await this.fetch({query:`
					mutation deleteWorkspace {
						delete_project(
							id: "${e}"
						) {
							id
						}
					}
				`});if(!t.ok)throw _.Vy.error(void 0,`Deleting workspace failed: (${t.status}) ${t.statusText}`),Error(t.statusText);let i=await t.json();if(i?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to delete this workspace";throw _.Vy.error(void 0,e),Error(e)}return i}async addReposToWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map(e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`).join(","),i+="]";let r=1,s=t.map(e=>`Repository${r++}: repository(provider_organization_id: "${e.owner}", name: "${e.repoName}") {
			id
			name
			repository_id
			provider
			provider_project_name
			provider_organization_id
			provider_organization_name
			url
		}`).join(","),o=await this.fetch({query:`
					mutation addReposToWorkspace {
						add_repositories_to_project(
							input: {
								project_id: "${e}",
								repositories: ${i}
							}
						) {
							id
							provider_data {
								${s}
							}
						}
					}
				`});if(!o.ok)throw _.Vy.error(void 0,`Adding repositories to workspace failed: (${o.status}) ${o.statusText}`),Error(o.statusText);let n=await o.json();if(n?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to add repositories to this workspace";throw _.Vy.error(void 0,e),Error(e)}return n}async removeReposFromWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map(e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`).join(","),i+="]";let r=await this.fetch({query:`
					mutation removeReposFromWorkspace {
						remove_repositories_from_project(
							input: {
								project_id: "${e}",
								repositories: ${i}
							}
						) {
							id
						}
					}
				`});if(!r.ok)throw _.Vy.error(void 0,`Removing repositories from workspace failed: (${r.status}) ${r.statusText}`),Error(r.statusText);let s=await r.json();if(s?.errors?.some(e=>e.message.includes("permission"))){let e="Adding repositories to workspace failed: you do not have permission to remove repositories from this workspace";throw _.Vy.error(void 0,e),Error(e)}return s}async fetch(e,t){return this.connection.fetchGkApiGraphQL("api/projects/graphql",e,t)}};rx([(0,d.Rm)()],WorkspacesApi.prototype,"getWorkspace",1),rx([(0,d.Rm)()],WorkspacesApi.prototype,"getWorkspaces",1),rx([(0,d.Rm)()],WorkspacesApi.prototype,"getWorkspaceRepositories",1),rx([(0,d.Rm)()],WorkspacesApi.prototype,"createWorkspace",1),rx([(0,d.Rm)()],WorkspacesApi.prototype,"deleteWorkspace",1),rx([(0,d.Rm)()],WorkspacesApi.prototype,"addReposToWorkspace",1),rx([(0,d.Rm)()],WorkspacesApi.prototype,"removeReposFromWorkspace",1);var rO=i(8397),rF=i(3677),rB=i(5628),rL=Object.defineProperty,rU=Object.getOwnPropertyDescriptor,rq=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rU(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rL(t,i,o),o};let WorkspacesService=class WorkspacesService{constructor(e,t,i,r){this.container=e,this._api=t,this._sharedStorage=i,this._repositoryLocator=r,this._currentWorkspaceId=rM(),this._currentWorkspaceAutoAddSetting=n.workspace.getConfiguration("gitkraken")?.get("workspaceAutoAddSetting")??"disabled",this._disposable=n.Disposable.from(this._onDidResetWorkspaces,e.subscription.onDidChange(this.onSubscriptionChanged,this))}_onDidResetWorkspaces=new n.EventEmitter;get onDidResetWorkspaces(){return this._onDidResetWorkspaces.event}_cloudWorkspaces;_disposable;_localWorkspaces;_currentWorkspaceId;_currentWorkspaceAutoAddSetting="disabled";_currentWorkspace;dispose(){this._disposable.dispose()}get currentWorkspaceId(){return this._currentWorkspaceId}get currentWorkspace(){return this._currentWorkspace}onSubscriptionChanged(e){(null==e.current.account||e.current.account.id!==e.previous?.account?.id||e.current.state!==e.previous?.state)&&this.resetWorkspaces({cloud:!0})}async loadCloudWorkspaces(e=!1){let t,i=await this.container.subscription.getSubscription();if(i?.account==null)return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Please sign in to use cloud workspaces."};let r=[];try{let i=await this._api.getWorkspaces({includeRepositories:!e,includeOrganizations:!0});t=i?.data?.projects?.nodes}catch{return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Failed to load cloud workspaces."}}let s=0,o=(0,tN.k0)(i.state);if(t?.length)for(let i of t){let t=await this._sharedStorage?.getCloudWorkspaceCodeWorkspaceFileLocation(i.id);if(!o&&i.organization?.id){s+=1;continue}let n=i.provider_data?.repositories?.nodes,a=null!=n?n.map(e=>({...e,workspaceId:i.id})):n;null!=a||e||(a=[]),r.push(new r$.j2(this.container,i.id,i.name,i.organization?.id,i.provider,i.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===i.id,i.provider===r$.UQ.Azure?{organizationId:i.azure_organization_id??void 0,project:i.azure_project??void 0}:void 0,a,t))}return{cloudWorkspaces:r,cloudWorkspaceInfo:s>0?`${s} shared workspaces hidden - upgrade to GitLens Pro to access.`:void 0}}async loadLocalWorkspaces(){let e=[];for(let t of Object.values((await this._sharedStorage?.getLocalWorkspaceData())?.workspaces||{}))null!=t.localId&&null!=t.name&&e.push(new rB.h(this.container,t.localId,t.name,t.repositories?.map(e=>({localPath:e.localPath,name:e.localPath.split(/[\\/]/).pop()??"unknown",workspaceId:t.localId}))??[],null!=this._currentWorkspaceId&&this._currentWorkspaceId===t.localId));return{localWorkspaces:e,localWorkspaceInfo:void 0}}getCloudWorkspace(e){return this._cloudWorkspaces?.find(t=>t.id===e)}getLocalWorkspace(e){return this._localWorkspaces?.find(t=>t.id===e)}async getWorkspaces(e){let t={cloudWorkspaces:[],localWorkspaces:[],cloudWorkspaceInfo:void 0,localWorkspaceInfo:void 0};if(null==this._cloudWorkspaces||e?.force){let i=await this.loadCloudWorkspaces(e?.excludeRepositories);this._cloudWorkspaces=i.cloudWorkspaces,t.cloudWorkspaceInfo=i.cloudWorkspaceInfo}if(null==this._localWorkspaces||e?.force){let e=await this.loadLocalWorkspaces();this._localWorkspaces=e.localWorkspaces,t.localWorkspaceInfo=e.localWorkspaceInfo}let i=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find(e=>e.current);return null!=i&&(this._currentWorkspaceId=i.id,this._currentWorkspace=i),t.cloudWorkspaces=this._cloudWorkspaces??[],t.localWorkspaces=this._localWorkspaces??[],t}async getCloudWorkspaceRepositories(e){let t=await this._api.getWorkspaceRepositories(e),i=t?.data?.project?.provider_data?.repositories?.nodes;return i?.map(t=>({...t,workspaceId:e}))??[]}async addMissingCurrentWorkspaceRepos(e){if(null==this._currentWorkspaceId)return;let t=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find(e=>e.current);if(null==t)try{let e=await this._api.getWorkspace(this._currentWorkspaceId,{includeRepositories:!0});if(e?.data?.project==null)return;let i=e.data.project.provider_data?.repositories?.nodes,r=null!=i?i.map(t=>({...t,workspaceId:e.data.project.id})):[];t=new r$.j2(this.container,e.data.project.id,e.data.project.name,e.data.project.organization?.id,e.data.project.provider,e.data.project.repo_relation,!0,e.data.project.provider===r$.UQ.Azure?{organizationId:e.data.project.azure_organization_id??void 0,project:e.data.project.azure_project??void 0}:void 0,r,n.workspace.workspaceFile?.fsPath)}catch{return}if(!e?.force&&"disabled"===this._currentWorkspaceAutoAddSetting||!t?.current||(this._currentWorkspace=t,!(await t.getRepositoryDescriptors())?.length))return;let i=[...(await this.resolveWorkspaceRepositoriesByName(t,{resolveFromPath:!0,usePathMapping:!0})).values()].map(e=>e.repository),r=new Map;for(let e of this.container.git.openRepositories)r.set(e.id,e);let s=i.filter(e=>!r.has(e.id));if(0===s.length){e?.force&&n.window.showInformationMessage("No new repositories found to add.",{modal:!0});return}let o=[];if(!e?.force&&"prompt"===this._currentWorkspaceAutoAddSetting){let e={title:"Change Auto-Add Behavior..."},t={title:"Cancel",isCloseAffordance:!0},i=await n.window.showInformationMessage("New repositories found in the linked Cloud workspace. Would you like to add them to the current VS Code workspace?",{title:"Add..."},e,t);if(null==i||i===t)return;if(i===e)return void this.chooseCodeWorkspaceAutoAddSetting({current:!0})}if(e?.force||"prompt"===this._currentWorkspaceAutoAddSetting){let e=await (0,rO.ST)("Add Repositories to Workspace","Choose which repositories to add to the current workspace",s);if(0===e.length)return;o=e.map(e=>e.path)}else o=s.map(e=>e.path);if(0===o.length)return;let a=n.workspace.workspaceFolders?.length??0;n.window.withProgress({location:n.ProgressLocation.Notification,title:"Adding new repositories from linked cloud workspace...",cancellable:!1},()=>new Promise(e=>{n.workspace.updateWorkspaceFolders(a,0,...o.map(e=>({uri:n.Uri.file(e)}))),e(!0)}))}resetWorkspaces(e){(e?.cloud??!0)&&(this._cloudWorkspaces=void 0),(e?.local??!0)&&(this._localWorkspaces=void 0),this._onDidResetWorkspaces.fire()}async getCloudWorkspaceRepoPath(e,t){return this._sharedStorage?.getCloudWorkspaceRepositoryLocation(e,t)}async updateCloudWorkspaceRepoLocalPath(e,t,i){await this._sharedStorage?.storeCloudWorkspaceRepositoryLocation(e,t,i)}async getRepositoriesInParentFolder(e){let t=(await n.window.showOpenDialog({title:"Choose a folder containing repositories for this workspace",canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0];if(!(null==t||e?.isCancellationRequested))try{return await this.container.git.findRepositories(t,{cancellation:e,depth:1,silent:!0})}catch{return}}async locateAllCloudWorkspaceRepos(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=await i.getRepositoryDescriptors();if(null==r||0===r.length)return;let s=await this.getRepositoriesInParentFolder(t);if(!(null==s||0===s.length||t?.isCancellationRequested)){for(let i of(await this.resolveWorkspaceRepositoriesByName(e,{cancellation:t,repositories:s})).values())if(await this.locateWorkspaceRepo(e,i.descriptor,i.repository),t?.isCancellationRequested)return}}async locateWorkspaceRepo(e,t,i){let r,s;if(null==i||i instanceof n.Uri){let e=i;if(null==e&&(e=(await n.window.showOpenDialog({title:`Choose a location for ${t.name}`,canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0]),null==e||null==(r=await this.container.git.getOrOpenRepository(e,{closeOnOpen:!0,detectNested:!1})))return}else r=i;let o=r.uri.fsPath,a=(await r.git.remotes().getRemotes()).map(async e=>e.provider?.url({type:rP.J.Repo}));for(let e of(await Promise.allSettled(a)).map(e=>(0,E.Ro)(e)).filter(e=>null!=e))await this._repositoryLocator?.storeLocation(o,e);let l=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);null==s&&l?.type==="cloud"&&(s=l.provider),null!=t.id&&(null!=t.url||null!=t.provider_organization_id&&null!=t.name&&null!=s)&&await this._repositoryLocator?.storeLocation(o,t.url??void 0,{provider:s,owner:t.provider_organization_id,repoName:t.name}),null!=t.id&&await this.updateCloudWorkspaceRepoLocalPath(e,t.id,o)}async createCloudWorkspace(e){let t,i,r,s,o,a,l,u=n.window.createInputBox();u.title="Create Cloud Workspace";let c=n.window.createQuickPick();c.title="Create Cloud Workspace";let h={GitHub:r$.y1.GitHub,"GitHub Enterprise":r$.y1.GitHubEnterprise};u.ignoreFocusOut=!0;let d=[];if(e?.repos!=null&&e.repos.length>0){for(let t of e.repos)if(0===(await t.git.remotes().getRemotes({filter:e=>"github.com"===e.domain})).length)return void await n.window.showErrorMessage("Only GitHub is supported for this operation. Please ensure all open repositories are hosted on GitHub.",{modal:!0});a=r$.y1.GitHub}try{if(!(t=await new Promise(e=>{d.push(u.onDidHide(()=>e(void 0)),u.onDidAccept(()=>{let t=u.value.trim();if(!t){u.validationMessage="Please enter a non-empty name for the workspace";return}e(t)})),u.placeholder="Please enter a name for the new workspace",u.prompt="Enter your workspace name",u.show()}))||!(i=await new Promise(e=>{d.push(u.onDidHide(()=>e(void 0)),u.onDidAccept(()=>{let t=u.value.trim();if(!t){u.validationMessage="Please enter a non-empty description for the workspace";return}e(t)})),u.value="",u.title="Create Workspace",u.placeholder="Please enter a description for the new workspace",u.prompt="Enter your workspace description",u.show()}))||(null==a&&(a=await new Promise(e=>{d.push(c.onDidHide(()=>e(void 0)),c.onDidAccept(()=>{0!==c.activeItems.length&&e(h[c.activeItems[0].label])})),c.placeholder="Please select a provider for the new workspace",c.items=Object.keys(h).map(e=>({label:e})),c.canSelectMany=!1,c.show()})),!a)||(a===r$.y1.GitHubEnterprise||a===r$.y1.GitLabSelfHosted)&&!(r=await new Promise(e=>{d.push(u.onDidHide(()=>e(void 0)),u.onDidAccept(()=>{let t=u.value.trim();if(!t){u.validationMessage="Please enter a non-empty host URL for the workspace";return}e(t)})),u.value="",u.placeholder="Please enter a host URL for the new workspace",u.prompt="Enter your workspace host URL",u.show()}))||a===r$.y1.Azure&&(!(s=await new Promise(e=>{d.push(u.onDidHide(()=>e(void 0)),u.onDidAccept(()=>{let t=u.value.trim();if(!t){u.validationMessage="Please enter a non-empty organization name for the workspace";return}e(t)})),u.value="",u.placeholder="Please enter an organization name for the new workspace",u.prompt="Enter your workspace organization name",u.show()}))||!(o=await new Promise(e=>{d.push(u.onDidHide(()=>e(void 0)),u.onDidAccept(()=>{let t=u.value.trim();if(!t){u.validationMessage="Please enter a non-empty project name for the workspace";return}e(t)})),u.value="",u.placeholder="Please enter a project name for the new workspace",u.prompt="Enter your workspace project name",u.show()}))))return}finally{u.dispose(),c.dispose(),d.forEach(e=>void e.dispose())}let p={name:t,description:i,provider:a,hostUrl:r,azureOrganizationName:s,azureProjectName:o};try{let e=await this._api.createWorkspace(p);l=e?.data?.create_project}catch{return}if(null!=l){null==this._cloudWorkspaces&&(this._cloudWorkspaces=[]);let t=await this._sharedStorage?.getCloudWorkspaceCodeWorkspaceFileLocation(l.id);this._cloudWorkspaces?.push(new r$.j2(this.container,l.id,l.name,l.organization?.id,l.provider,l.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===l.id,l.provider===r$.UQ.Azure?{organizationId:l.azure_organization_id??void 0,project:l.azure_project??void 0}:void 0,[],t));let i=this.getCloudWorkspace(l.id);null!=i&&await this.addCloudWorkspaceRepos(i.id,{repos:e?.repos,suppressNotifications:!0})}}async deleteCloudWorkspace(e){let t=await n.window.showWarningMessage("Are you sure you want to delete this workspace? This cannot be undone.",{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=t&&"Cancel"!==t.title)try{let t=await this._api.deleteWorkspace(e);t?.data?.delete_project?.id===e&&(this._cloudWorkspaces=this._cloudWorkspaces?.filter(t=>t.id!==e))}catch(e){n.window.showErrorMessage(e.message)}}async filterReposForProvider(e,t){let i=[];for(let r of e)(await r.git.remotes().getRemotes({filter:e=>e.provider?.id===r$.ft[t]})).length&&i.push(r);return i}async filterReposForCloudWorkspace(e,t){let i=this.getCloudWorkspace(t)??this.getLocalWorkspace(t);if(null==i)return e;let r=[...(await i.getRepositoriesByName()).values()].map(e=>e.repository);return e.filter(e=>!r.find(t=>t.id===e.id))}async addCloudWorkspaceRepos(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=[],s=t?.repos;if(!t?.repos){let r=await this.filterReposForProvider(this.container.git.openRepositories,i.provider);r=await this.filterReposForCloudWorkspace(r,e);let o=[{label:"Choose repositories from a folder",description:void 0,choice:"parentFolder"}];r.length>0&&o.unshift({label:"Choose repositories from the current window",description:void 0,choice:"currentWindow"}),o[0].picked=!0;let a=await n.window.showQuickPick(o,{placeHolder:"Choose repositories from the current window or a folder",ignoreFocusOut:!0});if(null==a)return;"parentFolder"===a.choice&&await n.window.withProgress({location:n.ProgressLocation.Notification,title:"Finding repositories to add to the workspace...",cancellable:!0},async(s,o)=>{let a=await this.getRepositoriesInParentFolder(o);if(null!=a){if(0===a.length){t?.suppressNotifications||n.window.showInformationMessage("No repositories found in the chosen folder.",{modal:!0});return}if(!o.isCancellationRequested){if(0===(r=await this.filterReposForProvider(a,i.provider)).length){t?.suppressNotifications||n.window.showInformationMessage(`No matching repositories found for provider ${i.provider}.`,{modal:!0});return}!o.isCancellationRequested&&(0!==(r=await this.filterReposForCloudWorkspace(r,e)).length||t?.suppressNotifications||n.window.showInformationMessage("All possible repositories are already in this workspace.",{modal:!0}))}}});let l=await (0,rO.ST)("Add Repositories to Workspace","Choose which repositories to add to the workspace",r);if(0===l.length)return;s=l.map(e=>e.path)}if(null==s)return;for(let e of s){let t=e instanceof R.LN?e:await this.container.git.getOrOpenRepository(n.Uri.file(e),{closeOnOpen:!0});if(null==t)continue;let i=await t.git.remotes().getRemote("origin")||(await t.git.remotes().getRemotes())?.[0],s=await rN(i);null!=s&&r.push({owner:s.owner,repoName:s.repoName,repo:t,url:s.url})}if(0===r.length)return;let o=[],a=new Set((await i.getRepositoryDescriptors()).map(e=>e.id));await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Adding repositories to workspace ${i.name}...`,cancellable:!1},async()=>{try{let t=await this._api.addReposToWorkspace(e,r.map(e=>({owner:e.owner,repoName:e.repoName})));if(t?.data.add_repositories_to_project==null)return;o=Object.values(t.data.add_repositories_to_project.provider_data).filter(e=>null!=e).map(t=>({...t,workspaceId:e}))}catch(e){n.window.showErrorMessage(e.message);return}for(let{repo:t,repoName:s,url:n}of(o.length>0&&i.addRepositories(o),o.length<r.length&&(o=(await i.getRepositoryDescriptors({force:!0})).filter(e=>!a.has(e.id))),r)){let i=o.find(e=>e.name.toLowerCase()===s||e.url===n);null!=i&&await this.locateWorkspaceRepo(e,i,t)}})}async removeCloudWorkspaceRepo(e,t){let i=this.getCloudWorkspace(e);if(null==i)return;let r=await n.window.showWarningMessage(`Are you sure you want to remove ${t.name} from this workspace? This cannot be undone.`,{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=r&&"Cancel"!==r.title)try{let r=await this._api.removeReposFromWorkspace(e,[{owner:t.provider_organization_id,repoName:t.name}]);if(r?.data.remove_repositories_from_project==null)return;i.removeRepositories([t.name])}catch(e){n.window.showErrorMessage(e.message)}}async resolveWorkspaceRepositoriesByName(e,t){let i=new Map,r=e instanceof r$.j2||e instanceof rB.h?e:this.getLocalWorkspace(e)??this.getCloudWorkspace(e);if(null==r)return i;let s=await r.getRepositoryDescriptors();if(null==s||0===s.length)return i;let o=t?.repositories??this.container.git.repositories,a=new Map,l=new Map;for(let e of o){if(t?.cancellation?.isCancellationRequested)break;if(l.set((0,T.Fd)(e.uri.fsPath.toLowerCase()),e),r instanceof r$.j2)for(let t of(await e.git.remotes().getRemotes())){let i=await rN(t);null!=i&&a.set(`${i.provider}/${i.owner}/${i.repoName}`,e)}}for(let e of s){let r=null,s=null;null==e.id?r=e.localPath:t?.usePathMapping===!0&&(r=await this.getMappedPathForCloudWorkspaceRepoDescriptor(e)),null!=r&&(s=l.get((0,T.Fd)(r.toLowerCase()))),null==s&&null!=e.id&&null!=e.provider&&(s=a.get(`${e.provider.toLowerCase()}/${e.provider_organization_id.toLowerCase()}/${e.name.toLowerCase()}`)),null!=r&&null==s&&t?.resolveFromPath===!0&&(s=await this.container.git.getOrOpenRepository(n.Uri.file(r),{closeOnOpen:!0,force:!0})),null!=s&&i.set(e.name,{descriptor:e,repository:s})}return i}async saveAsCodeWorkspaceFile(e){let t=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==t)return;let i=await t.getRepositoryDescriptors();if(null==i)return;let r=await t.getRepositoriesByName();if(0===r.size)return void n.window.showErrorMessage("No repositories in this workspace could be found locally. Please locate at least one repository.",{modal:!0});let s=[];for(let e of r.values()){let t=e.repository;t.virtual||s.push(t.uri.fsPath)}if(s.length<i.length){let e=await n.window.showWarningMessage("Some repositories in this workspace could not be located locally. Do you want to continue?",{modal:!0},{title:"Continue"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"===e.title)return}let o=await n.window.showSaveDialog({defaultUri:n.Uri.file(`${t.name}.code-workspace`),filters:{"Code Workspace":["code-workspace"]},title:"Choose a location for the new code workspace file"});if(null==o)return;let a=await this.chooseCodeWorkspaceAutoAddSetting();if(!await this._sharedStorage?.createOrUpdateCodeWorkspaceFile(o,s,{workspaceId:e,workspaceAutoAddSetting:a}))return void n.window.showErrorMessage("Could not create the new workspace file. Check logs for details");t.setLocalPath(o.fsPath);let l={title:"Cancel",isCloseAffordance:!0},u=await n.window.showInformationMessage(`Workspace file created for ${t.name}. Would you like to open it now?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},l);null!=u&&u!==l&&this.openCodeWorkspaceFile(e,{location:u.location})}async chooseCodeWorkspaceAutoAddSetting(e){if(e?.current&&(null==n.workspace.workspaceFile||null==this._currentWorkspaceId||null==this._currentWorkspaceAutoAddSetting))return"disabled";let t=e?.current?this._currentWorkspaceAutoAddSetting:"disabled",i=[{label:"Add on Workspace (Window) Open",description:"enabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"enabled"},{label:"Prompt on Workspace (Window) Open",description:"prompt"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"prompt"},{label:"Never",description:"disabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"disabled"}],r=await n.window.showQuickPick(i,{placeHolder:"Choose the behavior of automatically adding missing repositories to the current VS Code workspace",title:"Linked Workspace: Automatically Add Repositories"});if(r?.option==null)return t;let s=r.option;if(e?.current&&null!=n.workspace.workspaceFile){if(!await this._sharedStorage?.updateCodeWorkspaceFileSettings(n.workspace.workspaceFile,{workspaceAutoAddSetting:s}))return this._currentWorkspaceAutoAddSetting;this._currentWorkspaceAutoAddSetting=s}return s}async openCodeWorkspaceFile(e,t){let i=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==i)return;if(null==i.localPath){let t=await n.window.showInformationMessage(`The workspace file for ${i.name} has not been created. Would you like to create it now?`,{modal:!0},{title:"Create"},{title:"Cancel",isCloseAffordance:!0});if(null==t||"Cancel"===t.title)return;return void this.saveAsCodeWorkspaceFile(e)}let r=t?.location==="currentWindow"?"currentWindow":"newWindow";if(!t?.location){let e=await n.window.showInformationMessage(`How would you like to open the workspace file for ${i.name}?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"===e.title)return;r=e.location??"newWindow"}if(!await this._sharedStorage?.confirmCloudWorkspaceCodeWorkspaceFilePath(i.id)){await this._sharedStorage?.removeCloudWorkspaceCodeWorkspaceFile(i.id),i.setLocalPath(void 0);let e=await n.window.showInformationMessage(`The workspace file for ${i.name} could not be found. Would you like to locate it now?`,{modal:!0},{title:"Locate"},{title:"Cancel",isCloseAffordance:!0});if(e?.title!=="Locate")return;let t=(await n.window.showOpenDialog({defaultUri:n.Uri.file(i.localPath),canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Code Workspace":["code-workspace"]},title:"Locate the workspace file"}))?.[0]?.fsPath;if(null==t)return;await this._sharedStorage?.storeCloudWorkspaceCodeWorkspaceFileLocation(i.id,t),i.setLocalPath(t)}(0,rF.OH)(n.Uri.file(i.localPath),{location:r})}async getMappedPathForCloudWorkspaceRepoDescriptor(e){let t=await this.getCloudWorkspaceRepoPath(e.workspaceId,e.id);return null==t&&(t=(await this._repositoryLocator?.getLocation(e.url??void 0,{repoName:e.name,provider:e.provider??void 0,owner:e.provider_organization_id}))?.[0]),t}};async function rN(e){if(e.provider?.owner==null)return;let t=e.provider.path.split("/").pop();if(null!=t)return{provider:e.provider.id.toLowerCase(),owner:e.provider.owner.toLowerCase(),repoName:t.toLowerCase(),url:await e.provider.url({type:rP.J.Repo})}}function rM(){return n.workspace.getConfiguration("gitkraken")?.get("workspaceId")}rq([(0,d.Rm)()],WorkspacesService.prototype,"getWorkspaces",1),rq([(0,d.Rm)()],WorkspacesService.prototype,"addMissingCurrentWorkspaceRepos",1),rq([(0,d.Rm)()],WorkspacesService.prototype,"resetWorkspaces",1),rq([(0,d.Rm)({args:{1:!1,2:!1}})],WorkspacesService.prototype,"locateWorkspaceRepo",1),rq([(0,d.Rm)({args:!1})],WorkspacesService.prototype,"createCloudWorkspace",1),rq([(0,d.Rm)()],WorkspacesService.prototype,"deleteCloudWorkspace",1),rq([(0,d.Rm)({args:{1:!1}})],WorkspacesService.prototype,"addCloudWorkspaceRepos",1),rq([(0,d.Rm)({args:{1:!1}})],WorkspacesService.prototype,"removeCloudWorkspaceRepo",1),rq([(0,d.Rm)({args:{1:!1}})],WorkspacesService.prototype,"resolveWorkspaceRepositoriesByName",1),rq([(0,d.Rm)()],WorkspacesService.prototype,"saveAsCodeWorkspaceFile",1),rq([(0,d.Rm)()],WorkspacesService.prototype,"chooseCodeWorkspaceAutoAddSetting",1),rq([(0,d.Rm)()],WorkspacesService.prototype,"openCodeWorkspaceFile",1);var rW=Object.defineProperty,rG=Object.getOwnPropertyDescriptor,rH=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rG(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rW(t,i,o),o};let StatusBarController=class StatusBarController{constructor(e){this.container=e,this._disposable=n.Disposable.from((0,tt.Oo)(e.onReady)(this.onReady,this),h.H.onDidChange(this.onConfigurationChanged,this))}_cancellation;_disposable;_selectedSha;_statusBarBlame;_statusBarMode;dispose(){this.clearBlame(),this._statusBarBlame?.dispose(),this._statusBarMode?.dispose(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(h.H.changed(e,"mode")){let t=h.H.get("mode.statusBar.enabled")?this.container.mode:void 0;if(t?.statusBarItemName){let i="left"!==h.H.get("mode.statusBar.alignment")?n.StatusBarAlignment.Right:n.StatusBarAlignment.Left;h.H.changed(e,"mode.statusBar.alignment")&&this._statusBarMode?.alignment!==i&&(this._statusBarMode?.dispose(),this._statusBarMode=void 0),this._statusBarMode=this._statusBarMode??n.window.createStatusBarItem("gitlens.mode",i,i===n.StatusBarAlignment.Right?999:1),this._statusBarMode.name="GitLens Modes",this._statusBarMode.command="gitlens.switchMode",this._statusBarMode.text=t.statusBarItemName,this._statusBarMode.tooltip=new n.MarkdownString(`**${t.statusBarItemName}** ${l.EO.Dash} ${t.description}

---

Click to Switch GitLens Modes`,!0),this._statusBarMode.accessibilityInformation={label:`GitLens Mode: ${t.statusBarItemName}
Click to Switch GitLens Modes`},this._statusBarMode.show()}else this._statusBarMode?.dispose(),this._statusBarMode=void 0}if(h.H.changed(e,"statusBar"))if(h.H.get("statusBar.enabled")){let t="left"!==h.H.get("statusBar.alignment")?n.StatusBarAlignment.Right:n.StatusBarAlignment.Left;h.H.changed(e,"statusBar.alignment")&&this._statusBarBlame?.alignment!==t&&(this._statusBarBlame?.dispose(),this._statusBarBlame=void 0),this._statusBarBlame=this._statusBarBlame??n.window.createStatusBarItem("gitlens.blame",t,1e3*(t===n.StatusBarAlignment.Right)),this._statusBarBlame.name="GitLens Current Line Blame",this._statusBarBlame.command=h.H.get("statusBar.command"),h.H.changed(e,"statusBar.enabled")&&this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this))}else h.H.changed(e,"statusBar.enabled")&&(this.container.lineTracker.unsubscribe(this),this._statusBarBlame?.dispose(),this._statusBarBlame=void 0)}onActiveLinesChanged(e){let t=!(h.H.get("statusBar.reduceFlicker")&&"selection"===e.reason&&(e.pending||null!=e.selections));if(!e.pending&&null!=e.selections){let i=this.container.lineTracker.getState(e.selections[0].active);if(i?.commit!=null)return void this.updateBlame(e.editor,i);t=!0}if(t){if(this.clearBlame(),e.suspended&&e.editor?.document.isDirty&&null!=this._statusBarBlame){let t=this._statusBarBlame,i=this.container.documentTracker.get(e.editor.document);queueMicrotask(async()=>{let e=await i;if(null==e)return;let r=await e?.getStatus();r?.blameable&&(t.tooltip=new n.MarkdownString,t.tooltip.isTrusted={enabledCommands:["gitlens.showSettingsPage"]},e.canDirtyIdle?(t.text="$(watch) Blame Paused",t.tooltip.appendMarkdown(`Blame will resume after a [${h.H.get("advanced.blame.delayAfterEdit")} ms delay](${(0,i1.J)("gitlens.showSettingsPage",[void 0,"advanced.blame.delayAfterEdit"])} 'Change the after edit delay') to limit the performance impact because there are unsaved changes`)):(t.text="$(debug-pause) Blame Paused",t.tooltip.appendMarkdown(`Blame will resume after saving because there are unsaved changes and the file is over the [${h.H.get("advanced.blame.sizeThresholdAfterEdit")} line threshold](${(0,i1.J)("gitlens.showSettingsPage",[void 0,"advanced.blame.sizeThresholdAfterEdit"])} 'Change the after edit line threshold') to limit the performance impact`)),t.show())})}}else this._statusBarBlame?.text.startsWith("$(git-commit)")&&(this._statusBarBlame.text=`$(watch)${this._statusBarBlame.text.substring(13)}`)}clearBlame(){this._selectedSha=void 0,this._cancellation?.cancel(),this._statusBarBlame?.hide()}async updateBlame(e,t){let i,r,s=(0,$.dQ)(),o=h.H.get("statusBar");if(!o.enabled||null==this._statusBarBlame||!(0,F.oU)(e)){this._cancellation?.cancel(),this._selectedSha=void 0,(0,$.TT)(s,` \u2022 skipped; ${!o.enabled||null==this._statusBarBlame?"disabled":"not a trackable editor"}`);return}let{commit:a}=t;if(null==a){this._cancellation?.cancel(),(0,$.TT)(s," • skipped; no commit found");return}if(this._selectedSha===a.sha&&!a.isUncommitted){this._statusBarBlame?.text.startsWith("$(watch)")&&(this._statusBarBlame.text=`$(git-commit)${this._statusBarBlame.text.substring(8)}`),(0,$.TT)(s," • skipped; same commit");return}this._selectedSha=a.sha,this._cancellation?.cancel(),this._cancellation=new n.CancellationTokenSource;let u=this._cancellation.token;switch(o.command){case"gitlens.copyRemoteCommitUrl":i="Click to Copy Remote Commit URL";break;case"gitlens.copyRemoteFileUrl":this._statusBarBlame.command="gitlens.copyRemoteFileUrlToClipboard",i="Click to Copy Remote File Revision URL";break;case"gitlens.diffWithPrevious":this._statusBarBlame.command="gitlens.diffLineWithPrevious",i="Click to Open Line Changes with Previous Revision";break;case"gitlens.diffWithWorking":this._statusBarBlame.command="gitlens.diffLineWithWorking",i="Click to Open Line Changes with Working File";break;case"gitlens.openCommitOnRemote":i="Click to Open Commit on Remote";break;case"gitlens.openFileOnRemote":i="Click to Open Revision on Remote";break;case"gitlens.revealCommitInView":i="Click to Reveal Commit in the Side Bar";break;case"gitlens.showCommitsInView":i="Click to Search for Commit";break;case"gitlens.showQuickCommitDetails":i="Click to Show Commit";break;case"gitlens.showQuickCommitFileDetails":i="Click to Show Commit (file)";break;case"gitlens.showQuickRepoHistory":i="Click to Show Branch History";break;case"gitlens.showQuickFileHistory":i="Click to Show File History";break;case"gitlens.toggleCodeLens":i="Click to Toggle Git CodeLens";break;case"gitlens.toggleFileBlame":i="Click to Toggle File Blame";break;case"gitlens.toggleFileChanges":null!=a.file&&(this._statusBarBlame.command=(0,tW.gu)("gitlens.toggleFileChanges","Toggle File Changes",a.file.uri,{type:"changes",context:{sha:a.sha,only:!1,selection:!1}})),i="Click to Toggle File Changes";break;case"gitlens.toggleFileChangesOnly":null!=a.file&&(this._statusBarBlame.command=(0,tW.gu)("gitlens.toggleFileChanges","Toggle File Changes",a.file.uri,{type:"changes",context:{sha:a.sha,only:!0,selection:!1}})),i="Click to Toggle File Changes";break;case"gitlens.toggleFileHeatmap":i="Click to Toggle File Heatmap"}this._statusBarBlame.tooltip=new n.MarkdownString(`Loading... 

---

${i}`),this._statusBarBlame.accessibilityInformation={label:`${this._statusBarBlame.text}
${i}`};let c=await this.container.git.remotes(a.repoPath).getBestRemotesWithProviders(),[d]=c,p=h.H.get("defaultDateFormat"),g=e9.c.has(o.format,"tips")||e9.c.has(o.tooltipFormat,"tips")?this.container.git.getBranchesAndTagsTipsLookup(a.repoPath):void 0,m=!a.isUncommitted&&d?.hasIntegration()&&o.pullRequests.enabled&&(e9.c.has(o.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState")||e9.c.has(o.tooltipFormat,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"));function f(e,t,r){e.text=`$(git-commit) ${e9.c.fromTemplate(o.format,a,{dateFormat:null===o.dateFormat?p:o.dateFormat,getBranchAndTagTips:t,messageTruncateAtNewLine:!0,pullRequest:r,pullRequestPendingMessage:"PR $(watch)",remotes:c})}`,e.accessibilityInformation={label:`${e.text}
${i}`}}async function w(e,t,i,r){return(0,te.MX)(e,a,a.getGitUri(),a.lines[0].line-1,{autolinks:!0,cancellation:u,dateFormat:p,format:o.tooltipFormat,getBranchAndTagTips:t,pullRequest:i,pullRequests:m&&null!=i,remotes:c,timeout:r})}m&&(r=await (0,E.wW)(a.getAssociatedPullRequest(d),u,100,async e=>{if("timedout"!==e.reason||null==this._statusBarBlame)return;_.Vy.debug(s,`${l.EO.Dot} pull request query took too long (over 100 ms)`);let[t,r]=await Promise.allSettled([g,e.value]);if(u.isCancellationRequested||null==this._statusBarBlame)return;let o=(0,E.Ro)(r),n=(0,E.Ro)(t);_.Vy.debug(s,`${l.EO.Dot} pull request query completed; updating...`),f(this._statusBarBlame,n,o);let a=await w(this.container,n,o);null!=a&&(this._statusBarBlame.tooltip=a.appendMarkdown(`

---

${i}`))}));let v=null!=g?await g:void 0;if(u.isCancellationRequested)return;f(this._statusBarBlame,v,r?.value),this._statusBarBlame.show();let y=await (0,E.wW)(w(this.container,v,r?.value,20),u,100,async e=>{if("timedout"!==e.reason||null==this._statusBarBlame)return;let t=await e.value;null!=t&&(this._statusBarBlame.tooltip=t.appendMarkdown(`

---

${i}`))});u.isCancellationRequested||y.paused||null==y.value||(this._statusBarBlame.tooltip=y.value.appendMarkdown(`

---

${i}`))}};rH([(0,d.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],StatusBarController.prototype,"onActiveLinesChanged",1),rH([(0,d.Yz)({args:{1:e=>e.commit?.sha}})],StatusBarController.prototype,"updateBlame",1);var rV=Object.defineProperty,rj=Object.getOwnPropertyDescriptor,rz=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rj(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rV(t,i,o),o};let rQ=Object.create(null),rY=[];let KeyboardScope=class KeyboardScope{_mapping;constructor(e){for(let t in this._mapping=e,this._mapping)this._mapping[t]=this._mapping[t]??rQ;rY.push(this._mapping)}async dispose(){let e=rY.indexOf(this._mapping),t=(0,$.dQ)();(0,$.TT)(t,` \u2022 index=${e}`),e===rY.length-1?(rY.pop(),await this.updateKeyCommandsContext(rY[rY.length-1])):rY.splice(e,1)}_paused=!0;get paused(){return this._paused}async clearKeyCommand(e){let t=(0,$.dQ)(),i=rY[rY.length-1];if(i!==this._mapping||null==i[e])return void(0,$.TT)(t," • skipped");i[e]=void 0,await (0,A.o)(`${l.Od}:key:${e}`,!1)}async pause(e){if(this._paused)return;this._paused=!0;let t=Object.keys(this._mapping).reduce((t,i)=>(t[i]=null==e||e.includes(i)?void 0:this._mapping[i],t),Object.create(null));await this.updateKeyCommandsContext(t)}async resume(){this._paused&&(this._paused=!1,await this.updateKeyCommandsContext(this._mapping))}async start(){await this.resume()}async setKeyCommand(e,t){let i=(0,$.dQ)(),r=rY[rY.length-1];if(r!==this._mapping)return void(0,$.TT)(i," • skipped");let s=!!r[e];r[e]=t,s||await (0,A.o)(`${l.Od}:key:${e}`,!0)}async updateKeyCommandsContext(e){await Promise.all(l.HP.map(t=>(0,A.o)(`${l.Od}:key:${t}`,!!e?.[t])))}};rz([(0,d.Rm)({args:!1,prefix:e=>`${e.prefix}[${rY.length}]`})],KeyboardScope.prototype,"dispose",1),rz([(0,d.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${rY.length}](${t})`})],KeyboardScope.prototype,"clearKeyCommand",1),rz([(0,d.Rm)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"pause",1),rz([(0,d.Rm)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"resume",1),rz([(0,d.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${rY.length}](${t})`})],KeyboardScope.prototype,"setKeyCommand",1);let Keyboard=class Keyboard{_disposable;constructor(){let e=l.HP.map(e=>(0,tW.Lb)(`${l.Od}.key.${e}`,()=>this.execute(e),this));this._disposable=n.Disposable.from(...e)}dispose(){this._disposable.dispose()}createScope(e){return new KeyboardScope({...e})}async beginScope(e){let t=this.createScope(e);return await t.start(),t}async execute(e){let t=(0,$.dQ)();if(!rY.length)return void(0,$.TT)(t," • skipped, no mappings");try{let i=rY[rY.length-1][e];if("function"==typeof i&&(i=await i()),"function"!=typeof i?.onDidPressKey)return void(0,$.TT)(t," • skipped, no callback");await i.onDidPressKey(e)}catch(e){_.Vy.error(e,t)}}};rz([(0,d.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${rY.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"createScope",1),rz([(0,d.Rm)({args:!1,prefix:(e,t)=>`${e.prefix}[${rY.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"beginScope",1),rz([(0,d.Rm)()],Keyboard.prototype,"execute",1);let TelemetryService=class TelemetryService{constructor(e){this.container=e,e.context.subscriptions.push(h.H.onDidChange(t=>{h.H.changed(t,"telemetry.enabled")&&this.ensureTelemetry(e)}),n.env.onDidChangeTelemetryEnabled(()=>this.ensureTelemetry(e))),this.ensureTelemetry(e)}_enabled=!1;get enabled(){return this._enabled}provider;globalAttributes=new Map;eventQueue=[];dispose(){this.provider?.dispose(),this.provider=void 0}_initializationTimer;ensureTelemetry(e){if(this._enabled=n.env.isTelemetryEnabled&&h.H.get("telemetry.enabled",void 0,!0),!this._enabled){null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.eventQueue.length=0,this.provider?.dispose(),this.provider=void 0;return}null==this._initializationTimer&&(this._initializationTimer=setTimeout(()=>this.initializeTelemetry(e),7500))}async initializeTelemetry(e){if(null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.provider=new(await Promise.resolve().then(i.bind(i,6931))).OpenTelemetryProvider({env:e.env,extensionId:e.id,extensionVersion:e.version,machineId:n.env.machineId,sessionId:n.env.sessionId,language:n.env.language,platform:(0,t$.uo)(),vscodeEdition:n.env.appName,vscodeHost:n.env.appHost,vscodeRemoteName:n.env.remoteName??"",vscodeShell:n.env.shell,vscodeUIKind:String(n.env.uiKind),vscodeVersion:n.version},(0,iK.cQ)(),e.debugging),this.eventQueue.length){let e=[...this.eventQueue];for(let{type:t,name:i,data:r,global:s}of(this.eventQueue.length=0,e))"sendEvent"===t&&(this.provider.setGlobalAttributes(s),rJ(r),this.provider.sendEvent(i,rZ(r)))}this.provider.setGlobalAttributes(this.globalAttributes)}sendEvent(e,...t){if(!this._enabled)return;let[i,r,s,o]=t;rJ(i);let n=rK(r,i);if(null==this.provider)return void this.eventQueue.push({type:"sendEvent",name:e,data:n,global:new Map(this.globalAttributes),startTime:s??Date.now(),endTime:o??Date.now()});this.provider.sendEvent(e,rZ(n),s,o)}startEvent(e,...t){if(!this._enabled)return;let[i,r,s]=t;rJ(i);let o=rK(r,i);if(s=s??Date.now(),null!=this.provider){let t=this.provider.startEvent(e,rZ(o),s);return{dispose:()=>t?.end()}}return{dispose:()=>this.sendEvent(e,i,r,s,Date.now())}}setGlobalAttribute(e,t){null==t?this.globalAttributes.delete(`global.${e}`):this.globalAttributes.set(`global.${e}`,t),this.provider?.setGlobalAttributes(this.globalAttributes)}setGlobalAttributes(e){for(let[t,i]of Object.entries(e))null==i?this.globalAttributes.delete(`global.${t}`):this.globalAttributes.set(`global.${t}`,i);this.provider?.setGlobalAttributes(this.globalAttributes)}deleteGlobalAttribute(e){this.globalAttributes.delete(`global.${e}`),this.provider?.setGlobalAttributes(this.globalAttributes)}};function rK(e,t){if(null==e)return t;if((t??={})["source.name"]=e.source,null!=e.detail){if("string"==typeof e.detail)t["source.detail"]=e.detail;else if("object"==typeof e.detail)for(let[i,r]of Object.entries(e.detail))t[`source.detail.${i}`]=r}return t}function rZ(e){if(null==e)return;let t=Object.create(null);for(let[i,r]of Object.entries(e))null!=r&&(t[i]=r);return t}function rJ(e){if(null==e||"object"==typeof e)return}let UsageTracker=class UsageTracker{constructor(e,t){this.container=e,this.storage=t}_onDidChange=new n.EventEmitter;get onDidChange(){return this._onDidChange.event}dispose(){this._onDidChange.dispose()}get(e){return this.storage.get("usages")?.[e]}isUsed(e){return!!this.get(e)?.firstUsedAt}async reset(e){let t=this.storage.get("usages");if(null!=t){if(null==e){await this.storage.delete("usages"),this._onDidChange.fire(void 0);return}t=(0,i2.Y8)(t,e,void 0),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:void 0})}}async track(e){let t=this.storage.get("usages");null==t&&(t=Object.create(null));let i=Date.now(),r=t[e];null==r?(r={count:1,firstUsedAt:i,lastUsedAt:i},t[e]=r):(r.count!==Number.MAX_SAFE_INTEGER&&r.count++,r.lastUsedAt=i),this.container.telemetry.sendEvent("usage/track",{"usage.key":e,"usage.count":r.count}),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:r})}};let rX=[tU.zZ.ProTrial,tU.zZ.ProTrialExpired,tU.zZ.ProTrialReactivationEligible,tU.zZ.Paid],r0=["command:gitlens.plus.startPreviewTrial:executed","command:gitlens.plus.reactivateProTrial:executed"],r1=new Map([["gettingStarted",{subscriptionStates:rX,subscriptionCommands:r0,usage:[]}],["homeView",{usage:["homeView:shown","command:gitlens.showHomeView:executed","command:gitlens.showAccountView:executed"]}],["visualizeCodeHistory",{subscriptionStates:rX,subscriptionCommands:r0,usage:["graphDetailsView:shown","graphView:shown","graphWebview:shown","commitDetailsView:shown","command:gitlens.showGraph:executed","command:gitlens.showGraphPage:executed","command:gitlens.showGraphView:executed","command:gitlens.showInCommitGraph:executed","command:gitlens.showInCommitGraphView:executed"]}],["prReviews",{subscriptionStates:rX,subscriptionCommands:r0,usage:["launchpadView:shown","worktreesView:shown","command:gitlens.showLaunchpad:executed","command:gitlens.showLaunchpadView:executed","command:gitlens.gitCommands.worktree:executed","command:gitlens.gitCommands.worktree.create:executed","command:gitlens.gitCommands.worktree.delete:executed","command:gitlens.gitCommands.worktree.open:executed"]}],["streamlineCollaboration",{subscriptionStates:rX,subscriptionCommands:r0,usage:["patchDetailsView:shown","patchDetailsWebview:shown","draftsView:shown","command:gitlens.showDraftsView:executed","command:gitlens.showPatchDetailsPage:executed","command:gitlens.createCloudPatch:executed","command:gitlens.createPatch:executed"]}],["integrations",{usage:["command:gitlens.plus.cloudIntegrations.connect:executed","command:gitlens.plus.cloudIntegrations.manage:executed"]}]]);let WalkthroughStateProvider=class WalkthroughStateProvider{constructor(e){this.container=e,this.disposables.push(this._onProgressChanged,this.container.usage.onDidChange(this.onUsageChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this)),this.initializeState()}_onProgressChanged=new n.EventEmitter;get onProgressChanged(){return this._onProgressChanged.event}walkthroughSize=r1.size;disposables=[];completed=new Set;subscriptionState;async initializeState(){for(let e of(this.subscriptionState=(await this.container.subscription.getSubscription(!0)).state,r1.keys()))this.validateStep(e)&&this.completeStep(e);this._onProgressChanged.fire(void 0)}onUsageChanged(e){let t=e?.key;if(!t)return;let i=this.getStepsFromUsage(t),r=!1;for(let e of i)!this.completed.has(e)&&this.validateStep(e)&&(this.completeStep(e),this.container.telemetry.sendEvent("walkthrough/completion",{"context.key":e}),r=!0);r&&this._onProgressChanged.fire(void 0)}onSubscriptionChanged(e){this.subscriptionState=e.current.state;let t=this.getStepsFromSubscriptionState(e.current.state),i=!1;for(let e of t)!this.completed.has(e)&&this.validateStep(e)&&(this.completeStep(e),this.container.telemetry.sendEvent("walkthrough/completion",{"context.key":e}),i=!0);i&&this._onProgressChanged.fire(void 0)}_isInitialized=!1;_initPromise;async waitForWalkthroughInitialized(){this._isInitialized||(this._initPromise||(this._initPromise=(0,E.uk)(1e3).then(()=>{this._isInitialized=!0})),await this._initPromise)}async completeStep(e){this.completed.add(e),await this.waitForWalkthroughInitialized(),(0,A.o)(`gitlens:walkthroughState:${e}`,!0)}get doneCount(){return this.completed.size}get progress(){return this.doneCount/this.walkthroughSize}dispose(){n.Disposable.from(...this.disposables).dispose()}getStepsFromUsage(e){let t=[];for(let[i,{subscriptionCommands:r,usage:s}]of r1)(r?.includes(e)||s.includes(e))&&t.push(i);return t}getStepsFromSubscriptionState(e){let t=[];for(let[e,{subscriptionStates:i}]of r1)null!=i&&t.push(e);return t}validateStep(e){let t,i,{subscriptionStates:r,subscriptionCommands:s,usage:o}=r1.get(e);return null!=r&&r.length>0&&(t=null!=this.subscriptionState&&r.includes(this.subscriptionState)),null!=s&&s.length>0&&(i=s.some(e=>this.container.usage.isUsed(e))),(void 0!==t||!1!==i)&&(!1!==t||!0===i)&&(!(o.length>0)||!!o.some(e=>this.container.usage.isUsed(e)))}};let r2=/\b(g(?:it)?\b\s*)\b(branch|checkout|cherry-pick|fetch|grep|log|merge|pull|push|rebase|reset|revert|show|stash|status|tag)\b/gi,r4=/\b((?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\x00-\x1F\x7F ,~^:?*[\\]+[^ ./])\b/gi,r5=/^[0-9a-f]{7,40}\.\.\.?[0-9a-f]{7,40}$/,r7=/^[0-9a-f]{7,40}$/;let GitTerminalLinkProvider=class GitTerminalLinkProvider{constructor(e){this.container=e,this.disposable=n.window.registerTerminalLinkProvider(this)}disposable;dispose(){this.disposable.dispose()}async provideTerminalLinks(e){let t,i,r;if(0===e.line.trim().length)return[];let s=this.container.git.highlander?.path;if(!s)return[];let o=h.H.get("terminalLinks.showDetailsView"),n=[],a=new RegExp(r4,r4.flags),l=new RegExp(r2,r2.flags);for(;;){if(null!=(r=l.exec(e.line))){let[e,t,i]=r,s={startIndex:r.index+t.length,length:i.length,tooltip:"Open in Git Command Palette",command:(0,tW.c6)("gitlens.gitCommands",{command:i})};n.push(s)}if(null==(r=a.exec(e.line)))break;let[u,c]=r;if("HEAD"===c.toUpperCase()){let e={startIndex:r.index,length:c.length,tooltip:"Show HEAD",command:(0,tW.c6)("gitlens.showQuickBranchHistory",{branch:"HEAD",repoPath:s})};n.push(e);continue}void 0===t&&(t=await this.container.git.branches(s).getBranches());let h=t.values.find(e=>e.name===c);if(null==h&&(h=t.values.find(e=>(0,eb.km)(e.name)===c)),null!=h){let e={startIndex:r.index,length:c.length,tooltip:"Show Branch",command:(0,tW.c6)("gitlens.showQuickBranchHistory",{repoPath:s,branch:h.name})};n.push(e);continue}void 0===i&&(i=await this.container.git.tags(s).getTags());let d=i.values.find(e=>e.name===c);if(null!=d){let e={startIndex:r.index,length:c.length,tooltip:"Show Tag",command:(0,tW.c6)("gitlens.showQuickBranchHistory",{repoPath:s,tag:d.name})};n.push(e);continue}if(!r7.test(c)){if(r5.test(c)){let e={startIndex:r.index,length:c.length,tooltip:"Show Commits",command:(0,tW.c6)("gitlens.gitCommands",{command:"log",state:{repo:s,reference:(0,eC.kA)(c,s,{refType:"revision"})}})};n.push(e)}continue}if(await this.container.git.refs(s).isValidReference(c)){let e={startIndex:r.index,length:c.length,tooltip:"Show Commit",command:o?(0,tW.c6)("gitlens.showInDetailsView",{ref:(0,eC.kA)(c,s,{refType:"revision"})}):(0,tW.c6)("gitlens.showQuickCommitDetails",{repoPath:s,sha:c})};n.push(e)}}return n}handleTerminalLink(e){n.commands.executeCommand(e.command.command,e.command.args)}};var r8=i(8782),r6=Object.defineProperty,r3=Object.getOwnPropertyDescriptor,r9=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?r3(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r6(t,i,o),o};let GitDocumentTracker=class GitDocumentTracker{constructor(e){this.container=e,this._disposable=n.Disposable.from(this._onDidChangeBlameState,this._onDidChangeContent,this._onDidChangeDirtyState,this._onDidTriggerDirtyIdle,(0,tt.Oo)(e.onReady)(this.onReady,this),h.H.onDidChange(this.onConfigurationChanged,this),n.window.onDidChangeActiveTextEditor(this.onActiveTextEditorChanged,this),n.window.onDidChangeVisibleTextEditors(this.onVisibleTextEditorsChanged,this),n.workspace.onDidOpenTextDocument(this.onTextDocumentOpened,this),n.workspace.onDidChangeTextDocument(this.onTextDocumentChanged,this),n.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),n.workspace.onDidSaveTextDocument(this.onTextDocumentSaved,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)),this._dirtyIdleTriggerDelay=h.H.get("advanced.blame.delayAfterEdit")}_onDidChangeBlameState=new n.EventEmitter;get onDidChangeBlameState(){return this._onDidChangeBlameState.event}_onDidChangeContent=new n.EventEmitter;get onDidChangeContent(){return this._onDidChangeContent.event}_onDidChangeDirtyState=new n.EventEmitter;get onDidChangeDirtyState(){return this._onDidChangeDirtyState.event}_onDidTriggerDirtyIdle=new n.EventEmitter;get onDidTriggerDirtyIdle(){return this._onDidTriggerDirtyIdle.event}_dirtyIdleTriggerDelay;_dirtyIdleTriggeredDebounced;_dirtyStateChangedDebounced;_disposable;_documentMap=new Map;dispose(){this._disposable.dispose(),this.clear()}onReady(){this.onConfigurationChanged();let e=n.window.activeTextEditor?.document,t=n.workspace.textDocuments.filter(e=>this.container.git.supportedSchemes.has(e.uri.scheme)).map(t=>[t,(0,O.Xc)(t),e===t]);for(let[e,i,r]of(t.sort(([,e,t],[,i,r])=>t===r?e===i?0:e?-1:1:t?-1:1),t))this.onTextDocumentOpened(e,i||r)}onActiveTextEditorChanged(e){this._dirtyIdleTriggeredDebounced?.flush(),this._dirtyIdleTriggeredDebounced?.cancel(),this._dirtyIdleTriggeredDebounced=void 0,this._dirtyStateChangedDebounced?.flush(),this._dirtyStateChangedDebounced?.cancel(),this._dirtyStateChangedDebounced=void 0}onConfigurationChanged(e){null!=e&&(h.H.changed(e,"blame.ignoreWhitespace")||h.H.changed(e,"advanced.caching.enabled"))&&this.refreshDocuments(),h.H.changed(e,"advanced.blame.delayAfterEdit")&&(this._dirtyIdleTriggerDelay=h.H.get("advanced.blame.delayAfterEdit"),this._dirtyIdleTriggeredDebounced?.flush(),this._dirtyIdleTriggeredDebounced?.cancel(),this._dirtyIdleTriggeredDebounced=void 0)}onRepositoriesChanged(e){this.refreshDocuments({addedOrChangedRepoPaths:e.added.length?new Set(e.added.map(e=>e.path.toLowerCase())):void 0,removedRepoPaths:e.removed.length?new Set(e.removed.map(e=>e.path.toLowerCase())):void 0})}onRepositoryChanged(e){e.changed(R.Z_.Index,R.Z_.Heads,R.Z_.PausedOperationStatus,R.Z_.Unknown,R.Ti.Any)&&this.refreshDocuments({addedOrChangedRepoPaths:new Set([e.repository.path])})}onTextDocumentOpened(e,t){this.container.git.supportedSchemes.has(e.uri.scheme)&&this.addCore(e,t)}debouncedTextDocumentChanges=new WeakMap;onTextDocumentChanged(e){if(!this.container.git.supportedSchemes.has(e.document.uri.scheme)||!this._documentMap.has(e.document))return;let t=this.debouncedTextDocumentChanges.get(e.document);null==t&&(t=(0,B.s)(e=>this.onTextDocumentChangedCore(e),50,{aggregator:([e],[t])=>[{...t,contentChanges:[...e.contentChanges,...t.contentChanges]}]}),this.debouncedTextDocumentChanges.set(e.document,t)),t(e)}async onTextDocumentChangedCore(e){this.debouncedTextDocumentChanges.delete(e.document);let t=this._documentMap.get(e.document);if(null==t)return;let i=await t;i.refresh("changed");let r=e.document.isDirty,s=n.window.activeTextEditor;null!=this._dirtyIdleTriggeredDebounced&&(r?this._dirtyIdleTriggeredDebounced({editor:s,document:i}):this._dirtyIdleTriggeredDebounced.cancel()),s?.document===e.document&&this._onDidChangeContent.fire({editor:s,document:i,contentChanges:e.contentChanges}),(i.forceDirtyStateChangeOnNextDocumentChange||i.dirty!==r)&&(i.resetForceDirtyStateChangeOnNextDocumentChange(),i.dirty=r,null!=s&&s.document===e.document&&this.fireDocumentDirtyStateChanged({editor:s,document:i,dirty:i.dirty}))}onTextDocumentClosed(e){this.remove(e)}async onTextDocumentSaved(e){let t=this._documentMap.get(e);null!=t&&(await t).refresh("saved")}onVisibleTextEditorsChanged(e){let t=[];for(let i of e){let e=i.document;if(!this.container.git.supportedSchemes.has(e.uri.scheme))continue;let r=this._documentMap.get(e);null!=r&&t.push(r.then(e=>e?.refresh("visible")))}Promise.allSettled(t)}async add(e){let t;if((0,x.t5)(e))try{t=await n.workspace.openTextDocument(e.documentUri())}catch(r){let i=r?.toString()??"";if(n.env.language.startsWith("en"))if(i.includes("File seems to be binary and cannot be opened as text"))t=new BinaryTextDocument(e);else if(i.includes("File not found")||i.includes("Unable to read file")||i.includes("Unable to resolve non-existing file"))t=new MissingRevisionTextDocument(e);else throw r;else if(i.includes("cannot open"))t=new MissingRevisionTextDocument(e);else throw r}else t=e instanceof n.Uri?await n.workspace.openTextDocument(e):e;return this.addCore(t)}async addCore(e,t){let i=M(this.container,this,e,e=>this._onDidChangeBlameState.fire(e),t??(0,O.Xc)(e),!1);return this._documentMap.set(e,i),i}async clear(){for(let e of this._documentMap.values())(await e).dispose();this._documentMap.clear()}get(e){if(e instanceof n.Uri){let t=(0,O.Zg)(e);if(null==t)return;e=t}return this._documentMap.get(e)}async getOrAdd(e){return this.get(e)??this.add(e)}has(e){if(e instanceof n.Uri){let t=(0,O.Zg)(e);if(null==t)return!1;e=t}return this._documentMap.has(e)}async resetCache(e,t){let i=this.get(e);if(null!=i)switch(t){case"blame":(await i).state?.clearBlame();break;case"diff":(await i).state?.clearDiff();break;case"log":(await i).state?.clearLog()}}async remove(e,t){let i;null!=t&&(i=this._documentMap.get(e)),this._documentMap.delete(e),this.updateContext(e.uri,!1,!1),(t??await i)?.dispose()}_openUrisBlameable=new r8.T;_openUrisTracked=new r8.T;_updateContextDebounced;updateContext(e,t,i){let r=!1;(function(e,t,i){i?this._openUrisTracked.has(e)||(r=!0,this._openUrisTracked.add(e)):this._openUrisTracked.has(e)&&(r=!0,this._openUrisTracked.delete(e)),t?this._openUrisBlameable.has(e)||(r=!0,this._openUrisBlameable.add(e)):this._openUrisBlameable.has(e)&&(r=!0,this._openUrisBlameable.delete(e)),r&&(this._updateContextDebounced??=(0,B.s)(()=>{(0,A.o)("gitlens:tabs:tracked",[...this._openUrisTracked]),(0,A.o)("gitlens:tabs:blameable",[...this._openUrisBlameable])},100),this._updateContextDebounced())}).call(this,e,t,i)}fireDocumentDirtyStateChanged(e){if(e.dirty){queueMicrotask(()=>{this._dirtyStateChangedDebounced?.cancel(),n.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)}),this._dirtyIdleTriggerDelay>0&&(this._dirtyIdleTriggeredDebounced??=(0,B.s)(e=>{!this._dirtyIdleTriggeredDebounced?.pending()&&e.document.setDirtyIdle()&&this._onDidTriggerDirtyIdle.fire(e)},this._dirtyIdleTriggerDelay),this._dirtyIdleTriggeredDebounced({editor:e.editor,document:e.document}));return}this._dirtyStateChangedDebounced??=(0,B.s)(e=>{n.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)},250),this._dirtyStateChangedDebounced(e)}async refreshDocuments(e){if(0!==this._documentMap.size)for(let t of this._documentMap.values()){let i=await t,r=i.uri.repoPath?.toLocaleLowerCase();null!=r&&(e?.removedRepoPaths?.has(r)?this.remove(i.document,i):(null==e||e?.addedOrChangedRepoPaths?.has(r))&&i.refresh("repositoryChanged"))}}};r9([(0,d.Yz)()],GitDocumentTracker.prototype,"addCore",1),r9([(0,d.Yz)()],GitDocumentTracker.prototype,"clear",1),r9([(0,d.Yz)()],GitDocumentTracker.prototype,"get",1),r9([(0,d.Yz)()],GitDocumentTracker.prototype,"resetCache",1),r9([(0,d.Yz)({args:{1:!1}})],GitDocumentTracker.prototype,"remove",1);let EmptyTextDocument=class EmptyTextDocument{constructor(e){this.gitUri=e,this.uri=e.documentUri(),this.eol=n.EndOfLine.LF,this.fileName=this.uri.fsPath,this.isClosed=!1,this.isDirty=!1,this.isUntitled=!1,this.languageId="",this.lineCount=0,this.version=0}eol;fileName;isClosed;isDirty;isUntitled;languageId;lineCount;uri;version;getText(e){throw Error("Method not supported.")}getWordRangeAtPosition(e,t){throw Error("Method not supported.")}lineAt(e){throw Error("Method not supported.")}offsetAt(e){throw Error("Method not supported.")}positionAt(e){throw Error("Method not supported.")}save(){throw Error("Method not supported.")}validatePosition(e){throw Error("Method not supported.")}validateRange(e){throw Error("Method not supported.")}};let BinaryTextDocument=class BinaryTextDocument extends EmptyTextDocument{};let MissingRevisionTextDocument=class MissingRevisionTextDocument extends EmptyTextDocument{};var se=Object.defineProperty,st=Object.getOwnPropertyDescriptor,si=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?st(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&se(t,i,o),o};let LineTracker=class LineTracker{constructor(e,t){this.container=e,this.documentTracker=t}_onDidChangeActiveLines=new n.EventEmitter;get onDidChangeActiveLines(){return this._onDidChangeActiveLines.event}_disposable;_editor;_state=new Map;_subscriptions=new Map;_subscriptionOnlyWhenTracking;dispose(){for(let e of(this._onDidChangeActiveLines.dispose(),this._subscriptions.keys()))this.unsubscribe(e)}onActiveTextEditorChanged(e){e!==this._editor&&(null==e||(0,F.oU)(e))&&(this._editor=e,this._selections=ss(e?.selections),this._suspended?this.resume({force:!0}):this.notifyLinesChanged("editor"))}onBlameStateChanged(e){this.notifyLinesChanged("editor")}onContentChanged(e){this.selections?.length&&e.contentChanges.some(e=>this.selections.some(t=>e.range.end.line>=t.active&&t.active>=e.range.start.line||e.range.start.line>=t.active&&t.active>=e.range.end.line))&&this.notifyLinesChanged("editor")}onDirtyIdleTriggered(e){this.resume()}onDirtyStateChanged(e){e.dirty?this.suspend():this.resume({force:!0})}onTextEditorSelectionChanged(e){if(this._editor!==e.textEditor&&!(0,F.oU)(e.textEditor))return;let t=ss(e.selections);this._editor===e.textEditor&&this.includes(t)||(this._editor=e.textEditor,this._selections=t,this.notifyLinesChanged(this._editor===e.textEditor?"selection":"editor"))}_selections;get selections(){return this._selections}_suspended=!1;get suspended(){return this._suspended}getState(e){return this._state.get(e)}resetState(e){if(null!=e)return void this._state.delete(e);this._state.clear()}setState(e,t){this._state.set(e,t)}includes(e,t){if("number"!=typeof e)return sr(e,this._selections);if(null==this._selections||0===this._selections.length)return!1;let i=t?.activeOnly??!0;for(let t of this._selections)if(e===t.active||!i&&(t.anchor>=e&&e>=t.active||t.active>=e&&e>=t.anchor))return!0;return!1}refresh(){this.notifyLinesChanged("editor")}resume(e){(e?.force||this._suspended)&&(this._suspended=!1,this._subscriptionOnlyWhenTracking??=this.documentTracker.onDidChangeContent(this.onContentChanged,this),e?.silent||this.notifyLinesChanged("editor"))}suspend(e){(e?.force||!this._suspended)&&(this._suspended=!0,this._subscriptionOnlyWhenTracking?.dispose(),this._subscriptionOnlyWhenTracking=void 0,e?.silent||this.notifyLinesChanged("editor"))}subscribed(e){return this._subscriptions.has(e)}subscribe(e,t){let i=(0,$.dQ)(),r=0===this._subscriptions.size,s=this._subscriptions.get(e);return null==s?(s=[t],this._subscriptions.set(e,s)):s.push(t),r?((0,$.TT)(i," • starting line tracker..."),this.resume({force:!0,silent:!0}),this._disposable=n.Disposable.from({dispose:()=>this.suspend({force:!0,silent:!0})},n.window.onDidChangeActiveTextEditor((0,B.s)(this.onActiveTextEditorChanged,0),this),n.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this),this.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.documentTracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this)),queueMicrotask(()=>this.onActiveTextEditorChanged(n.window.activeTextEditor))):(0,$.TT)(i," • already started..."),{dispose:()=>this.unsubscribe(e)}}unsubscribe(e){let t=this._subscriptions.get(e);if(null!=t){for(let i of(this._subscriptions.delete(e),t))i.dispose();0===this._subscriptions.size&&(this._fireLinesChangedDebounced?.cancel(),this._disposable?.dispose(),this._disposable=void 0)}}async fireLinesChanged(e){let t=!1;this.suspended||e.pending||null==e.selections||null==e.editor||(t=await this.updateState(e.selections,e.editor)),this._onDidChangeActiveLines.fire(t?e:{...e,selections:void 0,suspended:this.suspended})}_fireLinesChangedDebounced;notifyLinesChanged(e){"editor"===e&&this.resetState();let t={editor:this._editor,selections:this.selections,reason:e};if(null==t.selections)return void queueMicrotask(()=>{t.editor===n.window.activeTextEditor&&(this._fireLinesChangedDebounced?.cancel(),this.fireLinesChanged(t))});null==this._fireLinesChangedDebounced&&(this._fireLinesChangedDebounced=(0,B.s)(e=>{e.editor===n.window.activeTextEditor&&sr(e.selections,ss(e.editor?.selections))&&this.fireLinesChanged(e)},250)),this._fireLinesChangedDebounced.pending()||this.fireLinesChanged({...t,pending:!0}),this._fireLinesChangedDebounced(t)}async updateState(e,t){let i=(0,$.dQ)();if(!this.includes(e))return(0,$.TT)(i,` \u2022 lines no longer match`),!1;let r=await this.documentTracker.getOrAdd(t.document),s=await r.getStatus();if(!s.blameable)return(0,$.TT)(i,` \u2022 document is not blameable`),!1;if(1===e.length){let s=await this.container.git.getBlameForLine(r.uri,e[0].active,t?.document);if(null==s)return(0,$.TT)(i,` \u2022 blame failed`),!1;null!=s.commit&&s.commit.file,this.setState(s.line.line-1,{commit:s.commit})}else{let s=await this.container.git.getBlame(r.uri,t.document);if(null==s)return(0,$.TT)(i,` \u2022 blame failed`),!1;for(let t of e){let e=s.lines[t.active],i=s.commits.get(e.sha);null!=i&&i.file,null==i?this.resetState(t.active):this.setState(t.active,{commit:i})}}return this.includes(e)?(s=await r.getStatus()).blameable?(t.document.isDirty&&r.setForceDirtyStateChangeOnNextDocumentChange(),!0):((0,$.TT)(i,` \u2022 document is not blameable`),!1):((0,$.TT)(i,` \u2022 lines no longer match`),!1)}};function sr(e,t){return null==e&&null==t||null!=e&&null!=t&&e.length===t.length&&e.every((e,i)=>{let r=t[i];return e.active===r.active&&e.anchor===r.anchor})}function ss(e){return e?.map(e=>({active:e.active.line,anchor:e.anchor.line}))}si([(0,d.Yz)({args:{0:e=>`editor/doc=${e.editor?.document.uri.toString(!0)}, blameable=${e.blameable}`}})],LineTracker.prototype,"onBlameStateChanged",1),si([(0,d.Yz)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],LineTracker.prototype,"onContentChanged",1),si([(0,d.Yz)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],LineTracker.prototype,"onDirtyIdleTriggered",1),si([(0,d.Yz)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}, dirty=${e.dirty}`}})],LineTracker.prototype,"onDirtyStateChanged",1),si([(0,d.Yz)()],LineTracker.prototype,"resume",1),si([(0,d.Yz)()],LineTracker.prototype,"suspend",1),si([(0,d.Yz)({args:!1,singleLine:!0})],LineTracker.prototype,"subscribe",1),si([(0,d.Yz)({args:!1,singleLine:!0})],LineTracker.prototype,"unsubscribe",1),si([(0,d.Yz)({args:{0:e=>e?.map(e=>e.active).join(","),1:e=>e.document.uri.toString(!0)},exit:!0})],LineTracker.prototype,"updateState",1);var so=i(3583),sn=i(4123),sa=i(8493),sl=i(1017),su=Object.defineProperty,sc=Object.getOwnPropertyDescriptor,sh=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sc(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&su(t,i,o),o};let DeepLinkService=class DeepLinkService{constructor(e){this.container=e,this._context={state:sl.rq.Idle},this._disposables.push(this._onDeepLinkProgressUpdated,e.uri.onDidReceiveUri(async e=>this.processDeepLinkUri(e)));let t=this.container.storage.get("deepLinks:pending");this.processPendingDeepLink(t)}_context;_onDeepLinkProgressUpdated=new n.EventEmitter;_disposables=[];dispose(){n.Disposable.from(...this._disposables).dispose()}resetContext(){this._context={state:sl.rq.Idle,url:void 0,mainId:void 0,repo:void 0,remoteUrl:void 0,remote:void 0,secondaryRemote:void 0,repoPath:void 0,filePath:void 0,targetId:void 0,secondaryTargetId:void 0,secondaryRemoteUrl:void 0,targetType:void 0,targetSha:void 0,action:void 0,repoOpenLocation:void 0,repoOpenUri:void 0,params:void 0,currentBranch:void 0}}setContextFromDeepLink(e,t,i){this._context={...this._context,mainId:e.mainId,targetType:e.type,url:t,remoteUrl:e.remoteUrl,repoPath:e.repoPath,filePath:e.filePath,targetId:e.targetId,secondaryTargetId:e.secondaryTargetId,secondaryRemoteUrl:e.secondaryRemoteUrl,action:e.action,params:e.params},null!=i&&(this._context.repo=i,this._context.repoPath=i.path)}async processDeepLinkUri(e,t=!0,i){let r=(0,sl.yI)(e);if(null!=r&&this._context.state===sl.rq.Idle){if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,!r.type||!r.mainId&&!r.remoteUrl&&!r.repoPath&&!r.targetId){n.window.showErrorMessage("Unable to resolve link"),_.Vy.warn(`Unable to resolve link - missing basic properties: ${e.toString()}`);return}if(!Object.values(sl.vk).includes(r.type)){n.window.showErrorMessage("Unable to resolve link"),_.Vy.warn(`Unable to resolve link - unknown link type: ${e.toString()}`);return}if(r.type!==sl.vk.Repository&&null==r.targetId&&null==r.mainId){n.window.showErrorMessage("Unable to resolve link"),_.Vy.warn(`Unable to resolve link - no main/target id provided: ${e.toString()}`);return}if(r.type===sl.vk.Comparison&&null==r.secondaryTargetId){n.window.showErrorMessage("Unable to resolve link"),_.Vy.warn(`Unable to resolve link - no secondary target id provided: ${e.toString()}`);return}this.setContextFromDeepLink(r,e.toString(),i),await this.processDeepLink(void 0,t)}}getServiceActionFromPendingContext(){switch(this._context.state){case sl.rq.MaybeOpenRepo:return null!=this._context.repo?sl.uW.RepoOpened:sl.uW.RepoOpening;case sl.rq.SwitchToRef:if(null==this._context.repo)return sl.uW.DeepLinkErrored;switch(this._context.action){case sl.zB.SwitchToPullRequest:case sl.zB.SwitchToPullRequestWorktree:case sl.zB.SwitchToAndSuggestPullRequest:return sl.uW.OpenInspect;default:return sl.uW.DeepLinkResolved}case sl.rq.GoToTarget:if(this._context.action===sl.zB.DeleteBranch)return sl.uW.DeleteBranch;return sl.uW.DeepLinkErrored;default:return sl.uW.DeepLinkErrored}}async findMatchingRepositoryFromCurrentWindow(e,t,i){let r,s;if(null!=e){let t=(0,T.bm)(e)?n.Uri.parse(e):e;try{let e=await this.container.git.getOrOpenRepository(t,{detectNested:!1});if(null!=e){this._context.repo=e;return}}catch{}}for(let o of(null!=t&&([,r,s]=(0,rA.BX)(t)),this.container.git.repositories)){if(null!=e&&(0,T.Fd)(o.path.toLowerCase())===(0,T.Fd)(e.toLowerCase())){this._context.repo=o;return}if(null!=r&&null!=s){let e=await o.git.remotes().getRemotes({filter:e=>e.matches(r,s)});if(e.length>0){this._context.repo=o,this._context.remote=e[0];return}}if(null!=i&&"-"!==i&&await o.git.refs().isValidReference(i)){this._context.repo=o;return}}}async processPendingDeepLink(e){if(null==e||(this.container.storage.delete("deepLinks:pending"),e?.url==null))return;let t=(0,sl.yI)(n.Uri.parse(e.url));if(null==t)return;this._context={state:e.state??sl.rq.MaybeOpenRepo},this.setContextFromDeepLink(t,e.url),this._context.targetSha=e.targetSha,this._context.secondaryTargetSha=e.secondaryTargetSha,this._context.repoPath=e.repoPath,this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,await this.findMatchingRepositoryFromCurrentWindow(this._context.repoPath,this._context.remoteUrl,this._context.mainId);let i=this.getServiceActionFromPendingContext();queueMicrotask(()=>{this.processDeepLink(i,e.useProgress)})}async getBranch(e){let{repo:t,remote:i,secondaryRemote:r}=this._context;if(!t)return;let s=e;null==i||s.startsWith(`${i.name}/`)?null==r||s.startsWith(`${r.name}/`)||(s=`${r.name}/${s}`):s=`${i.name}/${s}`;let o=await t.git.branches().getBranch(s);if(null!=o)return o;if(e.includes(":")){let[i,r]=e.split(":");if(null!=i&&null!=s){let[e,n]=i.split("/");if(null!=e&&null!=n){for(let i of(await t.git.remotes().getRemotes()))if(i.provider?.owner===e&&(s=`${i.name}/${r}`,null!=(o=await t.git.branches().getBranch(s))))return o}}}return t.git.branches().getBranch(e)}async getCommit(e){let{repo:t}=this._context;if(t&&await t.git.refs().isValidReference(e))return t.git.commits().getCommit(e)}async getTag(e){let{repo:t}=this._context;return t?.git.tags().getTag(e)}async getShaForBranch(e){return(await this.getBranch(e))?.sha}async getShaForTag(e){return(await this.getTag(e))?.sha}async getShaForCommit(e){let{repo:t}=this._context;if(t&&await t.git.refs().isValidReference(e))return e}async getShasForComparison(e,t){let i=await this.getRefSha(e);if(null==i)return;let r=await this.getRefSha(t);if(null!=r)return[i,r]}async getRefSha(e){if(""===e)return e;if((0,P.HH)(e))return this.getShaForCommit(e);let t=e.toLocaleLowerCase();if(!t.startsWith("refs/tags/")&&!t.startsWith("tags/")){let t=await this.getShaForBranch(e);if(null!=t)return t}let i=await this.getShaForTag(e);return null!=i?i:this.getShaForCommit(e)}async getTargetRef(e){if(""===e)return;if((0,P.HH)(e))return this.getCommit(e);let t=e.toLocaleLowerCase();if(!t.startsWith("refs/tags/")&&!t.startsWith("tags/")){let t=await this.getBranch(e);if(null!=t)return t}let i=await this.getTag(e);return null!=i?i:this.getCommit(e)}async getShasForTargets(){let{repo:e,targetType:t,targetId:i,secondaryTargetId:r}=this._context;if(null!=e&&t!==sl.vk.Repository&&null!=i){if(t===sl.vk.Branch)return this.getShaForBranch(i);if(t===sl.vk.Tag)return this.getShaForTag(i);if(t===sl.vk.Commit)return this.getShaForCommit(i);if(t===sl.vk.File)return this.getRefSha(i);if(t===sl.vk.Comparison){if(null==r)return;return this.getShasForComparison(i,r)}}}async showOpenTypePrompt(e){let t=[{label:"Choose a Local Folder...",action:"folder"},{label:"Choose a Workspace File...",action:"workspace"}];null!=this._context.remoteUrl&&t.push({label:"Clone Repository...",action:"clone"}),e?.includeCurrent&&t.push((0,t3.uK)(),{label:"Use Current Window",action:"current"}),t.push((0,t3.uK)(),{label:"Cancel"});let i=await n.window.showQuickPick(t,{title:"Locating Repository",placeHolder:e?.customMessage??"Unable to locate a matching repository, please choose how to locate it"});return i?.action}async showOpenLocationPrompt(e){let t,i=[{label:"Open in Current Window",action:"currentWindow"},{label:"Open in New Window",action:"newWindow"}];switch("workspace"!==e&&i.push({label:"Add Folder to Workspace",action:"addToWorkspace"}),e){case"clone":t="  •  Clone";break;case"folder":t="  •  Folder";break;case"workspace":t="  •  Workspace from File";break;case"current":t=""}i.push((0,t3.uK)(),{label:"Cancel"});let r=await n.window.showQuickPick(i,{title:`Locating Repository${t}`,placeHolder:`Please choose where to open the repository ${"clone"===e?"after cloning":e}`});return r?.action}async showAddRemotePrompt(e,t){let i={label:"Add Remote"};if(await n.window.showQuickPick([i,{label:"Cancel"}],{title:"Locating Remote",placeHolder:`Unable to find remote for '${e}', would you like to add a new remote?`})===i)return await n.window.showInputBox({prompt:"Enter a name for the remote",value:function(e){let t=e.split("/");if(!(t.length<3))return t[t.length-2]}(e),validateInput:e=>e?t.includes(e)?"A remote with that name already exists":void 0:"A name is required"})}async processDeepLink(e=sl.uW.DeepLinkEventFired,t=!0){let i="",r=e;if(r===sl.uW.DeepLinkCancelled&&this._context.state===sl.rq.Idle)return;let s=[],{targetType:o}=this._context;for(t&&queueMicrotask(()=>void n.window.withProgress({cancellable:!0,location:n.ProgressLocation.Notification,title:`Opening ${(0,sl.$)(o??sl.vk.Repository)} link...`},(e,t)=>(e.report({increment:0}),new Promise(i=>{t.onCancellationRequested(()=>{queueMicrotask(()=>this.processDeepLink(sl.uW.DeepLinkCancelled)),i()}),this._onDeepLinkProgressUpdated.event(({message:t,increment:r})=>{e.report({message:t,increment:r}),100===r&&i()})}))));;){this._context.state=sl.HZ[this._context.state][r];let{state:e,mainId:o,repo:a,url:l,remoteUrl:u,secondaryRemoteUrl:c,remote:h,secondaryRemote:d,repoPath:p,filePath:g,targetId:m,secondaryTargetId:f,targetSha:w,secondaryTargetSha:v,targetType:y,repoOpenLocation:b,repoOpenUri:C}=this._context;switch(this._onDeepLinkProgressUpdated.fire(sl.aN[e]),e){case sl.rq.Idle:r===sl.uW.DeepLinkErrored&&(n.window.showErrorMessage("Unable to resolve link"),_.Vy.warn(`Unable to resolve link - ${i}: ${l}`)),this.resetContext();return;case sl.rq.AccountCheck:if(null==y){r=sl.uW.DeepLinkErrored,i="No link type provided.";break}if(!sl.VZ.includes(y)){r=sl.uW.AccountCheckPassed;break}if(!await (0,io.G5)(this.container,`Opening ${(0,sl.$)(y)} links is a Preview feature and requires an account.`,{source:"deeplink",detail:{action:"open",type:y,friendlyType:(0,sl.$)(y)}})){r=sl.uW.DeepLinkErrored,i="Account required to open link";break}r=sl.uW.AccountCheckPassed;break;case sl.rq.PlanCheck:if(null==y){r=sl.uW.DeepLinkErrored,i="No link type provided.";break}if(!sl.sE.includes(y)){r=sl.uW.PlanCheckPassed;break}if(!await (0,i7.KH)(this.container,`Opening ${(0,sl.$)(y)} links is a Pro feature.`,{source:"deeplink",detail:{action:"open",type:y,friendlyType:(0,sl.$)(y)}})){r=sl.uW.DeepLinkErrored,i="GitLens Pro is required to open link";break}r=sl.uW.PlanCheckPassed;break;case sl.rq.TypeMatch:switch(y){case sl.vk.Draft:r=sl.uW.LinkIsDraftType;break;case sl.vk.Workspace:r=sl.uW.LinkIsWorkspaceType;break;case sl.vk.Command:r=sl.uW.LinkIsCommandType;break;default:r=sl.uW.LinkIsRepoType}break;case sl.rq.RepoMatch:case sl.rq.AddedRepoMatch:{let t;if(null!=a){r=sl.uW.RepoMatched;break}if(!o&&!u&&!p){r=sl.uW.DeepLinkErrored,i="No repository id, remote url or path was provided.";break}let n=o,l=u;if(null!=t&&(this._context.remoteUrl=t.remote?.url??void 0,l=t.remote?.url,this._context.mainId=t.initialCommitSha??void 0,n=t.initialCommitSha),await this.findMatchingRepositoryFromCurrentWindow(p,l,n),null!=this._context.repo){r=sl.uW.RepoMatched;break}if(!this._context.repo&&e===sl.rq.RepoMatch&&(s=await this.container.repositoryLocator?.getLocation(l)??[]).length){for(let e of this.container.git.repositories)if(s.some(t=>(0,T.Fd)(e.path.toLowerCase())===(0,T.Fd)(t.toLowerCase()))){this._context.repo=e,r=sl.uW.RepoMatched;break}if(null==this._context.repo){r=sl.uW.RepoMatchedInLocalMapping;break}}this._context.repo||(e===sl.rq.RepoMatch?r=sl.uW.RepoMatchFailed:(r=sl.uW.DeepLinkErrored,i="No matching repository found."));break}case sl.rq.CloneOrAddRepo:{let e,t;if(!o&&!u&&!p){r=sl.uW.DeepLinkErrored,i="Missing repository id, remote url and path.";break}if(s.length>0){if(null==(e=await n.window.showQuickPick([...s,"Choose a different location"],{placeHolder:"Matching repository found. Choose a location to open it."}))){r=sl.uW.DeepLinkCancelled;break}"Choose a different location"!==e&&(this._context.repoOpenUri=n.Uri.file(e),t="folder")}if(null==t&&(t=await this.showOpenTypePrompt({customMessage:"Choose a different location"===e?"Please choose an option to open the repository":void 0})),!t){r=sl.uW.DeepLinkCancelled;break}let a=await this.showOpenLocationPrompt(t);if(!a||(this._context.repoOpenLocation=a,null==this._context.repoOpenUri&&(this._context.repoOpenUri=(await n.window.showOpenDialog({title:`Choose a ${"workspace"===t?"workspace":"folder"} to ${"clone"===t?"clone the repository to":"open the repository"}`,canSelectFiles:"workspace"===t,canSelectFolders:"workspace"!==t,canSelectMany:!1,..."workspace"===t&&{filters:{Workspaces:["code-workspace"]}}}))?.[0]),!this._context.repoOpenUri)){r=sl.uW.DeepLinkCancelled;break}if(null!=this._context.repoOpenUri&&null!=u&&"clone"===t){let e;try{e=await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Cloning repository for link: ${this._context.url}}`},async()=>this.container.git.clone(u,this._context.repoOpenUri?.fsPath??""))}catch{r=sl.uW.DeepLinkErrored,i="Unable to clone repository";break}if(!e){r=sl.uW.DeepLinkErrored,i="Unable to clone repository";break}this._context.repoOpenUri=n.Uri.file(e)}let l=await this.container.git.getOrOpenRepository(this._context.repoOpenUri,{closeOnOpen:!0,detectNested:!1});null!=l&&(this._context.repo=l,"current"===t||"workspace"===t||s.includes(this._context.repoOpenUri.fsPath)||await this.container.repositoryLocator?.storeLocation(l.uri.fsPath,u)),r=sl.uW.RepoAdded;break}case sl.rq.RemoteMatch:case sl.rq.EnsureRemoteMatch:if(p&&a&&!u&&!c){r=sl.uW.RemoteMatchUnneeded;break}if(!a||!u&&!c){r=sl.uW.DeepLinkErrored,i="Missing repository or remote url.";break}if(u&&!h){let e=await a.git.remotes().getRemotes({filter:e=>e.url===u});e.length>0&&(this._context.remote=e[0])}if(c&&!d){let e=await a.git.remotes().getRemotes({filter:e=>e.url===c});e.length>0&&(this._context.secondaryRemote=e[0])}u&&!this._context.remote||c&&!this._context.secondaryRemote?e===sl.rq.RemoteMatch?r=sl.uW.RemoteMatchFailed:(r=sl.uW.DeepLinkErrored,i="No matching remote found."):r=sl.uW.RemoteMatched;break;case sl.rq.AddRemote:{let e,t;if(!a||!u&&!c){r=sl.uW.DeepLinkErrored,i="Missing repository or remote url.";break}if(u&&!h)if(e=await this.showAddRemotePrompt(u,(await a.git.remotes().getRemotes()).map(e=>e.name)))try{if(this._context.remote=await a.git.remotes().addRemoteWithResult?.(e,u,{fetch:!0}),!this._context.remote){r=sl.uW.DeepLinkErrored,i="Failed to add remote.";break}}catch{r=sl.uW.DeepLinkErrored,i="Failed to add remote.";break}else{r=sl.uW.DeepLinkCancelled;break}if(c&&!d)if(t=await this.showAddRemotePrompt(c,(await a.git.remotes().getRemotes()).map(e=>e.name)))try{if(this._context.secondaryRemote=await a.git.remotes().addRemoteWithResult?.(t,c,{fetch:!0}),!this._context.secondaryRemote){r=sl.uW.DeepLinkErrored,i="Failed to add remote.";break}}catch{r=sl.uW.DeepLinkErrored,i="Failed to add remote.";break}else{r=sl.uW.DeepLinkCancelled;break}if(this._context.secondaryRemote&&!this._context.remote&&(this._context.remote=this._context.secondaryRemote),e||t){if(!this._context.remote){r=sl.uW.DeepLinkErrored,i="Failed to add remote.";break}}else{r=sl.uW.DeepLinkCancelled;break}r=sl.uW.RemoteAdded;break}case sl.rq.TargetMatch:case sl.rq.FetchedTargetMatch:if(!a||!y){r=sl.uW.DeepLinkErrored,i="Missing repository or target type.";break}if(y===sl.vk.Repository){r=sl.uW.TargetMatched;break}if(y===sl.vk.Comparison)[this._context.targetSha,this._context.secondaryTargetSha]=await this.getShasForTargets()??[];else if(y===sl.vk.File&&null==m){r=sl.uW.TargetMatched;break}else this._context.targetSha=await this.getShasForTargets();if(null==this._context.targetSha||null==this._context.secondaryTargetSha&&y===sl.vk.Comparison){e===sl.rq.TargetMatch&&null!=h?r=sl.uW.TargetMatchFailed:(r=sl.uW.DeepLinkErrored,i=`No matching ${null==w?"target":"secondary target"} found.`);break}r=sl.uW.TargetMatched;break;case sl.rq.Fetch:if(!a||!h){r=sl.uW.DeepLinkErrored,i="Missing repository or remote.";break}try{await a.fetch({remote:h.name,progress:!0})}catch{r=sl.uW.DeepLinkErrored,i="Error fetching remote.";break}if(d&&d.name!==h.name)try{await a.fetch({remote:d.name,progress:!0})}catch{}r=sl.uW.TargetFetched;break;case sl.rq.MaybeOpenRepo:null!=b&&null!=C?(r=sl.uW.RepoOpening,"addToWorkspace"===b&&(n.workspace.workspaceFolders?.length||0)>1||(await this.container.storage.store("deepLinks:pending",{url:this._context.url,repoPath:C.toString(),targetSha:this._context.targetSha,secondaryTargetSha:this._context.secondaryTargetSha,useProgress:t}),r=sl.uW.DeepLinkStored),(0,rF.OH)(C,{location:b})):r=sl.uW.RepoOpened;break;case sl.rq.RepoOpening:return void this._disposables.push((0,tt.Oo)(this.container.git.onDidChangeRepositories)(()=>{queueMicrotask(()=>this.processDeepLink(sl.uW.RepoOpened))}));case sl.rq.GoToTarget:if(y===sl.vk.Repository){r=this._context.action===sl.zB.Switch||this._context.action===sl.zB.SwitchToPullRequest||this._context.action===sl.zB.SwitchToPullRequestWorktree||this._context.action===sl.zB.SwitchToAndSuggestPullRequest?sl.uW.OpenSwitch:sl.uW.OpenGraph;break}switch(y){case sl.vk.File:r=sl.uW.OpenFile;break;case sl.vk.Comparison:r=sl.uW.OpenComparison;break;default:r=this._context.action===sl.zB.Switch||this._context.action===sl.zB.SwitchToPullRequest||this._context.action===sl.zB.SwitchToPullRequestWorktree||this._context.action===sl.zB.SwitchToAndSuggestPullRequest?sl.uW.OpenSwitch:y===sl.vk.Branch&&this._context.action===sl.zB.DeleteBranch?sl.uW.DeleteBranch:sl.uW.OpenGraph}break;case sl.rq.OpenGraph:if(!a||!y){r=sl.uW.DeepLinkErrored,i="Missing repository or target type.";break}if(y===sl.vk.Repository){await (0,tW.RS)("gitlens.showInCommitGraph",a),r=sl.uW.DeepLinkResolved;break}if(!w){r=sl.uW.DeepLinkErrored,i=`Cannot find target ${y} in repo.`;break}await (0,tW.RS)("gitlens.showInCommitGraph",{ref:(0,eC.kA)(w,a.path)}),r=sl.uW.DeepLinkResolved;break;case sl.rq.OpenComparison:if(!a){r=sl.uW.DeepLinkErrored,i="Missing repository.";break}if(null==m||null==f||null==w||null==v){r=sl.uW.DeepLinkErrored,i="Missing target or secondary target.";break}await this.container.views.searchAndCompare.compare(a.path,""===f||(0,P.HH)(f)?f:{label:f,ref:v},""===m||(0,P.HH)(m)?m:{label:m,ref:w}),r=sl.uW.DeepLinkResolved;break;case sl.rq.OpenDraft:{if(!m){r=sl.uW.DeepLinkErrored,i="Missing cloud patch id.";break}let e=this._context.params?.get("type"),t=this._context.params?.get("prEntityId")??void 0;null!=t&&(t=(0,eO.Ey)(t).toString()),await (0,tW.RS)("gitlens.openCloudPatch",{type:"suggested_pr_change"===e?"code_suggestion":"patch",id:m,patchId:f,prEntityId:t}),r=sl.uW.DeepLinkResolved;break}case sl.rq.OpenWorkspace:if(!o){r=sl.uW.DeepLinkErrored,i="Missing workspace id.";break}await this.container.views.workspaces.revealWorkspaceNode(o,{select:!0,focus:!0,expand:!0}),r=sl.uW.DeepLinkResolved;break;case sl.rq.OpenFile:{let e,t;if(null==g||!a){r=sl.uW.DeepLinkErrored,i="Missing file path.";break}if(null!=f){let t=f.split("-");if(1===t.length){let i=parseInt(t[0]);isNaN(i)||(e=new n.Range(i<1?0:i-1,0,i,0))}else if(2===t.length){let i=parseInt(t[0]),r=parseInt(t[1]);isNaN(i)||isNaN(r)||(e=new n.Range(i<1?0:i-1,0,r,0))}}if(null==w)try{await (0,F.gF)(n.Uri.file(`${a.path}/${g}`),{preview:!1,selection:e,throwOnError:!0}),r=sl.uW.DeepLinkResolved;break}catch(e){r=sl.uW.DeepLinkErrored,i=`Unable to open file${e?.message?`: ${e.message}`:""}`;break}try{t=this.container.git.getRevisionUri(p??a.uri.fsPath,w,g)}catch{}if(null==t){r=sl.uW.DeepLinkErrored,i="Unable to get revision uri.";break}try{await (0,sn.vM)(t,{preview:!1,selection:e}),r=sl.uW.DeepLinkResolved;break}catch{r=sl.uW.DeepLinkErrored,i="Unable to open file.";break}}case sl.rq.SwitchToRef:{if(!a||!y||!m){r=sl.uW.DeepLinkErrored,i="Missing repository or target type.";break}let e=!1;if(y===sl.vk.Branch){let t=await a.git.branches().getBranch();this._context.currentBranch=t?.name;let i=await this.getBranch(m);null!=t&&null!=i&&t.getNameWithoutRemote()===i.getNameWithoutRemote()&&(e=!0)}if(!e){let e=await this.getTargetRef(m);if(null==e){r=sl.uW.DeepLinkErrored,i="Unable to find link target in the repository.";break}let s={url:this._context.url,repoPath:a.path,targetSha:this._context.targetSha,secondaryTargetSha:this._context.secondaryTargetSha,useProgress:t,state:this._context.state},o=n.Uri.parse(this._context.url??"").toString(!0),l=new URL(o).searchParams;l.delete("prId"),l.delete("prTitle"),l.delete("prBaseRef"),l.delete("prHeadRef");let u=l.toString(),c=u.length>0?`${o.split("?")[0]}?${u}`:o.split("?")[0],h=async e=>this.container.storage.store("deepLinks:pending",e?s:{...s,url:c});if(await (0,so.b)({command:"switch",state:{repos:a,reference:e,onWorkspaceChanging:h,worktreeDefaultOpen:this._context.action===sl.zB.SwitchToPullRequestWorktree?"new":void 0}}),!await Promise.race([new Promise(e=>setTimeout(()=>e(!1),1e4)),new Promise(e=>(0,tt.Oo)(a.onDidChange)(async t=>{t.changed(R.Z_.Head,R.Ti.Any)&&((await a.git.branches().getBranch())?.name!==this._context.currentBranch?e(!0):e(!1))}))])){r=sl.uW.DeepLinkResolved;break}}r=this._context.action===sl.zB.SwitchToPullRequest||this._context.action===sl.zB.SwitchToPullRequestWorktree||this._context.action===sl.zB.SwitchToAndSuggestPullRequest?sl.uW.OpenInspect:sl.uW.DeepLinkResolved;break}case sl.rq.OpenInspect:{if(await this.container.storage.delete("deepLinks:pending"),!a){r=sl.uW.DeepLinkErrored,i="Missing repository.";break}await (0,sa.$)({type:"wip",inReview:this._context.action===sl.zB.SwitchToAndSuggestPullRequest,repository:a,source:"launchpad"});let{params:e}=this._context;if(this._context.action===sl.zB.SwitchToPullRequestWorktree&&null!=e&&(null!=e.get("prId")||null!=e.get("prTitle"))&&null!=e.get("prBaseRef")&&null!=e.get("prHeadRef")){r=sl.uW.OpenAllPrChanges;break}r=sl.uW.DeepLinkResolved;break}case sl.rq.OpenAllPrChanges:{let e=this._context.params?.get("prId"),t=this._context.params?.get("prHeadRef"),s=this._context.params?.get("prBaseRef"),o=this._context.params?.get("prTitle");if(!p||!e&&!o||!t||!s){r=sl.uW.DeepLinkErrored,i=p?e?"No pull request refs was provided.":"No pull request id provided.":"No repository path was provided.";break}await (0,sn.$5)(this.container,{repoPath:p,lhs:s,rhs:t},{title:`Changes in Pull Request ${o?`"${o}"`:`#${e}`}`}),r=sl.uW.DeepLinkResolved;break}case sl.rq.RunCommand:{if(null==o||!(0,sl.U3)(o)){r=sl.uW.DeepLinkErrored,i="Invalid command type.";break}let e=sl.Cf.get(o);if(null==e){r=sl.uW.DeepLinkErrored,i="Invalid command.";break}await (0,tW.RS)(e,{source:"deeplink"}),r=sl.uW.DeepLinkResolved;break}case sl.rq.DeleteBranch:{if(!m||!a&&!p){r=sl.uW.DeepLinkErrored,i="Missing workspace id.";break}let e=a??this.container.git.getRepository(p);if(!e){r=sl.uW.DeepLinkErrored,i="No matching repository found.";break}let t=await e.git.branches().getBranch(m);if(!t){r=sl.uW.DeepLinkErrored,i="No matching branch found.";break}(0,so.b)({command:"branch",state:{subcommand:"delete",repo:p||a.uri.fsPath,references:t}}),r=sl.uW.DeepLinkResolved;break}default:r=sl.uW.DeepLinkErrored,i="Unknown state."}}}async copyDeepLinkUrl(e,t,i,r){let s=await ("string"==typeof e?null!=t?this.generateDeepLinkUrl(e,t,i,r):this.generateDeepLinkUrl(e):this.generateDeepLinkUrl(e,t));await n.env.clipboard.writeText(s.toString())}async copyFileDeepLinkUrl(e,t,i,r,s){let o=await this.generateFileDeepLinkUr(e,t,i,r,s);await n.env.clipboard.writeText(o.toString())}async generateDeepLinkUrl(e,t,i,r){let s,o,a,l,u=h.H.get("deepLinks.schemeOverride"),c=u?!0===u?n.env.uriScheme:u:"vscode",d="";if("dev"===this.container.env?d="dev.":"staging"===this.container.env&&(d="staging."),null==t&&"string"==typeof e){let t=new URL(`https://${d}gitkraken.dev/link/workspaces/${e}`);return t.searchParams.set("origin","gitlens"),t}let p="string"!=typeof e?e.repoPath:e,g=await this.container.git.getUniqueRepositoryId(p)??"-";if("string"!=typeof e)switch(e.refType){case"branch":s=sl.vk.Branch,o=e.remote?(0,eb.km)(e.name):e.name;break;case"revision":s=sl.vk.Commit,o=e.ref;break;case"tag":s=sl.vk.Tag,o=e.name}null!=i&&null!=r&&(s=sl.vk.Comparison,o=i.ref??i.label,a=r.ref??r.label),l=s===sl.vk.Comparison?`/${s}/${a}...${o}`:null!=s&&s!==sl.vk.Repository?`/${s}/${o}`:"";let m=new URL(`${c}://${this.container.context.extension.id}/link/${sl.vk.Repository}/${g}${l}`);null!=t&&m.searchParams.set("url",t);let f=new URL(`https://${d}gitkraken.dev/link/${encodeURIComponent(Buffer.from(m.href).toString("base64"))}`);return f.searchParams.set("origin","gitlens"),f}async generateFileDeepLinkUr(e,t,i,r,s){let o=sl.vk.File,a=h.H.get("deepLinks.schemeOverride"),l=a?!0===a?n.env.uriScheme:a:"vscode",u="";"dev"===this.container.env?u="dev.":"staging"===this.container.env&&(u="staging.");let c=await this.container.git.getUniqueRepositoryId(e)??"-",d="";null!=r&&(1===r.length?d=`${r[0]}`:2===r.length&&(r[0]===r[1]?d=`${r[0]}`:r[0]<r[1]&&(d=`${r[0]}-${r[1]}`)));let p=new URL(`${l}://${this.container.context.extension.id}/link/${sl.vk.Repository}/${c}/${o}/${t}`);if(p.searchParams.set("url",i),""!==d&&p.searchParams.set("lines",d),null!=s)switch(s.refType){case"branch":case"tag":p.searchParams.set("ref",s.name);break;case"revision":p.searchParams.set("ref",s.ref)}let g=new URL(`https://${u}gitkraken.dev/link/${encodeURIComponent(Buffer.from(p.href).toString("base64"))}`);return g.searchParams.set("origin","gitlens"),g}};sh([(0,d.Yz)()],DeepLinkService.prototype,"processPendingDeepLink",1),sh([(0,d.Yz)()],DeepLinkService.prototype,"processDeepLink",1);var sd=Object.defineProperty,sp=Object.getOwnPropertyDescriptor;let UriService=class UriService{constructor(e){this.container=e,this._disposable=n.Disposable.from(this._onDidReceiveAuthenticationUri,this._onDidReceiveCloudIntegrationAuthenticationUri,this._onDidReceiveLoginUri,this._onDidReceiveSubscriptionUpdatedUri,this._onDidReceiveUri,n.window.registerUriHandler(this))}_onDidReceiveAuthenticationUri=new n.EventEmitter;get onDidReceiveAuthenticationUri(){return this._onDidReceiveAuthenticationUri.event}_onDidReceiveCloudIntegrationAuthenticationUri=new n.EventEmitter;get onDidReceiveCloudIntegrationAuthenticationUri(){return this._onDidReceiveCloudIntegrationAuthenticationUri.event}_onDidReceiveLoginUri=new n.EventEmitter;get onDidReceiveLoginUri(){return this._onDidReceiveLoginUri.event}_onDidReceiveSubscriptionUpdatedUri=new n.EventEmitter;get onDidReceiveSubscriptionUpdatedUri(){return this._onDidReceiveSubscriptionUpdatedUri.event}_onDidReceiveUri=new n.EventEmitter;get onDidReceiveUri(){return this._onDidReceiveUri.event}_disposable;dispose(){this._disposable.dispose()}handleUri(e){let[,t]=e.path.split("/");return t===i$?void this._onDidReceiveAuthenticationUri.fire(e):t===rv.Je?void this._onDidReceiveCloudIntegrationAuthenticationUri.fire(e):t===tN.Kg?void this._onDidReceiveSubscriptionUpdatedUri.fire(e):t===i_?void this._onDidReceiveLoginUri.fire(e):void this._onDidReceiveUri.fire(e)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?sp(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sd(t,i,o)})([(0,d.Rm)({args:{0:e=>e.with({query:""}).toString(!0)}})],UriService.prototype,"handleUri",1);var sg=i(2278),sm=i(9065),sf=i(5818),sw=i(6230),sv=i(3526),sy=i(9271),sb=i(6266),sC=Object.defineProperty,sR=Object.getOwnPropertyDescriptor;let RepositoriesSubscribeableNode=class RepositoriesSubscribeableNode extends sb.Y{splatted=!0;constructor(e){super("repositories",x.Bd,e)}async getSplattedChild(){return null==this.children&&await this.getChildren(),this.children?.length===1?this.children[0]:void 0}etag(){return(0,iN.L2)(this.view.container.git.etag,this.view.container.subscription.etag)}subscribe(){return n.Disposable.from((0,tt.HC)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this),(0,tt.HC)(this.view.container.subscription.onDidChange,this.onSubscriptionChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}onSubscriptionChanged(e){e.current.plan!==e.previous.plan&&this.triggerChange(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?sR(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sC(t,i,o)})([(0,d.Yz)()],RepositoriesSubscribeableNode.prototype,"subscribe",1);var sk=i(1383),sS=i(1957),sP=i(3263),sA=i(4154),sI=i(421),sD=i(1016),s_=i(7273),s$=i(8902),sT=i(8146);let BranchTrackingStatusFilesNode=class BranchTrackingStatusFilesNode extends sf.eu{constructor(e,t,i,r,s){super("tracking-status-files",x.nk.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.direction=s,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:s}),this._uniqueId=(0,sf.pF)(this.type,this.context)}get ref1(){return this.branch.ref}get ref2(){return this.status.upstream?.name}get repoPath(){return this.status.repoPath}async getFilesComparison(){let e=await this.getGroupedFiles();return{files:[...(0,X.Tj)(e,([,e])=>e[e.length-1])],repoPath:this.repoPath,ref1:this.ref1,ref2:this.ref2,title:"ahead"===this.direction?`Changes to push to ${this.ref2}`:`Changes to pull from ${this.ref2}`}}async getGroupedFiles(){let e=await this.view.container.git.commits(this.repoPath).getLog("behind"===this.direction?(0,P.Xn)(this.ref1,this.ref2,".."):(0,P.Xn)(this.ref2,this.ref1,".."),{limit:0});if(null==e)return new Map;await Promise.allSettled((0,X.Tj)((0,X.pb)(e.commits.values(),e=>e.fileset?.files==null),e=>e.ensureFullDetails()));let t=[...(0,X.qI)(e.commits.values(),e=>e.fileset?.files.map(t=>({...t,commit:e}))??[])];return t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()),(0,X.Fi)(t,e=>e.path)}async getChildren(){let e=await this.getGroupedFiles(),t=[...(0,X.Tj)(e.values(),e=>new sT.Z(this.view,this,this.repoPath,e,this.direction))];if("list"!==this.view.config.files.layout){let e=(0,tG.Ay)(t,e=>e.uri.relativePath.split("/"),(...e)=>(0,T.Fd)((0,T.HS)(...e)),this.view.config.files.compact);t=new s$.x(this.view,this,e,this.repoPath,"",void 0,!1).getChildren()}else t.sort((e,t)=>e.priority-t.priority||(0,eO.wN)(e.label,t.label));return t}async getTreeItem(){let e=await this.view.container.git.diff(this.repoPath).getChangedFilesCount("behind"===this.direction?`${this.ref1}...${this.ref2}`:`${this.ref2}...`),t=e?.files??0,i=`${(0,eO.td)("file",t)} changed`,r=new n.TreeItem(i,n.TreeItemCollapsibleState.Collapsed);return r.id=this.id,r.contextValue=sf.U0.BranchStatusFiles,r}};var sE=i(1831),sx=i(1667),sO=i(6005),sF=Object.defineProperty,sB=Object.getOwnPropertyDescriptor,sL=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sB(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sF(t,i,o),o};let BranchTrackingStatusNode=class BranchTrackingStatusNode extends sf.eu{constructor(e,t,i,r,s,o=!1,n){super("tracking-status",x.nk.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.upstreamType=s,this.root=o,this.options=n,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:s,root:o}),this._uniqueId=(0,sf.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}get repoPath(){return this.uri.repoPath}async getFilesComparison(){if("ahead"===this.upstreamType){let e=new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType),t=await e?.getFilesComparison();if(null==t)return;let i=this.options?.unpublishedCommits!=null?(0,X.HV)(this.options.unpublishedCommits):void 0;if(null==i)return;let r=await this.view.container.git.refs(this.repoPath).resolveReference(`${i}^`);return{...t,ref1:r,ref2:t.ref1,title:`Changes to push to ${t.ref2}`}}let e=(await this.getChildren()).find(e=>e.is("tracking-status-files"));return e?.getFilesComparison()}async getChildren(){let e;if(null==this.status.upstream||"same"===this.upstreamType||"missing"===this.upstreamType||"none"===this.upstreamType)return[];let t=await this.getLog();if(null==t)return[];if("ahead"===this.upstreamType){let i=(e=[...t.commits.values()])[e.length-1];if(null==await i.getPreviousSha()){let t=await this.view.container.git.commits(this.uri.repoPath).getLog(i.sha,{limit:2});null!=t&&(e[e.length-1]=(0,X.$1)(t.commits.values()))}}else e=t.commits.values();let i=[],r=!0;return!this.options?.showAheadCommits&&"ahead"===this.upstreamType&&this.status.upstream.state.ahead?(r=!1,i.push(...await new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType).getChildren())):(i.push(...(0,sO.h)((0,X.Tj)(e,e=>new sE.e(this.view,this,e,"ahead"===this.upstreamType,this.branch)),this,1)),t.hasMore&&i.push(new sx.cb(this.view,this,i[i.length-1]))),r&&i.unshift(new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType)),i}async getTreeItem(){let e,t,i,r,s,o,a=0;if("missing"!==this.upstreamType&&"none"!==this.upstreamType){let e=this.view.container.git.getRepository(this.repoPath);a=await e?.getLastFetched()??0}function l(e){return`$(git-branch) \`${this.branch.name}\` is ${(0,eH.u)(this.status.upstream,{empty:this.status.upstream.missing?`missing upstream $(git-branch) \`${this.status.upstream.name}\``:`up to date with $(git-branch) \`${this.status.upstream.name}\`${e?.provider?.name?` on ${e.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) \`${this.status.upstream.name}\`${e?.provider?.name?` on ${e.provider.name}`:""}`})}`}switch(this.upstreamType){case"ahead":{let a=await this.branch.getRemote();e="Outgoing",t=`${(0,eO.td)("commit",this.status.upstream.state.ahead)} to push to ${a?.name??(0,eb.Zq)(this.status.upstream.name)}`,o=`${(0,eO.td)("commit",this.status.upstream.state.ahead)} to push to \`${this.status.upstream.name}\`${a?.provider?.name?` on ${a?.provider.name}`:""}\\
${l.call(this,a)}`,i=n.TreeItemCollapsibleState.Collapsed,r=this.root?sf.U0.StatusAheadOfUpstream:sf.U0.BranchStatusAheadOfUpstream,s=new n.ThemeIcon("cloud-upload",new n.ThemeColor("gitlens.unpublishedChangesIconColor"));break}case"behind":{let a=await this.branch.getRemote();e="Incoming",t=`${(0,eO.td)("commit",this.status.upstream.state.behind)} to pull from ${a?.name??(0,eb.Zq)(this.status.upstream.name)}`,o=`${(0,eO.td)("commit",this.status.upstream.state.behind)} to pull from \`${this.status.upstream.name}\`${a?.provider?.name?` on ${a.provider.name}`:""}\\
${l.call(this,a)}`,i=n.TreeItemCollapsibleState.Collapsed,r=this.root?sf.U0.StatusBehindUpstream:sf.U0.BranchStatusBehindUpstream,s=new n.ThemeIcon("cloud-download",new n.ThemeColor("gitlens.unpulledChangesIconColor"));break}case"same":{let u=await this.branch.getRemote();e=`Up to date with ${u?.name??(0,eb.Zq)(this.status.upstream.name)}${u?.provider?.name?` on ${u.provider.name}`:""}`,t=a?(0,th.PI)(a):"",o=l.call(this,u),i=n.TreeItemCollapsibleState.None,r=this.root?sf.U0.StatusSameAsUpstream:sf.U0.BranchStatusSameAsUpstream,s=new n.ThemeIcon("cloud");break}case"missing":{let a=await this.branch.getRemote();e=`Missing upstream branch${a?.provider?.name?` on ${a.provider.name}`:""}`,t=this.status.upstream.name,o=l.call(this,a),i=n.TreeItemCollapsibleState.None,r=this.root?sf.U0.StatusMissingUpstream:sf.U0.BranchStatusSameAsUpstream,s=new n.ThemeIcon("warning",new n.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"));break}case"none":{let t=await this.view.container.git.remotes(this.branch.repoPath).getRemotesWithProviders(),a=(0,S.zF)(t),l=a?.length?a[0].name:void 0;e=`Publish ${this.branch.name} to ${l??"a remote"}`,o=`\`${this.branch.name}\` hasn't been published to ${l??"a remote"}`,i=n.TreeItemCollapsibleState.None,r=this.root?sf.U0.StatusNoUpstream:sf.U0.BranchStatusNoUpstream,s=new n.ThemeIcon("cloud-upload",t.length?new n.ThemeColor("gitlens.unpublishedChangesIconColor"):void 0)}}let u=new n.TreeItem(e,i);u.id=this.id,u.contextValue=r,u.description=t,a&&(o+=`

Last fetched ${(0,th.PI)(a)}`),u.iconPath=s;let c=new n.MarkdownString(o,!0);return c.supportHtml=!0,c.isTrusted=!0,u.tooltip=c,u}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if("same"!==this.upstreamType&&"none"!==this.upstreamType){if(null==this._log){let e="ahead"===this.upstreamType?(0,P.Xn)(this.status.upstream?.name,this.status.ref,".."):(0,P.Xn)(this.status.ref,this.status.upstream?.name,"..");this._log=await this.view.container.git.commits(this.uri.repoPath).getLog(e,{limit:this.limit??this.view.config.defaultItemLimit})}return this._log}}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};sL([(0,D.G)(),(0,d.Yz)()],BranchTrackingStatusNode.prototype,"refresh",1),sL([(0,D.G)()],BranchTrackingStatusNode.prototype,"loadMore",1);var sU=i(2272),sq=i(1288),sN=i(9789),sM=i(260),sW=i(9994),sG=Object.defineProperty,sH=Object.getOwnPropertyDescriptor,sV=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sH(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sG(t,i,o),o};let CompareBranchNode=class CompareBranchNode extends sb.Y{constructor(e,t,i,r,s,o=!1){super("compare-branch",e,t,i),this.parent=i,this.branch=r,this.showComparison=s,this.root=o,this.updateContext({branch:r,root:o,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,sf.pF)(this.type,this.context),this.loadCompareWith()}etag(){return 0}get ahead(){return{ref1:this._compareWith?.ref||"HEAD",ref2:this.branch.ref}}get behind(){return{ref1:this.branch.ref,ref2:this._compareWith?.ref||"HEAD"}}get compareRef(){return{label:this.branch.name,ref:this.branch.sha}}_compareWith;get compareWith(){return this._compareWith}get compareWithRef(){return null!=this._compareWith?{label:this._compareWith.label,ref:this._compareWith.ref}:void 0}_isFiltered;get filterByAuthors(){let e=this.getState("filterCommits"),t=!!e?.length;return null!=this._isFiltered&&this._isFiltered!==t&&this.updateContext({comparisonFiltered:t}),this._isFiltered=t,e}get repoPath(){return this.branch.repoPath}subscribe(){let e=[(0,tt.HC)(this.view.onDidChangeNodesCheckedState,this.onNodesCheckedStateChanged,this)];if(this.compareWithWorkingTree){let t=this.view.container.git.getRepository(this.uri);null!=t&&e.push((0,tt.HC)(t.onDidChangeFileSystem,this.onFileSystemChanged,this,[t.watchFileSystem()]))}return n.Disposable.from(...e)}onFileSystemChanged(e){this.triggerChange(!0)}onNodesCheckedStateChanged(e){let t=(0,sN.dt)(this.getStorageId());e.items.some(([e])=>e.id?.startsWith(t))&&this.storeCompareWith(!1).catch()}async getChildren(){if(null==this._compareWith)return[];if(null==this.children){let e={...this.ahead,range:(0,P.Xn)(this.ahead.ref1,this.compareWithWorkingTree?"":this.ahead.ref2,"..")},t={...this.behind,range:(0,P.Xn)(this.behind.ref1,this.behind.ref2,"..")},i=await this.view.container.git.commits(this.repoPath).getLeftRightCommitCount((0,P.Xn)(t.ref1,t.ref2,"..."),{authors:this.filterByAuthors}),r=this.view.container.git.refs(this.repoPath),s=await r.getMergeBase(t.ref1,t.ref2,{forkPoint:!0})??await r.getMergeBase(t.ref1,t.ref2),o=[new sM.V(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery(t.range),comparison:t,direction:"behind",files:{ref1:this.compareWithWorkingTree?"":s??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,eO.td)("commit",i?.right??0),expand:!1}),new sM.V(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery(e.range),comparison:e,direction:"ahead",files:{ref1:s??e.ref1,ref2:this.compareWithWorkingTree?"":e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,eO.td)("commit",i?.left??0),expand:!1})];this.filterByAuthors?.length||o.push(new sW.o(this.view,this,this.repoPath,this._compareWith.ref||"HEAD",this.compareWithWorkingTree?"":this.branch.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})),this.children=o}return this.children}getTreeItem(){let e,t,i;null==this._compareWith?(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with <branch, tag, or ref>`,e=n.TreeItemCollapsibleState.None,i=`Click to compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with a branch, tag, or ref`):(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with ${this._compareWith.label??(0,P.pV)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,e=n.TreeItemCollapsibleState.Collapsed);let r=new n.TreeItem(t,e);return r.id=this.id,r.contextValue=`${sf.U0.CompareBranch}${this.branch.current?"+current":""}+${this.comparisonType}${null==this._compareWith?"":"+comparing"}${this.root?"+root":""}${this.filterByAuthors?.length?"+filtered":""}`,null==this._compareWith&&(r.command={title:`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with${l.EO.Ellipsis}`,command:"gitlens.views.editNode",arguments:[this]}),r.iconPath=new n.ThemeIcon("git-compare"),r.tooltip=i,r}async clear(){this._compareWith=void 0,await this.updateCompareWith(void 0),this.children=void 0,this.view.triggerNodeChange(this)}clearReviewed(){this.storeCompareWith(!0).catch(),this.triggerChange()}async edit(){let e=await (0,sq.NZ)(this.branch.repoPath,`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,picked:this.branch.ref,sort:{branches:{current:!0},tags:{}}});null==e||e instanceof t3.Fj||(await this.updateCompareWith({ref:e.ref,notation:void 0,type:this.comparisonType}),this.children=void 0,this.view.triggerNodeChange(this))}refresh(e){super.refresh(e),this.loadCompareWith()}async setComparisonType(e){null!=this._compareWith?await this.updateCompareWith({...this._compareWith,type:e,checkedFiles:void 0}):this.showComparison=e,this.children=void 0,this.view.triggerNodeChange(this)}async setDefaultCompareWith(e){null==this._compareWith&&await this.updateCompareWith(e)}get comparisonType(){return this._compareWith?.type??this.showComparison}get compareWithWorkingTree(){return"working"===this.comparisonType}async getAheadFilesQuery(){let e=(0,P.Xn)(this._compareWith?.ref||"HEAD",this.branch.ref||"HEAD","..."),t=this.view.container.git.diff(this.repoPath),[i,r,s,o]=await Promise.allSettled([t.getDiffStatus(e),this.compareWithWorkingTree?t.getDiffStatus("HEAD"):void 0,t.getChangedFilesCount(e),this.compareWithWorkingTree?t.getChangedFilesCount("HEAD"):void 0]),n=(0,E.Ro)(i)??[],a=(0,E.Ro)(s);if(this.compareWithWorkingTree){let e=(0,E.Ro)(r);if(null!=e)if(0===n.length)n=e;else for(let t of e){let e=n.findIndex(e=>e.path===t.path);-1!==e?n.splice(e,1,t):n.push(t)}let t=(0,E.Ro)(o);null!=t&&(a=null==a?t:{additions:a.additions+t.additions,deletions:a.deletions+t.deletions,files:n.length,approximated:!0})}return{label:`${(0,eO.td)("file",n.length,{zero:"No"})} changed`,files:n,stats:a}}async getBehindFilesQuery(){let e=(0,P.Xn)(this.branch.ref,this._compareWith?.ref||"HEAD","..."),t=this.view.container.git.diff(this.repoPath),[i,r]=await Promise.allSettled([t.getDiffStatus(e),t.getChangedFilesCount(e)]),s=(0,E.Ro)(i)??[];return{label:`${(0,eO.td)("file",s.length,{zero:"No"})} changed`,files:s,stats:(0,E.Ro)(r)}}getCommitsQuery(e){return(0,sU.R6)(this.view.container,this.repoPath,e,this.filterByAuthors)}getFilesQuery(){let e=this.branch.ref,t=this._compareWith?.ref;return t?this.compareWithWorkingTree&&(e=""):(t=e,e=""),(0,sU.i9)(this.view.container,this.repoPath,e,t)}getStorageId(){return`${this.branch.id}${this.branch.current?"+current":""}`}loadCompareWith(){let e=this.view.container.storage.getWorkspace("branch:comparisons"),t=this.getStorageId(),i=e?.[t];null!=i&&"string"==typeof i?this._compareWith={ref:i,notation:void 0,type:this.showComparison}:(this._compareWith=i,null!=i&&(0,sN.sV)(this.view,i.checkedFiles))}async storeCompareWith(e){let t=this.getStorageId();e&&(0,sN.pi)(this.view,t);let i=this.view.container.storage.getWorkspace("branch:comparisons");if(null==i){if(null==this._compareWith)return;i=Object.create(null)}if(null!=this._compareWith){let e=(0,sN.oI)(this.view,t);this._compareWith.checkedFiles=e,i[t]={...this._compareWith}}else{if(null==i[t])return;let{[t]:e,...r}=i;i=r}await this.view.container.storage.storeWorkspace("branch:comparisons",i)}async updateCompareWith(e){this._compareWith=e,await this.storeCompareWith(!0)}};sV([(0,d.Rm)()],CompareBranchNode.prototype,"clear",1),sV([(0,d.Rm)()],CompareBranchNode.prototype,"clearReviewed",1),sV([(0,d.Rm)()],CompareBranchNode.prototype,"edit",1),sV([(0,d.Yz)()],CompareBranchNode.prototype,"refresh",1),sV([(0,d.Rm)()],CompareBranchNode.prototype,"setComparisonType",1),sV([(0,d.Rm)()],CompareBranchNode.prototype,"setDefaultCompareWith",1);let sj={"cherry-pick":{label:"Cherry picking",conflicts:"Resolve conflicts to continue cherry picking",directionality:"into"},merge:{label:"Merging",conflicts:"Resolve conflicts to continue merging",directionality:"into"},rebase:{label:"Rebasing",conflicts:"Resolve conflicts to continue rebasing",directionality:"onto",pending:"Pending rebase of"},revert:{label:"Reverting",conflicts:"Resolve conflicts to continue reverting",directionality:"in"}};var sz=i(534),sQ=i(6572),sY=i(1396),sK=i(2606);let MergeConflictFileNode=class MergeConflictFileNode extends sQ.u${constructor(e,t,i,r){super("conflict-file",x.nk.fromFile(i,r.repoPath,r.HEAD.ref),e,t,i),this.status=r}toClipboard(){return this.fileName}get baseUri(){return x.nk.fromFile(this.file,this.status.repoPath,this.status.mergeBase??"HEAD")}get fileName(){return this.file.path}getChildren(){return[new sY.N(this.view,this,this.status,this.file),new sK.a(this.view,this,this.status,this.file)]}getTreeItem(){let e=new n.TreeItem(this.label,n.TreeItemCollapsibleState.Collapsed);return e.description=this.description,e.contextValue=`${sf.U0.File}+conflicted`,e.tooltip=(0,sQ.h)(this.file,"in ```Index```"),e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=n.ThemeIcon.File,e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=sz.Z.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,I.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=sz.Z.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return(0,tW.Jl)("vscode.open","Open File",this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),{preserveFocus:!0,preview:!0})}};let MergeConflictFilesNode=class MergeConflictFilesNode extends sf.eu{constructor(e,t,i,r){super("conflict-files",x.nk.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.conflicts=r}get repoPath(){return this.uri.repoPath}getChildren(){let e=this.conflicts.map(e=>new MergeConflictFileNode(this.view,this,e,this.status));if("list"!==this.view.config.files.layout){let t=(0,tG.Ay)(e,e=>e.uri.relativePath.split("/"),(...e)=>(0,T.Fd)((0,T.HS)(...e)),this.view.config.files.compact);e=new s$.x(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort((e,t)=>(0,eO.wN)(e.label,t.label));return e}getTreeItem(){return new n.TreeItem((0,eO.td)("conflict",this.conflicts.length),n.TreeItemCollapsibleState.Expanded)}};let RebaseCommitNode=class RebaseCommitNode extends sE.e{async getTreeItem(){let e=new n.TreeItem(`Paused at commit ${this.commit.shortSha}`,this._options.expand?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=`${sf.U0.Commit}+rebase`,e.description=e9.c.fromTemplate("${message}",this.commit,{messageTruncateAtNewLine:!0}),e.iconPath=new n.ThemeIcon("debug-pause"),e}getTooltipTemplate(){return`Rebase paused at ${super.getTooltipTemplate()}`}};let PausedOperationStatusNode=class PausedOperationStatusNode extends sf.eu{constructor(e,t,i,r,s,o){super("paused-operation-status",x.nk.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.pausedOpStatus=r,this.status=s,this.root=o,this.updateContext({branch:i,root:o,pausedOperation:r.type}),this._uniqueId=(0,sf.pF)(this.type,this.context)}get repoPath(){return this.uri.repoPath}async getChildren(){if("rebase"!==this.pausedOpStatus.type)return this.status?.hasConflicts?[new MergeConflictFilesNode(this.view,this,this.pausedOpStatus,this.status.conflicts)]:[];let e=[],t=this.pausedOpStatus.steps.current.commit;if(null!=t){let i=null!=t?await this.view.container.git.commits(this.pausedOpStatus.repoPath).getCommit(t.ref):void 0;null!=i&&e.push(new RebaseCommitNode(this.view,this,i))}return this.status?.hasConflicts&&e.push(new MergeConflictFilesNode(this.view,this,this.pausedOpStatus,this.status.conflicts)),e}getTreeItem(){let e=this.status?.hasConflicts===!0,t=this.status?.hasConflicts||"rebase"===this.pausedOpStatus.type&&this.pausedOpStatus.steps.total>0&&null!=this.pausedOpStatus.steps.current.commit,i=new n.TreeItem(this.label,t?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.None);switch(i.id=this.id,this.pausedOpStatus.type){case"cherry-pick":i.contextValue=sf.U0.PausedOperationCherryPick;break;case"merge":i.contextValue=sf.U0.PausedOperationMerge;break;case"rebase":i.contextValue=sf.U0.PausedOperationRebase;break;case"revert":i.contextValue=sf.U0.PausedOperationRevert}return i.description=e?(0,eO.td)("conflict",this.status.conflicts.length):void 0,i.iconPath=new n.ThemeIcon("warning",new n.ThemeColor(e?"gitlens.decorations.statusMergingOrRebasingConflictForegroundColor":"gitlens.decorations.statusMergingOrRebasingForegroundColor")),i.tooltip=this.tooltip,i.resourceUri=(0,sg.E)("status",{status:this.pausedOpStatus.type,conflicts:e}),i}get label(){let e=this.status?.hasConflicts===!0;if("rebase"!==this.pausedOpStatus.type){let t=sj[this.pausedOpStatus.type];return`${e?t.conflicts:t.label} ${(0,eC.M4)(this.pausedOpStatus.incoming,{expand:!1,icon:!1})} ${t.directionality} ${(0,eC.M4)(this.pausedOpStatus.current,{expand:!1,icon:!1})}`}let t=this.pausedOpStatus.steps.total>0,i=sj[this.pausedOpStatus.type];return`${e?i.conflicts:t?i.label:i.pending} ${(0,eC.M4)(this.pausedOpStatus.incoming,{expand:!1,icon:!1})} ${i.directionality} ${(0,eC.M4)(this.pausedOpStatus.current??this.pausedOpStatus.onto,{expand:!1,icon:!1})}${t?` (${this.pausedOpStatus.steps.current.number}/${this.pausedOpStatus.steps.total})`:""}`}get tooltip(){let e,t=this.status?.hasConflicts===!0;if("rebase"!==this.pausedOpStatus.type){let i=sj[this.pausedOpStatus.type];e=`${i.label} ${(0,eC.M4)(this.pausedOpStatus.incoming,{label:!1})} ${i.directionality} ${(0,eC.M4)(this.pausedOpStatus.current,{label:!1})}${t?`

Resolve ${(0,eO.td)("conflict",this.status.conflicts.length)} before continuing`:""}`}else{let i=this.pausedOpStatus.steps.total>0,r=sj[this.pausedOpStatus.type];e=`${i?r.label:r.pending} ${(0,eC.M4)(this.pausedOpStatus.incoming,{label:!1})} ${r.directionality} ${(0,eC.M4)(this.pausedOpStatus.current??this.pausedOpStatus.onto,{label:!1})}${i?`

Paused at step ${this.pausedOpStatus.steps.current.number} of ${this.pausedOpStatus.steps.total}${t?`\\
Resolve ${(0,eO.td)("conflict",this.status.conflicts.length)} before continuing`:""}`:""}`}let i=new n.MarkdownString(e,!0);return i.supportHtml=!0,i.isTrusted=!0,i}};var sZ=i(6339),sJ=Object.defineProperty,sX=Object.getOwnPropertyDescriptor,s0=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sX(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sJ(t,i,o),o};let BranchNode=class BranchNode extends s_.t{constructor(e,t,i,r,s,o,n){super("branch",e,t,i),this.parent=i,this.repo=r,this.branch=s,this.root=o,this.updateContext({repository:r,branch:s,root:o}),this._uniqueId=(0,sf.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this),this.options={expand:!1,limitCommits:!1,showAsCommits:!1,showComparison:!1,showStashes:!1,showStatusDecorationOnly:this.root,showStatus:!0,showTracking:!this.root,...n}}limit;options;splatted=!0;dispose(){super.dispose(),this.children=void 0}get id(){return this._uniqueId}toClipboard(){return this.branch.name}get avoidCompacting(){return this.root||this.current||this.worktree?.opened||this.branch.detached||this.branch.starred}compacted=!1;get current(){return this.branch.current}get ref(){return this.branch}get treeHierarchy(){return this.avoidCompacting?[this.branch.name]:this.branch.getNameWithoutRemote().split("/")}get worktree(){let e=this.context.worktreesByBranch?.get(this.branch.id);return e?.isDefault?void 0:e}_children;get children(){return this._children}set children(e){this._children!==e&&((0,sD.lm)(this._children,e),this._children=e)}async getChildren(){if(null==this.children){let e,t,i,r,s=this.branch,o=0,n=!1;!1!==this.options.showComparison&&"remotes"!==this.view.type&&(n=null==(i=new CompareBranchNode(this.uri,this.view,this,s,this.options.showComparison,this.splatted)).compareWith),this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=s.upstream||s.remote)&&(0,A.SD)("gitlens:repos:withHostingIntegrationsConnected")?.includes(s.repoPath)&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")&&(e=(0,E.v6)(),r=this.getAssociatedPullRequest(s,this.root?{include:["opened","merged"]}:void 0),queueMicrotask(async()=>{await e?.promise;let t=!1,i=setTimeout(()=>{t=!0,this.view.triggerNodeChange(this)},250),n=await r;clearTimeout(i),null!=n&&null!=this.children&&this.children.splice(o,0,new sw.Xu(this.view,this,n,s)),(t||null!=n)&&this.view.triggerNodeChange(this.root?this.parent??this:this)}));let[a,u,c,h,d,p,g]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath,s.name),this.options.showStatus&&s.current?this.view.container.git.status(this.uri.repoPath).getStatus():void 0,this.options.showStatus&&s.current?this.view.container.git.status(this.uri.repoPath).getPausedOperationStatus?.():void 0,!s.remote?this.view.container.git.getBranchAheadRange(s).then(e=>e?this.view.container.git.commits(this.uri.repoPath).getLogShasOnly(e,{limit:0,merges:this.options.showMergeCommits}):void 0):void 0,n?this.view.container.git.branches(this.branch.repoPath).getBaseBranchName?.(this.branch.name):void 0,n?(0,sA.b3)(this.view.container,this.branch,{associatedPullRequest:r,timeout:100}):void 0]),m=(0,E.Ro)(a);if(null==m)return[new sx.S2(this.view,this,"No commits could be found.")];let f=[],w=(0,E.Ro)(c),v=(0,E.Ro)(h),b=(0,E.Ro)(d);if(null!=t&&f.push(new sw.Xu(this.view,this,t,s)),null!=v)f.push(new PausedOperationStatusNode(this.view,this,s,v,w??await this.view.container.git.status(this.uri.repoPath).getStatus(),this.root));else if(this.options.showTracking){let e={ref:s.ref,repoPath:s.repoPath,upstream:s.upstream};null!=e.upstream?this.root&&e.upstream.missing?f.push(new BranchTrackingStatusNode(this.view,this,s,e,"missing",this.root)):!this.root||e.upstream.state.behind||e.upstream.state.ahead?(e.upstream.state.behind&&f.push(new BranchTrackingStatusNode(this.view,this,s,e,"behind",this.root)),e.upstream.state.ahead&&f.push(new BranchTrackingStatusNode(this.view,this,s,e,"ahead",this.root,{unpublishedCommits:b}))):f.push(new BranchTrackingStatusNode(this.view,this,s,e,"same",this.root)):s.detached||f.push(new BranchTrackingStatusNode(this.view,this,s,e,"none",this.root))}if(o=0,null!=i&&(f.push(i),n)){let e,t=(0,E.Ro)(p),r=(0,E.Ro)(g);null!=(e=r?.paused?t:r?.value??t)&&i.setDefaultCompareWith({ref:e,label:e,notation:"...",type:"branch",checkedFiles:[]}),r?.paused&&r.value.then(e=>{null!=e&&i.setDefaultCompareWith({ref:e,label:e,notation:"...",type:"branch",checkedFiles:[]})})}0!==f.length&&("commits"===this.view.type?f.push(new CommitsCurrentBranchNode(this.view,this,this.branch)):f.push(new sx.S2(this.view,this,"",l.EO.Dash.repeat(2),"")));let C=(0,E.Ro)(u);f.push(...(0,sO.h)((0,X.Tj)(m.commits.values(),e=>(0,y.kk)(e)?new sZ.m(this.view,this,e,{icon:!0}):new sE.e(this.view,this,e,b?.has(e.ref),s,C)),this)),m.hasMore&&f.push(new sx.cb(this.view,this,f[f.length-1],{getCount:()=>this.view.container.git.commits(s.repoPath).getCommitCount(s.name)})),this.children=f,setTimeout(()=>e?.fulfill(),1)}return this.children}async getTreeItem(){this.splatted=!1;let e=await s1(this.view.container,this.branch,this.current,{avatars:this.view.config.avatars,pendingPullRequest:this.getState("pendingPullRequest"),showAsCommits:this.options.showAsCommits,showingLocalAndRemoteBranches:"branches"===this.view.type&&this.view.config.showRemoteBranches,showStatusDecorationOnly:this.options.showStatusDecorationOnly,useBaseNameOnly:!(this.view.config.branches?.layout!=="tree"||this.compacted||this.avoidCompacting),worktree:this.worktree,worktreesByBranch:this.context.worktreesByBranch});this.repo.closed&&(e.contextValue+="+closed");let t=new n.TreeItem(e.label,this.options.expand?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=e.contextValue,t.description=e.description,t.iconPath=e.iconPath,t.resourceUri=e.resourceUri,t.tooltip=e.tooltip,t}async star(){await this.branch.star(),this.view.refresh(!0)}async unstar(){await this.branch.unstar(),this.view.refresh(!0)}refresh(e){super.refresh?.(e),this.children=void 0,e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}_log;async getLog(){if(null==this._log){let e=this.limit??(this.root&&!this.options.limitCommits?this.view.config.pageItemLimit:this.view.config.defaultItemLimit),t=this.branch.upstream?.state.ahead??0;0!==e&&t>e&&(e=Math.min(t+1,2*e)),this._log=await this.view.container.git.commits(this.uri.repoPath).getLog(this.ref.ref,{limit:e,authors:this.options?.authors,merges:this.options?.showMergeCommits,stashes:this.options?.showStashes})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.children=void 0,this.triggerChange(!1)))}};async function s1(e,t,i,r){let s,o,a,u,c=t.status,h=[];i&&(t.rebasing&&h.push("rebasing"),h.push("current branch")),r?.worktree&&(r.worktree.opened&&!i?h.push("in an opened worktree"):h.push("in a worktree"));let d=`$(git-branch) \`${t.getNameWithoutRemote()}\`${h.length?` \xa0(_${h.join(", ")}_)`:""}`,p=sf.U0.Branch,g=!1;if(i&&(p+="+current",g=!0),t.remote&&(p+="+remote"),t.starred&&(p+="+starred"),null==t.upstream||t.upstream.missing||(p+="+tracking"),r?.showAsCommits&&(p+="+commits"),r?.worktree!=null?(p+="+worktree",g=!0,r.worktree.opened&&(p+="+opened")):r?.worktreesByBranch?.get(t.id)?.isDefault&&(g=!0),g&&(p+="+checkedout"),!t.remote)if(null!=t.upstream){let e=l.EO.Dash,i=await t.getRemote();if(t.upstream.missing)e=l.EO.Warning;else if(null!=i){let t,r;for(let{type:e}of i.urls)if("fetch"===e){if(t=!0,r)break}else if("push"===e&&(r=!0,t))break;t&&r?e=l.EO.ArrowsRightLeft:r?e=l.EO.ArrowRight:t&&(e=l.EO.ArrowLeft)}switch(o=r?.showAsCommits?`${t.getTrackingStatus({suffix:(0,eO.eV)(l.EO.Dot,1,1)})}${t.getNameWithoutRemote()}${t.rebasing?" (Rebasing)":""}${(0,eO.eV)(e,2,2)}${t.upstream.name}`:`${t.getTrackingStatus({suffix:`${l.EO.Space} `})}${e}${l.EO.Space} ${t.upstream.name}`,d+=`

Branch is ${t.getTrackingStatus({empty:`${t.upstream.missing?"missing upstream":"up to date with"} \\
 $(git-branch) \`${t.upstream.name}\`${i?.provider?.name?` on ${i.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:`\\
$(git-branch) \`${t.upstream.name}\`${i?.provider?.name?` on ${i.provider.name}`:""}`})}`,c){case"ahead":p+="+ahead",s=new n.ThemeColor("gitlens.decorations.branchAheadForegroundColor");break;case"behind":p+="+behind",s=new n.ThemeColor("gitlens.decorations.branchBehindForegroundColor");break;case"diverged":p+="+ahead+behind",s=new n.ThemeColor("gitlens.decorations.branchDivergedForegroundColor");break;case"upToDate":s=new n.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor")}}else{let i=(0,S.zF)(await e.git.remotes(t.repoPath).getRemotesWithProviders()),r=i?.length?i[0].name:void 0;d+=`

Local branch, hasn't been published to ${r??"a remote"}`}if(null!=t.date&&(o=`${o?`${o}${(0,eO.eV)(l.EO.Dot,2,2)}`:""}${t.formattedDate}`,d+=`

Last commit ${t.formatDateFromNow()} (${t.formatDate(e.BranchDateFormatting.dateFormat)})`),(d=new n.MarkdownString(d,!0)).supportHtml=!0,d.isTrusted=!0,t.starred&&d.appendMarkdown(`\\
$(star-full) Favorited`),r?.pendingPullRequest!=null&&d.appendMarkdown(`

$(loading~spin) Loading associated pull request${l.EO.Ellipsis}`),r?.showAsCommits)a="Commits";else{let e=t.getNameWithoutRemote();a=`${!r?.useBaseNameOnly?e:t.getBasename()}${t.rebasing?" (Rebasing)":""}`}let m=!1;if("local"===c&&(await e.git.remotes(t.repoPath).getRemotes()).length&&(m=!0),r?.pendingPullRequest!=null)u=new n.ThemeIcon("loading~spin");else if(r?.showAsCommits)u=new n.ThemeIcon("git-commit",s);else if(r?.worktree!=null)u=(0,ey.wL)(e,t);else if(t.remote&&r?.showingLocalAndRemoteBranches){let i=await t.getRemote();u=(0,ey.x1)(e,i,{avatars:r?.avatars})}else u=(0,ey.BI)(e,t);return{label:a,description:o,tooltip:d,contextValue:p,iconPath:u,resourceUri:(0,sg.E)("branch",{status:m?"unpublished":c,current:i,worktree:r?.worktree!=null?{opened:r.worktree.opened}:void 0,starred:t.starred,showStatusOnly:r?.showStatusDecorationOnly})}}s0([(0,eG.B)()],BranchNode.prototype,"worktree",1),s0([(0,d.Rm)()],BranchNode.prototype,"star",1),s0([(0,d.Rm)()],BranchNode.prototype,"unstar",1),s0([(0,D.G)()],BranchNode.prototype,"loadMore",1);let s2=Object.freeze({dispose:()=>{}});let CommitsCurrentBranchNode=class CommitsCurrentBranchNode extends sb.Y{constructor(e,t,i){super("commits-current-branch",x.Bd,e,t),this.branch=i,this.repo=e.container.git.getRepository(i.repoPath)}repo;getChildren(){return[]}async getTreeItem(){let e=await this.getLastFetched()??0,t=`${this.branch.name}${e?` \xa0\u2022\xa0 fetched ${(0,th.PI)(new Date(e))}`:""}`,i=new n.TreeItem("",n.TreeItemCollapsibleState.None);return i.contextValue=sf.U0.CommitsCurrentBranch,i.description=`\u2014\xa0\xA0 on ${t}`,i.tooltip=t,i}etag(){return this.repo?.etag??0}async getLastFetched(){return this.branch.upstream?.missing||this.branch.detached?void 0:this.repo?.getLastFetched()}async subscribe(){let e=await this.getLastFetched()??0,t=(0,sI.u)(e);if(0!==e&&t>0)return n.Disposable.from(null!=this.repo?(0,tt.HC)(this.repo.onDidChange,()=>this.view.triggerNodeChange(this),this):s2,(0,iN.gC)(()=>{t!==(0,sI.u)(e)&&this.resetSubscription(),this.view.triggerNodeChange(this)},t))}};let BranchOrTagFolderNode=class BranchOrTagFolderNode extends sf.eu{constructor(e,t,i,r,s,o,n,a=!1){super("branch-tag-folder",x.nk.fromRepoPath(s),e,t),this.parent=t,this.folderType=i,this.root=r,this.repoPath=s,this.folderName=o,this.relativePath=n,this._expand=a,this._uniqueId=(0,sf.pF)(`${this.type}+${i}+${n??o}`,this.context)}get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];let e=[];for(let t of this.root.children.values()){if(void 0===t.value){let i=t.descendants?.some(e=>e.is("branch")&&(e.current||e.worktree?.opened)||e.is("worktree")&&e.worktree?.opened);e.push(new BranchOrTagFolderNode(this.view,this.folderName?this:this.parent,this.folderType,t,this.repoPath,t.name,t.relativePath,i));continue}t.value.parent=this.folderName?this:this.parent,e.push(t.value)}return e}getTreeItem(){let e=new n.TreeItem(this.label,this._expand?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sf.U0.BranchOrTagFolder,e.iconPath=n.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}};var s4=Object.defineProperty,s5=Object.getOwnPropertyDescriptor;let BranchesNode=class BranchesNode extends sP.l{constructor(e,t,i,r){super("branches",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sf.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e,t="branches"===this.view.type&&this.view.config.showRemoteBranches,i=t?(await this.repo.git.remotes().getDefaultRemote())?.name:void 0,r={filter:e=>!e.remote||t&&null!=i&&e.getRemoteName()===i,sort:this.view.config.showCurrentBranchOnTop?{current:!0,groupByType:null==i,openedWorktreesByBranch:(0,sy.vJ)(this.context.worktreesByBranch)}:{current:!1,groupByType:null==i}},s=new sS.t(e=>this.repo.git.branches().getBranches({...r,paging:e}));null!=i&&(e=await (0,eb.rt)(s));let o=[];for await(let t of s.values())t.remote&&e?.has(t.name)||o.push(new BranchNode(x.nk.fromRepoPath(this.uri.repoPath,t.ref),this.view,this,this.repo,t,!1,{showComparison:"repositories"===this.view.type?this.view.config.branches.showBranchComparison:this.view.config.showBranchComparison,showStashes:this.view.config.showStashes}));if(0===o.length)return[new sx.S2(this.view,this,"No branches could be found.")];if("list"===this.view.config.branches.layout)return this.children=o,o;let n=(0,tG.Ay)(o,e=>e.treeHierarchy,(...e)=>e.join("/"),this.view.config.files.compact,e=>(e.compacted=!0,!0)),a=new BranchOrTagFolderNode(this.view,this,"branch",n,this.repo.path,"",void 0);this.children=a.getChildren()}return this.children}async getTreeItem(){let e=new n.TreeItem("Branches",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sf.U0.Branches,(await this.repo.git.remotes().getRemotes()).length&&(e.contextValue+="+remotes"),this.repo.closed&&(e.contextValue+="+closed"),e.iconPath=new n.ThemeIcon("git-branch"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?s5(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&s4(t,i,o)})([(0,d.Yz)()],BranchesNode.prototype,"refresh",1);var s7=i(3566),s8=i(8282),s6=i(8561),s3=i(5567),s9=i(3592),oe=i(3782),ot=i(3621),oi=i(2112),or=i(4931),os=i(3282),oo=i(7125),on=i(1902),oa=i(2631),ol=Object.defineProperty,ou=Object.getOwnPropertyDescriptor,oc=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ou(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ol(t,i,o),o};let{command:oh,getCommands:od}=function(){let e=new Map;return{command:function(t,i){return function(r,s,o){if(e.has(t))throw Error(`@command decorator has already been applied to the command: ${t}`);if(s&&"object"==typeof s&&"kind"in s){if("method"!==s.kind)throw Error(`@command can only be used on methods, not on ${s.kind}`);e.set(t,{command:t,handler:r,options:i});return}if(o){if("function"!=typeof o.value)throw Error(`@command can only be used on methods, not on ${typeof o.value}`);return e.set(t,{command:t,handler:o.value,options:i}),o}throw Error("Invalid decorator usage")}},getCommands:()=>e.values()}}();let ViewCommands=class ViewCommands{constructor(e){this.container=e;let t=[];for(let{command:e,handler:i,options:r}of od())t.push(op(e,i,this,r));this._disposable=n.Disposable.from(...t)}_disposable;dispose(){this._disposable.dispose()}async copyNode(e,t,i){if(0===(t=Array.isArray(t)?t:null!=e?[e]:[]).length)return;let r=(0,X.fj)((0,tG.x1)(await Promise.allSettled((0,X.Tj)(t,e=>e.toClipboard?.(i))),e=>"fulfilled"===e.status&&e.value?.trim()?e.value:void 0),`
`);await n.env.clipboard.writeText(r)}async copyOrOpenNodeUrls(e,t,i){if(!(t=Array.isArray(t)?t:null!=e?[e]:[]).length)return;let r=[...(0,tG.x1)(await Promise.allSettled((0,X.Tj)(t,e=>e.getUrl?.())),e=>"fulfilled"===e.status&&e.value?.trim()?e.value:void 0)];if(r.length){if(i)return void await n.env.clipboard.writeText(r.join(`
`));if(r.length>10){let e={title:"Open"};if(await n.window.showWarningMessage(`Are you sure you want to open ${r.length} URLs?`,{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return}for(let e of r)null!=e&&(0,iP.CZ)(e)}}copyOrOpenCommitsOnRemote(e,t,i){let r=t?.length?t.map(e=>e.ref):[e.ref];return(0,tW.RS)("gitlens.openOnRemote",{repoPath:r[0].repoPath,resource:r.map(e=>({type:rP.J.Commit,sha:e.ref})),clipboard:i})}collapseNode(){return(0,tW.S4)("list.collapseAllToFocus")}dismissNode(e){(0,sf.sr)(e.view)&&e.view.dismissNode(e)}editNode(e){if((0,sf.jZ)(e))return e.edit()}expandNode(e){return e.view.reveal(e,{select:!1,focus:!1,expand:3})}loadMoreChildren(e){return e.loadMore()}loadAllChildren(e){return e.loadAll()}refreshNode(e,t){return null==t&&(0,sf.DQ)(e)&&(e.limit=void 0,e.view.resetNodeLastKnownLimit(e)),e.view.refreshNode(e,null==t||t)}addAuthors(e){return s6.s((0,sf.K2)(e))}addAuthor(e,t){if(!e?.is("contributor"))return Promise.resolve();let i=t?.length?t.map(e=>e.contributor):[e.contributor];return s6.s(e.repoPath,i.filter(e=>!e.current))}addRemote(e){return s9.WQ((0,sf.K2)(e))}async addPullRequestRemote(e,t,i){let r=(0,oo.Yv)(t);if(r.remote?.url!=null)return await i.git.remotes().addRemote?.(r.provider.repoDomain,r.remote.url,{fetch:!0}),e.triggerChange(!0)}applyChanges(e){return e.is("results-file")?sn.YF(e.file,(0,eC.kA)(e.ref1,e.repoPath),(0,eC.kA)(e.ref2,e.repoPath)):e instanceof s_.p&&null!=e.ref&&"HEAD"!==e.ref.ref?sn.YF(e.file,e.ref):Promise.resolve()}applyStash(e){return e.is("stash")?ot.Bb(e.repoPath,e.commit):Promise.resolve()}browseRepoAtRevision(e,t){return e instanceof s_.t||e instanceof s_.p?(0,so.V)(e.uri,{before:t?.before,openInNewWindow:t?.openInNewWindow}):Promise.resolve()}cherryPick(e,t){if(!e.is("commit"))return Promise.resolve();let i=t?.length?t.map(e=>e.ref):[e.ref];return oe.$T(e.repoPath,i)}clearComparison(e){e.is("compare-branch")&&e.clear()}clearReviewed(e){let t;if(e.is("results-files")){if(null==(t=e.getParent()))return}else t=e;t.isAny("compare-branch","compare-results")&&t.clearReviewed()}closeRepository(e){e.isAny("repository","repo-folder")&&(e.repo.closed=!0)}async createBranch(e){let t=e instanceof s_.t||e instanceof s_.p?e?.ref:e?.is("tracking-status")?e.branch:void 0;if(null==t){let i=e?.repoPath?this.container.git.getRepository(e.repoPath):this.container.git.getBestRepository();if(null==i)return;t=await i.git.branches().getBranch()}return s8.vt(e?.repoPath,t)}async createPullRequest(e){if(!e.isAny("branch","tracking-status"))return Promise.resolve();let t=await e.branch.getRemote();return(0,tW.ph)("createPullRequest",{repoPath:e.repoPath,remote:null!=t?{name:t.name,provider:null!=t.provider?{id:t.provider.id,name:t.provider.name,domain:t.provider.domain}:void 0,url:t.url}:void 0,branch:{name:e.branch.name,upstream:e.branch.upstream?.name,isRemote:e.branch.remote}})}async createTag(e){let t=e instanceof s_.t||e instanceof s_.p?e?.ref:e?.is("tracking-status")?e.branch:void 0;if(null==t){let i=e?.repoPath?this.container.git.getRepository(e.repoPath):this.container.git.getBestRepository();if(null==i)return;t=await i.git.branches().getBranch()}return oi.vt(e?.repoPath,t)}async createWorktree(e){if(e?.is("worktrees")&&(e=void 0),null==e||e.is("branch"))return or.vt(e?.repoPath,void 0,e?.ref)}deleteBranch(e,t){if(!e.is("branch"))return Promise.resolve();let i=t?.length?t.map(e=>e.branch):[e.branch];return s8.TF(e.repoPath,i)}deleteStash(e,t){if(!e.is("stash"))return Promise.resolve();let i=t?.length?t.map(e=>e.commit):[e.commit];return ot.gv(e.repoPath,i)}renameStash(e){return e.is("stash")?ot.$w(e.repoPath,e.commit):Promise.resolve()}deleteTag(e,t){if(!e.is("tag"))return Promise.resolve();let i=t?.length?t.map(e=>e.tag):[e.tag];return oi.TF(e.repoPath,i)}async deleteWorktree(e,t){if(!e.is("worktree"))return;let i=(t?.length?t.map(e=>e.worktree):[e.worktree]).filter(e=>!e.isDefault&&!e.opened).map(e=>e.uri);return or.TF(e.repoPath,i)}fetch(e){return e.isAny("repository","repo-folder")?oe.hd(e.repo):e.is("remote")?s9.hd(e.remote.repoPath,e.remote.name):e.isAny("branch","tracking-status")?oe.hd(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}async highlightChanges(e){e.isAny("commit-file","stash-file","file-commit","results-file")&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(n.window.activeTextEditor,"changes",{sha:e.ref.ref},!0))}async highlightRevisionChanges(e){e.isAny("commit-file","stash-file","file-commit","results-file")&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(n.window.activeTextEditor,"changes",{sha:e.ref.ref,only:!0},!0))}merge(e){return e.isAny("branch","tag")?oe.h1(e.repoPath,e.is("branch")?e.branch:e.tag):Promise.resolve()}openBranchOnRemote(e){return(0,tW.RS)("gitlens.openBranchOnRemote",e)}openInTerminal(e){return e.isAny("tracking-status","repository","repo-folder")?(0,tW.S4)("openInTerminal",n.Uri.file(e.repoPath)):Promise.resolve()}openInIntegratedTerminal(e){return e.isAny("tracking-status","repository","repo-folder")?(0,tW.S4)("openInIntegratedTerminal",n.Uri.file(e.repoPath)):Promise.resolve()}async abortPausedOperation(e){e.is("paused-operation-status")&&await (0,s3._e)(this.container,e.pausedOpStatus.repoPath)}async continuePausedOperation(e){e.is("paused-operation-status")&&await (0,s3.Ts)(this.container,e.pausedOpStatus.repoPath)}async skipPausedOperation(e){e.is("paused-operation-status")&&await (0,s3.RG)(this.container,e.pausedOpStatus.repoPath)}async openPausedOperationInRebaseEditor(e){if(!e.is("paused-operation-status")||"rebase"!==e.pausedOpStatus.type)return;let t=await this.container.git.config(e.repoPath).getGitDir?.();if(null==t)return;let i=n.Uri.joinPath(t.uri,"rebase-merge","git-rebase-todo");(0,tW.S4)("vscode.openWith",i,"gitlens.rebase",{preview:!1})}openPullRequest(e){return e.is("pullrequest")?(0,tW.ph)("openPullRequest",{repoPath:e.uri.repoPath,provider:{id:e.pullRequest.provider.id,name:e.pullRequest.provider.name,domain:e.pullRequest.provider.domain},pullRequest:{id:e.pullRequest.id,url:e.pullRequest.url}}):Promise.resolve()}async openPullRequestChanges(e){if(!e.is("pullrequest")&&!e.is("launchpad-item"))return Promise.resolve();let t=e.pullRequest;if(t?.refs?.base==null||t?.refs.head==null)return Promise.resolve();let i=await (0,os.w8)(this.container,t,e.repoPath);if(null==i)return Promise.resolve();let r=(0,oo.tI)(i.path,t.refs);return null==await (0,os.td)(t,i,{promptMessage:`Unable to open changes for PR #${t.id} because of a missing remote.`},r)?Promise.resolve():sn.$5(this.container,{repoPath:r.repoPath,lhs:r.base.ref,rhs:r.head.ref},{title:`Changes in Pull Request #${t.id}`})}async openPullRequestComparison(e){if(!e.is("pullrequest")&&!e.is("launchpad-item"))return Promise.resolve();let t=e.pullRequest;if(t?.refs?.base==null||t?.refs.head==null)return Promise.resolve();let i=await (0,os.w8)(this.container,t,e.repoPath);if(null==i)return Promise.resolve();let r=(0,oo.tI)(i.path,t.refs);return null==await (0,os.td)(t,i,{promptMessage:`Unable to open comparison for PR #${t.id} because of a missing remote.`},r)?Promise.resolve():this.container.views.searchAndCompare.compare(r.repoPath,r.head,r.base)}async openDraft(e){await (0,on.X)({mode:"view",draft:e.draft})}async openDraftOnWeb(e){let t=this.container.drafts.generateWebUrl(e.draft);await (0,iP.CZ)(t)}async openWorktree(e,t,i){let r;if((e.is("branch")||e.is("worktree"))&&null!=e.worktree){if(t?.length&&i?.location==="newWindow"){let e={folders:(0,tG.x1)(t,e=>null!=e.worktree?{name:e.worktree.name,path:e.worktree.uri.fsPath}:void 0),settings:{}};r=n.Uri.file((0,t$.ZR)(`worktrees-${Date.now()}.code-workspace`)),await n.workspace.fs.writeFile(r,new TextEncoder().encode(JSON.stringify(e,null,2)))}else r=e.worktree.uri;(0,rF.OH)(r,i)}}async openInWorktree(e){if(e.is("branch")||e.is("pullrequest")||e.is("launchpad-item")){if(e.is("branch")){let t=await e.branch.getAssociatedPullRequest();if(null!=t){let i=(await e.branch.getRemote())?.url??(0,oo.Yv)(t).remote.url;if(null!=i){let r=(0,rS.pX)(this.container,t,e.branch.getNameWithoutRemote(),i,sl.zB.SwitchToPullRequestWorktree);return this.container.deepLinks.processDeepLinkUri(r,!1,e.repo)}}return(0,so.b)({command:"switch",state:{repos:e.repo,reference:e.branch,worktreeDefaultOpen:"new"}})}if(e.is("pullrequest")||e.is("launchpad-item")){let t=e.pullRequest;if(t?.refs?.head==null)return Promise.resolve();let i=(0,oo.Yv)(t);if(null==i.remote.url)return Promise.resolve();let r=(0,rS.pX)(this.container,t,t.refs.head.branch,i.remote.url,sl.zB.SwitchToPullRequestWorktree),s=await (0,os.sY)(this.container,t,{skipVirtual:!0});return this.container.deepLinks.processDeepLinkUri(r,!1,s)}}}pruneRemote(e){return e.is("remote")?s9.R3(e.remote.repoPath,e.remote.name):Promise.resolve()}async removeRemote(e){return e.is("remote")?s9.TF(e.remote.repoPath,e.remote.name):Promise.resolve()}publishBranch(e){return e.isAny("branch","tracking-status")?oe.VC(e.repoPath,void 0,e.branch):Promise.resolve()}publishRepository(e){return e.isAny("branch","tracking-status")?(0,tW.wS)("git.publish",n.Uri.file(e.repoPath)):Promise.resolve()}pull(e){return e.isAny("repository","repo-folder")?oe.a$(e.repo):e.isAny("branch","tracking-status")?oe.a$(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}push(e,t){return e.isAny("repository","repo-folder")?oe.VC(e.repo,t):e.isAny("branch","tracking-status")?oe.VC(e.repoPath,t,e.root?void 0:e.branch):e.isAny("commit","file-commit")?e.isTip?oe.VC(e.repoPath,t):this.pushToCommit(e):Promise.resolve()}pushToCommit(e){return e.isAny("commit","file-commit")?oe.VC(e.repoPath,!1,e.commit):Promise.resolve()}rebase(e){return e.isAny("branch","commit","file-commit","tag")?oe.RU(e.repoPath,e.ref):Promise.resolve()}rebaseToRemote(e){if(!e.isAny("branch","tracking-status"))return Promise.resolve();let t=e.is("branch")?e.branch.upstream?.name:e.status.upstream?.name;return null==t?Promise.resolve():oe.RU(e.repoPath,(0,eC.kA)(t,e.repoPath,{refType:"branch",name:t,remote:!0}))}renameBranch(e){return e.is("branch")?s8.$w(e.repoPath,e.branch):Promise.resolve()}resetCommit(e){return e.isAny("commit","file-commit")?oe.cL(e.repoPath,(0,eC.kA)(`${e.ref.ref}^`,e.ref.repoPath,{refType:"revision",name:`${e.ref.name}^`,message:e.ref.message})):Promise.resolve()}resetToCommit(e){return e.isAny("commit","file-commit")?oe.cL(e.repoPath,e.ref):Promise.resolve()}resetToTip(e){return e.is("branch")?oe.cL(e.repoPath,(0,eC.kA)(e.ref.ref,e.repoPath,{refType:"revision",name:e.ref.name})):Promise.resolve()}restore(e){return e instanceof s_.p?sn.VX(e.file,e.ref):Promise.resolve()}revealRepositoryInExplorer(e){if(e.is("repository"))return(0,t6.mP)(e.repo.uri)}revealWorktreeInExplorer(e){return"string"==typeof e?(0,t6.mP)(n.Uri.parse(e)):e.is("worktree")?(0,t6.mP)(e.worktree.uri):void 0}revert(e){return e.isAny("commit","file-commit")?oe.ru(e.repoPath,e.ref):Promise.resolve()}setAsDefault(e){return e.is("remote")?e.setAsDefault():Promise.resolve()}setBranchComparison(e,t){if(e.is("compare-branch"))return e.setComparisonType(t)}setShowRelativeDateMarkers(e){return h.H.updateEffective("views.showRelativeDateMarkers",e)}setContributorsStatistics(e){return h.H.updateEffective("views.showContributorsStatistics",e)}async stageFile(e){(e.isAny("commit-file","file-commit")||e.is("status-file"))&&(await this.container.git.staging(e.repoPath)?.stageFile(e.file.path),e.triggerChange())}async stageDirectory(e){e.is("folder")&&e.relativePath&&(await this.container.git.staging(e.repoPath)?.stageDirectory(e.relativePath),e.triggerChange())}async star(e){return e.isAny("branch","repository","repo-folder")?e.star():Promise.resolve()}switch(e){return oe.S_((0,sf.K2)(e))}switchTo(e){return e instanceof s_.t?oe.S_(e.repoPath,e.is("branch")&&e.branch.current?void 0:e.ref):oe.S_((0,sf.K2)(e))}async undoCommit(e){e.isAny("commit","file-commit")&&await sn.MQ(this.container,e.ref)}unsetAsDefault(e){return e.is("remote")?e.setAsDefault(!1):Promise.resolve()}async unstageFile(e){e.isAny("commit-file","file-commit","status-file")&&(await this.container.git.staging(e.repoPath)?.unstageFile(e.file.path),e.triggerChange())}async unstageDirectory(e){e.is("folder")&&e.relativePath&&(await this.container.git.staging(e.repoPath)?.unstageDirectory(e.relativePath),e.triggerChange())}async unstar(e){return e.isAny("branch","repository","repo-folder")?e.unstar():Promise.resolve()}async compareHeadWith(e){if(e instanceof s_.p)return this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,"HEAD");if(!(e instanceof s_.t))return Promise.resolve();let[t,i]=await sn.Di(this.container,e.repoPath,"HEAD",e.ref.ref);return this.container.views.searchAndCompare.compare(e.repoPath,t,i)}compareBranchWithHead(e){return e instanceof s_.t?this.container.views.searchAndCompare.compare(e.repoPath,e.ref,"HEAD"):Promise.resolve()}async compareWithMergeBase(e){if(!e.is("branch"))return Promise.resolve();let t=await this.container.git.branches(e.repoPath).getBranch();if(null==t)return;let i=await this.container.git.refs(e.repoPath).getMergeBase(t.ref,e.ref.ref);if(null!=i)return this.container.views.searchAndCompare.compare(e.repoPath,e.ref.ref,{ref:i,label:`${t.ref} (${(0,P.pV)(i)})`})}async openChangedFileDiffsWithMergeBase(e){if(!e.is("branch"))return Promise.resolve();let t=await this.container.git.branches(e.repoPath).getBranch();if(null==t)return;let i=await this.container.git.refs(e.repoPath).getMergeBase(t.ref,e.ref.ref);if(null!=i)return sn.$5(this.container,{repoPath:e.repoPath,lhs:i,rhs:e.ref.ref},{title:`Changes between ${t.ref} (${(0,P.pV)(i)}) ${l.EO.ArrowLeftRightLong} ${(0,P.pV)(e.ref.ref,{strings:{working:"Working Tree"}})}`})}compareWithUpstream(e){return e.is("branch")&&null!=e.branch.upstream?this.container.views.searchAndCompare.compare(e.repoPath,e.ref,e.branch.upstream.name):Promise.resolve()}compareWorkingWith(e){return e instanceof s_.p?this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,""):e instanceof s_.t?this.container.views.searchAndCompare.compare(e.repoPath,"",e.ref):Promise.resolve()}async compareAncestryWithWorking(e){if(!e.is("branch"))return;let t=await this.container.git.branches(e.repoPath).getBranch();if(null==t)return;let i=await this.container.git.refs(e.repoPath).getMergeBase(t.ref,e.ref.ref);if(null!=i)return this.container.views.searchAndCompare.compare(e.repoPath,"",{ref:i,label:`${t.ref} (${(0,P.pV)(i)})`})}compareWithSelected(e){(e instanceof s_.t||e instanceof s_.p)&&this.container.views.searchAndCompare.compareWithSelected(e.repoPath,e.ref)}selectForCompare(e){(e instanceof s_.t||e instanceof s_.p)&&this.container.views.searchAndCompare.selectForCompare(e.repoPath,e.ref)}async compareFileWith(e,t,i,r,s){return null==r&&(r=await this.container.git.getWorkingUri(e,t)),(0,tW.RS)("gitlens.diffWith",{repoPath:e,lhs:{sha:i,uri:t},rhs:{sha:s,uri:r??t}})}compareFileWithSelected(e){if(null==this._selectedFile||!(e instanceof s_.p)||null==e.ref)return Promise.resolve();if(this._selectedFile.repoPath!==e.repoPath)return this.selectFileForCompare(e),Promise.resolve();let t=this._selectedFile;return this._selectedFile=void 0,(0,A.o)("gitlens:views:canCompare:file",!1),this.compareFileWith(t.repoPath,t.uri,t.ref,e.uri,e.ref.ref)}_selectedFile;selectFileForCompare(e){e instanceof s_.p&&null!=e.ref&&(this._selectedFile={ref:e.ref.ref,repoPath:e.repoPath,uri:e.uri},(0,A.o)("gitlens:views:canCompare:file",!0))}async openAllChanges(e,t,i){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let r=await e.getFilesComparison();if(!r?.files.length)return;return null!=r.title&&(t={...t,title:r.title}),sn.WD(this.container,r.files,{repoPath:r.repoPath,lhs:r.ref1,rhs:r.ref2},i,t)}if(e.isAny("commit","stash"))return sn.P3(this.container,e.commit,i,t)}openChanges(e){if(e.is("conflict-file"))return void(0,tW.RS)("gitlens.diffWith",{lhs:{sha:e.status.HEAD.ref,uri:x.nk.fromFile(e.file,e.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:x.nk.fromFile(e.file,e.repoPath)},repoPath:e.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}});if(!(e instanceof s_.p)&&!e.is("status-file"))return;let t=e.getCommand();if(t?.arguments!=null)switch(t.command){case"gitlens.diffWith":{let[e]=t.arguments;e.showOptions.preview=!1,(0,tW.RS)(t.command,e);break}case"gitlens.diffWithPrevious":{let[,e]=t.arguments;e.showOptions.preview=!1,(0,tW.Y0)(t.command,void 0,e);break}default:throw Error(`Unexpected command: ${t.command}`)}}async openAllChangesWithWorking(e,t,i){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let r=await e.getFilesComparison();if(!r?.files.length)return;return sn.fl(this.container,r.files,{repoPath:r.repoPath,ref:r.ref1||r.ref2},i,t)}if(e.isAny("commit","stash"))return sn.Qv(this.container,e.commit,i,t)}async mergeChangesWithWorking(e){if(!(e instanceof s_.p))return Promise.resolve();let t=this.container.git.getRepository(e.repoPath);if(null==t)return Promise.resolve();let i=await this.container.git.getBestRevisionUri(e.repoPath,e.file.path,e.ref.ref);if(null==i)return Promise.resolve();let r={uri:i,title:"Incoming",detail:` ${e.ref.name}`},[s,o]=await Promise.allSettled([t.git.refs().getMergeBase(e.ref.ref,"HEAD"),this.container.git.getWorkingUri(e.repoPath,e.uri)]),a=(0,E.Ro)(o);if(null==a)return n.window.showWarningMessage("Unable to open the merge editor, no working file found"),Promise.resolve();let l={uri:a,title:"Current",detail:" Working Tree"},u=await this.container.git.getBestRevisionUri(e.repoPath,e.file.path,"HEAD");if(null!=u){let e=await t.git.branches().getBranch?.();l.uri=u,l.detail=` ${e?.name||"HEAD"}`}let c=(0,E.Ro)(s),h=null!=c?await this.container.git.getBestRevisionUri(e.repoPath,e.file.path,c):void 0;return(0,F.g6)({base:h??i,input1:r,input2:l,output:a})}async openChangesWithMergeBase(e){if(!e.is("results-file"))return Promise.resolve();let t=await this.container.git.refs(e.repoPath).getMergeBase(e.ref1,e.ref2||"HEAD");return null==t?Promise.resolve():sn.eX(e.file,{repoPath:e.repoPath,lhs:t,rhs:e.ref1},{preserveFocus:!0,preview:!0,lhsTitle:`${(0,T.P8)(e.uri.fsPath)} (Base)`})}async openChangesWithWorking(e){if(e.is("status-file"))return(0,tW.Y0)("gitlens.diffWithWorking",void 0,{uri:e.uri,showOptions:{preserveFocus:!0,preview:!0}});if(e.is("conflict-file"))return(0,tW.Y0)("gitlens.diffWithWorking",void 0,{uri:e.baseUri,showOptions:{preserveFocus:!0,preview:!0}});if(e.is("file-commit")&&e.commit.file?.hasConflicts){let t=await e.getConflictBaseUri();if(null!=t)return(0,tW.Y0)("gitlens.diffWithWorking",void 0,{uri:t,showOptions:{preserveFocus:!0,preview:!0}})}return e instanceof s_.p?sn.DD(e.file,{repoPath:e.repoPath,ref:e.is("results-file")&&""!==e.ref2?e.ref2:e.ref.ref}):Promise.resolve()}async openPreviousChangesWithWorking(e){return e instanceof s_.p?sn.DD(e.file,{repoPath:e.repoPath,ref:e.is("results-file")&&""!==e.ref2?e.ref1:`${e.ref.ref}^`}):Promise.resolve()}openFile(e,t){return e instanceof s_.p||e.isAny("conflict-file","status-file","file-history","line-history")?sn.Tq(e.uri,{preserveFocus:!0,preview:!1,...t}):Promise.resolve()}async openFiles(e){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return sn.Km(t.files,{repoPath:t.repoPath,ref:t.ref1||t.ref2})}if(e.isAny("commit","stash"))return sn.Km(e.commit)}async openOnlyChangedFiles(e){if(e.is("compare-results")||e.is("results-files")||e.is("tracking-status")||e.is("tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return sn.E9(e.view.container,t.files)}if(e.isAny("commit","stash"))return sn.E9(e.view.container,e.commit)}async openRevision(e,t){if(!e.isAny("commit-file","file-commit","results-file","stash-file","conflict-file","status-file"))return Promise.resolve();let i=(t={showOptions:{preserveFocus:!0,preview:!1},...t}).revisionUri;return null==i&&(i=e.isAny("results-file","conflict-file")?this.container.git.getRevisionUriFromGitUri(e.uri):e.commit.file?.status==="D"?this.container.git.getRevisionUri(e.commit.repoPath,await e.commit.getPreviousSha()??k.nB,e.commit.file.path):this.container.git.getRevisionUriFromGitUri(e.uri)),sn.vM(i,t.showOptions??{preserveFocus:!0,preview:!1})}async openRevisions(e,t){if(e.isAny("compare-results","results-files","tracking-status","tracking-status-files")){let t=await e.getFilesComparison();if(!t?.files.length)return;return sn.m(t.files,{repoPath:t.repoPath,lhs:t.ref2,rhs:t.ref1})}if(e.isAny("commit","stash"))return sn.m(e.commit,t)}async setResultsCommitsFilter(e,t){if(!e?.isAny("compare-results","compare-branch"))return;let i=this.container.git.getRepository(e.repoPath);if(null!=i){if(t){let r=e.getState("filterCommits");if(null==r){let e=await i.git.config().getCurrentUser();r=null!=e?[e]:void 0}let s=await (0,oa.W)(this.container,i,"Filter Commits",i.virtual?"Choose a contributor to show commits from":"Choose contributors to show commits from",{appendReposToTitle:!0,clearButton:!0,multiselect:!i.virtual,picked:e=>r?.some(t=>tH(e,t))??!1});if(null==s)return;0===s.length?(t=!1,e.deleteState("filterCommits")):e.storeState("filterCommits",s)}else e.deleteState("filterCommits");e.triggerChange(!0)}}setResultsFilesFilter(e,t){e.is("results-files")&&(e.filter=t)}async associateIssueWithBranch(e){if(!e.is("branch"))return Promise.resolve();(0,tW.RS)("gitlens.associateIssueWithBranch",{command:"associateIssueWithBranch",branch:e.ref,source:"view"})}async generateChangelog(e){e.is("results-commits")&&await (0,s7.D)(this.container,(0,is.R)(()=>e.getChangesForChangelog()),{source:"view",detail:"comparison"},{progress:{location:n.ProgressLocation.Notification}})}async generateChangelogFrom(e){(e.is("branch")||e.is("tag"))&&await (0,tW.RS)("gitlens.ai.generateChangelog",{repoPath:e.repoPath,head:e.ref,source:{source:"view",detail:e.is("branch")?"branch":"tag"}})}};function op(e,t,i,r){return(0,tW.Lb)(e,(...e)=>{if(r?.args!=null&&(e=r.args(...e)),r?.multiselect){let[s,o,...n]=e;if(s instanceof sf.eu&&Array.isArray(o)&&o[0]instanceof sf.eu){let e=o.filter(e=>e?.constructor===s.constructor);return"sequential"===r.multiselect?(e.includes(s)||e.splice(0,0,s),(0,iN.CX)(t,e.map(e=>[e,...n]),i)):t.apply(i,[s,e,...n])}}return t.apply(i,e)},i)}oc([oh("gitlens.views.copy",{args:(e,t)=>[e,t,"text"]}),oh("gitlens.views.copyAsMarkdown",{args:(e,t)=>[e,t,"markdown"]}),(0,d.Rm)()],ViewCommands.prototype,"copyNode",1),oc([oh("gitlens.views.copyUrl",{args:(e,t)=>[e,t,!0]}),oh("gitlens.views.copyUrl.multi",{args:(e,t)=>[e,t,!0],multiselect:!0}),oh("gitlens.views.openUrl",{args:(e,t)=>[e,t,!1]}),oh("gitlens.views.openUrl.multi",{args:(e,t)=>[e,t,!1],multiselect:!0}),(0,d.Rm)()],ViewCommands.prototype,"copyOrOpenNodeUrls",1),oc([oh("gitlens.views.copyRemoteCommitUrl",{args:(e,t)=>[e,t,!0]}),oh("gitlens.views.copyRemoteCommitUrl.multi",{args:(e,t)=>[e,t,!0],multiselect:!0}),oh("gitlens.views.openCommitOnRemote",{args:(e,t)=>[e,t,!1]}),oh("gitlens.views.openCommitOnRemote.multi",{args:(e,t)=>[e,t,!1],multiselect:!0}),(0,d.Rm)()],ViewCommands.prototype,"copyOrOpenCommitsOnRemote",1),oc([oh("gitlens.views.collapseNode"),(0,d.Rm)()],ViewCommands.prototype,"collapseNode",1),oc([oh("gitlens.views.dismissNode"),(0,d.Rm)()],ViewCommands.prototype,"dismissNode",1),oc([oh("gitlens.views.editNode"),(0,d.Rm)()],ViewCommands.prototype,"editNode",1),oc([oh("gitlens.views.expandNode"),(0,d.Rm)()],ViewCommands.prototype,"expandNode",1),oc([oh("gitlens.views.loadMoreChildren"),(0,d.Rm)()],ViewCommands.prototype,"loadMoreChildren",1),oc([oh("gitlens.views.loadAllChildren"),(0,d.Rm)()],ViewCommands.prototype,"loadAllChildren",1),oc([oh("gitlens.views.refreshNode",{multiselect:"sequential"}),(0,d.Rm)()],ViewCommands.prototype,"refreshNode",1),oc([oh("gitlens.views.addAuthors"),(0,d.Rm)()],ViewCommands.prototype,"addAuthors",1),oc([oh("gitlens.views.addAuthor"),oh("gitlens.views.addAuthor.multi",{multiselect:!0}),(0,d.Rm)()],ViewCommands.prototype,"addAuthor",1),oc([oh("gitlens.views.addRemote"),(0,d.Rm)()],ViewCommands.prototype,"addRemote",1),oc([oh("gitlens.views.addPullRequestRemote"),(0,d.Rm)()],ViewCommands.prototype,"addPullRequestRemote",1),oc([oh("gitlens.views.applyChanges"),(0,d.Rm)()],ViewCommands.prototype,"applyChanges",1),oc([oh("gitlens.views.stash.apply"),(0,d.Rm)()],ViewCommands.prototype,"applyStash",1),oc([oh("gitlens.views.browseRepoAtRevision"),oh("gitlens.views.browseRepoAtRevisionInNewWindow",{args:e=>[e,{openInNewWindow:!0}]}),oh("gitlens.views.browseRepoBeforeRevision",{args:e=>[e,{before:!0}]}),oh("gitlens.views.browseRepoBeforeRevisionInNewWindow",{args:e=>[e,{before:!0,openInNewWindow:!0}]}),(0,d.Rm)()],ViewCommands.prototype,"browseRepoAtRevision",1),oc([oh("gitlens.views.cherryPick"),oh("gitlens.views.cherryPick.multi",{multiselect:!0}),(0,d.Rm)()],ViewCommands.prototype,"cherryPick",1),oc([oh("gitlens.views.clearComparison"),(0,d.Rm)()],ViewCommands.prototype,"clearComparison",1),oc([oh("gitlens.views.clearReviewed"),(0,d.Rm)()],ViewCommands.prototype,"clearReviewed",1),oc([oh("gitlens.views.closeRepository"),(0,d.Rm)()],ViewCommands.prototype,"closeRepository",1),oc([oh("gitlens.views.title.createBranch",{args:()=>[]}),oh("gitlens.views.createBranch"),(0,d.Rm)()],ViewCommands.prototype,"createBranch",1),oc([oh("gitlens.views.createPullRequest"),(0,d.Rm)()],ViewCommands.prototype,"createPullRequest",1),oc([oh("gitlens.views.title.createTag",{args:()=>[]}),oh("gitlens.views.createTag"),(0,d.Rm)()],ViewCommands.prototype,"createTag",1),oc([oh("gitlens.views.title.createWorktree",{args:()=>[]}),oh("gitlens.views.createWorktree"),(0,d.Rm)()],ViewCommands.prototype,"createWorktree",1),oc([oh("gitlens.views.deleteBranch"),oh("gitlens.views.deleteBranch.multi",{multiselect:!0}),(0,d.Rm)()],ViewCommands.prototype,"deleteBranch",1),oc([oh("gitlens.views.stash.delete"),oh("gitlens.views.stash.delete.multi",{multiselect:!0}),(0,d.Rm)()],ViewCommands.prototype,"deleteStash",1),oc([oh("gitlens.views.stash.rename"),(0,d.Rm)()],ViewCommands.prototype,"renameStash",1),oc([oh("gitlens.views.deleteTag"),oh("gitlens.views.deleteTag.multi",{multiselect:!0}),(0,d.Rm)()],ViewCommands.prototype,"deleteTag",1),oc([oh("gitlens.views.deleteWorktree"),oh("gitlens.views.deleteWorktree.multi",{multiselect:!0}),(0,d.Rm)()],ViewCommands.prototype,"deleteWorktree",1),oc([oh("gitlens.views.fetch"),(0,d.Rm)()],ViewCommands.prototype,"fetch",1),oc([oh("gitlens.views.highlightChanges"),(0,d.Rm)()],ViewCommands.prototype,"highlightChanges",1),oc([oh("gitlens.views.highlightRevisionChanges"),(0,d.Rm)()],ViewCommands.prototype,"highlightRevisionChanges",1),oc([oh("gitlens.views.mergeBranchInto"),(0,d.Rm)()],ViewCommands.prototype,"merge",1),oc([oh("gitlens.views.openBranchOnRemote"),oh("gitlens.views.openBranchOnRemote.multi",{multiselect:"sequential"}),(0,d.Rm)()],ViewCommands.prototype,"openBranchOnRemote",1),oc([oh("gitlens.views.openInTerminal"),(0,d.Rm)()],ViewCommands.prototype,"openInTerminal",1),oc([oh("gitlens.views.openInIntegratedTerminal"),(0,d.Rm)()],ViewCommands.prototype,"openInIntegratedTerminal",1),oc([oh("gitlens.views.abortPausedOperation"),(0,d.Rm)()],ViewCommands.prototype,"abortPausedOperation",1),oc([oh("gitlens.views.continuePausedOperation"),(0,d.Rm)()],ViewCommands.prototype,"continuePausedOperation",1),oc([oh("gitlens.views.skipPausedOperation"),(0,d.Rm)()],ViewCommands.prototype,"skipPausedOperation",1),oc([oh("gitlens.views.openPausedOperationInRebaseEditor"),(0,d.Rm)()],ViewCommands.prototype,"openPausedOperationInRebaseEditor",1),oc([oh("gitlens.views.openPullRequest"),(0,d.Rm)()],ViewCommands.prototype,"openPullRequest",1),oc([oh("gitlens.views.openPullRequestChanges"),(0,d.Rm)()],ViewCommands.prototype,"openPullRequestChanges",1),oc([oh("gitlens.views.openPullRequestComparison"),(0,d.Rm)()],ViewCommands.prototype,"openPullRequestComparison",1),oc([oh("gitlens.views.draft.open"),(0,d.Rm)()],ViewCommands.prototype,"openDraft",1),oc([oh("gitlens.views.draft.openOnWeb"),(0,d.Rm)()],ViewCommands.prototype,"openDraftOnWeb",1),oc([oh("gitlens.views.openWorktree"),oh("gitlens.views.openWorktreeInNewWindow",{args:e=>[e,void 0,{location:"newWindow"}]}),oh("gitlens.views.openWorktreeInNewWindow.multi",{args:(e,t)=>[e,t,{location:"newWindow"}],multiselect:!0}),(0,d.Rm)()],ViewCommands.prototype,"openWorktree",1),oc([oh("gitlens.views.openInWorktree"),(0,d.Rm)()],ViewCommands.prototype,"openInWorktree",1),oc([oh("gitlens.views.pruneRemote"),(0,d.Rm)()],ViewCommands.prototype,"pruneRemote",1),oc([oh("gitlens.views.removeRemote"),(0,d.Rm)()],ViewCommands.prototype,"removeRemote",1),oc([oh("gitlens.views.publishBranch"),(0,d.Rm)()],ViewCommands.prototype,"publishBranch",1),oc([oh("gitlens.views.publishRepository"),(0,d.Rm)()],ViewCommands.prototype,"publishRepository",1),oc([oh("gitlens.views.pull"),(0,d.Rm)()],ViewCommands.prototype,"pull",1),oc([oh("gitlens.views.push",{args:e=>[e,!1]}),oh("gitlens.views.pushWithForce",{args:e=>[e,!0]}),(0,d.Rm)()],ViewCommands.prototype,"push",1),oc([oh("gitlens.views.pushToCommit"),(0,d.Rm)()],ViewCommands.prototype,"pushToCommit",1),oc([oh("gitlens.views.rebaseOntoBranch"),oh("gitlens.views.rebaseOntoCommit"),(0,d.Rm)()],ViewCommands.prototype,"rebase",1),oc([oh("gitlens.views.rebaseOntoUpstream"),(0,d.Rm)()],ViewCommands.prototype,"rebaseToRemote",1),oc([oh("gitlens.views.renameBranch"),(0,d.Rm)()],ViewCommands.prototype,"renameBranch",1),oc([oh("gitlens.views.resetCommit"),(0,d.Rm)()],ViewCommands.prototype,"resetCommit",1),oc([oh("gitlens.views.resetToCommit"),(0,d.Rm)()],ViewCommands.prototype,"resetToCommit",1),oc([oh("gitlens.views.resetToTip"),(0,d.Rm)()],ViewCommands.prototype,"resetToTip",1),oc([oh("gitlens.views.restore"),(0,d.Rm)()],ViewCommands.prototype,"restore",1),oc([oh("gitlens.views.revealRepositoryInExplorer"),(0,d.Rm)()],ViewCommands.prototype,"revealRepositoryInExplorer",1),oc([oh("gitlens.views.revealWorktreeInExplorer"),(0,d.Rm)()],ViewCommands.prototype,"revealWorktreeInExplorer",1),oc([oh("gitlens.views.revert"),(0,d.Rm)()],ViewCommands.prototype,"revert",1),oc([oh("gitlens.views.setAsDefault"),(0,d.Rm)()],ViewCommands.prototype,"setAsDefault",1),oc([oh("gitlens.views.setBranchComparisonToWorking",{args:e=>[e,"working"]}),oh("gitlens.views.setBranchComparisonToBranch",{args:e=>[e,"branch"]}),(0,d.Rm)()],ViewCommands.prototype,"setBranchComparison",1),oc([oh("gitlens.views.setShowRelativeDateMarkersOn",{args:()=>[!0]}),oh("gitlens.views.setShowRelativeDateMarkersOff",{args:()=>[!1]}),(0,d.Rm)()],ViewCommands.prototype,"setShowRelativeDateMarkers",1),oc([oh("gitlens.views.setContributorsStatisticsOff",{args:()=>[!1]}),oh("gitlens.views.setContributorsStatisticsOn",{args:()=>[!0]}),(0,d.Rm)()],ViewCommands.prototype,"setContributorsStatistics",1),oc([oh("gitlens.views.stageFile"),(0,d.Rm)()],ViewCommands.prototype,"stageFile",1),oc([oh("gitlens.views.stageDirectory"),(0,d.Rm)()],ViewCommands.prototype,"stageDirectory",1),oc([oh("gitlens.views.star"),oh("gitlens.views.star.multi",{multiselect:"sequential"}),(0,d.Rm)()],ViewCommands.prototype,"star",1),oc([oh("gitlens.views.switchToAnotherBranch"),(0,d.Rm)()],ViewCommands.prototype,"switch",1),oc([oh("gitlens.views.switchToBranch"),oh("gitlens.views.switchToCommit"),oh("gitlens.views.switchToTag"),(0,d.Rm)()],ViewCommands.prototype,"switchTo",1),oc([oh("gitlens.views.undoCommit"),(0,d.Rm)()],ViewCommands.prototype,"undoCommit",1),oc([oh("gitlens.views.unsetAsDefault"),(0,d.Rm)()],ViewCommands.prototype,"unsetAsDefault",1),oc([oh("gitlens.views.unstageFile"),(0,d.Rm)()],ViewCommands.prototype,"unstageFile",1),oc([oh("gitlens.views.unstageDirectory"),(0,d.Rm)()],ViewCommands.prototype,"unstageDirectory",1),oc([oh("gitlens.views.unstar"),oh("gitlens.views.unstar.multi",{multiselect:"sequential"}),(0,d.Rm)()],ViewCommands.prototype,"unstar",1),oc([oh("gitlens.views.compareWithHead"),(0,d.Rm)()],ViewCommands.prototype,"compareHeadWith",1),oc([oh("gitlens.views.compareBranchWithHead"),(0,d.Rm)()],ViewCommands.prototype,"compareBranchWithHead",1),oc([oh("gitlens.views.compareWithMergeBase"),(0,d.Rm)()],ViewCommands.prototype,"compareWithMergeBase",1),oc([oh("gitlens.views.openChangedFileDiffsWithMergeBase"),(0,d.Rm)()],ViewCommands.prototype,"openChangedFileDiffsWithMergeBase",1),oc([oh("gitlens.views.compareWithUpstream"),(0,d.Rm)()],ViewCommands.prototype,"compareWithUpstream",1),oc([oh("gitlens.views.compareWithWorking"),(0,d.Rm)()],ViewCommands.prototype,"compareWorkingWith",1),oc([oh("gitlens.views.compareAncestryWithWorking"),(0,d.Rm)()],ViewCommands.prototype,"compareAncestryWithWorking",1),oc([oh("gitlens.views.compareWithSelected"),(0,d.Rm)()],ViewCommands.prototype,"compareWithSelected",1),oc([oh("gitlens.views.selectForCompare"),(0,d.Rm)()],ViewCommands.prototype,"selectForCompare",1),oc([oh("gitlens.views.compareFileWithSelected"),(0,d.Rm)()],ViewCommands.prototype,"compareFileWithSelected",1),oc([oh("gitlens.views.selectFileForCompare"),(0,d.Rm)()],ViewCommands.prototype,"selectFileForCompare",1),oc([oh("gitlens.views.openChangedFileDiffs",{args:(e,t)=>[e,t]}),oh("gitlens.views.openChangedFileDiffsIndividually",{args:(e,t)=>[e,t,!0]}),(0,d.Rm)()],ViewCommands.prototype,"openAllChanges",1),oc([oh("gitlens.views.openChanges"),(0,d.Rm)()],ViewCommands.prototype,"openChanges",1),oc([oh("gitlens.views.openChangedFileDiffsWithWorking",{args:(e,t)=>[e,t]}),oh("gitlens.views.openChangedFileDiffsWithWorkingIndividually",{args:(e,t)=>[e,t,!0]}),(0,d.Rm)()],ViewCommands.prototype,"openAllChangesWithWorking",1),oc([oh("gitlens.views.mergeChangesWithWorking"),(0,d.Rm)()],ViewCommands.prototype,"mergeChangesWithWorking",1),oc([oh("gitlens.views.openChangesWithMergeBase"),(0,d.Rm)()],ViewCommands.prototype,"openChangesWithMergeBase",1),oc([oh("gitlens.views.openChangesWithWorking"),(0,d.Rm)()],ViewCommands.prototype,"openChangesWithWorking",1),oc([oh("gitlens.views.openPreviousChangesWithWorking"),(0,d.Rm)()],ViewCommands.prototype,"openPreviousChangesWithWorking",1),oc([oh("gitlens.views.openFile"),(0,d.Rm)()],ViewCommands.prototype,"openFile",1),oc([oh("gitlens.views.openChangedFiles"),(0,d.Rm)()],ViewCommands.prototype,"openFiles",1),oc([oh("gitlens.views.openOnlyChangedFiles"),(0,d.Rm)()],ViewCommands.prototype,"openOnlyChangedFiles",1),oc([oh("gitlens.views.openFileRevision"),(0,d.Rm)()],ViewCommands.prototype,"openRevision",1),oc([oh("gitlens.views.openChangedFileRevisions"),(0,d.Rm)()],ViewCommands.prototype,"openRevisions",1),oc([oh("gitlens.views.setResultsCommitsFilterAuthors",{args:e=>[e,!0]}),oh("gitlens.views.setResultsCommitsFilterOff",{args:e=>[e,!1]}),(0,d.Rm)()],ViewCommands.prototype,"setResultsCommitsFilter",1),oc([oh("gitlens.views.setResultsFilesFilterOnLeft",{args:e=>[e,sW.U.Left]}),oh("gitlens.views.setResultsFilesFilterOnRight",{args:e=>[e,sW.U.Right]}),oh("gitlens.views.setResultsFilesFilterOff",{args:e=>[e,void 0]}),(0,d.Rm)()],ViewCommands.prototype,"setResultsFilesFilter",1),oc([oh("gitlens.views.associateIssueWithBranch"),(0,d.Rm)()],ViewCommands.prototype,"associateIssueWithBranch",1),oc([oh("gitlens.views.ai.generateChangelog"),(0,d.Rm)()],ViewCommands.prototype,"generateChangelog",1),oc([oh("gitlens.views.ai.generateChangelogFrom"),(0,d.Rm)()],ViewCommands.prototype,"generateChangelogFrom",1);var og=Object.defineProperty,om=Object.getOwnPropertyDescriptor,of=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?om(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&og(t,i,o),o};let BranchesRepositoryNode=class BranchesRepositoryNode extends sk.P{async getChildren(){return null==this.child&&(this.child=new BranchesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return!!(this.view.config.showStashes&&e.changed(R.Z_.Stash,R.Ti.Any))||e.changed(R.Z_.Config,R.Z_.Heads,R.Z_.Index,R.Z_.Remotes,R.Z_.RemoteProviders,R.Z_.PausedOperationStatus,R.Z_.Unknown,R.Ti.Any)}};let BranchesViewNode=class BranchesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading branches...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No branches could be found.",[];h.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,sv.Y)(e)).keys()]);let t=await (0,sy.Ao)(e,{includeDefault:!0});this.updateContext({worktreesByBranch:t?.size?t:void 0});let i=1===e.length;this.children=e.map(e=>new BranchesRepositoryNode(x.nk.fromRepoPath(e.path),this.view,this,e,i))}if(1===this.children.length){let[e]=this.children,{showRemoteBranches:t}=this.view.config,i=t?(await e.repo.git.remotes().getDefaultRemote())?.name:void 0,r=await e.repo.git.branches().getBranches({filter:e=>!e.remote||t&&null!=i&&e.getRemoteName()===i});return 0===r.values.length?(this.view.message="No branches could be found.",e.ensureSubscription(),[]):(this.view.description=this.view.getViewDescription(r.values.length),e.getChildren())}return this.children}getTreeItem(){return new n.TreeItem("Branches",n.TreeItemCollapsibleState.Expanded)}};let BranchesView=class BranchesView extends sD.DN{configKey="branches";constructor(e,t){super(e,"branches","Branches","branchesView",t)}get canReveal(){return this.config.reveal||!h.H.get("views.repositories.showBranches")}get canSelectMany(){return h.H.get("views.multiselect")}getRoot(){return new BranchesViewNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches"),this.refresh(!0)),this),op(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),op(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),op(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),op(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),op(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),op(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this),op(this.getQualifiedCommand("setShowRemoteBranchesOn"),()=>this.setShowRemoteBranches(!0),this),op(this.getQualifiedCommand("setShowRemoteBranchesOff"),()=>this.setShowRemoteBranches(!1),this),op(this.getQualifiedCommand("setShowStashesOn"),()=>this.setShowStashes(!0),this),op(this.getQualifiedCommand("setShowStashesOff"),()=>this.setShowStashes(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat")||!!h.H.changed(e,"sortBranchesBy")||!!h.H.changed(e,"sortRepositoriesBy"))&&!0}async findBranch(e,t){if(e.remote)return;let{repoPath:i}=e;return this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:4,canTraverse:e=>e instanceof BranchesViewNode||(e instanceof BranchesRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.branches(e.repoPath).getBranchesWithCommits([e.ref],void 0,(0,y.WM)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:async t=>t instanceof BranchesViewNode||(t instanceof BranchesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t})}async revealBranch(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealCommit(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sk.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof BranchesViewNode||e instanceof sk.P});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return h.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return h.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await h.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await h.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}setShowRemoteBranches(e){return h.H.updateEffective(`views.${this.configKey}.showRemoteBranches`,e)}setShowStashes(e){return h.H.updateEffective(`views.${this.configKey}.showStashes`,e)}};of([(0,D.G)(()=>"")],BranchesView.prototype,"revealBranch",1),of([(0,D.G)(()=>"")],BranchesView.prototype,"revealCommit",1),of([(0,D.G)(()=>"")],BranchesView.prototype,"revealRepository",1);var ow=Object.defineProperty,ov=Object.getOwnPropertyDescriptor,oy=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ov(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ow(t,i,o),o};let CommitsRepositoryNode=class CommitsRepositoryNode extends sk.P{async getChildren(){if(null==this.child){let e=await this.repo.git.branches().getBranch();if(null==e)return this.view.message="No commits could be found.",[];this.view.message=void 0;let t=this.view.state.filterCommits.get(this.repo.id);this.child=new BranchNode(this.uri,this.view,this.splatted?this.parent??this:this,this.repo,e,!0,{expand:!0,limitCommits:!this.splatted,showComparison:this.view.config.showBranchComparison,showStatusDecorationOnly:!0,showMergeCommits:!this.view.state.hideMergeCommits,showStashes:this.view.config.showStashes,showTracking:!0,authors:t})}return this.child.getChildren()}async refresh(e=!1){e?this.child=void 0:this.parent?.triggerChange(!1),await this.ensureSubscription()}async subscribe(){let e=await this.repo?.getLastFetched()??0,t=(0,sI.u)(e);return 0!==e&&t>0?n.Disposable.from(await super.subscribe(),(0,iN.gC)(()=>{t!==(0,sI.u)(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)},t)):super.subscribe()}changed(e){return!!(this.view.config.showStashes&&e.changed(R.Z_.Stash,R.Ti.Any))||e.changed(R.Z_.Config,R.Z_.Heads,R.Z_.Index,R.Z_.Remotes,R.Z_.RemoteProviders,R.Z_.PausedOperationStatus,R.Z_.Unknown,R.Ti.Any)}};oy([(0,D.G)(),(0,d.Yz)()],CommitsRepositoryNode.prototype,"refresh",1),oy([(0,d.Yz)()],CommitsRepositoryNode.prototype,"subscribe",1);let CommitsViewNode=class CommitsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading commits...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No commits could be found.",[];let t=1===e.length;this.children=e.map(e=>new CommitsRepositoryNode(x.nk.fromRepoPath(e.path),this.view,this,e,t,{showBranchAndLastFetched:!0}))}let e=[];if(h.H.get("plusFeatures.enabled")&&!this.view.grouped&&null==this.view.container.usage.get("graphView:shown")&&null==this.view.container.usage.get("graphWebview:shown")&&e.push(new sx.RK(this.view,this,(0,tW.gu)("gitlens.showGraph","Show Commit Graph"),"Visualize commits on the Commit Graph",void 0,"Visualize commits on the Commit Graph",new n.ThemeIcon("gitlens-graph"))),1===this.children.length){let[t]=this.children,i=await t.repo.git.branches().getBranch();if(null!=i){let e=[];i.rebasing?e.push(`${i.name} (Rebasing)`):e.push(i.name);let t=i.getTrackingStatus();t&&e.push(t),this.view.description=`${this.view.grouped?`${this.view.name.toLocaleLowerCase()}: `:""}${e.join(` ${l.EO.Dot} `)}`}e.push(...await t.getChildren())}else e.push(...this.children);return e}getTreeItem(){return new n.TreeItem("Commits",n.TreeItemCollapsibleState.Expanded)}};let CommitsView=class CommitsView extends sD.DN{configKey="commits";constructor(e,t){super(e,"commits","Commits","commitsView",t),this.disposables.push(e.usage.onDidChange(this.onUsageChanged,this))}onUsageChanged(e){(null==e||"graphView:shown"===e.key||"graphWebview:shown"===e.key)&&this.refresh()}get canReveal(){return this.config.reveal||!h.H.get("views.repositories.showCommits")}get canSelectMany(){return h.H.get("views.multiselect")}_state={filterCommits:new Map};get state(){return this._state}getRoot(){return new CommitsViewNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","status","tags"),this.refresh(!0)),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),op(this.getQualifiedCommand("setCommitsFilterAuthors"),e=>this.setCommitsFilter(e,!0),this),op(this.getQualifiedCommand("setCommitsFilterOff"),e=>this.setCommitsFilter(e,!1),this),op(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),op(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),op(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),op(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),op(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),op(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this),op(this.getQualifiedCommand("setShowStashesOn"),()=>this.setShowStashes(!0),this),op(this.getQualifiedCommand("setShowStashesOff"),()=>this.setShowStashes(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat")||!!h.H.changed(e,"plusFeatures.enabled")||!!h.H.changed(e,"sortRepositoriesBy"))&&!0}async findCommit(e,t){let{repoPath:i}=e,r=this.container.git.branches(e.repoPath),s=await r.getBranch();if(null!=s&&(await r.getBranchesWithCommits([e.ref],s.name,{commitDate:(0,y.WM)(e)?e.committer.date:void 0})).length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:2,canTraverse:async t=>{if(t instanceof CommitsViewNode){let i=await t.getSplattedChild?.();return i instanceof CommitsRepositoryNode&&(i=await i.getSplattedChild?.())instanceof BranchNode&&await i.loadMore({until:e.ref}),!0}if(t instanceof CommitsRepositoryNode&&t.repoPath===i){let i=await t.getSplattedChild?.();if(i instanceof BranchNode)return await i.loadMore({until:e.ref}),!0}return t instanceof BranchTrackingStatusNode&&t.repoPath===i},token:t})}async revealCommit(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sk.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof CommitsViewNode||e instanceof sk.P});return void 0!==i&&await this.reveal(i,t),i}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}async setCommitsFilter(e,t){let i;if(null!=e)if(e.is("repo-folder"))i=e.repo;else{let t=e;do if(t=t.getParent(),t?.is("repo-folder")){i=t.repo;break}while(null!=t)}if(t){if(null==(i??=await (0,rO.t6)("Filter Commits","Choose a repository")))return;let e=this.state.filterCommits.get(i.id);if(null==e){let t=await i.git.config().getCurrentUser();e=null!=t?[t]:void 0}let r=await (0,oa.W)(this.container,i,"Filter Commits",i.virtual?"Choose a contributor to show commits from":"Choose contributors to show commits from",{appendReposToTitle:!0,clearButton:!0,multiselect:!i.virtual,picked:t=>e?.some(e=>tH(t,e))??!1});if(null==r)return;0===r.length?(t=!1,this.state.filterCommits.delete(i.id)):this.state.filterCommits.set(i.id,r)}else null!=i?this.state.filterCommits.delete(i.id):this.state.filterCommits.clear();(0,A.o)("gitlens:views:commits:filtered",0!==this.state.filterCommits.size),this.refresh(!0)}setShowMergeCommits(e){(0,A.o)("gitlens:views:commits:hideMergeCommits",!e),this.state.hideMergeCommits=!e,this.refresh(!0)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return h.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}async setShowBranchPullRequest(e){await h.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await h.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}setShowStashes(e){return h.H.updateEffective(`views.${this.configKey}.showStashes`,e)}};oy([(0,D.G)(()=>"")],CommitsView.prototype,"revealCommit",1),oy([(0,D.G)(()=>"")],CommitsView.prototype,"revealRepository",1);var ob=i(1453),oC=i(968),oR=Object.defineProperty,ok=Object.getOwnPropertyDescriptor,oS=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ok(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oR(t,i,o),o};let ContributorsRepositoryNode=class ContributorsRepositoryNode extends sk.P{async getChildren(){return null==this.child&&(this.child=new oC.j(this.uri,this.view,this,this.repo,{showMergeCommits:!this.view.state.hideMergeCommits})),this.child.getChildren()}async subscribe(){return n.Disposable.from(await super.subscribe(),(0,ty.A0)(e=>this.child?.updateAvatar(e.email)))}changed(e){return e.changed(R.Z_.Config,R.Z_.Heads,R.Z_.Remotes,R.Z_.Unknown,R.Ti.Any)}};oS([(0,d.Yz)()],ContributorsRepositoryNode.prototype,"subscribe",1);let ContributorsViewNode=class ContributorsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading contributors...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No contributors could be found.",[];h.H.get("views.collapseWorktreesWhenPossible")&&h.H.get("views.contributors.showAllBranches")&&(e=[...(await (0,sv.Y)(e)).keys()]);let t=1===e.length;this.children=e.map(e=>new ContributorsRepositoryNode(x.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.getChildren();return 0===t.length?(this.view.message="No contributors could be found.",e.ensureSubscription(),[]):(this.view.description=this.view.getViewDescription(t.length),t)}return this.children}getTreeItem(){return new n.TreeItem("Contributors",n.TreeItemCollapsibleState.Expanded)}};let ContributorsView=class ContributorsView extends sD.DN{configKey="contributors";constructor(e,t){super(e,"contributors","Contributors","contributorsView",t),(0,A.o)("gitlens:views:contributors:hideMergeCommits",!0)}get canReveal(){return this.config.reveal||!h.H.get("views.repositories.showContributors")}get canSelectMany(){return h.H.get("views.multiselect")}_state={hideMergeCommits:!0};get state(){return this._state}getRoot(){return new ContributorsViewNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("contributors"),this.refresh(!0)),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),op(this.getQualifiedCommand("setShowAllBranchesOn"),()=>this.setShowAllBranches(!0),this),op(this.getQualifiedCommand("setShowAllBranchesOff"),()=>this.setShowAllBranches(!1),this),op(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),op(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),op(this.getQualifiedCommand("setShowStatisticsOn"),()=>this.setShowStatistics(!0),this),op(this.getQualifiedCommand("setShowStatisticsOff"),()=>this.setShowStatistics(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat")||!!h.H.changed(e,"sortContributorsBy")||!!h.H.changed(e,"sortRepositoriesBy")||!!h.H.changed(e,"views.collapseWorktreesWhenPossible"))&&!0}findContributor(e,t){let{repoPath:i,username:r,email:s,name:o}=e;return this.findNode(e=>e instanceof ob.W&&e.contributor.username===r&&e.contributor.email===s&&e.contributor.name===o,{maxDepth:2,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof ContributorsRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sk.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof sk.P});return void 0!==i&&await this.reveal(i,t),i}async revealContributor(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing contributor '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findContributor(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAllBranches(e){return h.H.updateEffective(`views.${this.configKey}.showAllBranches`,e)}setShowMergeCommits(e){(0,A.o)("gitlens:views:contributors:hideMergeCommits",!e),this.state.hideMergeCommits=!e,this.refresh(!0)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowStatistics(e){return h.H.updateEffective(`views.${this.configKey}.showStatistics`,e)}};oS([(0,D.G)(()=>"")],ContributorsView.prototype,"revealRepository",1),oS([(0,D.G)(()=>"")],ContributorsView.prototype,"revealContributor",1);var oP=i(2363);let GroupingNode=class GroupingNode extends sf.eu{constructor(e,t,i,r=n.TreeItemCollapsibleState.Expanded,s,o,a,l){super("grouping",x.Bd,e),this.label=t,this.childrenOrFn=i,this.collapsibleState=r,this.description=s,this.tooltip=o,this.iconPath=a,this.contextValue=l}getChildren(){return"function"==typeof this.childrenOrFn?this.childrenOrFn():this.childrenOrFn}getTreeItem(){let e=new n.TreeItem(this.label,this.collapsibleState);return e.id=this.id,e.contextValue=this.contextValue??sf.U0.Grouping,e.description=this.description,e.tooltip=this.tooltip,e.iconPath=this.iconPath,e}};var oA=Object.defineProperty,oI=Object.getOwnPropertyDescriptor;let DraftsViewNode=class DraftsViewNode extends sP.l{constructor(e){super("drafts",x.Bd,e)}async getChildren(){if(null==this.children){let e=[];try{let t=await this.view.container.drafts.getDrafts();t?.sort((e,t)=>t.updatedAt.getTime()-e.updatedAt.getTime());let i=(0,X.fA)(t,this.calcDraftGroupKey.bind(this),e=>new oP.e(this.uri,this.view,this,e)),r=i.get("mine"),s=i.get("shared");r?.length&&!s?.length?e.push(...r):(r?.length&&e.push(new GroupingNode(this.view,"Created by Me",r)),s?.length&&e.push(new GroupingNode(this.view,"Shared with Me",s)))}catch(e){if(!(e instanceof c.WT))throw e}this.children=e}return this.children}getTreeItem(){return new n.TreeItem("Drafts",n.TreeItemCollapsibleState.Expanded)}calcDraftGroupKey(e){return"suggested_pr_change"===e.type?"pr_suggestion":e.isMine?"mine":"shared"}};let DraftsView=class DraftsView extends sD.DN{configKey="drafts";_disposable;constructor(e){super(e,"drafts","Cloud Patches","draftsView"),this.description=l.WZ}dispose(){this._disposable?.dispose(),super.dispose()}getRoot(){return new DraftsViewNode(this)}onVisibilityChanged(e){null==this._disposable&&(this._disposable=n.Disposable.from(this.container.subscription.onDidChange(()=>this.refresh(!0),this))),super.onVisibilityChanged(e)}async show(e){if(await (0,i7.ZQ)())return super.show(e)}get canReveal(){return!1}registerCommands(){return[op(this.getQualifiedCommand("info"),()=>(0,tW.RS)("gitlens.openWalkthrough",{step:"streamline-collaboration",source:{source:"cloud-patches",detail:"info"}}),this),op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),op(this.getQualifiedCommand("create"),async()=>{await (0,tW.RS)("gitlens.createCloudPatch"),this.ensureRoot().triggerChange(!0)},this),op(this.getQualifiedCommand("delete"),async e=>{let t={title:"Delete"};await n.window.showInformationMessage(`Are you sure you want to delete Cloud Patch '${e.draft.title}'?`,{modal:!0},t,{title:"Cancel",isCloseAffordance:!0})===t&&(await this.container.drafts.deleteDraft(e.draft.id),e.getParent()?.triggerChange(!0))},this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}async findDraft(e,t){return this.findNode(t=>t.draft?.id===e.id,{allowPaging:!1,maxDepth:2,canTraverse:e=>e instanceof DraftsViewNode||e instanceof GroupingNode,token:t})}async revealDraft(e,t){let i=await this.findDraft(e);if(null!=i)return await this.ensureRevealNode(i,t),i}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}};async function oD(e,t){if(null==t)return;let i=(0,x.t5)(t)?t:await x.nk.fromUri(t);if(null!=i.sha){let r=await e.git.getWorkingUri(i.repoPath,i);null!=r&&(t=r)}return t}((e,t,i,r)=>{for(var s,o=r>1?void 0:r?oI(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oA(t,i,o)})([(0,D.G)(()=>"")],DraftsView.prototype,"revealDraft",1);var o_=i(4484),o$=Object.defineProperty,oT=Object.getOwnPropertyDescriptor,oE=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),ox=e=>{throw TypeError(e)},oO=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oT(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o$(t,i,o),o},oF=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&ox("Object expected"),i&&(r=t[oE("asyncDispose")]),void 0===r&&(r=t[oE("dispose")],i&&(s=r)),"function"!=typeof r&&ox("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},oB=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let FileHistoryNode=class FileHistoryNode extends sb.Y{constructor(e,t,i,r,s){super("file-history",e,t,i),this.parent=i,this.folder=r,this.branch=s,null!=s&&this.updateContext({branch:s}),this._uniqueId=(0,sf.pF)(`${this.type}+${e.toString()}`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.view.groupedLabel?`${this.view.groupedLabel} \u2022 `:""}${this.label}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;let e=[];if(null==this.uri.repoPath)return e;let t=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[i,r,s,o,n]=await Promise.all([this.getLog(),null==this.uri.sha?this.view.container.git.status(this.uri.repoPath).getStatusForPath?.(this.getPathOrGlob()):void 0,null==this.uri.sha?this.view.container.git.config(this.uri.repoPath).getCurrentUser():void 0,this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath,this.branch?.name),t?this.view.container.git.commits(this.uri.repoPath).getLogShasOnly(t,{limit:0}):void 0]);if(r?.length)if(this.folder){let t=this.view.container.git.getRelativePath(this.getPathOrGlob(),this.uri.repoPath),i=(0,X.Tj)((0,X.pD)((0,X.qI)(r,e=>e.getPseudoCommits(this.view.container,s)),e=>e.sha,(e,i)=>e.with({fileset:{files:[...e.fileset?.files??[],...i.fileset?.files??[]],filtered:!!(e.fileset?.filtered||i.fileset?.filtered),pathspec:t}})),e=>new sE.e(this.view,this,e));e.push(...i)}else{let[t]=r,i=t.getPseudoCommits(this.view.container,s);i.length&&e.push(...i.map(e=>new o_.f(this.view,this,t,e)))}return(null!=i&&(e.push(...(0,sO.h)((0,X.x1)(i.commits.values(),e=>this.folder?new sE.e(this.view,this,e,n?.has(e.ref),this.branch,o,{expand:!1}):null!=e.file?new o_.f(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:o,unpublished:n?.has(e.ref)}):void 0),this)),i.hasMore&&e.push(new sx.cb(this.view,this,e[e.length-1]))),0===e.length)?[new sx.S2(this.view,this,"No file history could be found.")]:e}getTreeItem(){this.splatted=!1;let e=this.label,t=new n.TreeItem(e,n.TreeItemCollapsibleState.Expanded);return t.contextValue=sf.U0.FileHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}
${this.uri.directory}/${null==this.uri.sha?"":`

${this.uri.sha}`}`,this.view.description=`${this.view.groupedLabel?`${this.view.groupedLabel} \u2022 `:""}${e}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return this.folder&&""===this.uri.fileName?`${(0,T.P8)(this.uri.path)}${this.uri.sha?` ${this.uri.sha===k.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`:`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===k.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}subscribe(){let e=this.view.container.git.getRepository(this.uri);if(null!=e)return n.Disposable.from((0,tt.HC)(e.onDidChange,this.onRepositoryChanged,this),(0,tt.HC)(e.onDidChangeFileSystem,this.onFileSystemChanged,this,[e.watchFileSystem()]),(0,tt.HC)(h.H.onDidChange,e=>{h.H.changed(e,"advanced.fileHistoryFollowsRenames")&&this.view.resetNodeLastKnownLimit(this)},this))}etag(){return Date.now()}onRepositoryChanged(e){var t=[];try{if(!e.changed(R.Z_.Index,R.Z_.Heads,R.Z_.Remotes,R.Z_.RemoteProviders,R.Z_.PausedOperationStatus,R.Z_.Unknown,R.Ti.Any))return;let i=oF(t,(0,$.bP)(`${(0,_.zu)(this)}.onRepositoryChanged(e=${e.toString()})`,!1));_.Vy.debug(i,"triggering node refresh"),this.triggerChange(!0)}catch(e){var i=e,r=!0}finally{oB(t,i,r)}}onFileSystemChanged(e){var t=[];try{if(this.folder){if(!(0,X.zN)(e.uris,e=>e.fsPath.startsWith(this.uri.fsPath)))return}else if(!e.uris.has(this.uri))return;let i=oF(t,(0,$.bP)(`${(0,_.zu)(this)}.onFileSystemChanged(e=${this.uri.toString(!0)})`,!1));_.Vy.debug(i,"triggering node refresh"),this.triggerChange(!0)}catch(e){var i=e,r=!0}finally{oB(t,i,r)}}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.commits(this.uri.repoPath).getLogForPath(this.getPathOrGlob(),this.uri.sha,{limit:this.limit??this.view.config.pageItemLimit})),this._log}getPathOrGlob(){return this.folder?(0,I.pW)(this.uri):this.uri}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}};oO([(0,d.Yz)()],FileHistoryNode.prototype,"subscribe",1),oO([(0,D.G)(),(0,d.Yz)()],FileHistoryNode.prototype,"refresh",1),oO([(0,eG.B)()],FileHistoryNode.prototype,"getPathOrGlob",1),oO([(0,D.G)()],FileHistoryNode.prototype,"loadMore",1);var oL=Object.defineProperty,oU=Object.getOwnPropertyDescriptor,oq=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oU(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oL(t,i,o),o};let FileHistoryTrackerNode=class FileHistoryTrackerNode extends sb.Y{_base;splatted=!0;constructor(e){super("file-history-tracker",x.Bd,e)}dispose(){super.dispose(),this.child=void 0}_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}async getChildren(){if(null==this.child){let e;if(this.view.groupedLabel??=this.view.name.toLocaleLowerCase(),!this.hasUri)return this.view.description=this.view.grouped?this.view.groupedLabel:void 0,this.view.message="There are no editors open that can provide file history information.",[];this.view.message=void 0;let t={...this.uri,repoPath:this.uri.repoPath,sha:this._base??this.uri.sha},i=new x.nk(this.uri,t),r=await (0,I.ZA)(this.uri);this.view.grouped?(this.view.groupedLabel=(r?"Folder History":"File History").toLocaleLowerCase(),this.view.description=this.view.groupedLabel):this.view.title=r?"Folder History":"File History",t.sha&&"HEAD"!==t.sha?(0,P.HH)(t.sha)||(e=await this.view.container.git.branches(t.repoPath).getBranch(t.sha)):e=await this.view.container.git.branches(t.repoPath).getBranch(),this.child=new FileHistoryNode(i,this.view,this,r,e)}return this.child.getChildren()}getTreeItem(){this.splatted=!1;let e=new n.TreeItem("File History",n.TreeItemCollapsibleState.Expanded);return e.contextValue=sf.U0.ActiveFileHistory,e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!==x.Bd&&null!=this._uri.repoPath}async changeBase(){let e=await (0,sq.NZ)(this.uri.repoPath,"Change File History Base","Choose a reference to set as the new base",{allowRevisions:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,eC.gC)(e)){let t=await this.view.container.git.branches(this.uri.repoPath).getBranch();this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this.child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){let t=(0,$.dQ)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==x.Bd&&await this.view.container.documentTracker.resetCache(this._uri,"log"),this.reset());let i=n.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&n.window.visibleTextEditors.some(e=>e.document?.uri.path===this.uri.path))||(this.reset(),(0,$.TT)(t,`, uri=${_.Vy.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path)return(0,$.TT)(t,`, uri=${_.Vy.toLoggable(this._uri)}`),!0;let r=await x.nk.fromUri(i.document.uri),s=await oD(this.view.container,r);return!!(this.hasUri&&(0,t1.k)(s??r,this.uri))||(null!=s&&(r=await x.nk.fromUri(s)),null==r.repoPath?this.reset():(this.setUri(r),this.child=void 0),(0,$.TT)(t,`, uri=${_.Vy.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this.child=void 0}setEditorFollowing(e){e&&this.setUri(),this.canSubscribe=e,e||this.triggerChange()}async showHistoryForUri(e){this.setUri(e),await this.triggerChange()}subscribe(){return n.Disposable.from((0,tt.HC)(n.window.onDidChangeActiveTextEditor,(0,B.s)(this.onActiveEditorChanged,250),this))}etag(){return 0}_triggerChangeDebounced;onActiveEditorChanged(e){if(null==e&&(0,iP.QK)(this._uri)){null==this._triggerChangeDebounced&&(this._triggerChangeDebounced=(0,B.s)(()=>this.triggerChange(),1500)),this._triggerChangeDebounced();return}this.triggerChange()}setUri(e){this._uri=e??x.Bd,(0,A.o)("gitlens:views:fileHistory:canPin",this.hasUri)}};oq([(0,D.G)(),(0,d.Rm)()],FileHistoryTrackerNode.prototype,"changeBase",1),oq([(0,D.G)(),(0,d.Yz)({exit:!0})],FileHistoryTrackerNode.prototype,"refresh",1),oq([(0,d.Rm)()],FileHistoryTrackerNode.prototype,"setEditorFollowing",1),oq([(0,d.Rm)()],FileHistoryTrackerNode.prototype,"showHistoryForUri",1),oq([(0,d.Yz)()],FileHistoryTrackerNode.prototype,"subscribe",1),oq([(0,d.Yz)({args:!1})],FileHistoryTrackerNode.prototype,"onActiveEditorChanged",1);var oN=Object.defineProperty,oM=Object.getOwnPropertyDescriptor,oW=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),oG=e=>{throw TypeError(e)},oH=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oM(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oN(t,i,o),o},oV=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&oG("Object expected"),i&&(r=t[oW("asyncDispose")]),void 0===r&&(r=t[oW("dispose")],i&&(s=r)),"function"!=typeof r&&oG("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},oj=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let LineHistoryNode=class LineHistoryNode extends sb.Y{constructor(e,t,i,r,s,o){super("line-history",e,t,i),this.parent=i,this.branch=r,this.selection=s,this.editorContents=o,null!=r&&this.updateContext({branch:r}),this._uniqueId=(0,sf.pF)(`${this.type}+${e.toString()}+[${s.start.line},${s.start.character}-${s.end.line},${s.end.character}]`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.view.groupedLabel?`${this.view.groupedLabel} \u2022 `:""}${this.label}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;let e=[];if(null==this.uri.repoPath)return e;let t=this.selection,i=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[r,s,o,a]=await Promise.all([this.getLog(t),null==this.uri.sha||(0,P._k)(this.uri.sha)?this.editorContents?await this.view.container.git.getBlameForRangeContents(this.uri,t,this.editorContents):await this.view.container.git.getBlameForRange(this.uri,t):void 0,this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath,this.branch?.name),i?this.view.container.git.commits(this.uri.repoPath).getLogShasOnly(i,{limit:0}):void 0]);if(null!=s)for(let i of s.commits.values()){if(!i.isUncommitted)continue;let r=s.lines[0],o=s.lines[s.lines.length-1],a=t.active.line===r.line-1;t=new n.Selection((a?o:r).originalLine-1,t.anchor.character,(a?r:o).originalLine-1,t.active.character);let l=await this.view.container.git.status(this.uri.repoPath).getStatusForFile?.(this.uri);if(null!=l){let r={conflictStatus:l?.conflictStatus,path:i.file?.path??"",indexStatus:l?.indexStatus,originalPath:i.file?.originalPath,repoPath:this.uri.repoPath,status:l?.status??C.NO.Modified,workingTreeStatus:l?.workingTreeStatus},s=await this.view.container.git.config(this.uri.repoPath).getCurrentUser(),o=l?.getPseudoCommits(this.view.container,s);if(null!=o)for(let i of o.reverse())e.unshift(new o_.f(this.view,this,r,i,{selection:t}))}break}return(null!=r&&(e.push(...(0,sO.h)((0,X.x1)(r.commits.values(),e=>null!=e.file?new o_.f(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:o,selection:t,unpublished:a?.has(e.ref)}):void 0),this)),r.hasMore&&e.push(new sx.cb(this.view,this,e[e.length-1]))),0===e.length)?[new sx.S2(this.view,this,"No line history could be found.")]:e}getTreeItem(){this.splatted=!1;let e=this.label,t=new n.TreeItem(e,n.TreeItemCollapsibleState.Expanded);return t.contextValue=sf.U0.LineHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}${this.lines}
${this.uri.directory}/${null==this.uri.sha?"":`

${this.uri.sha}`}`,this.view.description=`${this.view.groupedLabel?`${this.view.groupedLabel} \u2022 `:""}${e}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return`${this.uri.fileName}${this.lines}${this.uri.sha?` ${this.uri.sha===k.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}get lines(){return this.selection.isSingleLine?`:${this.selection.start.line+1}`:`:${this.selection.start.line+1}-${this.selection.end.line+1}`}subscribe(){let e=this.view.container.git.getRepository(this.uri);if(null!=e)return n.Disposable.from((0,tt.HC)(e.onDidChange,this.onRepositoryChanged,this),(0,tt.HC)(e.onDidChangeFileSystem,this.onFileSystemChanged,this,[e.watchFileSystem()]))}etag(){return Date.now()}onRepositoryChanged(e){var t=[];try{if(!e.changed(R.Z_.Index,R.Z_.Heads,R.Z_.Remotes,R.Z_.RemoteProviders,R.Z_.PausedOperationStatus,R.Z_.Unknown,R.Ti.Any))return;let i=oV(t,(0,$.bP)(`${(0,_.zu)(this)}.onRepositoryChanged(e=${e.toString()})`,!1));_.Vy.debug(i,"triggering node refresh"),this.triggerChange(!0)}catch(e){var i=e,r=!0}finally{oj(t,i,r)}}onFileSystemChanged(e){var t=[];try{if(!e.uris.has(this.uri))return;let i=oV(t,(0,$.bP)(`${(0,_.zu)(this)}.onFileSystemChanged(e=${this.uri.toString(!0)})`,!1));_.Vy.debug(i,"triggering node refresh"),this.triggerChange(!0)}catch(e){var i=e,r=!0}finally{oj(t,i,r)}}refresh(e){e&&(this._log=void 0)}_log;async getLog(e){return null==this._log&&(this._log=await this.view.container.git.commits(this.uri.repoPath).getLogForPath(this.uri,this.uri.sha,{all:!1,limit:this.limit??this.view.config.pageItemLimit,range:e??this.selection,renames:!1})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}};oH([(0,eG.B)()],LineHistoryNode.prototype,"lines",1),oH([(0,d.Yz)()],LineHistoryNode.prototype,"subscribe",1),oH([(0,D.G)(),(0,d.Yz)()],LineHistoryNode.prototype,"refresh",1),oH([(0,D.G)()],LineHistoryNode.prototype,"loadMore",1);var oz=Object.defineProperty,oQ=Object.getOwnPropertyDescriptor,oY=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?oQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oz(t,i,o),o};let LineHistoryTrackerNode=class LineHistoryTrackerNode extends sb.Y{_base;_editorContents;_selection;splatted=!0;constructor(e){super("line-history-tracker",x.Bd,e)}dispose(){super.dispose(),this.child=void 0}_child;get child(){return this._child}set child(e){this._child!==e&&(this._child?.dispose(),this._child=e)}async getChildren(){if(null==this.child){let e;if(this.view.groupedLabel??=this.view.name.toLocaleLowerCase(),!this.hasUri)return this.view.description=this.view.grouped?this.view.groupedLabel:void 0,this.view.message="There are no editors open that can provide line history information.",[];let t=this._selection,i=this._editorContents;if(null==t)return this.view.message="There was no selection provided for line history.",this.view.description=`${this.view.groupedLabel?`${this.view.groupedLabel} \u2022 `:""}${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===k.nB?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}${!this.followingEditor?" (pinned)":""}`,[];this.view.message=void 0;let r={...this.uri,repoPath:this.uri.repoPath,sha:this.uri.sha??this._base},s=new x.nk(this.uri,r);r.sha&&"HEAD"!==r.sha?(0,P.HH)(r.sha)||(e=await this.view.container.git.branches(r.repoPath).getBranch(r.sha)):e=await this.view.container.git.branches(r.repoPath).getBranch(),this.child=new LineHistoryNode(s,this.view,this,e,t,i)}return this.child.getChildren()}getTreeItem(){this.splatted=!1;let e=new n.TreeItem("Line History",n.TreeItemCollapsibleState.Expanded);return e.contextValue=sf.U0.ActiveLineHistory,this.ensureSubscription(),e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!==x.Bd&&null!=this._uri.repoPath}async changeBase(){let e=await (0,sq.NZ)(this.uri.repoPath,"Change Line History Base","Choose a reference to set as the new base",{allowRevisions:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,eC.gC)(e)){let t=await this.view.container.git.branches(this.uri.repoPath).getBranch();this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this.child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){let t=(0,$.dQ)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==x.Bd&&await this.view.container.documentTracker.resetCache(this._uri,"log"),this.reset());let i=n.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&n.window.visibleTextEditors.some(e=>e.document?.uri.path===this.uri.path))||(this.reset(),(0,$.TT)(t,`, uri=${_.Vy.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path&&null!=this._selection&&i.selection.isEqual(this._selection))return(0,$.TT)(t,`, uri=${_.Vy.toLoggable(this._uri)}`),!0;let r=await x.nk.fromUri(i.document.uri);return!!(this.hasUri&&(0,t1.k)(r,this.uri)&&null!=this._selection&&i.selection.isEqual(this._selection))||(null==r.repoPath?this.reset():(this.setUri(r),this._editorContents=i.document.isDirty?i.document.getText():void 0,this._selection=i.selection,this.child=void 0),(0,$.TT)(t,`, uri=${_.Vy.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this._editorContents=void 0,this._selection=void 0,this.child=void 0}setEditorFollowing(e){this.canSubscribe=e}subscribe(){if(this.view.container.lineTracker.subscribed(this))return;let e=(0,B.s)(this.onActiveLinesChanged.bind(this),250);return this.view.container.lineTracker.subscribe(this,(0,tt.HC)(this.view.container.lineTracker.onDidChangeActiveLines,t=>{t.pending||e(t)},this))}etag(){return 0}onActiveLinesChanged(e){this.triggerChange()}setUri(e){this._uri=e??x.Bd,(0,A.o)("gitlens:views:fileHistory:canPin",this.hasUri)}};oY([(0,D.G)(),(0,d.Rm)()],LineHistoryTrackerNode.prototype,"changeBase",1),oY([(0,D.G)(),(0,d.Yz)({exit:!0})],LineHistoryTrackerNode.prototype,"refresh",1),oY([(0,d.Rm)()],LineHistoryTrackerNode.prototype,"setEditorFollowing",1),oY([(0,d.Yz)()],LineHistoryTrackerNode.prototype,"subscribe",1),oY([(0,d.Yz)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map(e=>`[${e.anchor}-${e.active}]`).join(",")}, pending=${!!e.pending}, reason=${e.reason}`}})],LineHistoryTrackerNode.prototype,"onActiveLinesChanged",1);let oK=" (pinned)";let FileHistoryView=class FileHistoryView extends sD.DN{configKey="fileHistory";_followCursor=!1;_followEditor=!0;constructor(e,t){super(e,"fileHistory","File History","fileHistoryView",t),(0,A.o)("gitlens:views:fileHistory:cursorFollowing",this._followCursor),(0,A.o)("gitlens:views:fileHistory:editorFollowing",this._followEditor)}get canSelectMany(){return h.H.get("views.multiselect")}get showCollapseAll(){return!1}getRoot(){return this._followCursor?new LineHistoryTrackerNode(this):new FileHistoryTrackerNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),op(this.getQualifiedCommand("changeBase"),()=>this.changeBase(),this),op(this.getQualifiedCommand("setCursorFollowingOn"),()=>this.setCursorFollowing(!0),this),op(this.getQualifiedCommand("setCursorFollowingOff"),()=>this.setCursorFollowing(!1),this),op(this.getQualifiedCommand("setEditorFollowingOn"),()=>this.setEditorFollowing(!0),this),op(this.getQualifiedCommand("setEditorFollowingOff"),()=>this.setEditorFollowing(!1),this),op(this.getQualifiedCommand("setRenameFollowingOn"),()=>this.setRenameFollowing(!0),this),op(this.getQualifiedCommand("setRenameFollowingOff"),()=>this.setRenameFollowing(!1),this),op(this.getQualifiedCommand("setShowAllBranchesOn"),()=>this.setShowAllBranches(!0),this),op(this.getQualifiedCommand("setShowAllBranchesOff"),()=>this.setShowAllBranches(!1),this),op(this.getQualifiedCommand("setShowMergeCommitsOn"),()=>this.setShowMergeCommits(!0),this),op(this.getQualifiedCommand("setShowMergeCommitsOff"),()=>this.setShowMergeCommits(!1),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat")||!!h.H.changed(e,"advanced.fileHistoryFollowsRenames")||!!h.H.changed(e,"advanced.fileHistoryShowAllBranches")||!!h.H.changed(e,"advanced.fileHistoryShowMergeCommits"))&&!0}async showHistoryForUri(e){this.setCursorFollowing(!1);let t=this.ensureRoot(!0);return t instanceof FileHistoryTrackerNode&&(await t.showHistoryForUri(e),this.setEditorFollowing(!1)),this.show()}changeBase(){this.root?.changeBase()}setCursorFollowing(e){let t=!this._followEditor&&this.root?.hasUri?this.root.uri:void 0;this._followCursor=e,(0,A.o)("gitlens:views:fileHistory:cursorFollowing",e),this.grouped?(this.groupedLabel=(this._followCursor?"Line History":"File History").toLocaleLowerCase(),this.description=this.groupedLabel):this.title=this._followCursor?"Line History":"File History";let i=this.ensureRoot(!0);null!=t&&i.setUri(t),i.setEditorFollowing(this._followEditor),i.ensureSubscription(),this.refresh(!0)}setEditorFollowing(e){let t=this.ensureRoot();t.hasUri&&(this._followEditor=e,(0,A.o)("gitlens:views:fileHistory:editorFollowing",e),t.setEditorFollowing(e),this.description?.endsWith(oK)?e&&(this.description=this.description.substring(0,this.description.length-oK.length)):e||null==this.description||(this.description+=oK),e&&(t.ensureSubscription(),this.refresh(!0)))}setRenameFollowing(e){return h.H.updateEffective("advanced.fileHistoryFollowsRenames",e)}setShowAllBranches(e){return h.H.updateEffective("advanced.fileHistoryShowAllBranches",e)}setShowMergeCommits(e){return h.H.updateEffective("advanced.fileHistoryShowMergeCommits",e)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}};var oZ=i(6606);let LaunchpadViewGroupingNode=class LaunchpadViewGroupingNode extends GroupingNode{constructor(e,t,i,r,s=n.TreeItemCollapsibleState.Expanded,o,a,l,u){super(e,t,r,s,o,a,l,u),this.group=i,this.disposable=n.Disposable.from(this.view.onDidChangeNodeCollapsibleState(this.onNodeCollapsibleStateChanged,this))}disposable;dispose(){super.dispose(),this.disposable?.dispose()}onNodeCollapsibleStateChanged(e){if(e.element===this){let t=this.view.container.storage.get("launchpadView:groups:expanded")??[];e.state===n.TreeItemCollapsibleState.Expanded?t.push(this.group):t.splice(t.indexOf(this.group),1),this.view.container.storage.store("launchpadView:groups:expanded",t).catch()}}};let LaunchpadItemNode=class LaunchpadItemNode extends sP.l{constructor(e,t,i,r){let s=r.openRepository?.repo?.path;super("launchpad-item",null!=s?x.nk.fromRepoPath(s):x.Bd,e,t),this.parent=t,this.group=i,this.item=r,this.updateContext({launchpadGroup:i,launchpadItem:r}),this._uniqueId=(0,sf.pF)(this.type,this.context),this.repoPath=s}repoPath;get id(){return this._uniqueId}toClipboard(e){let t=this.getUrl();return"markdown"===e?`[${this.item.underlyingPullRequest.id}](${t}) ${this.item.underlyingPullRequest.title}`:t}getUrl(){return this.item.url??this.item.underlyingPullRequest.url}get pullRequest(){return"pullrequest"===this.item.type?this.item.underlyingPullRequest:void 0}async getChildren(){if(null==this.children){let e=await (0,sw.k0)(this.view,this,this.item.underlyingPullRequest,this.item.openRepository?.repo??this.repoPath);this.children=e}return this.children}getTreeItem(){let e=this.item,t=new n.TreeItem(e.title.length>60?`${e.title.substring(0,60)}...`:e.title,this.item.openRepository?.localBranch?.current?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.Collapsed);return t.contextValue=sf.U0.LaunchpadItem,t.description=`\xa0 ${e.repository.owner.login}/${e.repository.name}#${e.id} \xa0 ${e.codeSuggestionsCount>0?` $(gitlens-code-suggestion) ${e.codeSuggestionsCount}`:""}`,t.iconPath=e.author?.avatarUrl!=null?n.Uri.parse(e.author.avatarUrl):void 0,t.command=(0,tW.gu)("gitlens.showLaunchpad","Open in Launchpad",{source:"launchpad-view",state:{item:{...this.item,group:this.group}}}),"pullrequest"===e.type&&(t.contextValue+="+pr",t.tooltip=(0,sw._u)(e.underlyingPullRequest,{idPrefix:`${e.repository.owner.login}/${e.repository.name}`,codeSuggestionsCount:e.codeSuggestionsCount})),t}};let LaunchpadViewNode=class LaunchpadViewNode extends sP.l{disposable;constructor(e){super("launchpad",x.Bd,e),this.disposable=n.Disposable.from(this.view.container.launchpad.onDidChange(this.refresh,this),this.view.container.subscription.onDidChange(this.onSubscriptionChanged,this))}dispose(){this.disposable?.dispose(),super.dispose()}onSubscriptionChanged(e){e.current.plan!==e.previous.plan&&this.triggerChange(!0)}refresh(){null!=this.children&&((0,sD.lm)(this.children),this.children=void 0)}async getChildren(){if(this.view.description=this.view.grouped?`${this.view.name.toLocaleLowerCase()}\xa0\u2022\xa0 ${l.lD}`:l.lD,this.view.message=void 0,null==this.children){if(!(await this.view.container.git.access("launchpad")).allowed)return[];let e=[];if(!await this.view.container.launchpad.hasConnectedIntegration())return[];try{let t=await this.view.container.launchpad.getCategorizedItems();if(!t.items?.length)return this.view.message="All done! Take a vacation.",[];let i=(0,rS.Vy)(t.items),r=new Map((this.view.container.storage.get("launchpadView:groups:expanded")??[]).map(e=>[e,!0]));for(let[t,s]of i){if(!s.length)continue;let i=oZ.lj.get(t);e.push(new LaunchpadViewGroupingNode(this.view,oZ.aL.get(t),t,s.map(e=>new LaunchpadItemNode(this.view,this,t,e)),"current-branch"===t||r.get(t)?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.Collapsed,void 0,void 0,new n.ThemeIcon(i.substring(2,i.length-1))))}}catch(e){if(!(e instanceof c.WT))throw e}this.children=e}return this.children}getTreeItem(){return new n.TreeItem("Launchpad",n.TreeItemCollapsibleState.Expanded)}};let LaunchpadView=class LaunchpadView extends sD.DN{configKey="launchpad";_disposable;constructor(e,t){super(e,"launchpad","Launchpad","launchpadView",t)}dispose(){this._disposable?.dispose(),super.dispose()}getViewDescription(e){let t=super.getViewDescription(e);return t?`${t} \xa0\u2022\xa0 ${l.lD}`:l.lD}getRoot(){return new LaunchpadViewNode(this)}onVisibilityChanged(e){null==this._disposable&&(this._disposable=n.Disposable.from(this.container.integrations.onDidChangeConnectionState(()=>this.refresh(),this),this.container.launchpad.onDidRefresh(()=>this.refresh(),this),this.container.integrations.onDidSyncCloudIntegrations(()=>this.refresh(),this))),super.onVisibilityChanged(e)}async show(e){if(await (0,i7.ZQ)())return super.show(e)}get canReveal(){return!1}registerCommands(){return[op(this.getQualifiedCommand("info"),()=>(0,tW.RS)("gitlens.openWalkthrough",{step:"accelerate-pr-reviews",source:{source:"launchpad-view",detail:"info"}}),this),op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>n.window.withProgress({location:{viewId:this.id}},()=>this.container.launchpad.getCategorizedItems({force:!0})),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat"))&&!0}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}};let oJ=" (pinned)";let LineHistoryView=class LineHistoryView extends sD.DN{configKey="lineHistory";constructor(e){super(e,"lineHistory","Line History","lineHistoryView"),(0,A.o)("gitlens:views:lineHistory:editorFollowing",!0)}get canSelectMany(){return h.H.get("views.multiselect")}get showCollapseAll(){return!1}getRoot(){return new LineHistoryTrackerNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),op(this.getQualifiedCommand("changeBase"),()=>this.changeBase(),this),op(this.getQualifiedCommand("setEditorFollowingOn"),()=>this.setEditorFollowing(!0),this),op(this.getQualifiedCommand("setEditorFollowingOff"),()=>this.setEditorFollowing(!1),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat"))&&!0}changeBase(){this.root?.changeBase()}setEditorFollowing(e){let t=this.ensureRoot();t.hasUri&&((0,A.o)("gitlens:views:lineHistory:editorFollowing",e),this.root?.setEditorFollowing(e),this.description?.endsWith(oJ)?e&&(this.description=this.description.substring(0,this.description.length-oJ.length)):e||null==this.description||(this.description+=oJ),e&&(t.ensureSubscription(),this.refresh(!0)))}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}};let PullRequestViewNode=class PullRequestViewNode extends sf.eu{child;constructor(e){super("pullrequest",x.Bd,e)}getChildren(){return null!=this.child?[this.child]:[]}getTreeItem(){return new n.TreeItem("Pull Request",n.TreeItemCollapsibleState.Expanded)}async setPullRequest(e,t){null!=e?(this.child=new sw.Xu(this.view,this,e,t,{expand:!0}),this.view.description=`${e.repository.owner}/${e.repository.repo}#${e.id}`,(0,A.o)("gitlens:views:pullRequest:visible",!0)):(this.child=void 0,this.view.description=void 0,(0,A.o)("gitlens:views:pullRequest:visible",!1)),await this.triggerChange()}};let PullRequestView=class PullRequestView extends sD.DN{configKey="pullRequest";constructor(e){super(e,"pullRequest","Pull Request","commitsView")}get canReveal(){return!1}get canSelectMany(){return!1}get showCollapseAll(){return!1}close(){this.setVisible(!1)}async showPullRequest(e,t){null!=e?(this.description=`${e.repository.owner}/${e.repository.repo}#${e.id}`,this.setVisible(!0)):(this.description=void 0,this.setVisible(!1)),await this.ensureRoot().setPullRequest(e,t),null!=e&&await this.show()}setVisible(e){(0,A.o)("gitlens:views:pullRequest:visible",e)}getRoot(){return new PullRequestViewNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),op(this.getQualifiedCommand("close"),()=>this.close(),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat"))&&!0}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}};var oX=Object.defineProperty,o0=Object.getOwnPropertyDescriptor;let RemoteNode=class RemoteNode extends sf.eu{constructor(e,t,i,r,s){super("remote",e,t,i),this.parent=i,this.repo=r,this.remote=s,this.updateContext({repository:r,remote:s}),this._uniqueId=(0,sf.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.remote.name}get repoPath(){return this.repo.path}async getChildren(){let e=await this.repo.git.branches().getBranches({filter:e=>e.remote&&e.name.startsWith(this.remote.name),sort:!0});if(0===e.values.length)return[new sx.S2(this.view,this,"No branches could be found.")];let t=e.values.map(e=>new BranchNode(x.nk.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,this.repo,e,!1,{showComparison:!1,showStashes:!1,showTracking:!1}));if("list"===this.view.config.branches.layout)return t;let i=(0,tG.Ay)(t,e=>e.treeHierarchy,(...e)=>e.join("/"),this.view.config.files.compact,e=>(e.compacted=!0,!0));return new BranchOrTagFolderNode(this.view,this,"remote-branch",i,this.repo.path,"",void 0).getChildren()}async getTreeItem(){let e,t=new n.TreeItem(this.remote.name,n.TreeItemCollapsibleState.Collapsed);if(t.id=this.id,t.description=(0,S.Qw)(this.remote),null!=this.remote.provider){let{provider:i}=this.remote;if(t.iconPath=null!=i.avatarUri&&this.view.config.avatars?i.avatarUri:"remote"===i.icon?new n.ThemeIcon("cloud"):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-${i.icon}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-${i.icon}.svg`)},this.remote.hasIntegration()){let r=await this.view.container.integrations.getByRemote(this.remote),s=r?.maybeConnected??await r?.isConnected();t.contextValue=`${sf.U0.Remote}${s?"+connected":"+disconnected"}`,e=`\`${this.remote.name}\` \xa0(${i.name} ${l.EO.Dash} _${s?"connected":"not connected"}${this.remote.default?", default":""}_) 

${i.displayPath}`}else t.contextValue=sf.U0.Remote,e=`\`${this.remote.name}\` \xa0(${i.name}${this.remote.default?", default":""}) 

${i.displayPath}`}else t.contextValue=sf.U0.Remote,t.iconPath=new n.ThemeIcon("cloud"),e=`\`${this.remote.name}\` \xa0(${this.remote.domain}${this.remote.default?", default":""}) 

${this.remote.path}`;for(let{type:i,url:r}of(this.remote.default&&(t.contextValue+="+default"),t.resourceUri=(0,sg.E)("remote",{state:this.remote.default?"default":void 0}),this.remote.urls))e+=`\\
${r} (${i})`;return t.tooltip=new n.MarkdownString(e,!0),t}async setAsDefault(e=!0){await this.remote.setAsDefault(e),this.triggerChange()}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?o0(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&oX(t,i,o)})([(0,d.Rm)()],RemoteNode.prototype,"setAsDefault",1);var o1=Object.defineProperty,o2=Object.getOwnPropertyDescriptor;let RemotesNode=class RemotesNode extends sP.l{constructor(e,t,i,r){super("remotes",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sf.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.git.remotes().getRemotes({sort:!0});if(0===e.length)return[new sx.S2(this.view,this,"No remotes could be found")];this.children=e.map(e=>new RemoteNode(this.uri,this.view,this,this.repo,e))}return this.children}getTreeItem(){let e=new n.TreeItem("Remotes",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sf.U0.Remotes,e.iconPath=new n.ThemeIcon("cloud"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?o2(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o1(t,i,o)})([(0,d.Yz)()],RemotesNode.prototype,"refresh",1);var o4=Object.defineProperty,o5=Object.getOwnPropertyDescriptor,o7=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?o5(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o4(t,i,o),o};let ReflogRecordNode=class ReflogRecordNode extends sf.eu{constructor(e,t,i){super("reflog-record",x.nk.fromRepoPath(i.repoPath),e,t),this.record=i,this.updateContext({reflog:i}),this._uniqueId=(0,sf.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}async getChildren(){let e=await this.getLog();if(void 0===e)return[new sx.S2(this.view,this,"No commits could be found.")];let t=[...(0,X.Tj)(e.commits.values(),e=>new sE.e(this.view,this,e))];return e.hasMore&&t.push(new sx.cb(this.view,this,t[t.length-1])),t}getTreeItem(){let e=new n.TreeItem(`${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}`,n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=`${0===this.record.HEAD.length?"":`${this.record.HEAD} ${l.EO.Space}${l.EO.Dot}${l.EO.Space} `}${this.record.formattedDate}`,e.contextValue=sf.U0.ReflogRecord,e.tooltip=`${0===this.record.HEAD.length?"":`${this.record.HEAD}
`}${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}${this.record.details?` (${this.record.details})`:""}
${this.record.formatDateFromNow()} (${this.record.formatDate()})
${this.record.previousShortSha} ${l.EO.Space}${l.EO.ArrowRight}${l.EO.Space} ${this.record.shortSha}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if(void 0===this._log){let e=`${this.record.previousSha}..${this.record.sha}`;this._log=await this.view.container.git.commits(this.uri.repoPath).getLog(e,{limit:this.limit??this.view.config.defaultItemLimit})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};o7([(0,D.G)(),(0,d.Yz)()],ReflogRecordNode.prototype,"refresh",1),o7([(0,D.G)()],ReflogRecordNode.prototype,"loadMore",1);var o8=Object.defineProperty,o6=Object.getOwnPropertyDescriptor;let ReflogNode=class ReflogNode extends sP.l{constructor(e,t,i,r){super("reflog",e,t,i),this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sf.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}async getChildren(){if(void 0===this.children){let e=[],t=await this.getReflog();if(void 0===t||0===t.records.length)return[new sx.S2(this.view,this,"No activity could be found.")];e.push(...t.records.map(e=>new ReflogRecordNode(this.view,this,e))),t.hasMore&&e.push(new sx.cb(this.view,this,e[e.length-1])),this.children=e}return this.children}getTreeItem(){let e=new n.TreeItem("Incoming Activity",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sf.U0.Reflog,e.description="experimental",e.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-activity.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-activity.svg")},e}refresh(e){super.refresh(!0),e&&(this._reflog=void 0)}_reflog;async getReflog(){return void 0===this._reflog&&(this._reflog=await this.repo.git.commits().getIncomingActivity?.({all:!0,limit:this.limit??this.view.config.defaultItemLimit})),this._reflog}get hasMore(){return this._reflog?.hasMore??!0}async loadMore(e){let t=await this.getReflog();t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._reflog!==t&&(this._reflog=t,this.limit=t?.count,this.triggerChange(!1)))}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?o6(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o8(t,i,o)})([(0,d.Yz)()],ReflogNode.prototype,"refresh",1);var o3=Object.defineProperty,o9=Object.getOwnPropertyDescriptor;let StashesNode=class StashesNode extends sP.l{constructor(e,t,i,r){super("stashes",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sf.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.git.stash()?.getStash();if(null==e)return[new sx.S2(this.view,this,"No stashes could be found.")];this.children=[...(0,X.Tj)(e.stashes.values(),e=>new sZ.m(this.view,this,e))]}return this.children}getTreeItem(){let e=new n.TreeItem("Stashes",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sf.U0.Stashes,e.iconPath=new n.ThemeIcon("gitlens-stashes"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?o9(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&o3(t,i,o)})([(0,d.Yz)()],StashesNode.prototype,"refresh",1);let StatusFilesNode=class StatusFilesNode extends sf.eu{constructor(e,t,i,r){super("status-files",x.nk.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,sf.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}async getChildren(){let e,t=[],i=this.repoPath;null!=this.range&&null!=(e=await this.view.container.git.commits(i).getLog(this.range,{limit:0}))&&(await Promise.allSettled((0,X.Tj)((0,X.pb)(e.commits.values(),e=>e.fileset?.files==null),e=>e.ensureFullDetails())),t=[...(0,X.qI)(e.commits.values(),e=>e.fileset?.files?.map(t=>({...t,commit:e}))??[])]),("worktrees"===this.view.type||this.view.config.includeWorkingTree)&&0!==this.status.files.length&&t.unshift(...(0,X.qI)(this.status.files,e=>(0,X.Tj)(e.getPseudoCommits(this.view.container,void 0),t=>this.getFileWithPseudoCommit(e,t)))),t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());let r=Object.values((0,X.$z)(t,e=>e.path)).map(e=>new sT.Z(this.view,this,i,e,"working"));if("list"!==this.view.config.files.layout){let e=(0,tG.Ay)(r,e=>e.uri.relativePath.split("/"),(...e)=>(0,T.Fd)((0,T.HS)(...e)),this.view.config.files.compact);r=new s$.x(this.view,this,e,i,"",void 0,!0).getChildren()}else r.sort((e,t)=>e.priority-t.priority||(0,eO.wN)(e.label,t.label));return r}async getTreeItem(){let e="worktrees"===this.view.type||this.view.config.includeWorkingTree?this.status.files.length:0;if(null!=this.range&&this.status.upstream?.state.ahead)if(e>0){let t=await this.view.container.git.diff(this.repoPath).getDiffStatus(`${this.status.upstream?.name}...`);if(null!=t){let i=new Set;for(let e of this.status.files)i.add(e.path);for(let e of t)i.add(e.path);e=i.size}}else{let t=await this.view.container.git.diff(this.repoPath).getChangedFilesCount(`${this.status.upstream?.name}...`);null!=t?e+=t.files:e=-1}let t=-1===e?"?? files changed":`${(0,eO.td)("file",e)} changed`,i=new n.TreeItem(t,n.TreeItemCollapsibleState.Collapsed);return i.description="working tree",i.id=this.id,i.contextValue=sf.U0.StatusFiles,i.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-diff.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-diff.svg")},i}getFileWithPseudoCommit(e,t){return{status:(t.isUncommitted?t.isUncommittedStaged?e.indexStatus:e.workingTreeStatus:e.status)??e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t}}};var ne=Object.defineProperty,nt=Object.getOwnPropertyDescriptor,ni=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ne(t,i,o),o};let TagNode=class TagNode extends s_.t{constructor(e,t,i,r){super("tag",e,t,i),this.parent=i,this.tag=r,this.updateContext({tag:r}),this._uniqueId=(0,sf.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(){return this.tag.name}get label(){return"tree"===this.view.config.branches.layout?this.tag.getBasename():this.tag.name}get ref(){return this.tag}async getChildren(){let e=await this.getLog();if(null==e)return[new sx.S2(this.view,this,"No commits could be found.")];let t=await this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath,this.tag.name),i=[...(0,sO.h)((0,X.Tj)(e.commits.values(),e=>new sE.e(this.view,this,e,void 0,void 0,t)),this)];return e.hasMore&&i.push(new sx.cb(this.view,this,i[i.length-1],{getCount:()=>this.view.container.git.commits(this.tag.repoPath).getCommitCount(this.tag.name)})),i}getTreeItem(){let e=new n.TreeItem(this.label,n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sf.U0.Tag,e.description=(0,ew.E)(this.tag.message),e.tooltip=`${this.tag.name}${(0,eO.eV)(l.EO.Dash,2,2)}${(0,P.pV)(this.tag.sha)}${null!=this.tag.date?`
${this.tag.formatDateFromNow()} (${this.tag.formatDate(this.view.container.TagDateFormatting.dateFormat)})`:""}

${(0,ew.E)(this.tag.message)}${null!=this.tag.commitDate&&this.tag.date!==this.tag.commitDate?`
${this.tag.formatCommitDateFromNow()} (${this.tag.formatCommitDate(this.view.container.TagDateFormatting.dateFormat)})`:""}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.commits(this.uri.repoPath).getLog(this.tag.name,{limit:this.limit??this.view.config.defaultItemLimit})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}};ni([(0,D.G)(),(0,d.Yz)()],TagNode.prototype,"refresh",1),ni([(0,D.G)()],TagNode.prototype,"loadMore",1);var nr=Object.defineProperty,ns=Object.getOwnPropertyDescriptor;let TagsNode=class TagsNode extends sP.l{constructor(e,t,i,r){super("tags",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sf.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){let e=await this.repo.git.tags().getTags({sort:!0});if(0===e.values.length)return[new sx.S2(this.view,this,"No tags could be found.")];let t=e.values.map(e=>new TagNode(x.nk.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,e));if("list"===this.view.config.branches.layout)return t;let i=(0,tG.Ay)(t,e=>e.tag.name.split("/"),(...e)=>e.join("/"),this.view.config.files.compact),r=new BranchOrTagFolderNode(this.view,this,"tag",i,this.repo.path,"",void 0);this.children=r.getChildren()}return this.children}getTreeItem(){let e=new n.TreeItem("Tags",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sf.U0.Tags,e.iconPath=new n.ThemeIcon("tag"),e}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ns(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nr(t,i,o)})([(0,d.Yz)()],TagsNode.prototype,"refresh",1);var no=i(567);let UncommittedFileNode=class UncommittedFileNode extends sQ.u${constructor(e,t,i,r){super("uncommitted-file",x.nk.fromFile(r,i),e,t,r)}toClipboard(){return this.path}get path(){return this.file.path}getChildren(){return[]}getTreeItem(){let e=new n.TreeItem(this.label,n.TreeItemCollapsibleState.None);e.contextValue=sf.U0.File,e.description=this.description,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath);let t=(0,no.O)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,T.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,T.HS)("images","light",t))},e.tooltip=(0,sQ.h)(this.file),e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=sz.Z.fromTemplate(this.view.config.formats.files.description,{...this.file},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,T.pD)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=sz.Z.fromTemplate("${file}",{...this.file},{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return(0,tW.gu)("gitlens.diffWithPrevious","Open Changes with Previous Revision",void 0,{uri:x.nk.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}})}};let UncommittedFilesNode=class UncommittedFilesNode extends sf.eu{constructor(e,t,i,r){super("uncommitted-files",x.nk.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,sf.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}getChildren(){let e=this.repoPath,t=[...(0,X.qI)(this.status.files,e=>e.getPseudoCommits(this.view.container,void 0).map(t=>({status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t})))];t.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());let i=Object.values((0,X.$z)(t,e=>e.path)).map(t=>new UncommittedFileNode(this.view,this,e,t[t.length-1]));if("list"!==this.view.config.files.layout){let t=(0,tG.Ay)(i,e=>e.uri.relativePath.split("/"),(...e)=>(0,T.Fd)((0,T.HS)(...e)),this.view.config.files.compact);i=new s$.x(this.view,this,t,e,"",void 0,!0).getChildren()}else i.sort((e,t)=>e.priority-t.priority||e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"}));return i}getTreeItem(){let e=new n.TreeItem("Uncommitted changes",n.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=sf.U0.UncommittedFiles,e.iconPath=new n.ThemeIcon("folder"),e}};var nn=Object.defineProperty,na=Object.getOwnPropertyDescriptor,nl=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?na(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nn(t,i,o),o};let WorktreeNode=class WorktreeNode extends sP.l{constructor(e,t,i,r,s){super("worktree",e,t,i),this.parent=i,this.worktree=r,this.worktreeStatus=s,this.updateContext({worktree:r}),this._uniqueId=(0,sf.pF)(this.type,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;_branch;get id(){return this._uniqueId}toClipboard(){return this.worktree.uri.fsPath}get repoPath(){return this.uri.repoPath}compacted=!1;get avoidCompacting(){return this.worktree.isDefault||this.worktree.opened}get treeHierarchy(){return"branch"===this.worktree.type&&!this.avoidCompacting&&this.worktree.branch?.getNameWithoutRemote().split("/")||[this.worktree.name]}async getChildren(){if(null==this.children){let e,t,i=this._branch;if(null!=i&&this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=i.upstream||i.remote)&&(0,A.SD)("gitlens:repos:withHostingIntegrationsConnected")?.includes(i.repoPath)&&void 0===(t=this.getState("pullRequest"))&&void 0===this.getState("pendingPullRequest")){e=(0,E.v6)();let t=this.getAssociatedPullRequest(i,{include:["opened","merged"]});queueMicrotask(async()=>{await e?.promise;let r=!1,s=setTimeout(()=>{r=!0,this.view.triggerNodeChange(this)},250),o=await t;clearTimeout(s),null!=o&&null!=this.children&&this.children.splice(0,0,new sw.Xu(this.view,this,o,i)),(r||null!=o)&&this.view.triggerNodeChange(this)})}let[r,s,o]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsLookup(this.uri.repoPath),null!=i&&!i.remote?this.view.container.git.getBranchAheadRange(i).then(e=>e?this.view.container.git.commits(this.uri.repoPath).getLogShasOnly(e,{limit:0}):void 0):void 0]),n=(0,E.Ro)(r);if(null==n)return[new sx.S2(this.view,this,"No commits could be found.")];let a=[];null!=i&&null!=t&&a.push(new sw.Xu(this.view,this,t,i)),null!=i&&!1!==this.view.config.showBranchComparison&&a.push(new CompareBranchNode(this.uri,this.view,this,i,this.view.config.showBranchComparison,this.splatted));let l=(0,E.Ro)(o),u=(0,E.Ro)(s);a.push(...(0,sO.h)((0,X.Tj)(n.commits.values(),e=>(0,y.kk)(e)?new sZ.m(this.view,this,e,{icon:!0}):new sE.e(this.view,this,e,l?.has(e.ref),i,u)),this)),n.hasMore&&a.push(new sx.cb(this.view,this,a[a.length-1])),this.worktreeStatus?.status?.hasChanges&&a.unshift(new UncommittedFilesNode(this.view,this,this.worktreeStatus.status,void 0)),this.children=a,e?.fulfill()}return this.children}async getTreeItem(){let e,t;this.splatted=!1;let i="",r=!1,s=new n.MarkdownString("",!0);s.isTrusted=!0;let o=this.worktree.isDefault||this.worktree.opened?` \xa0(${this.worktree.isDefault?`_default${this.worktree.opened?", active_":"_"}`:this.worktree.opened?"_active_":""})`:"",a=this.worktreeStatus?.status,u=`\\
$(folder) [\`${this.worktree.friendlyPath}\`](command:gitlens.views.revealWorktreeInExplorer?%22${this.worktree.uri.toString()}%22 "Reveal in Explorer")`,{viewAs:c}=this.view.config.worktrees;switch(this.worktree.type){case"bare":e=new n.ThemeIcon("folder"),s.appendMarkdown(`${this.worktree.isDefault?"$(pass) ":""}Bare Worktree${o}${u}`);break;case"branch":{let{branch:t}=this.worktree;if(this._branch=t,s.appendMarkdown(`${this.worktree.isDefault?"$(pass) ":""}Worktree for $(git-branch) \`${t?.getNameWithoutRemote()??t?.name}\`${o}${u}`),e=(0,ey.BI)(this.view.container,t),null!=t&&!t.remote)if(null!=t.upstream){let e=l.EO.Dash,r=await t.getRemote();if(t.upstream.missing)e=l.EO.Warning;else if(null!=r){let t,i;for(let{type:e}of r.urls)if("fetch"===e){if(t=!0,i)break}else if("push"===e&&(i=!0,t))break;t&&i?e=l.EO.ArrowsRightLeft:i?e=l.EO.ArrowRight:t&&(e=l.EO.ArrowLeft)}i=`${t.getTrackingStatus({empty:`${"name"!==c?` ${t.getNameWithoutRemote()}`:""}${(0,eO.eV)(e,2*("name"!==c),2)}`,suffix:`${"name"!==c?` ${t.getNameWithoutRemote()}`:""}${(0,eO.eV)(e,2,2)}`})}${t.upstream.name}`,s.appendMarkdown(`

Branch is ${t.getTrackingStatus({empty:`${t.upstream.missing?"missing upstream":"up to date with"} \\
 $(git-branch) \`${t.upstream.name}\`${r?.provider?.name?` on ${r.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:`\\
$(git-branch) \`${t.upstream.name}\`${r?.provider?.name?` on ${r.provider.name}`:""}`})}`)}else{let e=(0,S.lb)(await this.view.container.git.remotes(t.repoPath).getRemotesWithProviders());s.appendMarkdown(`

Local branch, hasn't been published to ${e??"a remote"}`)}null!=a&&(r=a.hasChanges,s.appendMarkdown(`

${a.getFormattedDiffStatus({prefix:`Has Uncommitted Changes\\
`,empty:"No Uncommitted Changes",expand:!0})}`));break}case"detached":e=new n.ThemeIcon("git-commit"),s.appendMarkdown(`${this.worktree.isDefault?"$(pass) ":""}Detached Worktree at $(git-commit) ${(0,P.pV)(this.worktree.sha)}${o}${u}`),null!=a&&(r=a.hasChanges,s.appendMarkdown(`

${a.getFormattedDiffStatus({prefix:"Has Uncommitted Changes",empty:"No Uncommitted Changes",expand:!0})}`))}let h=this.getState("pendingPullRequest");null!=h&&s.appendMarkdown(`

$(loading~spin) Loading associated pull request${l.EO.Ellipsis}`);let d=this.worktreeStatus?.missing??!1;switch(d&&s.appendMarkdown(`

${l.EO.Warning} Unable to locate worktree path`),c){case"path":t=(0,I.Sp)(this.worktree.uri);break;case"relativePath":t=this.worktree.friendlyPath;break;default:t="tree"===this.view.config.files.layout&&this.compacted&&!this.avoidCompacting&&"branch"===this.worktree.type&&this.worktree.branch?this.worktree.branch.getBasename():this.worktree.name}let p=new n.TreeItem(t,n.TreeItemCollapsibleState.Collapsed);return p.id=this.id,p.description=i,p.contextValue=`${sf.U0.Worktree}${this.worktree.isDefault?"+default":""}${this.worktree.opened?"+active":""}`,p.iconPath=null!=h?new n.ThemeIcon("loading~spin"):this.worktree.opened?new n.ThemeIcon("check"):e,p.tooltip=s,p.resourceUri=(0,sg.E)("worktree",{hasChanges:r,missing:d}),p}refresh(e){super.refresh(!0),e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return null==r?(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i):r}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.commits(this.uri.repoPath).getLog(this.worktree.sha,{limit:this.limit??this.view.config.defaultItemLimit,stashes:this.view.config.showStashes})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await n.window.withProgress({location:{viewId:this.view.id}},()=>this.getLog());t?.hasMore&&(t=await t.more?.(e??this.view.config.pageItemLimit),this._log!==t&&(this._log=t,this.limit=t?.count,this.children=void 0,this.triggerChange(!1)))}};nl([(0,d.Yz)()],WorktreeNode.prototype,"refresh",1),nl([(0,D.G)()],WorktreeNode.prototype,"loadMore",1);var nu=Object.defineProperty,nc=Object.getOwnPropertyDescriptor;let WorktreesNode=class WorktreesNode extends sP.l{constructor(e,t,i,r){super("worktrees",e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,sf.pF)(this.type,this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this.children){if(!(await this.repo.access("worktrees")).allowed)return[];let e=await this.repo.git.worktrees()?.getWorktrees();if(!e?.length)return[new sx.S2(this.view,this,"No worktrees could be found.")];let t=(0,tG.x1)(await Promise.allSettled((0,X.Tj)((0,z.xG)(e),async e=>{let t,i=!1;try{t=await e.getStatus()}catch(t){_.Vy.error(t,`Worktree status failed: ${e.uri.toString(!0)}`),i=!0}return new WorktreeNode(this.uri,this.view,this,e,{status:t,missing:i})})),e=>"fulfilled"===e.status?e.value:void 0);if("list"===this.view.config.branches.layout||"name"!==this.view.config.worktrees.viewAs)return this.children=t,t;let i=(0,tG.Ay)(t,e=>e.treeHierarchy,(...e)=>e.join("/"),this.view.config.files.compact,e=>(e.compacted=!0,!0)),r=new BranchOrTagFolderNode(this.view,this,"worktree",i,this.repo.path,"",void 0);this.children=r.getChildren()}return this.children}async getTreeItem(){let e=await this.repo.access("worktrees"),t=new n.TreeItem("Worktrees",e.allowed?n.TreeItemCollapsibleState.Collapsed:n.TreeItemCollapsibleState.None);return t.id=this.id,t.contextValue=sf.U0.Worktrees,t.description=e.allowed?void 0:` ${l.EO.Warning}  Use on privately-hosted repos requires GitLens Pro`,t.iconPath=new n.ThemeIcon("folder-opened"),t}refresh(){super.refresh(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?nc(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nu(t,i,o)})([(0,d.Yz)()],WorktreesNode.prototype,"refresh",1);var nh=Object.defineProperty,nd=Object.getOwnPropertyDescriptor,np=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nd(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nh(t,i,o),o};let RepositoryNode=class RepositoryNode extends sb.Y{constructor(e,t,i,r,s){super("repository",e,t,i),this.repo=r,this.updateContext({...s,repository:this.repo}),this._uniqueId=(0,sf.pF)(this.type,this.context),this._status=this.repo.git.status().getStatus()}_status;get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}get workspace(){return this.context.workspace}get wsRepositoryDescriptor(){return this.context.wsRepositoryDescriptor}async getChildren(){if(void 0===this.children){let e=[],t=await this._status;if(null!=t){let i=await this.repo.git.config().getDefaultWorktreePath?.(),r=new j.Z(this.view.container,t.repoPath,`refs/heads/${t.branch}`,!0,void 0,t.sha,t.upstream,{path:t.repoPath,isDefault:t.repoPath===i},t.detached,t.rebasing),s=await this.repo.git.status().getPausedOperationStatus?.();null!=s?e.push(new PausedOperationStatusNode(this.view,this,r,s,t,!0)):this.view.config.showUpstreamStatus&&(t.upstream?t.upstream.state.behind||t.upstream.state.ahead?(t.upstream.state.behind&&e.push(new BranchTrackingStatusNode(this.view,this,r,t,"behind",!0)),t.upstream.state.ahead&&e.push(new BranchTrackingStatusNode(this.view,this,r,t,"ahead",!0,{showAheadCommits:!0}))):e.push(new BranchTrackingStatusNode(this.view,this,r,t,"same",!0)):t.detached||e.push(new BranchTrackingStatusNode(this.view,this,r,t,"none",!0))),this.view.config.includeWorkingTree&&0!==t.files.length&&e.push(new StatusFilesNode(this.view,this,t,void 0)),!1!==this.view.config.showBranchComparison&&e.push(new CompareBranchNode(this.uri,this.view,this,r,this.view.config.showBranchComparison,!0)),0===e.length||this.view.config.compact||e.push(new sx.S2(this.view,this,"",l.EO.Dash.repeat(2),"")),this.view.config.showCommits&&e.push(new BranchNode(this.uri,this.view,this,this.repo,r,!0,{showAsCommits:!0,showComparison:!1,showStashes:this.view.config.branches.showStashes,showStatusDecorationOnly:!0,showStatus:!1,showTracking:!1}))}this.view.config.showBranches&&e.push(new BranchesNode(this.uri,this.view,this,this.repo)),this.view.config.showRemotes&&e.push(new RemotesNode(this.uri,this.view,this,this.repo)),this.view.config.showStashes&&await this.repo.git.supports("stashes")&&e.push(new StashesNode(this.uri,this.view,this,this.repo)),this.view.config.showTags&&e.push(new TagsNode(this.uri,this.view,this,this.repo)),this.view.config.showWorktrees&&await this.repo.git.supports("git:worktrees")&&e.push(new WorktreesNode(this.uri,this.view,this,this.repo)),this.view.config.showContributors&&e.push(new oC.j(this.uri,this.view,this,this.repo,{stats:this.view.config.showContributorsStatistics})),this.view.config.showIncomingActivity&&!this.repo.provider.virtual&&e.push(new ReflogNode(this.uri,this.view,this,this.repo)),this.children=e}return this.children}async getTreeItem(){let e,t=this.repo.formattedName??this.uri.repoPath??"",i=await this.repo?.getLastFetched()??0,r=`${this.repo.formattedName??this.uri.repoPath??""}${i?`${(0,eO.eV)(l.EO.Dash,2,2)}Last fetched ${(0,sv.V)(i,!1)}`:""}${this.repo.formattedName?`\\
${this.uri.repoPath}`:""}`,s="",{workspace:o}=this.context,a=sf.U0.Repository;this.repo.starred&&(a+="+starred"),null!=o&&(a+="+workspace","cloud"===o.type?a+="+cloud":"local"===o.type&&(a+="+local")),this.repo.virtual?a+="+virtual":this.repo.closed&&(a+="+closed");let u=await this._status;if(null!=u){let t;r+=`

Current branch $(git-branch) ${u.branch}${u.rebasing?" (Rebasing)":""}`,this.view.config.includeWorkingTree&&0!==u.files.length&&(s=u.getFormattedDiffStatus({compact:!0,prefix:(0,eO.eV)(l.EO.Dot,1,1)}));let i=u.getUpstreamStatus({suffix:(0,eO.eV)(l.EO.Dot,1,1)});if(e=`${i}${u.branch}${u.rebasing?" (Rebasing)":""}${s}`,null!=u.upstream){let e=(0,S.zF)(await this.repo.git.remotes().getRemotesWithProviders());t=e?.length?e[0].name:void 0}else{let e=await u.getRemote();t=e?.provider?.name}null!=u.upstream&&(r+=` is ${u.getUpstreamStatus({empty:`up to date with $(git-branch) ${u.upstream.name}${t?` on ${t}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${u.upstream.name}${t?` on ${t}`:""}`})}`,u.upstream.state.behind&&(a+="+behind"),u.upstream.state.ahead&&(a+="+ahead")),s&&(r+=`

Working tree has uncommitted changes${u.getFormattedDiffStatus({expand:!0,prefix:`
`,separator:`
`})}`)}null!=o&&(r+=`

Repository is ${this.repo.closed?"not ":""}open in the current window`);let c=new n.TreeItem(t,null!=o||"workspaces"===this.view.type?n.TreeItemCollapsibleState.Collapsed:n.TreeItemCollapsibleState.Expanded);c.id=this.id,c.contextValue=a,c.description=`${e??""}${i?`${(0,eO.eV)(l.EO.Dot,1,1)}Last fetched ${(0,sv.V)(i)}`:""}`,c.iconPath=(0,ey.pL)(this.view.container,this.repo,u),null==o||this.repo.closed||(c.resourceUri=(0,sg.E)("repository",{state:"open",workspace:!0}));let h=new n.MarkdownString(r,!0);return h.supportHtml=!0,h.isTrusted=!0,c.tooltip=h,c}fetch(e){return this.repo.fetch(e)}pull(e){return this.repo.pull(e)}push(e){return this.repo.push(e)}async refresh(e=!1){super.refresh(e),e&&(this._status=this.repo.git.status().getStatus()),await this.ensureSubscription()}async star(){await this.repo.star(),this.parent.triggerChange()}async unstar(){await this.repo.unstar(),this.parent.triggerChange()}async subscribe(){let e=await this.repo?.getLastFetched()??0,t=[(0,tt.HC)(this.repo.onDidChange,this.onRepositoryChanged,this)],i=(0,sI.u)(e);return 0!==e&&i>0&&t.push((0,iN.gC)(()=>{i!==(0,sI.u)(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)},i)),this.view.config.includeWorkingTree&&t.push((0,tt.HC)(this.repo.onDidChangeFileSystem,this.onFileSystemChanged,this,[this.repo.watchFileSystem()])),n.Disposable.from(...t)}etag(){return this.repo.etag}async onFileSystemChanged(e){if(this._status=this.repo.git.status().getStatus(),void 0!==this.children){let e=await this._status,t=this.children.findIndex(e=>"status-files"===e.type);if(void 0!==e&&(e.upstream?.state.ahead||0!==e.files.length)){let i=1;-1===t&&(t=(0,tG.Kl)(this.children,e=>"tracking-status"===e.type||"branch"===e.type),i=0,t++),this.children.splice(t,i,new StatusFilesNode(this.view,this,e,void 0))}else -1!==t&&this.children.splice(t,1)}this.triggerChange(!1)}onRepositoryChanged(e){if(e.changed(R.Z_.Closed,R.Ti.Any))return void this.dispose();if(null==this.children||e.changed(R.Z_.Config,R.Z_.Index,R.Z_.Heads,R.Z_.Opened,R.Z_.PausedOperationStatus,R.Z_.Unknown,R.Ti.Any))return void this.triggerChange(!0);if(e.changed(R.Z_.Remotes,R.Z_.RemoteProviders,R.Ti.Any)){let e=this.children.find(e=>"remotes"===e.type);null!=e&&this.view.triggerNodeChange(e)}if(e.changed(R.Z_.Stash,R.Ti.Any)){let e=this.children.find(e=>"stashes"===e.type);null!=e&&this.view.triggerNodeChange(e)}if(e.changed(R.Z_.Tags,R.Ti.Any)){let e=this.children.find(e=>"tags"===e.type);null!=e&&this.view.triggerNodeChange(e)}}};np([(0,d.Rm)()],RepositoryNode.prototype,"fetch",1),np([(0,d.Rm)()],RepositoryNode.prototype,"pull",1),np([(0,d.Rm)()],RepositoryNode.prototype,"push",1),np([(0,D.G)(),(0,d.Yz)()],RepositoryNode.prototype,"refresh",1),np([(0,d.Rm)()],RepositoryNode.prototype,"star",1),np([(0,d.Rm)()],RepositoryNode.prototype,"unstar",1),np([(0,d.Yz)()],RepositoryNode.prototype,"subscribe",1),np([(0,d.Yz)({args:{0:e=>`{ repository: ${e.repository.name??""}, uris(${e.uris.size}): [${(0,X.fj)((0,X.Tj)((0,X.di)(e.uris,0,1),e=>e.fsPath),", ")}${e.uris.size>1?", ...":""}] }`}})],RepositoryNode.prototype,"onFileSystemChanged",1),np([(0,d.Yz)({args:{0:e=>e.toString()}})],RepositoryNode.prototype,"onRepositoryChanged",1);var ng=Object.defineProperty,nm=Object.getOwnPropertyDescriptor,nf=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nm(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ng(t,i,o),o};let RemotesRepositoryNode=class RemotesRepositoryNode extends sk.P{async getChildren(){return null==this.child&&(this.child=new RemotesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(R.Z_.Config,R.Z_.Remotes,R.Z_.RemoteProviders,R.Z_.Unknown,R.Ti.Any)}};let RemotesViewNode=class RemotesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading remotes...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No remotes could be found.",[];h.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,sv.Y)(e)).keys()]);let t=1===e.length;this.children=e.map(e=>new RemotesRepositoryNode(x.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.git.remotes().getRemotes();return 0===t.length?(this.view.message="No remotes could be found.",e.ensureSubscription(),[]):(this.view.description=this.view.getViewDescription(t.length),e.getChildren())}return this.children}getTreeItem(){return new n.TreeItem("Remotes",n.TreeItemCollapsibleState.Expanded)}};let RemotesView=class RemotesView extends sD.DN{configKey="remotes";constructor(e,t){super(e,"remotes","Remotes","remotesView",t)}get canReveal(){return this.config.reveal||!h.H.get("views.repositories.showRemotes")}get canSelectMany(){return h.H.get("views.multiselect")}getRoot(){return new RemotesViewNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","remotes"),this.refresh(!0)),this),op(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),op(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),op(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),op(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat")||!!h.H.changed(e,"integrations.enabled")||!!h.H.changed(e,"sortBranchesBy")||!!h.H.changed(e,"sortRepositoriesBy")||!!h.H.changed(e,"views.collapseWorktreesWhenPossible"))&&!0}async findBranch(e,t){if(!e.remote)return;let{repoPath:i}=e;return this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:t=>t instanceof RemotesViewNode||(t instanceof RemotesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:t instanceof RemoteNode&&t.repoPath===i&&t.remote.name===(0,eb.Zq)(e.name)),token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.branches(e.repoPath).getBranchesWithCommits([e.ref],void 0,(0,y.WM)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0});if(0===r.length)return;let s=r.map(e=>e.split("/",1)[0]);return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:e=>e instanceof RemotesViewNode||(e instanceof RemotesRepositoryNode||e instanceof BranchOrTagFolderNode?e.repoPath===i:e instanceof RemoteNode?e.repoPath===i&&s.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}async findRemote(e,t){let{repoPath:i}=e;return this.findNode(t=>t.remote?.name===e.name,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RemotesViewNode||e instanceof RemotesRepositoryNode&&e.repoPath===i,token:t})}async revealBranch(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealCommit(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRemote(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findRemote(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sk.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof RemotesViewNode||e instanceof sk.P});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return h.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}async setShowBranchPullRequest(e){await h.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await h.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}};nf([(0,D.G)(()=>"")],RemotesView.prototype,"revealBranch",1),nf([(0,D.G)(()=>"")],RemotesView.prototype,"revealCommit",1),nf([(0,D.G)(()=>"")],RemotesView.prototype,"revealRemote",1),nf([(0,D.G)(()=>"")],RemotesView.prototype,"revealRepository",1);var nw=Object.defineProperty,nv=Object.getOwnPropertyDescriptor,ny=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nv(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nw(t,i,o),o};let RepositoriesNode=class RepositoriesNode extends sb.Y{constructor(e){super("repositories",x.Bd,e)}getChildren(){if(null==this.children){let e=this.view.container.git.openRepositories;if(0===e.length)return[new sx.S2(this.view,this,"No repositories could be found.")];this.children=e.map(e=>new RepositoryNode(x.nk.fromRepoPath(e.path),this.view,this,e))}return this.children}getTreeItem(){let e="workspaces"===this.view.type,t=e&&null!=this.view.container.workspaces.currentWorkspaceId,i=t&&null!=this.view.container.workspaces.currentWorkspace,r=new n.TreeItem(e?"Current Window":"Repositories",e?n.TreeItemCollapsibleState.Collapsed:n.TreeItemCollapsibleState.Expanded);e&&(r.description=n.workspace.name??n.workspace.workspaceFolders?.[0]?.name??"");let s=sf.U0.Repositories;return e&&(s+="+workspaces"),t&&(s+="+linked"),i&&(s+="+current",r.resourceUri=(0,sg.E)("repositories",{currentWorkspace:!0})),r.contextValue=s,r}async refresh(e=!1){let t=null!=this.children;if(super.refresh(e),!t)return;if(e){await this.unsubscribe(),this.ensureSubscription();return}let i=this.view.container.git.openRepositories;if(0===i.length&&(null==this.children||0===this.children.length))return;if(0===i.length){this.children=[new sx.S2(this.view,this,"No repositories could be found.")];return}let r=[];for(let e of i){let t=e.id,i=this.children.find(e=>e.repo.id===t);null!=i?(r.push(i),i.refresh()):r.push(new RepositoryNode(x.nk.fromRepoPath(e.path),this.view,this,e))}this.children=r,this.ensureSubscription()}subscribe(){let e=[(0,tt.HC)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this)];return"gitlens.views.repositories"===this.view.id&&this.view.config.autoReveal&&e.push((0,tt.HC)(n.window.onDidChangeActiveTextEditor,(0,B.s)(this.onActiveEditorChanged,500),this)),n.Disposable.from(...e)}etag(){return(0,iN.L2)(this.view.container.git.etag,this.view.container.subscription.etag)}onActiveEditorChanged(e){if(null!=e&&null!=this.children&&1!==this.children.length)try{let t=e.document.uri,i=this.children.find(e=>e instanceof RepositoryNode&&e.repo.containsUri(t));if(null==i)return;let r=0===this.view.selection.length?void 0:this.view.selection[0];for(;null!=r;){if(r===i)return;r=r.getParent()}this.view.reveal(i,{expand:!0})}catch(e){_.Vy.error(e)}}onRepositoriesChanged(e){this.triggerChange(!0)}};ny([(0,D.G)(),(0,d.Yz)()],RepositoriesNode.prototype,"refresh",1),ny([(0,d.Yz)()],RepositoriesNode.prototype,"subscribe",1),ny([(0,d.Yz)({args:!1})],RepositoriesNode.prototype,"onActiveEditorChanged",1),ny([(0,d.Yz)()],RepositoriesNode.prototype,"onRepositoriesChanged",1);var nb=Object.defineProperty,nC=Object.getOwnPropertyDescriptor,nR=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nC(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nb(t,i,o),o};let RepositoriesView=class RepositoriesView extends sD.DN{_onDidChangeAutoRefresh=new n.EventEmitter;get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}configKey="repositories";constructor(e,t){super(e,"repositories","Repositories","repositoriesView",t)}dispose(){this._onDidChangeAutoRefresh.dispose(),super.dispose()}getRoot(){return new RepositoriesNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("branches","contributors","remotes","stashes","status","tags"),this.refresh(!0)),this),op(this.getQualifiedCommand("setBranchesLayoutToList"),()=>this.setBranchesLayout("list"),this),op(this.getQualifiedCommand("setBranchesLayoutToTree"),()=>this.setBranchesLayout("tree"),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),op(this.getQualifiedCommand("setAutoRefreshToOn"),()=>this.setAutoRefresh(h.H.get("views.repositories.autoRefresh"),!0),this),op(this.getQualifiedCommand("setAutoRefreshToOff"),()=>this.setAutoRefresh(h.H.get("views.repositories.autoRefresh"),!1),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),op(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),op(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),op(this.getQualifiedCommand("setBranchesShowBranchComparisonOn"),()=>this.setBranchShowBranchComparison(!0),this),op(this.getQualifiedCommand("setBranchesShowBranchComparisonOff"),()=>this.setBranchShowBranchComparison(!1),this),op(this.getQualifiedCommand("setShowBranchesOn"),()=>this.toggleSection("showBranches",!0),this),op(this.getQualifiedCommand("setShowBranchesOff"),()=>this.toggleSection("showBranches",!1),this),op(this.getQualifiedCommand("setShowCommitsOn"),()=>this.toggleSection("showCommits",!0),this),op(this.getQualifiedCommand("setShowCommitsOff"),()=>this.toggleSection("showCommits",!1),this),op(this.getQualifiedCommand("setShowContributorsOn"),()=>this.toggleSection("showContributors",!0),this),op(this.getQualifiedCommand("setShowContributorsOff"),()=>this.toggleSection("showContributors",!1),this),op(this.getQualifiedCommand("setShowRemotesOn"),()=>this.toggleSection("showRemotes",!0),this),op(this.getQualifiedCommand("setShowRemotesOff"),()=>this.toggleSection("showRemotes",!1),this),op(this.getQualifiedCommand("setShowStashesOn"),()=>this.toggleSection("showStashes",!0),this),op(this.getQualifiedCommand("setShowStashesOff"),()=>this.toggleSection("showStashes",!1),this),op(this.getQualifiedCommand("setShowTagsOn"),()=>this.toggleSection("showTags",!0),this),op(this.getQualifiedCommand("setShowTagsOff"),()=>this.toggleSection("showTags",!1),this),op(this.getQualifiedCommand("setShowWorktreesOn"),()=>this.toggleSection("showWorktrees",!0),this),op(this.getQualifiedCommand("setShowWorktreesOff"),()=>this.toggleSection("showWorktrees",!1),this),op(this.getQualifiedCommand("setShowUpstreamStatusOn"),()=>this.toggleSection("showUpstreamStatus",!0),this),op(this.getQualifiedCommand("setShowUpstreamStatusOff"),()=>this.toggleSection("showUpstreamStatus",!1),this),op(this.getQualifiedCommand("setShowSectionOff"),e=>this.toggleSectionByNode(e,!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat")||!!h.H.changed(e,"sortBranchesBy")||!!h.H.changed(e,"sortContributorsBy")||!!h.H.changed(e,"sortTagsBy")||!!h.H.changed(e,"sortRepositoriesBy"))&&!0}onConfigurationChanged(e){h.H.changed(e,`views.${this.configKey}.autoRefresh`)&&this.setAutoRefresh(h.H.get("views.repositories.autoRefresh")),super.onConfigurationChanged(e)}get autoRefresh(){return this.config.autoRefresh&&this.container.storage.getWorkspace("views:repositories:autoRefresh",!0)}findBranch(e,t){let{repoPath:i}=e;return e.remote?this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:t=>t instanceof RepositoriesNode||(t instanceof RemoteNode?t.repoPath===i&&e.remote&&t.remote.name===(0,eb.Zq)(e.name):(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof RemotesNode||t instanceof BranchOrTagFolderNode)&&t.repoPath===i),token:t}):this.findNode(t=>t.branch?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof BranchesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){let{repoPath:i}=e,r=await this.container.git.branches(e.repoPath).getBranchesWithCommits([e.ref],void 0,(0,y.WM)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:6,canTraverse:async t=>t instanceof RepositoriesNode||(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t});if(0===(r=await this.container.git.branches(e.repoPath).getBranchesWithCommits([e.ref],void 0,(0,y.WM)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0})).length)return;let s=r.map(e=>e.split("/",1)[0]);return this.findNode(t=>t.commit?.ref===e.ref,{allowPaging:!0,maxDepth:8,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RemoteNode?e.repoPath===i&&s.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}findContributor(e,t){let{repoPath:i,username:r,email:s,name:o}=e;return this.findNode(e=>e instanceof ob.W&&e.contributor.username===r&&e.contributor.email===s&&e.contributor.name===o,{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof oC.j)&&e.repoPath===i,token:t})}findRemote(e,t){let{repoPath:i}=e;return this.findNode(t=>t.remote?.name===e.name,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof RemotesNode)&&e.repoPath===i,token:t})}findStash(e,t){let{repoPath:i}=e;return this.findNode(t=>t.commit?.ref===e.ref,{maxDepth:3,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof StashesNode)&&e.repoPath===i,token:t})}findTag(e,t){let{repoPath:i}=e;return this.findNode(t=>t.tag?.ref===e.ref,{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof TagsNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}findWorktree(e,t){let{repoPath:i,uri:r}=e,s=r.toString();return this.findNode(t=>t instanceof WorktreeNode&&e.uri.toString()===s,{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof WorktreesNode)&&e.repoPath===i,token:t})}async revealBranch(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findBranch(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealBranches(e,t){let i=await this.findNode(t=>t instanceof BranchesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async revealCommit(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findCommit(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealContributor(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing contributor '${e.name} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findContributor(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRemote(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findRemote(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof RepositoryNode&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof RepositoriesNode});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findStash(e,r);return void 0!==s&&await this.reveal(s,t),s})}async revealStashes(e,t){let i=await this.findNode(t=>t instanceof StashesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async revealTag(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},async(i,r)=>{let s=await this.findTag(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealTags(e,t){let i=await this.findNode(t=>t instanceof TagsNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async revealWorktree(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorktree(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}async revealWorktrees(e,t){let i=await this.findNode(t=>t instanceof WorktreesNode&&t.repoPath===e,{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async setAutoRefresh(e,t){e&&(void 0===t?t=this.container.storage.getWorkspace("views:repositories:autoRefresh",!0):await this.container.storage.storeWorkspace("views:repositories:autoRefresh",t)),(0,A.o)("gitlens:views:repositories:autoRefresh",e&&t),this._onDidChangeAutoRefresh.fire()}setBranchesLayout(e){return h.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return h.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}setBranchShowBranchComparison(e){return h.H.updateEffective(`views.${this.configKey}.branches.showBranchComparison`,!!e&&"branch")}async toggleSection(e,t){return h.H.updateEffective(`views.${this.configKey}.${e}`,t)}async toggleSectionByNode(e,t){return e instanceof BranchesNode?h.H.updateEffective(`views.${this.configKey}.showBranches`,t):e instanceof BranchNode?h.H.updateEffective(`views.${this.configKey}.showCommits`,t):e instanceof BranchTrackingStatusNode?h.H.updateEffective(`views.${this.configKey}.showUpstreamStatus`,t):e instanceof CompareBranchNode?this.setShowBranchComparison(t):e instanceof oC.j?h.H.updateEffective(`views.${this.configKey}.showContributors`,t):e instanceof ReflogNode?h.H.updateEffective(`views.${this.configKey}.showIncomingActivity`,t):e instanceof RemotesNode?h.H.updateEffective(`views.${this.configKey}.showRemotes`,t):e instanceof StashesNode?h.H.updateEffective(`views.${this.configKey}.showStashes`,t):e instanceof TagsNode?h.H.updateEffective(`views.${this.configKey}.showTags`,t):e instanceof WorktreesNode?h.H.updateEffective(`views.${this.configKey}.showWorktrees`,t):Promise.resolve()}};nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealBranch",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealBranches",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealCommit",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealContributor",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealRemote",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealRepository",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealStash",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealStashes",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealTag",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealTags",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealWorktree",1),nR([(0,D.G)(()=>"")],RepositoriesView.prototype,"revealWorktrees",1);let ComparePickerNode=class ComparePickerNode extends sf.eu{constructor(e,t,i){super("compare-picker",x.Bd,e,t),this.selectedRef=i}order=Date.now();getChildren(){return[]}getTreeItem(){let e,t,i=this.selectedRef,r=i?.repoPath;if(void 0!==r&&this.view.container.git.repositoryCount>1){let t=this.view.container.git.getRepository(r);e=t?.formattedName??r}return null==i?((t=new n.TreeItem("Compare <branch, tag, or ref> with <branch, tag, or ref>",n.TreeItemCollapsibleState.None)).contextValue=sf.U0.ComparePicker,t.description=e,t.tooltip=`Click to select or enter a reference for compare${l.EO.Ellipsis}`,t.command={title:`Compare${l.EO.Ellipsis}`,command:this.view.getQualifiedCommand("selectForCompare")}):((t=new n.TreeItem(`Compare ${i.label} with <branch, tag, or ref>`,n.TreeItemCollapsibleState.None)).contextValue=sf.U0.ComparePickerWithRef,t.description=e,t.tooltip=`Click to compare ${i.label} with${l.EO.Ellipsis}`,t.command={title:`Compare ${i.label} with${l.EO.Ellipsis}`,command:this.view.getQualifiedCommand("compareWithSelected")}),t}};var nk=i(242),nS=Object.defineProperty,nP=Object.getOwnPropertyDescriptor,nA=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nP(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nS(t,i,o),o};let SearchAndCompareViewNode=class SearchAndCompareViewNode extends sf.eu{splatted=!0;comparePicker;constructor(e){super("search-compare",x.Bd,e)}dispose(){super.dispose(),(0,sD.lm)(this._children)}_children;get children(){if(null==this._children){let e=[],t=this.view.getStoredNodes();0!==t.length&&e.push(...t),(0,sD.lm)(this._children,e),this._children=e}return this._children}set children(e){this.children!==e&&((0,sD.lm)(this.children,e),this._children=e)}getChildren(){let e=this.children;return 0===e.length?[]:e.sort((e,t)=>t.order-e.order)}getTreeItem(){this.splatted=!1;let e=new n.TreeItem("SearchAndCompare",n.TreeItemCollapsibleState.Expanded);return e.contextValue=sf.U0.SearchAndCompare,e}addOrReplace(e){let t=[...this.children];t.includes(e)||(t.push(e),this.children=t,this.view.triggerNodeChange())}async clear(){0!==this.children.length&&(this.removeComparePicker(!0),this.children=[],await this.view.clearStorage(),this.view.triggerNodeChange())}dismiss(e){if(e===this.comparePicker)return void this.removeComparePicker();(e instanceof sN.ip||e instanceof nk.X)&&e.dismiss();let t=[...this.children];if(0===t.length)return;let i=t.indexOf(e);-1!==i&&(t.splice(i,1),this.children=t,this.view.triggerNodeChange())}async refresh(e=!1){let t=this.children;0!==t.length&&await Promise.allSettled((0,tG.x1)(t,t=>{let i=t.refresh?.(e);return(0,E.yL)(i)?i:void 0}))}async compareWithSelected(e,t){let i=this.comparePicker?.selectedRef;if(null!=i){if(null==e)e=i.repoPath;else if(e!==i.repoPath)return void this.selectForCompare(e,t);if(null==t){let r=await (0,sq.NZ)(e,`Compare ${this.getRefName(i.ref)} with`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,picked:"string"==typeof i.ref?i.ref:i.ref.ref,include:sq.m7.BranchesAndTags|sq.m7.HEAD,sort:{branches:{current:!0}}});if(null==r){null!=this.comparePicker&&(await this.view.show(),await this.view.reveal(this.comparePicker,{focus:!0,select:!0}));return}t=r.ref}this.removeComparePicker(),await this.view.compare(e,i.ref,t)}}async selectForCompare(e,t,i){let r;if(null==(e??=(await (0,rO.t6)("Compare"))?.path))return;this.removeComparePicker(!0);let s=i?.prompt??!1;if(null==t){let i=await (0,sq.NZ)(e,"Compare","Choose a reference (branch, tag, etc) to compare",{allowRevisions:{ranges:!0},include:sq.m7.All,sort:{branches:{current:!0},tags:{}}});if(null==i)return void await this.triggerChange();if(t=i.ref,(0,P.p8)(t)){let e=(0,P.jY)(t);null!=e&&(t=e.left||"HEAD",r=e.right||"HEAD")}s=!0}this.comparePicker=new ComparePickerNode(this.view,this,{label:this.getRefName(t),repoPath:e,ref:t});let o=[...this.children];o.unshift(this.comparePicker),this.children=o,(0,A.o)("gitlens:views:canCompare",!0),await this.triggerChange(),s&&await this.compareWithSelected(e,r)}getRefName(e){return"string"==typeof e?(0,P.pV)(e,{strings:{working:"Working Tree"}}):e.label??(0,P.pV)(e.ref)}removeComparePicker(e=!1){if((0,A.o)("gitlens:views:canCompare",!1),null!=this.comparePicker){let t=[...this.children],i=t.indexOf(this.comparePicker);-1!==i&&(t.splice(i,1),this.children=t,e||this.triggerChange()),this.comparePicker=void 0}}};nA([(0,d.Rm)()],SearchAndCompareViewNode.prototype,"clear",1),nA([(0,d.Rm)({args:{0:e=>e.toString()}})],SearchAndCompareViewNode.prototype,"dismiss",1),nA([(0,D.G)(),(0,d.Yz)()],SearchAndCompareViewNode.prototype,"refresh",1);let SearchAndCompareView=class SearchAndCompareView extends sD.DN{configKey="searchAndCompare";constructor(e,t){super(e,"searchAndCompare","Search & Compare","searchAndCompareView",t)}get canSelectMany(){return h.H.get("views.multiselect")}getRoot(){return new SearchAndCompareViewNode(this)}registerCommands(){return[op(this.getQualifiedCommand("clear"),()=>void this.clear(),this),op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>this.refresh(!0),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),op(this.getQualifiedCommand("swapComparison"),this.swapComparison,this),op(this.getQualifiedCommand("selectForCompare"),()=>this.selectForCompare()),op(this.getQualifiedCommand("compareWithSelected"),this.compareWithSelected,this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat"))&&!0}clear(){return this.root?.clear()}dismissNode(e){null!=this.root&&(e instanceof ComparePickerNode||e instanceof sN.ip||e instanceof nk.X)&&this.root.dismiss(e)}async compare(e,t,i,r){return this.visible||r?.reveal===!1||await this.show({preserveFocus:!1}),this.addResultsNode(()=>new sN.ip(this,this.ensureRoot(),e,"string"==typeof t?{ref:t}:t,"string"==typeof i?{ref:i}:i),r?.reveal!==!1&&void 0)}compareWithSelected(e,t){this.ensureRoot().compareWithSelected(e,t)}selectForCompare(e,t,i){this.ensureRoot().selectForCompare(e,t,i)}async search(e,t,{label:i,reveal:r},s,o){this.visible||await this.show({preserveFocus:r?.focus!==!0});let n={label:`Search results ${"string"==typeof i?i:i.label}`,queryLabel:i};if(null!=o)return void await o.edit({pattern:t,labels:n,log:s});await this.addResultsNode(()=>new nk.X(this,this.root,e,t,n,s),r)}getStoredNodes(){let e=this.container.storage.getWorkspace("views:searchAndCompare:pinned");if(null==e)return[];let t=this.ensureRoot();return Object.entries(e).sort(([,e],[,t])=>(t.timestamp??0)-(e.timestamp??0)).map(([,e])=>"comparison"===e.type?((0,sN.sV)(this,e.checkedFiles),new sN.ip(this,t,e.path,{label:e.ref1.label,ref:e.ref1.ref??e.ref1.name??e.ref1.sha},{label:e.ref2.label,ref:e.ref2.ref??e.ref2.name??e.ref2.sha},e.timestamp)):new nk.X(this,t,e.path,(0,J.V8)(e.search),e.labels,void 0,e.timestamp))}clearStorage(){return this.container.storage.deleteWorkspace("views:searchAndCompare:pinned")}async updateStorage(e,t,i=!1){let r=this.container.storage.getWorkspace("views:searchAndCompare:pinned");r=(0,i2.Y8)(r,e,t),await this.container.storage.storeWorkspace("views:searchAndCompare:pinned",r),i||this.triggerNodeChange(this.ensureRoot())}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sk.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof SearchAndCompareViewNode||e instanceof sk.P});return void 0!==i&&await this.reveal(i,t),i}async addResultsNode(e,t){t??={expand:!0,focus:!0,select:!0};let i=this.ensureRoot(),r=e();return i.addOrReplace(r),!1!==t&&await new Promise(e=>queueMicrotask(async()=>{await this.reveal(r,t),e()})),r}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}swapComparison(e){if(e instanceof sN.ip)return e.swap()}};nA([(0,D.G)(()=>"")],SearchAndCompareView.prototype,"revealRepository",1);var nI=Object.defineProperty,nD=Object.getOwnPropertyDescriptor,n_=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nD(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nI(t,i,o),o};let StashesRepositoryNode=class StashesRepositoryNode extends sk.P{async getChildren(){return null==this.child&&(this.child=new StashesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(R.Z_.Stash,R.Z_.Unknown,R.Ti.Any)}};let StashesViewNode=class StashesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading stashes...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No stashes could be found.",[];h.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,sv.Y)(e)).keys()]);let t=1===e.length;this.children=e.map(e=>new StashesRepositoryNode(x.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.git.stash()?.getStash();return t?.stashes.size?(this.view.description=this.view.getViewDescription(t.stashes.size),e.getChildren()):(this.view.message="No stashes could be found.",e.ensureSubscription(),[])}return this.children}getTreeItem(){return new n.TreeItem("Stashes",n.TreeItemCollapsibleState.Expanded)}};let StashesView=class StashesView extends sD.DN{configKey="stashes";constructor(e,t){super(e,"stashes","Stashes","stashesView",t)}get canReveal(){return this.config.reveal||!h.H.get("views.repositories.showStashes")}get canSelectMany(){return h.H.get("views.multiselect")}getRoot(){return new StashesViewNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("stashes"),this.refresh(!0)),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat")||!!h.H.changed(e,"sortRepositoriesBy")||!!h.H.changed(e,"views.collapseWorktreesWhenPossible"))&&!0}findStash(e,t){let{repoPath:i}=e;return this.findNode(t=>t.commit?.ref===e.ref,{maxDepth:2,canTraverse:e=>e instanceof StashesViewNode||e instanceof StashesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sk.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof StashesViewNode||e instanceof sk.P});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findStash(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}};n_([(0,D.G)(()=>"")],StashesView.prototype,"revealRepository",1),n_([(0,D.G)(()=>"")],StashesView.prototype,"revealStash",1);var n$=Object.defineProperty,nT=Object.getOwnPropertyDescriptor,nE=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nT(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n$(t,i,o),o};let TagsRepositoryNode=class TagsRepositoryNode extends sk.P{async getChildren(){return null==this.child&&(this.child=new TagsNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(R.Z_.Tags,R.Z_.Unknown,R.Ti.Any)}};let TagsViewNode=class TagsViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading tags...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No tags could be found.",[];h.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,sv.Y)(e)).keys()]);let t=1===e.length;this.children=e.map(e=>new TagsRepositoryNode(x.nk.fromRepoPath(e.path),this.view,this,e,t))}if(1===this.children.length){let[e]=this.children,t=await e.repo.git.tags().getTags();return 0===t.values.length?(this.view.message="No tags could be found.",e.ensureSubscription(),[]):(this.view.description=this.view.getViewDescription(t.values.length),e.getChildren())}return this.children}getTreeItem(){return new n.TreeItem("Tags",n.TreeItemCollapsibleState.Expanded)}};let TagsView=class TagsView extends sD.DN{configKey="tags";constructor(e,t){super(e,"tags","Tags","tagsView",t)}get canReveal(){return this.config.reveal||!h.H.get("views.repositories.showTags")}get canSelectMany(){return h.H.get("views.multiselect")}getRoot(){return new TagsViewNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>(this.container.git.resetCaches("tags"),this.refresh(!0)),this),op(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),op(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat")||!!h.H.changed(e,"sortTagsBy")||!!h.H.changed(e,"sortRepositoriesBy")||!!h.H.changed(e,"views.collapseWorktreesWhenPossible"))&&!0}findTag(e,t){let{repoPath:i}=e;return this.findNode(t=>t.tag?.ref===e.ref,{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof TagsViewNode||(e instanceof TagsRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sk.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof TagsViewNode||e instanceof sk.P});return void 0!==i&&await this.reveal(i,t),i}async revealTag(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing ${(0,eC.M4)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findTag(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setLayout(e){return h.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}};nE([(0,D.G)(()=>"")],TagsView.prototype,"revealRepository",1),nE([(0,D.G)(()=>"")],TagsView.prototype,"revealTag",1);var nx=Object.defineProperty,nO=Object.getOwnPropertyDescriptor,nF=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nO(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nx(t,i,o),o};let WorktreesRepositoryNode=class WorktreesRepositoryNode extends sk.P{getChildren(){return this.child??=new WorktreesNode(this.uri,this.view,this,this.repo),this.child.getChildren()}changed(e){return!!(this.view.config.showStashes&&e.changed(R.Z_.Stash,R.Ti.Any))||e.changed(R.Z_.Config,R.Z_.Heads,R.Z_.Index,R.Z_.Remotes,R.Z_.RemoteProviders,R.Z_.PausedOperationStatus,R.Z_.Worktrees,R.Z_.Unknown,R.Ti.Any)}};let WorktreesViewNode=class WorktreesViewNode extends RepositoriesSubscribeableNode{async getChildren(){if(this.view.description=this.view.getViewDescription(),this.view.message=void 0,null==this.children){if(!1===(await this.view.container.git.access("worktrees")).allowed)return[];this.view.container.git.isDiscoveringRepositories&&(this.view.message="Loading worktrees...",await this.view.container.git.isDiscoveringRepositories);let e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No worktrees could be found.",[];let t=this.view.container.git.getBestRepositoryOrFirst();if(null!=t&&!await t.git.supports("git:worktrees"))return[];h.H.get("views.collapseWorktreesWhenPossible")&&(e=[...(await (0,sv.Y)(e)).keys()]);let i=1===e.length;this.children=e.map(e=>new WorktreesRepositoryNode(x.nk.fromRepoPath(e.path),this.view,this,e,i))}if(1===this.children.length){let[e]=this.children,t=await e.getChildren();return t.length<=1?(e.ensureSubscription(),[]):(this.view.description=this.view.getViewDescription(t.length),t)}return this.children}getTreeItem(){return new n.TreeItem("Worktrees",n.TreeItemCollapsibleState.Expanded)}};let WorktreesView=class WorktreesView extends sD.DN{configKey="worktrees";constructor(e,t){super(e,"worktrees","Worktrees","worktreesView",t)}getViewDescription(e){let t=super.getViewDescription(e);return t?`${t} \xa0\u2022\xa0 ${l.lD}`:l.lD}get canReveal(){return this.config.reveal||!h.H.get("views.repositories.showWorktrees")}get canSelectMany(){return h.H.get("views.multiselect")}async show(e){if(await (0,i7.ZQ)())return super.show(e)}getRoot(){return new WorktreesViewNode(this)}registerCommands(){return[op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),async()=>(this.container.git.resetCaches("worktrees"),this.refresh(!0)),this),op(this.getQualifiedCommand("setLayoutToList"),()=>this.setLayout("list"),this),op(this.getQualifiedCommand("setLayoutToTree"),()=>this.setLayout("tree"),this),op(this.getQualifiedCommand("setFilesLayoutToAuto"),()=>this.setFilesLayout("auto"),this),op(this.getQualifiedCommand("setFilesLayoutToList"),()=>this.setFilesLayout("list"),this),op(this.getQualifiedCommand("setFilesLayoutToTree"),()=>this.setFilesLayout("tree"),this),op(this.getQualifiedCommand("setShowAvatarsOn"),()=>this.setShowAvatars(!0),this),op(this.getQualifiedCommand("setShowAvatarsOff"),()=>this.setShowAvatars(!1),this),op(this.getQualifiedCommand("setShowBranchComparisonOn"),()=>this.setShowBranchComparison(!0),this),op(this.getQualifiedCommand("setShowBranchComparisonOff"),()=>this.setShowBranchComparison(!1),this),op(this.getQualifiedCommand("setShowBranchPullRequestOn"),()=>this.setShowBranchPullRequest(!0),this),op(this.getQualifiedCommand("setShowBranchPullRequestOff"),()=>this.setShowBranchPullRequest(!1),this),op(this.getQualifiedCommand("setShowStashesOn"),()=>this.setShowStashes(!0),this),op(this.getQualifiedCommand("setShowStashesOff"),()=>this.setShowStashes(!1),this)]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat")||!!h.H.changed(e,"sortRepositoriesBy")||!!h.H.changed(e,"views.collapseWorktreesWhenPossible"))&&!0}findWorktree(e,t){let{repoPath:i,uri:r}=e,s=r.toString();return this.findNode(t=>t instanceof WorktreeNode&&e.uri.toString()===s,{maxDepth:2,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof WorktreesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){let i=await this.findNode(t=>t instanceof sk.P&&t.repoPath===e,{maxDepth:1,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof sk.P});return void 0!==i&&await this.reveal(i,t),i}async revealWorktree(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorktree(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}setLayout(e){return h.H.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return h.H.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return h.H.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return h.H.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await h.H.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await h.H.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}setShowStashes(e){return h.H.updateEffective(`views.${this.configKey}.showStashes`,e)}};nF([(0,D.G)(()=>"")],WorktreesView.prototype,"revealRepository",1),nF([(0,D.G)(()=>"")],WorktreesView.prototype,"revealWorktree",1);let ScmGroupedView=class ScmGroupedView{constructor(e,t){this.container=e,this.views=t,this._view=this.setView(this.views.lastSelectedScmGroupedView)}_view;dispose(){this._view?.dispose()}get view(){return this._view}setView(e,t){return this.views.scmGroupedViews?.has(e)||(e=this.views.scmGroupedViews?.size?(0,X.$1)(this.views.scmGroupedViews):void 0),this._view?.type!==e&&(this._view?.dispose(),this._view=this.getView(e)),t&&this._view.show({preserveFocus:!1}),this.views.lastSelectedScmGroupedView=e,this._view}getView(e){switch(e){case"branches":return new BranchesView(this.container,!0);case"commits":return new CommitsView(this.container,!0);case"contributors":return new ContributorsView(this.container,!0);case"fileHistory":return new FileHistoryView(this.container,!0);case"launchpad":return new LaunchpadView(this.container,!0);case"remotes":return new RemotesView(this.container,!0);case"repositories":return new RepositoriesView(this.container,!0);case"searchAndCompare":return new SearchAndCompareView(this.container,!0);case"stashes":return new StashesView(this.container,!0);case"tags":return new TagsView(this.container,!0);case"worktrees":return new WorktreesView(this.container,!0)}}};let WorkspaceMissingRepositoryNode=class WorkspaceMissingRepositoryNode extends sf.eu{constructor(e,t,i,r){super("workspace-missing-repository",x.Bd,e,t),this.workspace=i,this.wsRepositoryDescriptor=r,this.updateContext({wsRepositoryDescriptor:r}),this._uniqueId=(0,sf.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.name}get name(){return this.wsRepositoryDescriptor.name}get workspaceId(){return this.wsRepositoryDescriptor.workspaceId}getChildren(){return[]}getTreeItem(){let e=new n.TreeItem(this.name,n.TreeItemCollapsibleState.None);return e.id=this.id,e.description="missing",e.tooltip=new n.MarkdownString(`${this.name}

Repository could not be found`),e.contextValue=sf.U0.WorkspaceMissingRepository,e.iconPath=new n.ThemeIcon("question",new n.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor")),e.resourceUri=(0,sg.E)("repository",{state:"missing",workspace:!0}),e}};var nB=Object.defineProperty,nL=Object.getOwnPropertyDescriptor;let WorkspaceNode=class WorkspaceNode extends sb.Y{constructor(e,t,i,r){super("workspace",e,t,i),this.parent=i,this.workspace=r,this.updateContext({workspace:r}),this._uniqueId=(0,sf.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.workspace.name}async getChildren(){if(null==this.children){let e=[];try{let t=await this.workspace.getRepositoryDescriptors();if(!t?.length)return e.push(new sx.RK(this.view,this,(0,tW.gu)("gitlens.views.workspaces.addRepos","Add Repositories...",this),"No repositories")),this.children=e,this.children;let i=await this.workspace.getRepositoriesByName({force:!0});for(let r of t){let t=i.get(r.name)?.repository;if(!t){e.push(new WorkspaceMissingRepositoryNode(this.view,this,this.workspace,r));continue}e.push(new RepositoryNode(x.nk.fromRepoPath(t.path),this.view,this,t,this.getNewContext({wsRepositoryDescriptor:r})))}}catch{return this.children=void 0,[new sx.S2(this.view,this,"Failed to load repositories")]}this.children=e}return this.children}async getTreeItem(){let e=new n.TreeItem(this.workspace.name,n.TreeItemCollapsibleState.Collapsed),t="cloud"===this.workspace.type,i=sf.U0.Workspace;t?i+="+cloud":i+="+local";let r=[];return this.workspace.current&&(i+="+current",r.push("current"),e.resourceUri=(0,sg.E)("workspace",{current:!0})),null!=this.workspace.localPath&&(i+="+hasPath"),(await this.workspace.getRepositoryDescriptors())?.length===0&&(i+="+empty"),e.id=this.id,e.contextValue=i,e.iconPath=new n.ThemeIcon("cloud"===this.workspace.type?"cloud":"folder"),e.tooltip=`${this.workspace.name}
${t?`Cloud Workspace ${this.workspace.shared?"(Shared)":""}`:"Local Workspace"}${t&&null!=this.workspace.provider?`
Provider: ${this.workspace.provider}`:""}`,t&&null!=this.workspace.organizationId&&r.push("shared"),e.description=r.join(", "),e}etag(){return this.view.container.git.etag}subscribe(){return n.Disposable.from((0,tt.HC)(this.view.container.git.onDidChangeRepositories,this.onRepositoriesChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?nL(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nB(t,i,o)})([(0,d.Yz)()],WorkspaceNode.prototype,"subscribe",1);var nU=Object.defineProperty,nq=Object.getOwnPropertyDescriptor;let WorkspacesViewNode=class WorkspacesViewNode extends sf.eu{constructor(e){super("workspaces",x.Bd,e)}_children;async getChildren(){if(null==this._children){let e=[],{cloudWorkspaces:t,cloudWorkspaceInfo:i,localWorkspaces:r,localWorkspaceInfo:s}=await this.view.container.workspaces.getWorkspaces();if(t.length||r.length){for(let i of(e.push(new RepositoriesNode(this.view)),t))e.push(new WorkspaceNode(this.uri,this.view,this,i));for(let t of(null!=i&&e.push(new sx.S2(this.view,this,i)),r))e.push(new WorkspaceNode(this.uri,this.view,this,t));0===t.length&&null==i&&e.push(new sx.S2(this.view,this,"No cloud workspaces found.")),null!=s&&e.push(new sx.S2(this.view,this,s))}this._children=e}return this._children}getTreeItem(){return new n.TreeItem("Workspaces",n.TreeItemCollapsibleState.Expanded)}refresh(){null!=this._children&&((0,sD.lm)(this._children),this._children=void 0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?nq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nU(t,i,o)})([(0,D.G)(),(0,d.Yz)()],WorkspacesViewNode.prototype,"refresh",1);let WorkspacesView=class WorkspacesView extends sD.DN{configKey="workspaces";_disposable;constructor(e){super(e,"workspaces","Workspaces","workspacesView"),this.description=l.WZ,this.disposables.push(e.workspaces.onDidResetWorkspaces(()=>void this.refresh(!0)))}dispose(){this._disposable?.dispose(),super.dispose()}getRoot(){return new WorkspacesViewNode(this)}async show(e){if(await (0,i7.ZQ)())return super.show(e)}async findWorkspaceNode(e,t){return this.findNode(t=>t.workspace?.id===e,{allowPaging:!1,maxDepth:2,canTraverse:e=>e instanceof WorkspacesViewNode,token:t})}async revealWorkspaceNode(e,t){return n.window.withProgress({location:n.ProgressLocation.Notification,title:`Revealing workspace ${e} in the side bar...`,cancellable:!0},async(i,r)=>{let s=await this.findWorkspaceNode(e,r);if(null!=s)return await this.ensureRevealNode(s,t),s})}registerCommands(){return[op(this.getQualifiedCommand("info"),()=>(0,iP.CZ)(l.DS.workspaces),this),op(this.getQualifiedCommand("copy"),()=>(0,tW.RS)("gitlens.views.copy",this.activeSelection,this.selection),this),op(this.getQualifiedCommand("refresh"),()=>{this.container.workspaces.resetWorkspaces()},this),op(this.getQualifiedCommand("addRepos"),async e=>{await this.container.workspaces.addCloudWorkspaceRepos(e.workspace.id),e.getParent()?.triggerChange(!0)}),op(this.getQualifiedCommand("addReposFromLinked"),async e=>{await this.container.workspaces.addMissingCurrentWorkspaceRepos({force:!0}),e.getParent()?.triggerChange(!0)}),op(this.getQualifiedCommand("convert"),async e=>{let t=[];for(let i of e.getChildren())i instanceof RepositoryNode&&t.push(i.repo);0!==t.length&&(await this.container.workspaces.createCloudWorkspace({repos:t}),this.ensureRoot().triggerChange(!0))},this),op(this.getQualifiedCommand("create"),async()=>{await this.container.workspaces.createCloudWorkspace(),this.ensureRoot().triggerChange(!0)},this),op(this.getQualifiedCommand("createLocal"),async e=>{await this.container.workspaces.saveAsCodeWorkspaceFile(e.workspace.id),this.ensureRoot().triggerChange(!0)},this),op(this.getQualifiedCommand("openLocal"),async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"currentWindow"}),this.ensureRoot().triggerChange(!0)},this),op(this.getQualifiedCommand("openLocalNewWindow"),async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"newWindow"})},this),op(this.getQualifiedCommand("changeAutoAddSetting"),async()=>{await this.container.workspaces.chooseCodeWorkspaceAutoAddSetting({current:!0})},this),op(this.getQualifiedCommand("delete"),async e=>{await this.container.workspaces.deleteCloudWorkspace(e.workspace.id),e.getParent()?.triggerChange(!0)},this),op(this.getQualifiedCommand("locateAllRepos"),async e=>{"cloud"===e.workspace.type&&(await n.window.withProgress({location:n.ProgressLocation.Notification,title:`Locating Repositories for '${e.workspace.name}'...`,cancellable:!0},(t,i)=>this.container.workspaces.locateAllCloudWorkspaceRepos(e.workspace.id,i)),e.triggerChange(!0))},this),op(this.getQualifiedCommand("repo.locate"),async e=>{let t=e.wsRepositoryDescriptor;null!=t&&e.workspace?.id!=null&&(await this.container.workspaces.locateWorkspaceRepo(e.workspace.id,t),e.getParent()?.triggerChange(!0))},this),op(this.getQualifiedCommand("repo.openInNewWindow"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,rF.OH)(e.repo.uri,{location:"newWindow"})},this),op(this.getQualifiedCommand("repo.open"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,rF.OH)(e.repo.uri,{location:"currentWindow"})},this),op(this.getQualifiedCommand("repo.addToWindow"),e=>{let t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,rF.OH)(e.repo.uri,{location:"addToWorkspace"})},this),op(this.getQualifiedCommand("repo.remove"),async e=>{let t=e.wsRepositoryDescriptor;t?.id!=null&&e.workspace?.id!=null&&(await this.container.workspaces.removeCloudWorkspaceRepo(e.workspace.id,t),e.getParent()?.getParent()?.triggerChange(!0))})]}filterConfigurationChanged(e){return(!!super.filterConfigurationChanged(e)||!!h.H.changed(e,"defaultDateFormat")||!!h.H.changed(e,"defaultDateLocale")||!!h.H.changed(e,"defaultDateShortFormat")||!!h.H.changed(e,"defaultDateSource")||!!h.H.changed(e,"defaultDateStyle")||!!h.H.changed(e,"defaultGravatarsStyle")||!!h.H.changed(e,"defaultTimeFormat")||!!h.H.changed(e,"sortBranchesBy")||!!h.H.changed(e,"sortContributorsBy")||!!h.H.changed(e,"sortTagsBy")||!!h.H.changed(e,"sortRepositoriesBy"))&&!0}};let nN=Object.freeze({commits:!0,branches:!0,remotes:!0,stashes:!0,tags:!0,worktrees:!0,contributors:!0,fileHistory:!1,repositories:!1,searchAndCompare:!1,launchpad:!1});let Views=class Views{constructor(e,t){this.container=e,this._disposable=n.Disposable.from(h.H.onDidChange(this.onConfigurationChanged,this),new ViewCommands(e),...this.registerViews(),...this.registerWebviewViews(t),...this.registerCommands()),this._welcomeDismissed=e.storage.get("views:scm:grouped:welcome:dismissed",!1),this._lastSelectedScmGroupedView=this.container.storage.getWorkspace("views:scm:grouped:selected",h.H.get("views.scm.grouped.default")),this.updateScmGroupedViewsRegistration();let i=(0,A.SD)("gitlens:install:new",!1),r=i;if(!r){let t=(0,A.SD)("gitlens:install:upgradedFrom");t&&-1===(0,i5.UD)(t,"16.0.2")&&(r=!e.storage.get("views:scm:grouped:welcome:dismissed",!1))}if(r&&!n.env.remoteName&&"desktop"===n.env.appHost){let t=(0,iN.Oo)(e.onReady)(()=>{t?.dispose(),setTimeout(()=>{(0,tW.S4)("gitlens.views.scm.grouped.focus",{preserveFocus:!0}),i&&(0,tW.S4)("gitlens.views.home.focus",{preserveFocus:!0})},0)})}}_disposable;_lastSelectedScmGroupedView;get lastSelectedScmGroupedView(){if(this._scmGroupedViews?.size)return this._lastSelectedScmGroupedView&&this._scmGroupedViews.has(this._lastSelectedScmGroupedView)?this._lastSelectedScmGroupedView:(0,X.$1)(this._scmGroupedViews)}set lastSelectedScmGroupedView(e){this._lastSelectedScmGroupedView=e,(0,A.o)("gitlens:views:scm:grouped:view",e),this.container.storage.storeWorkspace("views:scm:grouped:selected",e).catch()}_scmGroupedView;_scmGroupedViews;get scmGroupedViews(){return this._scmGroupedViews}_welcomeDismissed=!1;dispose(){this._scmGroupedView?.dispose(),this._branchesView?.dispose(),this._commitsView?.dispose(),this._contributorsView?.dispose(),this._fileHistoryView?.dispose(),this._launchpadView?.dispose(),this._remotesView?.dispose(),this._repositoriesView?.dispose(),this._searchAndCompareView?.dispose(),this._stashesView?.dispose(),this._tagsView?.dispose(),this._worktreesView?.dispose(),this._disposable.dispose()}onConfigurationChanged(e){h.H.changed(e,"views.scm.grouped.default")&&(this.lastSelectedScmGroupedView??=h.H.get("views.scm.grouped.default")),h.H.changed(e,"views.scm.grouped.views")&&this.updateScmGroupedViewsRegistration()}registerCommands(){return[(0,tW.Lb)("gitlens.views.branches.attach",()=>this.toggleScmViewGrouping("branches",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.branches.detach",()=>this.toggleScmViewGrouping("branches",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.branches.attach",()=>this.toggleScmViewGrouping("branches",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.branches.visibility.hide",()=>this.toggleScmViewVisibility("branches",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.branches.visibility.show",()=>this.toggleScmViewVisibility("branches",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.branches.setAsDefault",()=>this.setAsScmGroupedDefaultView("branches")),(0,tW.Lb)("gitlens.views.commits.attach",()=>this.toggleScmViewGrouping("commits",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.commits.detach",()=>this.toggleScmViewGrouping("commits",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.commits.attach",()=>this.toggleScmViewGrouping("commits",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.commits.visibility.hide",()=>this.toggleScmViewVisibility("commits",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.commits.visibility.show",()=>this.toggleScmViewVisibility("commits",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.commits.setAsDefault",()=>this.setAsScmGroupedDefaultView("commits")),(0,tW.Lb)("gitlens.views.contributors.attach",()=>this.toggleScmViewGrouping("contributors",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.contributors.detach",()=>this.toggleScmViewGrouping("contributors",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.contributors.attach",()=>this.toggleScmViewGrouping("contributors",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.contributors.visibility.hide",()=>this.toggleScmViewVisibility("contributors",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.contributors.visibility.show",()=>this.toggleScmViewVisibility("contributors",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.contributors.setAsDefault",()=>this.setAsScmGroupedDefaultView("contributors")),(0,tW.Lb)("gitlens.views.fileHistory.attach",()=>this.toggleScmViewGrouping("fileHistory",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.fileHistory.detach",()=>this.toggleScmViewGrouping("fileHistory",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.fileHistory.attach",()=>this.toggleScmViewGrouping("fileHistory",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.fileHistory.visibility.hide",()=>this.toggleScmViewVisibility("fileHistory",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.fileHistory.visibility.show",()=>this.toggleScmViewVisibility("fileHistory",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.fileHistory.setAsDefault",()=>this.setAsScmGroupedDefaultView("fileHistory")),(0,tW.Lb)("gitlens.views.launchpad.attach",()=>this.toggleScmViewGrouping("launchpad",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.launchpad.detach",()=>this.toggleScmViewGrouping("launchpad",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.launchpad.attach",()=>this.toggleScmViewGrouping("launchpad",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.launchpad.visibility.hide",()=>this.toggleScmViewVisibility("launchpad",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.launchpad.visibility.show",()=>this.toggleScmViewVisibility("launchpad",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.launchpad.setAsDefault",()=>this.setAsScmGroupedDefaultView("launchpad")),(0,tW.Lb)("gitlens.views.remotes.attach",()=>this.toggleScmViewGrouping("remotes",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.remotes.detach",()=>this.toggleScmViewGrouping("remotes",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.remotes.attach",()=>this.toggleScmViewGrouping("remotes",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.remotes.visibility.hide",()=>this.toggleScmViewVisibility("remotes",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.remotes.visibility.show",()=>this.toggleScmViewVisibility("remotes",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.remotes.setAsDefault",()=>this.setAsScmGroupedDefaultView("remotes")),(0,tW.Lb)("gitlens.views.repositories.attach",()=>this.toggleScmViewGrouping("repositories",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.repositories.detach",()=>this.toggleScmViewGrouping("repositories",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.repositories.attach",()=>this.toggleScmViewGrouping("repositories",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.repositories.visibility.hide",()=>this.toggleScmViewVisibility("repositories",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.repositories.visibility.show",()=>this.toggleScmViewVisibility("repositories",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.repositories.setAsDefault",()=>this.setAsScmGroupedDefaultView("repositories")),(0,tW.Lb)("gitlens.views.searchAndCompare.attach",()=>this.toggleScmViewGrouping("searchAndCompare",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.searchAndCompare.detach",()=>this.toggleScmViewGrouping("searchAndCompare",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.searchAndCompare.attach",()=>this.toggleScmViewGrouping("searchAndCompare",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.searchAndCompare.visibility.hide",()=>this.toggleScmViewVisibility("searchAndCompare",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.searchAndCompare.visibility.show",()=>this.toggleScmViewVisibility("searchAndCompare",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.searchAndCompare.setAsDefault",()=>this.setAsScmGroupedDefaultView("searchAndCompare")),(0,tW.Lb)("gitlens.views.stashes.attach",()=>this.toggleScmViewGrouping("stashes",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.stashes.detach",()=>this.toggleScmViewGrouping("stashes",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.stashes.attach",()=>this.toggleScmViewGrouping("stashes",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.stashes.visibility.hide",()=>this.toggleScmViewVisibility("stashes",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.stashes.visibility.show",()=>this.toggleScmViewVisibility("stashes",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.stashes.setAsDefault",()=>this.setAsScmGroupedDefaultView("stashes")),(0,tW.Lb)("gitlens.views.tags.attach",()=>this.toggleScmViewGrouping("tags",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.tags.detach",()=>this.toggleScmViewGrouping("tags",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.tags.attach",()=>this.toggleScmViewGrouping("tags",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.tags.visibility.hide",()=>this.toggleScmViewVisibility("tags",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.tags.visibility.show",()=>this.toggleScmViewVisibility("tags",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.tags.setAsDefault",()=>this.setAsScmGroupedDefaultView("tags")),(0,tW.Lb)("gitlens.views.worktrees.attach",()=>this.toggleScmViewGrouping("worktrees",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.worktrees.detach",()=>this.toggleScmViewGrouping("worktrees",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.worktrees.attach",()=>this.toggleScmViewGrouping("worktrees",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.worktrees.visibility.hide",()=>this.toggleScmViewVisibility("worktrees",!1)),(0,tW.Lb)("gitlens.views.scm.grouped.worktrees.visibility.show",()=>this.toggleScmViewVisibility("worktrees",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.worktrees.setAsDefault",()=>this.setAsScmGroupedDefaultView("worktrees")),(0,tW.Lb)("gitlens.views.scm.grouped.branches",()=>this.setScmGroupedView("branches",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.commits",()=>this.setScmGroupedView("commits",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.contributors",()=>this.setScmGroupedView("contributors",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.fileHistory",()=>this.setScmGroupedView("fileHistory",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.launchpad",()=>this.setScmGroupedView("launchpad",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.remotes",()=>this.setScmGroupedView("remotes",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.repositories",()=>this.setScmGroupedView("repositories",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.searchAndCompare",()=>this.setScmGroupedView("searchAndCompare",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.stashes",()=>this.setScmGroupedView("stashes",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.tags",()=>this.setScmGroupedView("tags",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.worktrees",()=>this.setScmGroupedView("worktrees",!0)),(0,tW.Lb)("gitlens.views.scm.grouped.refresh",()=>{this._scmGroupedView?.view!=null&&(0,tW.RS)(`gitlens.views.${this._scmGroupedView.view.type}.refresh`)}),(0,tW.Lb)("gitlens.views.scm.grouped.attachAll",()=>nW(nM(nN))),(0,tW.Lb)("gitlens.views.scm.grouped.detachAll",()=>nW(new Set)),(0,tW.Lb)("gitlens.views.scm.grouped.welcome.dismiss",()=>{this._welcomeDismissed=!0,this.container.storage.store("views:scm:grouped:welcome:dismissed",!0).catch(),this.updateScmGroupedViewsRegistration()}),(0,tW.Lb)("gitlens.views.scm.grouped.welcome.restore",async()=>{this._welcomeDismissed=!0,this.container.storage.store("views:scm:grouped:welcome:dismissed",!0).catch(),await nW(new Set)})]}registerViews(){return[this._draftsView=new DraftsView(this.container),this._lineHistoryView=new LineHistoryView(this.container),this._pullRequestView=new PullRequestView(this.container),this._workspacesView=new WorkspacesView(this.container)]}registerWebviewViews(e){return[this._commitDetailsView=e.registerWebviewView({id:"gitlens.views.commitDetails",fileName:"commitDetails.html",title:"Inspect",contextKeyPrefix:"gitlens:webviewView:commitDetails",trackingFeature:"commitDetailsView",type:"commitDetails",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{CommitDetailsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9667));return new r(e,t,{attachedTo:"default"})}),this._graphView=e.registerWebviewView({id:"gitlens.views.graph",fileName:"graph.html",title:"Commit Graph",contextKeyPrefix:"gitlens:webviewView:graph",trackingFeature:"graphView",type:"graph",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!0}},async(e,t)=>{let{GraphWebviewProvider:r}=await Promise.resolve().then(i.bind(i,6325));return new r(e,t)}),this._graphDetailsView=e.registerWebviewView({id:"gitlens.views.graphDetails",fileName:"commitDetails.html",title:"Commit Graph Inspect",contextKeyPrefix:"gitlens:webviewView:graphDetails",trackingFeature:"graphDetailsView",type:"graphDetails",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{CommitDetailsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9667));return new r(e,t,{attachedTo:"graph"})}),this._homeView=e.registerWebviewView({id:"gitlens.views.home",fileName:"home.html",title:"Home",contextKeyPrefix:"gitlens:webviewView:home",trackingFeature:"homeView",type:"home",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!0}},async(e,t)=>{let{HomeWebviewProvider:r}=await Promise.resolve().then(i.bind(i,7114));return new r(e,t)}),this._patchDetailsView=e.registerWebviewView({id:"gitlens.views.patchDetails",fileName:"patchDetails.html",title:"Patch",contextKeyPrefix:"gitlens:webviewView:patchDetails",trackingFeature:"patchDetailsView",type:"patchDetails",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{PatchDetailsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,7383));return new r(e,t)},async(...e)=>{if("editor"===h.H.get("cloudPatches.experimental.layout")){await (0,A.o)("gitlens:views:patchDetails:mode",void 0),(0,tW.RS)("gitlens.showPatchDetailsPage",void 0,...e);return}let t=e[0];null!=t&&await (0,A.o)("gitlens:views:patchDetails:mode","state"in t?t.state.mode:t.mode)}),this._timelineView=e.registerWebviewView({id:"gitlens.views.timeline",fileName:"timeline.html",title:"Visual File History",contextKeyPrefix:"gitlens:webviewView:timeline",trackingFeature:"timelineView",type:"timeline",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!1}},async(e,t)=>{let{TimelineWebviewProvider:r}=await Promise.resolve().then(i.bind(i,5581));return new r(e,t)})]}_scmGroupedViewProxyCache=new Map;getScmGroupedView(e){let t,i=this._scmGroupedViewProxyCache.get(e);if(null!=i)return i;let r=new Map,s=()=>{if((null==t||t.disposed)&&(r.clear(),null==this._scmGroupedView&&this.updateScmGroupedViewsRegistration(!0),null==(t=this._scmGroupedView.setView(e))))throw Error(`Unable to initialize view: ${e}`);return t};return i=new Proxy(Object.create(null),{get:function(e,i){if("visible"===i)return null!=t&&!t.disposed&&t.visible;let o=s(),n=Reflect.get(o,i,o);if("function"!=typeof n)return n;let a=r.get(i);return null==a&&(a=n.bind(o),r.set(i,a)),a},set:function(e,t,i,r){return Reflect.set(s(),t,i,r)},has:function(e,t){return Reflect.has(s(),t)},getOwnPropertyDescriptor:function(e,t){return Reflect.getOwnPropertyDescriptor(s(),t)},defineProperty:function(e,t,i){return Reflect.defineProperty(s(),t,i)},deleteProperty:function(e,t){return Reflect.deleteProperty(s(),t)},ownKeys:function(e){return Reflect.ownKeys(s())}}),this._scmGroupedViewProxyCache.set(e,i),i}async setAsScmGroupedDefaultView(e){this.lastSelectedScmGroupedView=e,await h.H.updateEffective("views.scm.grouped.default",e)}setScmGroupedView(e,t){if(null!=this._scmGroupedView)return this._scmGroupedView.setView(e,t);this.scmGroupedViews?.has(e)||(e=this.scmGroupedViews?.size?(0,X.$1)(this.scmGroupedViews):void 0),this.lastSelectedScmGroupedView=e,t&&(0,tW.S4)("gitlens.views.scm.grouped.focus")}async showWelcomeNotification(){this._welcomeDismissed=!0;let e=(0,A.SD)("gitlens:install:new",!1),t={title:"OK",isCloseAffordance:!0},i={title:"Restore Previous Locations"};await n.window.showInformationMessage(e?"GitLens groups many related views—Commits, Branches, Stashes, etc—together for easier view management. Use the tabs in the view header to navigate, detach, or regroup views.":"In GitLens 16, we've grouped many related views—Commits, Branches, Stashes, etc—together for easier view management. Use the tabs in the view header to navigate, detach, or regroup views.",...e?[t]:[t,i])===i?(0,tW.RS)("gitlens.views.scm.grouped.welcome.restore"):(0,tW.RS)("gitlens.views.scm.grouped.welcome.dismiss")}async toggleScmViewGrouping(e,t){null!=this._scmGroupedViews&&(t?this._scmGroupedViews.has(e)||(this._scmGroupedViews.add(e),this.lastSelectedScmGroupedView=e):this._scmGroupedViews.has(e)&&(this._scmGroupedViews.delete(e),e===this.lastSelectedScmGroupedView&&(this.lastSelectedScmGroupedView=(0,X.$1)(this._scmGroupedViews))),await nW(this._scmGroupedViews),setTimeout(()=>(0,tW.S4)(`gitlens.views.${t?"scm.grouped":e}.focus`),1))}toggleScmViewVisibility(e,t){let i=h.H.get("views.scm.grouped.hiddenViews");i[e]=!t,h.H.updateEffective("views.scm.grouped.hiddenViews",i),t&&this.container.views.showView(e)}updateScmGroupedViewsRegistration(e){if((0,A.o)("gitlens:views:scm:grouped:welcome",!this._welcomeDismissed),this._scmGroupedViews=nM({...nN,...h.H.get("views.scm.grouped.views",void 0,nN)}),this._scmGroupedView?.dispose(),this._scmGroupedView=void 0,this._scmGroupedViews.has("branches")?(this._branchesView?.dispose(),this._branchesView=void 0):this._branchesView??=new BranchesView(this.container),this._scmGroupedViews.has("commits")?(this._commitsView?.dispose(),this._commitsView=void 0):this._commitsView??=new CommitsView(this.container),this._scmGroupedViews.has("contributors")?(this._contributorsView?.dispose(),this._contributorsView=void 0):this._contributorsView??=new ContributorsView(this.container),this._scmGroupedViews.has("fileHistory")?(this._fileHistoryView?.dispose(),this._fileHistoryView=void 0):this._fileHistoryView??=new FileHistoryView(this.container),this._scmGroupedViews.has("launchpad")?(this._launchpadView?.dispose(),this._launchpadView=void 0):this._launchpadView??=new LaunchpadView(this.container),this._scmGroupedViews.has("remotes")?(this._remotesView?.dispose(),this._remotesView=void 0):this._remotesView??=new RemotesView(this.container),this._scmGroupedViews.has("repositories")?(this._repositoriesView?.dispose(),this._repositoriesView=void 0):this._repositoriesView??=new RepositoriesView(this.container),this._scmGroupedViews.has("searchAndCompare")?(this._searchAndCompareView?.dispose(),this._searchAndCompareView=void 0):this._searchAndCompareView??=new SearchAndCompareView(this.container),this._scmGroupedViews.has("stashes")?(this._stashesView?.dispose(),this._stashesView=void 0):this._stashesView??=new StashesView(this.container),this._scmGroupedViews.has("tags")?(this._tagsView?.dispose(),this._tagsView=void 0):this._tagsView??=new TagsView(this.container),this._scmGroupedViews.has("worktrees")?(this._worktreesView?.dispose(),this._worktreesView=void 0):this._worktreesView??=new WorktreesView(this.container),!this._welcomeDismissed){if(!e)return;this.showWelcomeNotification()}this._scmGroupedViews.size&&(this._scmGroupedView??=new ScmGroupedView(this.container,this))}_branchesView;get branches(){return this._branchesView??this.getScmGroupedView("branches")}_commitsView;get commits(){return this._commitsView??this.getScmGroupedView("commits")}_commitDetailsView;get commitDetails(){return this._commitDetailsView}_contributorsView;get contributors(){return this._contributorsView??this.getScmGroupedView("contributors")}_draftsView;get drafts(){return this._draftsView}_fileHistoryView;get fileHistory(){return this._fileHistoryView??this.getScmGroupedView("fileHistory")}_graphView;get graph(){return this._graphView}_graphDetailsView;get graphDetails(){return this._graphDetailsView}_homeView;get home(){return this._homeView}_launchpadView;_lineHistoryView;_patchDetailsView;get patchDetails(){return this._patchDetailsView}_pullRequestView;get pullRequest(){return this._pullRequestView}_remotesView;get remotes(){return this._remotesView??this.getScmGroupedView("remotes")}_repositoriesView;get repositories(){return this._repositoriesView??this.getScmGroupedView("repositories")}_searchAndCompareView;get searchAndCompare(){return this._searchAndCompareView??this.getScmGroupedView("searchAndCompare")}_stashesView;get stashes(){return this._stashesView??this.getScmGroupedView("stashes")}_tagsView;get tags(){return this._tagsView??this.getScmGroupedView("tags")}_timelineView;get timeline(){return this._timelineView}_worktreesView;get worktrees(){return this._worktreesView??this.getScmGroupedView("worktrees")}_workspacesView;get workspaces(){return this._workspacesView}async revealBranch(e,t){let i=e.remote?this.remotes:this.branches,r=i.canReveal?i:this.repositories,s=await r.revealBranch(e,t);return await r.show({preserveFocus:!t?.focus}),s}async revealCommit(e,t){let{commits:i}=this,r=i.canReveal?i:this.repositories,s=await r.revealCommit(e,t);return await r.show({preserveFocus:!t?.focus}),s}async revealContributor(e,t){let{contributors:i}=this,r=i.canReveal?i:this.repositories,s=await r.revealContributor(e,t);return await r.show({preserveFocus:!t?.focus}),s}async revealRemote(e,t){let{remotes:i}=this,r=i.canReveal?i:this.repositories,s=null!=e?await r.revealRemote(e,t):void 0;return await r.show({preserveFocus:!t?.focus}),s}async revealRepository(e,t,i){let r=null==t||!1===t.canReveal?this.repositories:t,s=await r.revealRepository(e,i);return await r.show({preserveFocus:!i?.focus}),s}async revealStash(e,t){let{stashes:i}=this,r=i.canReveal?i:this.repositories,s=await r.revealStash(e,t);return await r.show({preserveFocus:!t?.focus}),s}async revealTag(e,t){let{tags:i}=this,r=i.canReveal?i:this.repositories,s=await r.revealTag(e,t);return await r.show({preserveFocus:!t?.focus}),s}async revealWorktree(e,t){let{worktrees:i}=this,r=i.canReveal?i:this.repositories,s=await r.revealWorktree(e,t);return await r.show({preserveFocus:!t?.focus}),s}async showView(e){let t=this;function i(e,i){return null!=i?i.show():(t.setScmGroupedView(e,!0),Promise.resolve())}switch(e){case"branches":return i("branches",this._branchesView);case"commits":return i("commits",this._commitsView);case"contributors":return i("contributors",this._contributorsView);case"drafts":return this.drafts.show();case"fileHistory":return i("contributors",this._fileHistoryView);case"launchpad":return i("launchpad",this._launchpadView);case"lineHistory":return this._lineHistoryView.show();case"pullRequest":return this.pullRequest.show();case"remotes":return i("remotes",this._remotesView);case"repositories":return i("repositories",this._repositoriesView);case"searchAndCompare":return i("searchAndCompare",this._searchAndCompareView);case"stashes":return i("stashes",this._stashesView);case"tags":return i("tags",this._tagsView);case"worktrees":return i("worktrees",this._worktreesView);case"workspaces":return this.workspaces.show();case"scm.grouped":return void(0,tW.S4)("gitlens.views.scm.grouped.focus")}}};function nM(e){let t=new Set;for(let[i,r]of Object.entries(e))r&&t.add(i),(0,A.o)(`gitlens:views:scm:grouped:views:${i}`,r);return t}async function nW(e){await h.H.updateEffective("views.scm.grouped.views",{commits:e.has("commits"),branches:e.has("branches"),remotes:e.has("remotes"),stashes:e.has("stashes"),tags:e.has("tags"),worktrees:e.has("worktrees"),contributors:e.has("contributors"),fileHistory:e.has("fileHistory"),repositories:e.has("repositories"),searchAndCompare:e.has("searchAndCompare"),launchpad:e.has("launchpad")})}var nG=i(3553);let RequestType=class RequestType{constructor(e){this.name=e}};let nH=new RequestType("git"),nV=new RequestType("git/logStreamTo"),nj=new RequestType("repositories/inFolder");var nz=Object.defineProperty,nQ=Object.getOwnPropertyDescriptor,nY=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?nQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&nz(t,i,o),o};let nK=()=>!0,nZ=new Map([["blame",nK],["branch",e=>"--contains"===e[1]],["cat-file",nK],["check-mailmap",nK],["check-ref-format",nK],["config",e=>"--get"===e[1]||"--get-regex"===e[1]],["diff",nK],["difftool",nK],["for-each-ref",nK],["log",nK],["ls-files",nK],["ls-tree",nK],["merge-base",nK],["remote",e=>"-v"===e[1]||"get-url"===e[1]],["rev-list",nK],["rev-parse",nK],["show",nK],["show-ref",nK],["stash",e=>"list"===e[1]],["status",nK],["symbolic-ref",nK],["tag",e=>"-l"===e[1]],["worktree",e=>"list"===e[1]]]),nJ=/^[/|\\]/,nX=class _VslsHostService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this._disposable=n.Disposable.from(n.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this)),this.onRequest(nH,this.onGitCommandRequest.bind(this)),this.onRequest(nV,this.onGitLogStreamToCommandRequest.bind(this)),this.onRequest(nj,this.onGetRepositoriesForUriRequest.bind(this)),this.onWorkspaceFoldersChanged()}static ServiceId="proxy";static async share(e,t){let i=await e.shareService(this.ServiceId);if(null==i)throw Error("Failed to share host service");return new _VslsHostService(e,i,t)}_disposable;_localPathsRegex;_localToSharedPaths=new Map;_sharedPathsRegex;_sharedToLocalPaths=new Map;dispose(){this._disposable.dispose(),this._api.unshareService(_VslsHostService.ServiceId)}onRequest(e,t){this._service.onRequest(e.name,function(e,i){let r;for(let t of e)if("object"==typeof t&&"__type"in t){r=t;break}return t(r??e[0],i)})}onAvailabilityChanged(e){}onWorkspaceFoldersChanged(e){let t,i;if(null==n.workspace.workspaceFolders||0===n.workspace.workspaceFolders.length)return;let r=(0,$.dQ)();for(let e of(this._localToSharedPaths.clear(),this._sharedToLocalPaths.clear(),n.workspace.workspaceFolders))t=(0,T.Fd)(e.uri.fsPath),i=(0,T.Fd)(this.convertLocalUriToShared(e.uri).toString()),_.Vy.debug(r,`shared='${i}' \u2194 local='${t}'`),this._localToSharedPaths.set(t,i),this._sharedToLocalPaths.set(i,t);let s=(0,X.fj)(this._sharedToLocalPaths.values(),"|");s=s.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._localPathsRegex=RegExp(`(${s})`,"gi");let o=(0,X.fj)(this._localToSharedPaths.values(),"|");o=o.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._sharedPathsRegex=RegExp(`^(${o})`,"i")}async onGitCommandRequest(e,t){let i=nZ.get(e.args[0]);if(!i?.(e.args))throw Error(`Git ${e.args[0]} command is not allowed`);let{options:r,args:s}=e,[o,n]=this.convertGitCommandCwd(r.cwd);r.cwd=o;let a=await function(e,...t){return Promise.resolve("")}(0,...this.convertGitCommandArgs(s,n));return"string"==typeof a?(null!=this._localPathsRegex&&a.length>0&&(a=a.replace(this._localPathsRegex,(e,t)=>{let i=this._localToSharedPaths.get((0,T.Fd)(t));return null!=i?i:t})),{data:a}):{data:a.toString("binary"),isBuffer:!0}}async onGitLogStreamToCommandRequest(e,t){let{options:i,args:r}=e,[s,o]=this.convertGitCommandCwd(e.repoPath),[n,a]=await function(e,t,i,r,...s){return Promise.resolve([[""],0])}(0,e.sha,e.limit,0,...this.convertGitCommandArgs(r,o));return null!=this._localPathsRegex&&n.length>0&&(n=n.map(e=>e.replace(this._localPathsRegex,(e,t)=>{let i=this._localToSharedPaths.get((0,T.Fd)(t));return null!=i?i:t}))),{data:n,count:a}}async onGetRepositoriesForUriRequest(e,t){let i=[],r=this.convertSharedUriToLocal(n.Uri.parse(e.folderUri,!0)),s=this.container.git.getRepository(r);if(null!=s){let e=this.convertLocalUriToShared(s.uri);i.push({folderUri:e.toString(),root:s.root,closed:s.closed})}return{repositories:i}}convertLocalUriToShared(e){let t=(0,$.dQ)(),i=this._api.convertLocalUriToShared(e);_.Vy.debug(t,`LiveShare.convertLocalUriToShared(${e.toString(!0)}) returned ${i.toString(!0)}`);let r=e.path,s=i.path;if(i.authority.length>0&&(s=`/${i.authority}${s}`),RegExp(`${r}$`,"i").test(s))if(s.length===r.length){let t=n.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}`})}else i=i.with({authority:"",path:s.substring(0,s.length-r.length)});else if(!s.startsWith("/~")){let t=n.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}${s}`})}return i}convertGitCommandCwd(e){let t=!1;if(null!=e&&e.length>0&&null!=this._sharedToLocalPaths){if(this._sharedPathsRegex?.test(e))e=(0,T.Fd)(e).replace(this._sharedPathsRegex,(e,i)=>{t||(t="/~0"===i);let r=this._sharedToLocalPaths.get(i);return null!=r?r:i});else if(nJ.test(e)){let i=this._sharedToLocalPaths.get("vsls:/~0");null!=i&&(t=!0,e=(0,T.Fd)(this.container.git.getAbsoluteUri(e,i).fsPath))}}return[e,t]}convertGitCommandArgs(e,t){let i=!1,r=-1;for(let s of e){if(r++,"--"===s){i=!0;continue}i&&"string"==typeof s&&(t&&nJ.test(s[0])&&e.splice(r,1,s.substring(1)),this._sharedPathsRegex?.test(s)&&e.splice(r,1,(0,T.Fd)(s).replace(this._sharedPathsRegex,(e,t)=>{let i=this._sharedToLocalPaths.get(t);return null!=i?i:t})))}return e}convertSharedUriToLocal(e){(0,nG.VN)(e.path)&&(e=e.with({path:`${e.path}/`}));let t=this._api.convertSharedUriToLocal(e),i=t.path,r=e.path;return i.endsWith(r)&&(i=i.substring(0,i.length-r.length)),47===i.charCodeAt(i.length-1)&&(i=i.slice(0,-1)),t.with({path:i})}};nY([(0,d.Rm)()],nX.prototype,"onAvailabilityChanged",1),nY([(0,d.Yz)()],nX.prototype,"onWorkspaceFoldersChanged",1),nY([(0,d.Rm)()],nX.prototype,"onGitCommandRequest",1),nY([(0,d.Rm)()],nX.prototype,"onGitLogStreamToCommandRequest",1),nY([(0,d.Rm)()],nX.prototype,"onGetRepositoriesForUriRequest",1),nY([(0,d.Yz)({exit:!0})],nX.prototype,"convertLocalUriToShared",1),nY([(0,d.Rm)()],nX,"share",1);var n0=Object.defineProperty,n1=Object.getOwnPropertyDescriptor,n2=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?n1(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n0(t,i,o),o};let n4=class _VslsGuestService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this.onAvailabilityChanged(t.isServiceAvailable)}static async connect(e,t){let i=(0,$.dQ)();try{let i=await e.getSharedService(nX.ServiceId);if(null==i)throw Error("Failed to connect to host service");return new _VslsGuestService(e,i,t)}catch(e){_.Vy.error(e,i);return}}dispose(){}onAvailabilityChanged(e){if(e)return void this.container.git.setEnabledContext(!0);this.container.git.setEnabledContext(!1),n.window.showWarningMessage("GitLens features will be unavailable. Unable to connect to the host GitLens service. The host may have disabled GitLens guest access or may not have GitLens installed.")}async git(e,...t){let i=await this.sendRequest(nH,{__type:"gitlens",options:e,args:t});return i.isBuffer?Buffer.from(i.data,"binary"):i.data}async gitLogStreamTo(e,t,i,r,...s){let o=await this.sendRequest(nV,{__type:"gitlens",repoPath:e,sha:t,limit:i,options:r,args:s});return[o.data,o.count]}async getRepositoriesForUri(e){return(await this.sendRequest(nj,{__type:"gitlens",folderUri:e.toString()})).repositories}sendRequest(e,t,i){return this._service.request(e.name,[t],i)}};n2([(0,d.Rm)()],n4.prototype,"onAvailabilityChanged",1),n2([(0,d.Rm)()],n4.prototype,"git",1),n2([(0,d.Rm)()],n4.prototype,"gitLogStreamTo",1),n2([(0,d.Rm)()],n4.prototype,"getRepositoriesForUri",1),n2([(0,d.Yz)()],n4.prototype,"sendRequest",1),n2([(0,d.Rm)()],n4,"connect",1);var n5=Object.defineProperty,n7=Object.getOwnPropertyDescriptor,n8=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?n7(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n5(t,i,o),o};function n6(e){switch(e){case"available":return{status:"online",statusText:"Available"};case"away":return{status:"away",statusText:"Away"};case"busy":return{status:"busy",statusText:"Busy"};case"doNotDisturb":return{status:"dnd",statusText:"DND"};default:return{status:"offline",statusText:"Offline"}}}let VslsController=class VslsController{constructor(e){this.container=e,this._ready=(0,E.v6)(),this._disposable=n.Disposable.from((0,tt.Oo)(e.onReady)(this.onReady,this),h.H.onDidChange(this.onConfigurationChanged,this))}_api;_disposable;_guest;_host;_ready;dispose(){this._ready.fulfill(),this._disposable.dispose(),this._host?.dispose(),this._guest?.dispose()}onReady(){this.initialize()}async initialize(){if(!this.enabled)return void(0,A.o)("gitlens:vsls",!1);n.workspace.workspaceFolders?.some(e=>e.uri.scheme===l.xB.Vsls)&&this.setReadonly(!0);try{this._api=this.getLiveShareApi();let e=await this._api;if(null==e){(0,A.o)("gitlens:vsls",!1),this._ready.fulfill();return}(0,A.o)("gitlens:vsls",!0),this._disposable=n.Disposable.from(this._disposable,e.onDidChangeSession(t=>this.onLiveShareSessionChanged(e,t),this)),this.onLiveShareSessionChanged(e,{session:e.session})}catch(e){_.Vy.error(e)}}onConfigurationChanged(e){h.H.changed(e,"liveshare.enabled")&&this.initialize()}async onLiveShareSessionChanged(e,t){switch(this._host?.dispose(),this._host=void 0,this._guest?.dispose(),this._guest=void 0,t.session.role){case 1:this.setReadonly(!1),(0,A.o)("gitlens:vsls","host"),h.H.get("liveshare.allowGuestAccess")&&(this._host=await nX.share(e,this.container)),this._ready.fulfill();break;case 2:this.setReadonly(!0),(0,A.o)("gitlens:vsls","guest"),this._guest=await n4.connect(e,this.container),this._ready.fulfill();break;default:this.setReadonly(!1),(0,A.o)("gitlens:vsls",!0),this._ready.pending||(this._ready=(0,E.v6)())}}async getLiveShareApi(){try{let e=this.getLiveShareExtension();if(null!=e){let t=e.isActive?e.exports:await e.activate();return await t.getApi("1.0.4753")??void 0}}catch(e){_.Vy.error(e)}}getLiveShareExtension(){return n.extensions.getExtension("ms-vsliveshare.vsliveshare")}get active(){return h.H.get("liveshare.enabled")&&this.getLiveShareExtension()?.isActive}get enabled(){return h.H.get("liveshare.enabled")}_readonly=!1;get readonly(){return this._readonly}setReadonly(e){this._readonly=e,(0,A.o)("gitlens:readonly",!!e||void 0)}async guest(){return null!=this._guest||await this._ready.promise,this._guest}async getContact(e){if(null==e)return;let t=await this._api;if(null!=t)return(await t.getContacts([e])).contacts[e]}async getContacts(e){let t=await this._api;if(null!=t)return Object.values((await t.getContacts(e)).contacts)}async getContactPresence(e){let t=await this.getContact(e);if(null!=t)return n6(t.status)}async getContactsPresence(e){let t=await this.getContacts(e);if(null!=t)return new Map(Object.values(t).map(e=>[e.email,n6(e.status)]))}async invite(e){if(null==e)return;let t=await this.getContact(e);if(null!=t)return t.invite()}async startSession(){let e=await this._api;if(null!=e)return e.share()}};n8([(0,d.Yz)()],VslsController.prototype,"getContact",1),n8([(0,d.Yz)({args:{0:e=>e.length}})],VslsController.prototype,"getContacts",1),n8([(0,d.Yz)()],VslsController.prototype,"getContactPresence",1),n8([(0,d.Yz)({args:{0:e=>e.length}})],VslsController.prototype,"getContactsPresence",1);var n3=i(6882),n9=i(6045),ae=i(486),at=i(2692);let ai="rebase",ar=new ae.Q2(ai,"abort"),as=new ae.Q2(ai,"disable"),ao=new ae.Q2(ai,"search"),an=new ae.Q2(ai,"start"),aa=new ae.Q2(ai,"switch"),al=new ae.Q2(ai,"reorder"),au=new ae.Q2(ai,"change/entry"),ac=new ae.Q2(ai,"move/entry"),ah=new ae.Q2(ai,"selection/update"),ad=new ae.C1(ai,"didChange");var ap=Object.defineProperty,ag=Object.getOwnPropertyDescriptor,am=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ag(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ap(t,i,o),o};let af=0x40000000-1,aw=new TextDecoder("utf8"),av=(0,n9.N)(),ay=(0,n9.N)(),ab=/^\s?#\s?Rebase\s([0-9a-f]+)(?:..([0-9a-f]+))?\sonto\s([0-9a-f]+)\s.*$/im,aC=/^\s?(p|pick|r|reword|e|edit|s|squash|f|fixup|d|drop)\s([0-9a-f]+?)\s(.*)$/gm,aR=new Map([["p","pick"],["pick","pick"],["r","reword"],["reword","reword"],["e","edit"],["edit","edit"],["s","squash"],["squash","squash"],["f","fixup"],["fixup","fixup"],["d","drop"],["drop","drop"]]);let RebaseEditorProvider=class RebaseEditorProvider{constructor(e){this.container=e,this._disposable=n.Disposable.from(n.window.registerCustomEditorProvider("gitlens.rebase",this,{supportsMultipleEditorsPerDocument:!1,webviewOptions:{enableFindWidget:!0,retainContextWhenHidden:!0}})),this.ascending="asc"===h.H.get("rebaseEditor.ordering")}_disposable;ascending=!1;dispose(){this._disposable.dispose()}get contextKeyPrefix(){return"gitlens:webview:rebase"}get enabled(){let e=h.H.inspectCore("workbench.editorAssociations")?.globalValue;if(null==e||0===e.length)return!0;if(Array.isArray(e)){let t=e.find(e=>"git-rebase-todo"===e.filenamePattern);return null==t||"gitlens.rebase"===t.viewType}let t=e["git-rebase-todo"];return null==t||"gitlens.rebase"===t}_disableAfterNextUse=!1;async enableForNextUse(){this.enabled||(await this.setEnabled(!0),this._disableAfterNextUse=!0)}async setEnabled(e){this._disableAfterNextUse=!1;let t=h.H.inspectCore("workbench.editorAssociations"),i=t?.globalValue;if(Array.isArray(i)&&(i=i.reduce((e,t)=>(e[t.filenamePattern]=t.viewType,e),Object.create(null))),null==i){if(e)return;i={"git-rebase-todo":"default"}}else i["git-rebase-todo"]=e?"gitlens.rebase":"default";await h.H.updateAny("workbench.editorAssociations",i,n.ConfigurationTarget.Global)}async resolveCustomTextEditor(e,t,i){this.container.usage.track("rebaseEditor:shown").catch();let r=(0,T.Fd)(n.Uri.joinPath(e.uri,"..","..","..").fsPath),s=this.container.git.getRepository(r),o=[],a={dispose:()=>void n.Disposable.from(...o).dispose(),id:ay.next(),subscriptions:o,document:e,panel:t,repoPath:s?.path??r,firstSelection:!0};o.push(t.onDidDispose(()=>{(0,at.Do)(this.contextKeyPrefix),n.Disposable.from(...o).dispose()}),t.onDidChangeViewState(e=>this.onViewStateChanged(a,e)),t.webview.onDidReceiveMessage(e=>this.onMessageReceived(a,e)),n.workspace.onDidChangeTextDocument(t=>{0!==t.contentChanges.length&&t.document.uri.toString()===e.uri.toString()&&this.updateState(a,!0)}),n.workspace.onDidSaveTextDocument(t=>{t.uri.toString()===e.uri.toString()&&this.updateState(a,!0)})),null!=s&&o.push(s.onDidChange(e=>{e.changed(R.Z_.Rebase,R.Ti.Any)&&this.updateState(a)})),t.webview.options={enableCommandUris:!0,enableScripts:!0},t.webview.html=await this.getHtml(a),this._disableAfterNextUse&&(this._disableAfterNextUse=!1,this.setEnabled(!1))}onViewFocusChanged(e){(0,at.WJ)(this.contextKeyPrefix)}onViewStateChanged(e,t){t.webviewPanel.visible?(0,at.WJ)(this.contextKeyPrefix):(0,at.Do)(this.contextKeyPrefix),e.pendingChange&&this.updateState(e)}async parseState(e){if(void 0===e.branchName){let t=await this.container.git.branches(e.repoPath).getBranch();e.branchName=t?.name??null}return await aS(this.container,e,this.ascending)}async postMessage(e,t){try{let i=await e.panel.webview.postMessage(t);return e.pendingChange=!i,i}catch(t){return _.Vy.error(t),e.pendingChange=!0,!1}}onMessageReceived(e,t){switch(!0){case ae.pY.is(t):this.onViewFocusChanged(t.params);break;case ar.is(t):this.abort(e);break;case as.is(t):this.disable(e);break;case ao.is(t):(0,tW.S4)("editor.action.webvieweditor.showFind");break;case an.is(t):this.rebase(e);break;case aa.is(t):this.switchToText(e);break;case al.is(t):this.swapOrdering(t.params,e);break;case au.is(t):this.onEntryChanged(e,t.params);break;case ac.is(t):this.onEntryMoved(e,t.params);break;case ah.is(t):this.onSelectionChanged(e,t.params)}}async onEntryChanged(e,t){let i=aP(e.document),r=i.find(e=>e.sha===t.sha);if(null==r)return;let s=e.document.positionAt(r.index),o=e.document.validateRange(new n.Range(new n.Position(s.line,0),new n.Position(s.line,af))),a=t.action,l=new n.WorkspaceEdit,u=[...i];u.splice(i.indexOf(r),1,{...r,action:t.action});let c=!1;for(let e of u)"squash"===e.action||"fixup"===e.action?c=!0:c&&"drop"!==e.action&&(c=!1);if(c){let t=u[u.length-1];if(r.sha===t.sha)a="pick";else{let i=e.document.positionAt(t.index),r=e.document.validateRange(new n.Range(new n.Position(i.line,0),new n.Position(i.line,af)));l.replace(e.document.uri,r,`pick ${t.sha} ${t.message}`)}}l.replace(e.document.uri,o,`${a} ${r.sha} ${r.message}`),await n.workspace.applyEdit(l)}async onEntryMoved(e,t){let i,r=aP(e.document),s=r.find(e=>e.sha===t.sha);if(null==s)return;let o=r.findIndex(e=>e.sha===t.sha);if(t.relative){if(-1===t.to&&0===o||1===t.to&&o===r.length-1)return;i=o+t.to}else{if(o===t.to)return;i=t.to}let a=r[i],l=e.document.positionAt(a.index).line;i<o&&l++;let u=e.document.positionAt(s.index),c=e.document.validateRange(new n.Range(new n.Position(u.line,0),new n.Position(u.line+1,0))),h=[...r];h.splice(o,1),h.splice(i,0,s);let d=!1;for(let e of h)"squash"===e.action||"fixup"===e.action?d=!0:d&&"drop"!==e.action&&(d=!1);let p=new n.WorkspaceEdit,g=s.action;if(d){let t=h[h.length-1];if(s.sha===t.sha)g="pick";else{let i=e.document.positionAt(t.index),r=e.document.validateRange(new n.Range(new n.Position(i.line,0),new n.Position(i.line,af)));p.replace(e.document.uri,r,`pick ${t.sha} ${t.message}`)}}p.delete(e.document.uri,c),p.insert(e.document.uri,new n.Position(l,0),`${g} ${s.sha} ${s.message}
`),await n.workspace.applyEdit(p)}onSelectionChanged(e,t){null==e.fireSelectionChangedDebounced&&(e.fireSelectionChangedDebounced=(0,B.s)(this.fireSelectionChanged.bind(this),250)),e.fireSelectionChangedDebounced(e,t.sha)}fireSelectionChanged(e,t){if(null==t)return;let i=h.H.get("rebaseEditor.showDetailsView");t=e.commits?.find(e=>e.sha.startsWith(t))?.sha??t,this.container.events.fire("commit:selected",{commit:(0,eC.kA)(t,e.repoPath,{refType:"revision"}),interaction:"passive",preserveFocus:!0,preserveVisibility:e.firstSelection?!1===i:"selection"!==i},{source:"gitlens.rebase"}),e.firstSelection=!1}updateState(e,t=!1){if(t){e.notifyDidChangeStateDebounced?.cancel(),this.notifyDidChangeState(e);return}null==e.notifyDidChangeStateDebounced&&(e.notifyDidChangeStateDebounced=(0,B.s)(this.notifyDidChangeState.bind(this),250)),e.notifyDidChangeStateDebounced(e)}async notifyDidChangeState(e){if(!e.panel.visible){e.pendingChange=!0;return}let t=await this.parseState(e);this.postMessage(e,{id:`host:${av.next()}`,scope:ad.scope,method:ad.method,params:{state:t}})}async abort(e){e.dispose();let t=new n.WorkspaceEdit;t.replace(e.document.uri,new n.Range(0,0,e.document.lineCount,0),""),await n.workspace.applyEdit(t),await e.document.save(),e.panel.dispose()}async disable(e){await this.abort(e),await this.setEnabled(!1)}async rebase(e){e.dispose(),await e.document.save(),e.panel.dispose()}swapOrdering(e,t){this.ascending=e.ascending??!1,h.H.updateEffective("rebaseEditor.ordering",this.ascending?"asc":"desc"),this.updateState(t,!0)}switchToText(e){(0,iZ.hU)(),(0,tW.S4)("vscode.open",e.document.uri,{override:!1,preview:!1})}async getHtml(e){let t=n.Uri.joinPath(this.container.context.extensionUri,"dist","webviews"),i=n.Uri.joinPath(t,"rebase.html"),[r,s]=await Promise.all([n.workspace.fs.readFile(i),this.parseState(e)]);return(0,at.Dv)(aw.decode(r),"gitlens.rebase",void 0,e.panel.webview.cspSource,(0,iS.m9)(),e.panel.webview.asWebviewUri(this.container.context.extensionUri).toString(),e.panel.webview.asWebviewUri(t).toString(),"editor",s)}};async function ak(e,t,i,r){t.commits=[],t.authors=new Map;let s=await e.git.commits(t.repoPath).searchCommits({query:`${i?`#:${i} `:""}${(0,X.fj)((0,X.Tj)(r,e=>`#:${e.sha}`)," ")}`},{limit:0});if(null!=s){for(let e of s.commits.values())if(t.commits.push(e),t.authors.has(e.author.name)||t.authors.set(e.author.name,{author:e.author.name,avatarUrl:(await e.getAvatarUri()).toString(!0),email:e.author.email}),!t.authors.has(e.committer.name)){let i=await e.committer.getAvatarUri(e);t.authors.set(e.committer.name,{author:e.committer.name,avatarUrl:i.toString(!0),email:e.committer.email})}}}async function aS(e,t,i){let r,s=t.document.getText(),o=aP(s),[,,,n]=ab.exec(s)??["","",""];(null==t.authors||null==t.commits)&&await ak(e,t,n,o);let a=h.H.get("defaultDateFormat"),l=n3.G.createMarkdownCommandLink("${commit}",t.repoPath),u=n?t.commits?.find(e=>e.sha.startsWith(n)):void 0;for(let e of o)null!=(r=t.commits?.find(t=>t.sha.startsWith(e.sha)))&&(r.sha===u?.sha&&(n=""),e.commit={sha:r.sha,author:r.author.name,committer:r.committer.name,date:r.formatDate(a),dateFromNow:r.formattedDate,message:(0,ew.E)(r.message??r.summary)});return{webviewId:"gitlens.rebase",webviewInstanceId:void 0,timestamp:Date.now(),branch:t.branchName??"",onto:n?{sha:n,commit:null!=u?{sha:u.sha,author:u.author.name,committer:u.committer.name,date:u.formatDate(a),dateFromNow:u.formatDateFromNow(),message:(0,ew.E)(u.message||"root")}:void 0}:void 0,entries:o,authors:null!=t.authors?Object.fromEntries(t.authors):{},commands:{commit:l},ascending:i}}function aP(e){let t,i,r,s,o="string"==typeof e?e:e.getText(),n=[];for(;null!=(t=aC.exec(o));)[,i,r,s]=t,n.push({index:t.index,action:aR.get(i)??"pick",sha:` ${r}`.substring(1),message:null==s||0===s.length?"":` ${s}`.substring(1)});return n.reverse()}am([(0,d.Yz)({args:{1:!1,2:!1}})],RebaseEditorProvider.prototype,"resolveCustomTextEditor",1),am([(0,d.Yz)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],RebaseEditorProvider.prototype,"onViewFocusChanged",1),am([(0,d.Yz)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`,1:e=>`active=${e.webviewPanel.active}, visible=${e.webviewPanel.visible}`}})],RebaseEditorProvider.prototype,"onViewStateChanged",1),am([(0,d.Yz)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"updateState",1),am([(0,d.Yz)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"notifyDidChangeState",1),am([(0,d.Rm)({args:!1})],RebaseEditorProvider.prototype,"abort",1),am([(0,d.Rm)({args:!1})],RebaseEditorProvider.prototype,"disable",1),am([(0,d.Rm)({args:!1})],RebaseEditorProvider.prototype,"rebase",1),am([(0,d.Rm)({args:!1})],RebaseEditorProvider.prototype,"swapOrdering",1),am([(0,d.Rm)({args:!1})],RebaseEditorProvider.prototype,"switchToText",1);var aA=i(1673),aI=Object.defineProperty,aD=Object.getOwnPropertyDescriptor,a_=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?aD(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&aI(t,i,o),o};let a$=class _Container{static #e;static #t=new Proxy({},{get:function(e,t){if(null!=_Container.#e)return _Container.#e[t];if("config"===t)return h.H.getAll();throw Error("Container is not initialized")}});static create(e,t,i,r,s){if(null!=_Container.#e)throw Error("Container is already initialized");return _Container.#e=new _Container(e,t,i,r,s),_Container.#e}static get instance(){return _Container.#e??_Container.#t}_onReady=new n.EventEmitter;get onReady(){if(this._ready){let e=new n.EventEmitter;return setTimeout(()=>e.fire(),0),e.event}return this._onReady.event}BranchDateFormatting={dateFormat:void 0,dateStyle:void 0,reset:()=>{this.BranchDateFormatting.dateFormat=h.H.get("defaultDateFormat"),this.BranchDateFormatting.dateStyle=h.H.get("defaultDateStyle")}};CommitDateFormatting={dateFormat:null,dateSource:"authored",dateStyle:"relative",reset:()=>{this.CommitDateFormatting.dateFormat=h.H.get("defaultDateFormat"),this.CommitDateFormatting.dateSource=h.H.get("defaultDateSource"),this.CommitDateFormatting.dateStyle=h.H.get("defaultDateStyle")}};CommitShaFormatting={length:7,reset:()=>{this.CommitShaFormatting.length=Math.max(5,h.H.get("advanced.abbreviatedShaLength"))}};PullRequestDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.PullRequestDateFormatting.dateFormat=h.H.get("defaultDateFormat"),this.PullRequestDateFormatting.dateStyle=h.H.get("defaultDateStyle")}};TagDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.TagDateFormatting.dateFormat=h.H.get("defaultDateFormat"),this.TagDateFormatting.dateStyle=h.H.get("defaultDateStyle")}};_connection;_disposables;_terminalLinks;_launchpadIndicator;constructor(e,t,r,s,o){var a,l;this._context=e,this._prerelease=r,this._version=s,this.ensureModeApplied(),this._disposables=[h.H,this._storage=t,this._telemetry=new TelemetryService(this),this._usage=new UsageTracker(this,t),h.H.onDidChangeAny(this.onAnyConfigurationChanged,this)],this._urls=new UrlsProvider(this.env),this._disposables.push(this._connection=new ServerConnection(this,this._urls)),this._disposables.push(this._accountAuthentication=new AccountAuthenticationProvider(this,this._connection)),this._disposables.push(this._uri=new UriService(this)),this._disposables.push(this._subscription=new SubscriptionService(this,this._connection,o)),this._disposables.push(this._walkthrough=new WalkthroughStateProvider(this)),this._disposables.push(this._organizations=new OrganizationService(this,this._connection)),this._disposables.push(this._git=new GitProviderService(this)),this._disposables.push(new GitFileSystemProvider(this)),this._disposables.push(this._deepLinks=new DeepLinkService(this)),this._disposables.push(this._actionRunners=new tl.qr(this)),this._disposables.push(this._documentTracker=new GitDocumentTracker(this)),this._disposables.push(this._lineTracker=new LineTracker(this,this._documentTracker)),this._disposables.push(this._keyboard=new Keyboard),this._disposables.push(this._vsls=new VslsController(this)),this._disposables.push(this._eventBus=new EventBus),this._disposables.push(this._launchpadProvider=new rS.qJ(this)),this._disposables.push(this._fileAnnotationController=new e3.o(this)),this._disposables.push(this._lineAnnotationController=new LineAnnotationController(this)),this._disposables.push(this._lineHoverController=new LineHoverController(this)),this._disposables.push(this._statusBarController=new StatusBarController(this)),this._disposables.push(this._codeLensController=new GitCodeLensController(this));let u=new aA.x(this);this._disposables.push(u),this._disposables.push(this._views=new Views(this,u));let c=u.registerWebviewPanel({id:"gitlens.showGraphPage",options:{preserveInstance:!0}},{id:"gitlens.graph",fileName:"graph.html",iconPath:"images/gitlens-icon.png",title:"Commit Graph",contextKeyPrefix:"gitlens:webview:graph",trackingFeature:"graphWebview",type:"graph",plusFeature:!0,column:n.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!0,enableFindWidget:!1},allowMultipleInstances:h.H.get("graph.allowMultiple")},async(e,t)=>{let{GraphWebviewProvider:r}=await Promise.resolve().then(i.bind(i,6325));return new r(e,t)});this._disposables.push(c),this._disposables.push((a=this,n.Disposable.from((0,tW.Lb)("gitlens.showGraph",(...e)=>{let t,[i]=e;if((0,sm.Y6)(i)){if(null!=i.rootUri){let e=a.git.getRepository(i.rootUri);null!=e&&(t=e)}e=[]}else i instanceof sf.eu&&(i.is("repo-folder")&&(t=i.repo),e=[]);return null!=t?(0,tW.RS)("gitlens.showInCommitGraph",t):"panel"===h.H.get("graph.layout")?(0,tW.RS)("gitlens.showGraphView",...e):(0,tW.RS)("gitlens.showGraphPage",void 0,...e)}),(0,tW.Lb)(`${c.id}.switchToEditorLayout`,async()=>{await h.H.updateEffective("graph.layout","editor"),queueMicrotask(()=>void(0,tW.RS)("gitlens.showGraphPage"))}),(0,tW.Lb)(`${c.id}.switchToPanelLayout`,async()=>{await h.H.updateEffective("graph.layout","panel"),queueMicrotask(async()=>{await (0,tW.S4)("gitlens.views.graph.resetViewLocation"),await (0,tW.S4)("gitlens.views.graphDetails.resetViewLocation"),(0,tW.RS)("gitlens.showGraphView")})}),(0,tW.Lb)("gitlens.toggleGraph",(...e)=>{(0,A.SD)("gitlens:webviewView:graph:visible")?(0,tW.S4)("workbench.action.closePanel"):(0,tW.RS)("gitlens.showGraphView",...e)}),(0,tW.Lb)("gitlens.toggleMaximizedGraph",(...e)=>{(0,A.SD)("gitlens:webviewView:graph:visible")||(0,tW.RS)("gitlens.showGraphView",...e),(0,tW.S4)("workbench.action.toggleMaximizedPanel")}),(0,tW.Lb)("gitlens.showInCommitGraph",e=>{if(e instanceof sw.Xu){if(null==e.ref)return;e={ref:e.ref}}let t="preserveFocus"in e&&(e.preserveFocus??!1);if("panel"===h.H.get("graph.layout")){if(!a.views.graph.visible){let i=c.getBestInstance({preserveFocus:t},e);if(null!=i)return void i.show({preserveFocus:t},e)}a.views.graph.show({preserveFocus:t},e)}else c.show({preserveFocus:t},e)}),(0,tW.Lb)("gitlens.showInCommitGraphView",e=>{if(e instanceof sw.Xu){if(null==e.ref)return;e={ref:e.ref}}let t="preserveFocus"in e&&(e.preserveFocus??!1);a.views.graph.show({preserveFocus:t},e)}),(0,tW.Lb)(`${c.id}.refresh`,()=>void c.getActiveInstance()?.refresh(!0)),(0,tW.Lb)(`${c.id}.split`,()=>void c.splitActiveInstance({preserveInstance:!1,column:n.ViewColumn.Beside}))))),this._disposables.push(new GraphStatusBarController(this));let d=u.registerWebviewPanel({id:"gitlens.showTimelinePage",options:{preserveInstance:!0}},{id:"gitlens.timeline",fileName:"timeline.html",iconPath:"images/gitlens-icon.png",title:"Visual History",contextKeyPrefix:"gitlens:webview:timeline",trackingFeature:"timelineWebview",type:"timeline",plusFeature:!0,column:n.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!1},allowMultipleInstances:h.H.get("visualHistory.allowMultiple")},async(e,t)=>{let{TimelineWebviewProvider:r}=await Promise.resolve().then(i.bind(i,5581));return new r(e,t)});this._disposables.push(d),this._disposables.push(n.Disposable.from((0,tW.Lb)("gitlens.showFileInTimeline",(...e)=>{let[t]=e;(0,sm.D0)(t)&&(e=[t.resourceUri]),d.show(void 0,...e)}),(0,tW.Lb)("gitlens.showFolderInTimeline",(...e)=>{let t=(0,sm.e3)(e);null!=t&&(e=[t]),d.show(void 0,...e)}),(0,tW.Lb)(`${d.id}.refresh`,()=>void d.getActiveInstance()?.refresh(!0)),(0,tW.Lb)(`${d.id}.split`,()=>void d.splitActiveInstance({preserveInstance:!1,column:n.ViewColumn.Beside})))),this._disposables.push(this._rebaseEditor=new RebaseEditorProvider(this));let p=u.registerWebviewPanel({id:"gitlens.showSettingsPage"},{id:"gitlens.settings",fileName:"settings.html",iconPath:"images/gitlens-icon.png",title:"GitLens Settings",contextKeyPrefix:"gitlens:webview:settings",trackingFeature:"settingsWebview",type:"settings",plusFeature:!1,column:n.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!0}},async(e,t)=>{let{SettingsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,558));return new r(e,t)});this._disposables.push(p),this._disposables.push(n.Disposable.from(...["gitlens.showSettingsPage!file-annotations","gitlens.showSettingsPage!branches-view","gitlens.showSettingsPage!commits-view","gitlens.showSettingsPage!contributors-view","gitlens.showSettingsPage!file-history-view","gitlens.showSettingsPage!line-history-view","gitlens.showSettingsPage!remotes-view","gitlens.showSettingsPage!repositories-view","gitlens.showSettingsPage!search-compare-view","gitlens.showSettingsPage!stashes-view","gitlens.showSettingsPage!tags-view","gitlens.showSettingsPage!worktrees-view","gitlens.showSettingsPage!views","gitlens.showSettingsPage!commit-graph","gitlens.showSettingsPage!autolinks"].map(e=>{let t,i=/.*?!(.*)/.exec(e);return null!=i&&([,t]=i),(0,tW.Lb)(e,()=>void p.show(void 0,...t?[t]:[]))}))),this._disposables.push(new sg.l);let g=u.registerWebviewPanel({id:"gitlens.showPatchDetailsPage",options:{preserveInstance:!0}},{id:"gitlens.patchDetails",fileName:"patchDetails.html",iconPath:"images/gitlens-icon.png",title:"Patch",contextKeyPrefix:"gitlens:webview:patchDetails",trackingFeature:"patchDetailsWebview",type:"patchDetails",plusFeature:!0,column:n.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!1},allowMultipleInstances:!0},async(e,t)=>{let{PatchDetailsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,7383));return new r(e,t)});this._disposables.push(g),h.H.get("launchpad.indicator.enabled")&&this._disposables.push(this._launchpadIndicator=new rk.A(this,this._launchpadProvider)),h.H.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this));let m=void 0;null!=m&&this._disposables.push(m),this._disposables.push(h.H.onDidChange(e=>{h.H.changed(e,"terminalLinks.enabled")&&(this._terminalLinks?.dispose(),this._terminalLinks=void 0,h.H.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this))),h.H.changed(e,"launchpad.indicator.enabled")&&(this._launchpadIndicator?.dispose(),this._launchpadIndicator=void 0,this.telemetry.sendEvent("launchpad/indicator/hidden"),h.H.get("launchpad.indicator.enabled")&&this._disposables.push(this._launchpadIndicator=new rk.A(this,this._launchpadProvider)))})),e.subscriptions.push({dispose:()=>this._disposables.reverse().forEach(e=>void e.dispose())}),l=this,null!=rM()&&setTimeout(()=>l.workspaces.addMissingCurrentWorkspaceRepos(),1e4)}deactivate(){this._deactivating=!0}_deactivating=!1;get deactivating(){return this._deactivating}_ready=!1;async ready(){if(this._ready)throw Error("Container is already ready");this._ready=!0,await this.registerGitProviders(),queueMicrotask(()=>this._onReady.fire())}async registerGitProviders(){for(let e of(await Promise.resolve([new GitHubGitProvider(this)])))this._disposables.push(this._git.register(e.descriptor.id,e));this._git.registrationComplete()}onAnyConfigurationChanged(e){h.H.changedAny(e,l.Od)&&(this._mode=void 0,h.H.changed(e,"outputLevel")&&(_.Vy.logLevel=(0,tI.Wn)(h.H.get("outputLevel"))),h.H.changed(e,"defaultGravatarsStyle")&&(0,ty.Qw)(h.H.get("defaultGravatarsStyle")),h.H.changed(e,"mode")&&this.ensureModeApplied())}_accountAuthentication;get accountAuthentication(){return this._accountAuthentication}_actionRunners;get actionRunners(){return this._actionRunners}_ai;get ai(){return null==this._ai&&this._disposables.push(this._ai=new AIProviderService(this,this._connection)),this._ai}_autolinks;get autolinks(){return null==this._autolinks&&this._disposables.push(this._autolinks=new AutolinksProvider(this)),this._autolinks}_cache;get cache(){return null==this._cache&&this._disposables.push(this._cache=new CacheProvider(this)),this._cache}_cloudIntegrations;get cloudIntegrations(){if(null==this._cloudIntegrations){async function e(){try{return new(await Promise.resolve().then(i.bind(i,7471))).CloudIntegrationService(this,this._connection)}catch(e){_.Vy.error(e);return}}this._cloudIntegrations=e.call(this)}return this._cloudIntegrations}_drafts;get drafts(){return null==this._drafts&&this._disposables.push(this._drafts=new ik.L(this,this._connection)),this._drafts}_codeLensController;get codeLens(){return this._codeLensController}_context;get context(){return this._context}get debugging(){return this._context.extensionMode===n.ExtensionMode.Development}_deepLinks;get deepLinks(){return this._deepLinks}_documentTracker;get documentTracker(){return this._documentTracker}_enrichments;get enrichments(){return null==this._enrichments&&this._disposables.push(this._enrichments=new rR.dV(this,this._connection)),this._enrichments}get env(){if(this.prereleaseOrDebugging){let e=h.H.getAny("gitkraken.env");if("dev"===e)return"dev";if("staging"===e)return"staging"}return"production"}_eventBus;get events(){return this._eventBus}_fileAnnotationController;get fileAnnotations(){return this._fileAnnotationController}_launchpadProvider;get launchpad(){return this._launchpadProvider}_git;get git(){return this._git}_azure;get azure(){if(null==this._azure){async function e(){try{let e=new(await Promise.resolve().then(i.bind(i,5307))).AzureDevOpsApi(this);return this._disposables.push(e),e}catch(e){_.Vy.error(e);return}}this._azure=e.call(this)}return this._azure}_bitbucket;get bitbucket(){if(null==this._bitbucket){async function e(){try{let e=new(await Promise.resolve().then(i.bind(i,657))).BitbucketApi(this);return this._disposables.push(e),e}catch(e){_.Vy.error(e);return}}this._bitbucket=e.call(this)}return this._bitbucket}_github;get github(){if(null==this._github){async function e(){try{let e=new(await Promise.resolve().then(i.bind(i,5198))).GitHubApi(this);return this._disposables.push(e),e}catch(e){_.Vy.error(e);return}}this._github=e.call(this)}return this._github}_gitlab;get gitlab(){if(null==this._gitlab){async function e(){try{let e=new(await Promise.resolve().then(i.bind(i,7400))).GitLabApi(this);return this._disposables.push(e),e}catch(e){_.Vy.error(e);return}}this._gitlab=e.call(this)}return this._gitlab}get id(){return this._context.extension.id}_integrations;get integrations(){if(null==this._integrations){let e=new ConfiguredIntegrationService(this),t=new IntegrationAuthenticationService(this,e);this._disposables.push(t,e,this._integrations=new tc.a(this,t,e))}return this._integrations}_keyboard;get keyboard(){return this._keyboard}_lineAnnotationController;get lineAnnotations(){return this._lineAnnotationController}_lineHoverController;get lineHovers(){return this._lineHoverController}_lineTracker;get lineTracker(){return this._lineTracker}_mode;get mode(){return null==this._mode&&(this._mode=h.H.get("modes")?.[h.H.get("mode.active")]),this._mode}_organizations;get organizations(){return this._organizations}_prerelease;get prerelease(){return this._prerelease}get prereleaseOrDebugging(){return this._prerelease||this.debugging}_productConfig;get productConfig(){return this._productConfig??=new ProductConfigProvider(this,this._connection),this._productConfig}_rebaseEditor;get rebaseEditor(){return this._rebaseEditor}_repositoryIdentity;get repositoryIdentity(){return null==this._repositoryIdentity&&this._disposables.push(this._repositoryIdentity=new RepositoryIdentityService(this,this.repositoryLocator)),this._repositoryIdentity}_repositoryLocator;get repositoryLocator(){if(void 0===this._repositoryLocator){var e;this._repositoryLocator=(void this.sharedGkStorage)??null,null!=this._repositoryLocator&&this._disposables.push(this._repositoryLocator)}return this._repositoryLocator??void 0}_sharedGkStorage;get sharedGkStorage(){return void 0===this._sharedGkStorage&&(this._sharedGkStorage=(void 0)??null),this._sharedGkStorage??void 0}_statusBarController;get statusBar(){return this._statusBarController}_storage;get storage(){return this._storage}_subscription;get subscription(){return this._subscription}_telemetry;get telemetry(){return this._telemetry}_uri;get uri(){return this._uri}_urls;get urls(){return this._urls}_usage;get usage(){return this._usage}_walkthrough;get walkthrough(){return this._walkthrough}_version;get version(){return this._version}_views;get views(){return this._views}_vsls;get vsls(){return this._vsls}_workspaces;get workspaces(){var e;return null==this._workspaces&&this._disposables.push(this._workspaces=new WorkspacesService(this,new WorkspacesApi(this,this._connection),void this.sharedGkStorage,this.repositoryLocator)),this._workspaces}ensureModeApplied(){let e=this.mode;if(null==e)return void h.H.clearOverrides();if(null!=e.annotations){let t;switch(e.annotations){case"blame":t="gitlens.toggleFileBlame";break;case"changes":t="gitlens.toggleFileChanges";break;case"heatmap":t="gitlens.toggleFileHeatmap"}if(null!=t){let i={type:e.annotations,on:!0};setTimeout(tW.RS,50,t,i)}}h.H.applyOverrides({get:(t,i)=>{if(null!=e.annotations){if(h.H.matches(`${e.annotations}.toggleMode`,t,i))return i="window";if(h.H.matches(e.annotations,t,i))return i.toggleMode="window",i}for(let r of["codeLens","currentLine","hovers","statusBar"])if(null!=e[r]){if(h.H.matches(`${r}.enabled`,t,i)){i=e[r];break}else if(h.H.matches(r,t,i)){i.enabled=e[r];break}}return i},getAll:t=>(null!=e.annotations&&(t[e.annotations].toggleMode="window"),null!=e.codeLens&&(t.codeLens.enabled=e.codeLens),null!=e.currentLine&&(t.currentLine.enabled=e.currentLine),null!=e.hovers&&(t.hovers.enabled=e.hovers),null!=e.statusBar&&(t.statusBar.enabled=e.statusBar),t),onDidChange:e=>{if(!h.H.changed(e,["mode","modes"]))return e;let t=e.affectsConfiguration;return{...e,affectsConfiguration:(e,i)=>!!/^gitlens\.(?:modes?|blame|changes|heatmap|codeLens|currentLine|hovers|statusBar)\b/.test(e)||t(e,i)}}})}};a_([(0,d.Rm)()],a$.prototype,"registerGitProviders",1),a_([(0,eG.B)()],a$.prototype,"debugging",1),a_([(0,eG.B)()],a$.prototype,"env",1),a_([(0,eG.B)()],a$.prototype,"id",1),a_([(0,eG.B)()],a$.prototype,"prereleaseOrDebugging",1);let aT=a$;function aE(e){return e instanceof aT}},2101:e=>{function t(e){if("string"!=typeof e)throw TypeError("Path must be a string. Received "+JSON.stringify(e))}function i(e,t){for(var i,r="",s=0,o=-1,n=0,a=0;a<=e.length;++a){if(a<e.length)i=e.charCodeAt(a);else if(47===i)break;else i=47;if(47===i){if(o===a-1||1===n);else if(o!==a-1&&2===n){if(r.length<2||2!==s||46!==r.charCodeAt(r.length-1)||46!==r.charCodeAt(r.length-2)){if(r.length>2){var l=r.lastIndexOf("/");if(l!==r.length-1){-1===l?(r="",s=0):s=(r=r.slice(0,l)).length-1-r.lastIndexOf("/"),o=a,n=0;continue}}else if(2===r.length||1===r.length){r="",s=0,o=a,n=0;continue}}t&&(r.length>0?r+="/..":r="..",s=2)}else r.length>0?r+="/"+e.slice(o+1,a):r=e.slice(o+1,a),s=a-o-1;o=a,n=0}else 46===i&&-1!==n?++n:n=-1}return r}var r={resolve:function(){for(var e,r,s="",o=!1,n=arguments.length-1;n>=-1&&!o;n--)n>=0?r=arguments[n]:(void 0===e&&(e=process.cwd()),r=e),t(r),0!==r.length&&(s=r+"/"+s,o=47===r.charCodeAt(0));if(s=i(s,!o),o)if(s.length>0)return"/"+s;else return"/";return s.length>0?s:"."},normalize:function(e){if(t(e),0===e.length)return".";var r=47===e.charCodeAt(0),s=47===e.charCodeAt(e.length-1);return(0!==(e=i(e,!r)).length||r||(e="."),e.length>0&&s&&(e+="/"),r)?"/"+e:e},isAbsolute:function(e){return t(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0==arguments.length)return".";for(var e,i=0;i<arguments.length;++i){var s=arguments[i];t(s),s.length>0&&(void 0===e?e=s:e+="/"+s)}return void 0===e?".":r.normalize(e)},relative:function(e,i){if(t(e),t(i),e===i||(e=r.resolve(e))===(i=r.resolve(i)))return"";for(var s=1;s<e.length&&47===e.charCodeAt(s);++s);for(var o=e.length,n=o-s,a=1;a<i.length&&47===i.charCodeAt(a);++a);for(var l=i.length-a,u=n<l?n:l,c=-1,h=0;h<=u;++h){if(h===u){if(l>u){if(47===i.charCodeAt(a+h))return i.slice(a+h+1);else if(0===h)return i.slice(a+h)}else n>u&&(47===e.charCodeAt(s+h)?c=h:0===h&&(c=0));break}var d=e.charCodeAt(s+h);if(d!==i.charCodeAt(a+h))break;47===d&&(c=h)}var p="";for(h=s+c+1;h<=o;++h)(h===o||47===e.charCodeAt(h))&&(0===p.length?p+="..":p+="/..");return p.length>0?p+i.slice(a+c):(a+=c,47===i.charCodeAt(a)&&++a,i.slice(a))},_makeLong:function(e){return e},dirname:function(e){if(t(e),0===e.length)return".";for(var i=e.charCodeAt(0),r=47===i,s=-1,o=!0,n=e.length-1;n>=1;--n)if(47===(i=e.charCodeAt(n))){if(!o){s=n;break}}else o=!1;return -1===s?r?"/":".":r&&1===s?"//":e.slice(0,s)},basename:function(e,i){if(void 0!==i&&"string"!=typeof i)throw TypeError('"ext" argument must be a string');t(e);var r,s=0,o=-1,n=!0;if(void 0!==i&&i.length>0&&i.length<=e.length){if(i.length===e.length&&i===e)return"";var a=i.length-1,l=-1;for(r=e.length-1;r>=0;--r){var u=e.charCodeAt(r);if(47===u){if(!n){s=r+1;break}}else -1===l&&(n=!1,l=r+1),a>=0&&(u===i.charCodeAt(a)?-1==--a&&(o=r):(a=-1,o=l))}return s===o?o=l:-1===o&&(o=e.length),e.slice(s,o)}for(r=e.length-1;r>=0;--r)if(47===e.charCodeAt(r)){if(!n){s=r+1;break}}else -1===o&&(n=!1,o=r+1);return -1===o?"":e.slice(s,o)},extname:function(e){t(e);for(var i=-1,r=0,s=-1,o=!0,n=0,a=e.length-1;a>=0;--a){var l=e.charCodeAt(a);if(47===l){if(!o){r=a+1;break}continue}-1===s&&(o=!1,s=a+1),46===l?-1===i?i=a:1!==n&&(n=1):-1!==i&&(n=-1)}return -1===i||-1===s||0===n||1===n&&i===s-1&&i===r+1?"":e.slice(i,s)},format:function(e){var t,i;if(null===e||"object"!=typeof e)throw TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return t=e.dir||e.root,i=e.base||(e.name||"")+(e.ext||""),t?t===e.root?t+i:t+"/"+i:i},parse:function(e){t(e);var i,r={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return r;var s=e.charCodeAt(0),o=47===s;o?(r.root="/",i=1):i=0;for(var n=-1,a=0,l=-1,u=!0,c=e.length-1,h=0;c>=i;--c){if(47===(s=e.charCodeAt(c))){if(!u){a=c+1;break}continue}-1===l&&(u=!1,l=c+1),46===s?-1===n?n=c:1!==h&&(h=1):-1!==n&&(h=-1)}return -1===n||-1===l||0===h||1===h&&n===l-1&&n===a+1?-1!==l&&(0===a&&o?r.base=r.name=e.slice(1,l):r.base=r.name=e.slice(a,l)):(0===a&&o?(r.name=e.slice(1,n),r.base=e.slice(1,l)):(r.name=e.slice(a,n),r.base=e.slice(a,l)),r.ext=e.slice(n,l)),a>0?r.dir=e.slice(0,a-1):o&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};r.posix=r,e.exports=r},2112:(e,t,i)=>{i.d(t,{TF:()=>n,_c:()=>a,vt:()=>o});var r=i(2099),s=i(3583);function o(e,t,i){return(0,s.b)({command:"tag",state:{subcommand:"create",repo:e,reference:t,name:i}})}function n(e,t){return(0,s.b)({command:"tag",state:{subcommand:"delete",repo:e,references:t}})}function a(e,t){return r.m.instance.views.revealTag(e,t)}},2141:(e,t,i)=>{i.d(t,{G5:()=>l,Ip:()=>c,Jl:()=>f,Lb:()=>u,RS:()=>m,S4:()=>w,Y0:()=>y,c6:()=>g,gu:()=>p,ph:()=>d,wS:()=>v,yd:()=>h});var r=i(1398),s=i(7688),o=i(2099),n=i(5238);let a=[];function l(){return e=>{a.push(e)}}function u(e,t,i){return r.commands.registerCommand(e,function(...i){let r;if("gitlens.gitCommands"===e){let e=i?.[0];e?.command!=null&&(r={mode:i[0].command},e?.state?.subcommand!=null&&(r.submode=e.state.subcommand))}o.m.instance.telemetry.sendEvent("command",{command:e,"context.mode":r?.mode,"context.submode":r?.submode}),e.startsWith("gitlens.graph.")?o.m.instance.telemetry.sendEvent("graph/command",{command:e,"context.mode":r?.mode,"context.submode":r?.submode}):e.startsWith("gitlens.home.")&&o.m.instance.telemetry.sendEvent("home/command",{command:e,"context.mode":r?.mode,"context.submode":r?.submode}),o.m.instance.usage.track(`command:${e}:executed`).catch(),t.call(this,...i)},i)}function c(e,t,i){return r.commands.registerCommand(e,function(...i){let r=(0,n.RR)(i[0])?i[0].webview:void 0;o.m.instance.telemetry.sendEvent("command",{command:e,webview:r??"<missing>"}),"gitlens.graph"===r||"gitlens.views.graph"===r||e.startsWith("gitlens.graph.")?o.m.instance.telemetry.sendEvent("graph/command",{command:e,webview:r??"<missing>"}):("gitlens.views.home"===r||e.startsWith("gitlens.home."))&&o.m.instance.telemetry.sendEvent("home/command",{command:e,webview:r??"<missing>"}),o.m.instance.usage.track(`command:${e}:executed`).catch(),t.call(this,...i)},i)}function h(e){return a.map(t=>new t(e))}function d(e,t,i){return r.commands.executeCommand(`${s._}${e}`,{...t,type:e},i)}function p(e,t,...i){return{command:e,title:t,arguments:i}}function g(e,t){return{command:e,args:t}}function m(e,...t){return r.commands.executeCommand(e,...t)}function f(e,t,...i){return{command:e,title:t,arguments:i}}function w(e,...t){return"setContext"!==e&&"vscode.executeDocumentSymbolProvider"!==e&&"vscode.changes"!==e&&"vscode.diff"!==e&&"vscode.open"!==e&&o.m.instance.telemetry.sendEvent("command/core",{command:e}),r.commands.executeCommand(e,...t)}function v(e,...t){return o.m.instance.telemetry.sendEvent("command/core",{command:e}),r.commands.executeCommand(e,...t)}function y(e,t,i){return r.commands.executeCommand(e,t,i)}},2272:(e,t,i)=>{i.d(t,{Hn:()=>o,R6:()=>n,i9:()=>a});var r=i(7864),s=i(4808);async function o(e,t,i,o){let n=e.git.diff(t),[a,l,u,c]=await Promise.allSettled([n.getDiffStatus(i),o?n.getDiffStatus("HEAD"):void 0,n.getChangedFilesCount(i),o?n.getChangedFilesCount("HEAD"):void 0]),h=(0,r.Ro)(a)??[],d=(0,r.Ro)(u);if(o){let e=(0,r.Ro)(l);if(null!=e)if(0===h.length)h=e??[];else for(let t of e){let e=h.findIndex(e=>e.path===t.path);-1!==e?h.splice(e,1,t):h.push(t)}let t=(0,r.Ro)(c);null!=t&&(d=null==d?t:{additions:d.additions+t.additions,deletions:d.deletions+t.deletions,files:h.length,approximated:!0})}return{label:`${(0,s.td)("file",h.length,{zero:"No"})} changed`,files:h,stats:d}}function n(e,t,i,r){return async s=>{let o=await e.git.commits(t).getLog(i,{limit:s,authors:r}),n={log:o,hasMore:o?.hasMore??!0};return n.hasMore&&(n.more=async e=>{n.log=await n.log?.more?.(e)??n.log,n.hasMore=n.log?.hasMore??!0}),n}}async function a(e,t,i,o){let n;if(""===o)throw Error("Cannot get files for comparisons of a ref with working tree");n=""===i?o:`${o}..${i}`;let a=e.git.diff(t),[l,u]=await Promise.allSettled([a.getDiffStatus(n),a.getChangedFilesCount(n)]),c=(0,r.Ro)(l)??[];return{label:`${(0,s.td)("file",c.length,{zero:"No"})} changed`,files:c,stats:(0,r.Ro)(u)}}},2278:(e,t,i)=>{i.d(t,{E:()=>n,l:()=>ViewFileDecorationProvider});var r=i(1398),s=i(4493),o=i(1182);let ViewFileDecorationProvider=class ViewFileDecorationProvider{_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}disposable;constructor(){this.disposable=r.Disposable.from(this._onDidChange,r.window.registerFileDecorationProvider(this))}dispose(){this.disposable.dispose()}provideFileDecoration(e,t){if(e.scheme===o.xB.Git){let t=(0,s.o)(e);t?.decoration!=null&&(e=r.Uri.parse(t?.decoration))}return function(e,t){if("gitlens-view"===e.scheme)switch(e.authority){case"branch":let i;var s=e,n=0;let l=a(s);switch(l?.status){case"ahead":i={badge:"  ",color:new r.ThemeColor("gitlens.decorations.branchAheadForegroundColor"),tooltip:"Ahead"};break;case"behind":i={badge:"  ",color:new r.ThemeColor("gitlens.decorations.branchBehindForegroundColor"),tooltip:"Behind"};break;case"diverged":i={badge:"  ",color:new r.ThemeColor("gitlens.decorations.branchDivergedForegroundColor"),tooltip:"Diverged"};break;case"missingUpstream":i={badge:o.EO.Warning,color:new r.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"),tooltip:"Missing Upstream"};break;case"upToDate":i={badge:"  ",color:new r.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor"),tooltip:"Up to Date"};break;case"unpublished":i={badge:"  ",color:new r.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor"),tooltip:"Unpublished"};break;default:i={badge:"  "}}return l?.showStatusOnly?i:l?.current?{...i,badge:o.EO.Bullseye,tooltip:"Current"}:l?.worktree?.opened?{...i,badge:"●",tooltip:"Opened Worktree"}:l?.starred?{...i,badge:"★",tooltip:"Favorited"}:i;case"commit-file":var u=e,c=0;let h=a(u);switch(h?.status){case"!":return{badge:"I",color:new r.ThemeColor("gitlens.decorations.ignoredForegroundColor"),tooltip:"Ignored"};case"?":return{badge:"U",color:new r.ThemeColor("gitlens.decorations.untrackedForegroundColor"),tooltip:"Untracked"};case"A":return{badge:"A",color:new r.ThemeColor("gitlens.decorations.addedForegroundColor"),tooltip:"Added"};case"C":return{badge:"C",color:new r.ThemeColor("gitlens.decorations.copiedForegroundColor"),tooltip:"Copied"};case"D":return{badge:"D",color:new r.ThemeColor("gitlens.decorations.deletedForegroundColor"),tooltip:"Deleted"};case"M":return{badge:"M",tooltip:"Modified"};case"R":return{badge:"R",color:new r.ThemeColor("gitlens.decorations.renamedForegroundColor"),tooltip:"Renamed"}}return;case"remote":var d=e,p=0;let g=a(d);switch(g?.state){case"default":return{badge:o.EO.Check,tooltip:"Default Remote"};case"missing":return{badge:"?",color:new r.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor"),tooltip:""}}return;case"repositories":var m=e,f=0;let w=a(m);if(w?.currentWorkspace)return{badge:"●",color:new r.ThemeColor("gitlens.decorations.workspaceCurrentForegroundColor"),tooltip:""};return;case"repository":var v=e,y=0;let b=a(v);if(b?.workspace)switch(b?.state){case"open":return{badge:"●",color:new r.ThemeColor("gitlens.decorations.workspaceRepoOpenForegroundColor"),tooltip:""};case"missing":return{badge:"?",color:new r.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor"),tooltip:""}}return;case"status":var C=e,R=0;let k=a(C);switch(k?.status){case"cherry-pick":case"merge":case"rebase":case"revert":if(k?.conflicts)return{badge:"!",color:new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")};return{color:new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor")}}return;case"workspace":var S=e,P=0;let A=a(S);if(A?.current)return{badge:"●",color:new r.ThemeColor("gitlens.decorations.workspaceCurrentForegroundColor"),tooltip:""};return;case"worktree":var I=e,D=0;let _=a(I);return _?.missing?{badge:o.EO.Warning,color:new r.ThemeColor("gitlens.decorations.worktreeMissingForegroundColor"),tooltip:""}:_?.hasChanges?{badge:"●",color:new r.ThemeColor("gitlens.decorations.worktreeHasUncommittedChangesForegroundColor"),tooltip:"Has Uncommitted Changes"}:void 0}}(e,t)}};function n(e,t){let i=new URLSearchParams;return i.set("state",JSON.stringify(t)),r.Uri.parse(`gitlens-view://${e}?${i.toString()}`)}function a(e){let t=new URLSearchParams(e.query).get("state");if(null!=t)return JSON.parse(t)}},2320:(e,t,i)=>{i.d(t,{AL:()=>CancellationError,DD:()=>RequiresIntegrationError,HG:()=>RequestRateLimitError,LN:()=>RequestNotFoundError,ND:()=>ProviderNotFoundError,QI:()=>ProviderFetchError,R:()=>l,Uk:()=>AccessDeniedError,V9:()=>AIError,Vp:()=>RequestsAreBlockedTemporarilyError,Vq:()=>ProviderNotSupportedError,WT:()=>AuthenticationRequiredError,ax:()=>u,d0:()=>AINoRequestDataError,dU:()=>ExtensionNotFoundError,gK:()=>OpenVirtualRepositoryError,ly:()=>RequestGoneError,pf:()=>AccountValidationError,tk:()=>RequestClientError,ts:()=>RequestUnprocessableEntityError,v3:()=>AuthenticationError,zK:()=>c});var r,s,o,n=i(1398),a=i(9975);let AccessDeniedError=class AccessDeniedError extends Error{subscription;required;constructor(e,t){let i;super(e.account?.verified===!1?"Email verification required":null!=t&&(0,a.zx)(t)?"GitLens Pro required":"Plan required"),this.subscription=e,this.required=t,Error.captureStackTrace?.(this,AccessDeniedError)}};let AccountValidationError=class AccountValidationError extends Error{original;statusCode;statusText;constructor(e,t,i,r){super(e+=`; status=${i}: ${r}`),this.original=t,this.statusCode=i,this.statusText=r,Error.captureStackTrace?.(this,AccountValidationError)}};var l=((r=l||{})[r.UserDidNotConsent=1]="UserDidNotConsent",r[r.Unauthorized=2]="Unauthorized",r[r.Forbidden=3]="Forbidden",r);let AuthenticationError=class AuthenticationError extends Error{id;original;reason;constructor(e,t,i){let r,s;if(null==t)r=`Unable to get required authentication session for '${e}'`;else if("string"==typeof t)r=t,s=void 0;else switch(s=t){case 1:r=`'${e}' authentication is required for this operation`;break;case 2:r=`Your '${e}' credentials are either invalid or expired`;break;case 3:r=`Your '${e}' credentials do not have the required access`}super(r),this.id=e,this.original=i,this.reason=s,Error.captureStackTrace?.(this,AuthenticationError)}};let AuthenticationRequiredError=class AuthenticationRequiredError extends Error{constructor(){super("Authentication required"),Error.captureStackTrace?.(this,AuthenticationRequiredError)}};let CancellationError=class CancellationError extends n.CancellationError{constructor(e){super(),this.original=e,Error.captureStackTrace?.(this,CancellationError)}};let ExtensionNotFoundError=class ExtensionNotFoundError extends Error{constructor(e,t){super(`Unable to find the ${t} extension (${e}). Please ensure it is installed and enabled.`),this.extensionId=e,this.extensionName=t,Error.captureStackTrace?.(this,ExtensionNotFoundError)}};var u=((s=u||{})[s.RemoteHubApiNotFound=1]="RemoteHubApiNotFound",s[s.NotAGitHubRepository=2]="NotAGitHubRepository",s[s.GitHubAuthenticationNotFound=3]="GitHubAuthenticationNotFound",s[s.GitHubAuthenticationDenied=4]="GitHubAuthenticationDenied",s);let OpenVirtualRepositoryError=class OpenVirtualRepositoryError extends Error{original;reason;repoPath;constructor(e,t,i){let r,s;if(null==t)r=`Unable to open the virtual repository: ${e}`;else if("string"==typeof t)r=t,s=void 0;else switch(s=t,r=`Unable to open the virtual repository: ${e}; `,s){case 1:r+="Unable to get required api from the GitHub Repositories extension. Please ensure that the GitHub Repositories extension is installed and enabled";break;case 2:r+="Only GitHub repositories are supported currently";break;case 3:r+="Unable to get required GitHub authentication";break;case 4:r+="GitHub authentication is required"}super(r),this.original=i,this.reason=s,this.repoPath=e,Error.captureStackTrace?.(this,OpenVirtualRepositoryError)}};let ProviderFetchError=class ProviderFetchError extends Error{constructor(e,t,i){super(`${e} request failed: ${!t.ok?`(${t.status}) ${t.statusText}. `:""}${i?.length?i[0].message:""}`),this.response=t,Error.captureStackTrace?.(this,ProviderFetchError)}get status(){return this.response.status}get statusText(){return this.response.statusText}};let ProviderNotFoundError=class ProviderNotFoundError extends Error{constructor(e){super(`No provider registered for '${null==e?String(e):"string"==typeof e?e:e.toString(!0)}'`),Error.captureStackTrace?.(this,ProviderNotFoundError)}};let ProviderNotSupportedError=class ProviderNotSupportedError extends Error{constructor(e){super(`Action is not supported on the ${e} provider.`),Error.captureStackTrace?.(this,ProviderNotSupportedError)}};let RequestClientError=class RequestClientError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,RequestClientError)}};let RequestNotFoundError=class RequestNotFoundError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,RequestNotFoundError)}};let RequestRateLimitError=class RequestRateLimitError extends Error{constructor(e,t,i){super(e.message),this.original=e,this.token=t,this.resetAt=i,Error.captureStackTrace?.(this,RequestRateLimitError)}};let RequestGoneError=class RequestGoneError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,RequestGoneError)}};let RequestUnprocessableEntityError=class RequestUnprocessableEntityError extends Error{constructor(e){super(e.message),this.original=e,Error.captureStackTrace?.(this,RequestUnprocessableEntityError)}};let RequestsAreBlockedTemporarilyError=class RequestsAreBlockedTemporarilyError extends Error{constructor(){super("Requests are blocked"),Error.captureStackTrace?.(this,RequestsAreBlockedTemporarilyError)}};let RequiresIntegrationError=class RequiresIntegrationError extends Error{constructor(e){super(e),Error.captureStackTrace?.(this,RequiresIntegrationError)}};var c=((o=c||{})[o.DeniedByOrganization=0]="DeniedByOrganization",o[o.DeniedByUser=1]="DeniedByUser",o[o.NoEntitlement=2]="NoEntitlement",o[o.NoRequestData=3]="NoRequestData",o[o.RateLimitExceeded=4]="RateLimitExceeded",o[o.RateLimitOrFundsExceeded=5]="RateLimitOrFundsExceeded",o[o.RequestTooLarge=6]="RequestTooLarge",o[o.ModelNotSupported=7]="ModelNotSupported",o[o.ServiceCapacityExceeded=8]="ServiceCapacityExceeded",o[o.Unauthorized=9]="Unauthorized",o[o.UserQuotaExceeded=10]="UserQuotaExceeded",o);let AIError=class AIError extends Error{original;reason;constructor(e,t){let i;switch(e){case 2:i="You do not have the required entitlement to use this feature";break;case 6:i="The request is too large";break;case 10:i="You have exceeded your user token limit";break;case 4:i="Rate limit exceeded";break;case 5:i="Rate limit exceeded or your account is out of funds";break;case 8:i="Service capacity exceeded";break;case 3:i=t?.message??"No data was provided for the request";break;case 7:i="Model not supported for this request";break;case 9:i="You are not authorized to use the specified provider or model";break;case 0:i="Your organization has denied access to the specified provider or model";break;case 1:i="You have denied access to the specified provider or model";break;default:i=t?.message??"An unknown error occurred"}super(i),this.original=t,this.reason=e,Error.captureStackTrace?.(this,AIError)}};let AINoRequestDataError=class AINoRequestDataError extends AIError{constructor(e){super(3,e?Error(e):void 0),Error.captureStackTrace?.(this,AINoRequestDataError)}}},2356:(e,t,i)=>{i.d(t,{B9:()=>PullRequest,Q6:()=>f,c7:()=>y,dq:()=>m,e0:()=>v,gI:()=>w,r0:()=>g});var r,s,o,n,a,l=i(2099),u=i(8845),c=i(1555),h=Object.defineProperty,d=Object.getOwnPropertyDescriptor,p=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o),o};function g(e){return e instanceof PullRequest}let PullRequest=class PullRequest{constructor(e,t,i,r,s,o,n,a,l,u,c,h,d,p,g,m,f,w,v,y,b,C,R,k,S,P,A){this.provider=e,this.author=t,this.id=i,this.nodeId=r,this.title=s,this.url=o,this.repository=n,this.state=a,this.createdDate=l,this.updatedDate=u,this.closedDate=c,this.mergedDate=h,this.mergeableState=d,this.viewerCanUpdate=p,this.refs=g,this.isDraft=m,this.additions=f,this.deletions=w,this.commentsCount=v,this.thumbsUpCount=y,this.reviewDecision=b,this.reviewRequests=C,this.latestReviews=R,this.assignees=k,this.statusCheckRollupState=S,this.project=P,this.version=A}type="pullrequest";get closed(){return"closed"===this.state}get formattedDate(){return"absolute"===l.m.instance.PullRequestDateFormatting.dateStyle?this.formatDate(l.m.instance.PullRequestDateFormatting.dateFormat):this.formatDateFromNow()}formatDate(e){return(0,u.Yq)(this.mergedDate??this.closedDate??this.updatedDate,e??"MMMM Do, YYYY h:mma")}formatDateFromNow(){return(0,u.PI)(this.mergedDate??this.closedDate??this.updatedDate)}formatClosedDate(e){return null==this.closedDate?"":(0,u.Yq)(this.closedDate,e??"MMMM Do, YYYY h:mma")}formatClosedDateFromNow(){return null==this.closedDate?"":(0,u.PI)(this.closedDate)}formatMergedDate(e){return null==this.mergedDate?"":(0,u.Yq)(this.mergedDate,e??"MMMM Do, YYYY h:mma")??""}formatMergedDateFromNow(){return null==this.mergedDate?"":(0,u.PI)(this.mergedDate)}formatUpdatedDate(e){return(0,u.Yq)(this.updatedDate,e??"MMMM Do, YYYY h:mma")??""}formatUpdatedDateFromNow(){return(0,u.PI)(this.updatedDate)}};p([(0,c.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatDate",1),p([(0,c.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatClosedDate",1),p([(0,c.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatMergedDate",1),p([(0,c.B)(e=>e??"MMMM Do, YYYY h:mma")],PullRequest.prototype,"formatUpdatedDate",1);var m=((r=m||{}).Approved="Approved",r.ChangesRequested="ChangesRequested",r.ReviewRequired="ReviewRequired",r),f=((s=f||{}).Unknown="Unknown",s.Mergeable="Mergeable",s.Conflicting="Conflicting",s.FailingChecks="FailingChecks",s.BlockedByPolicy="BlockedByPolicy",s),w=((o=w||{}).Success="success",o.Pending="pending",o.Failed="failed",o),v=((n=v||{}).Merge="merge",n.Squash="squash",n.Rebase="rebase",n),y=((a=y||{}).Approved="APPROVED",a.ChangesRequested="CHANGES_REQUESTED",a.Commented="COMMENTED",a.Dismissed="DISMISSED",a.Pending="PENDING",a.ReviewRequested="REVIEW_REQUESTED",a)},2363:(e,t,i)=>{i.d(t,{e:()=>DraftNode});var r=i(1398),s=i(3037),o=i(2870),n=i(8845),a=i(5818);let DraftNode=class DraftNode extends a.eu{constructor(e,t,i,r){super("draft",e,t,i),this.parent=i,this.draft=r,this.updateContext({draft:r}),this._uniqueId=(0,a.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.getUrl()}getUrl(){return this.view.container.drafts.generateWebUrl(this.draft.id)}getChildren(){return[]}getTreeItem(){let e,t=this.draft.title??`Draft (${this.draft.id})`,i=new r.TreeItem(t,r.TreeItemCollapsibleState.None),l=o.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",u=this.draft.updatedAt.getTime()-this.draft.createdAt.getTime()>=3e4;i.id=this.id;let c=a.U0.Draft;return this.draft.isMine&&(c+="+mine"),i.contextValue=c,i.description=(0,n.PI)(this.draft.updatedAt),i.command={title:"Open",command:"gitlens.views.draft.open",arguments:[this]},this.view.config.avatars&&null!=this.draft.author&&(e=this.draft.author.avatarUri??(0,s.m_)(this.draft.author.email)),i.iconPath=e??new r.ThemeIcon("suggested_pr_change"===this.draft.type?"gitlens-code-suggestion":"cloud"),i.tooltip=new r.MarkdownString(`${t}${this.draft.description?`\\
${this.draft.description}`:""}

Created ${this.draft.author?.name?` by ${this.draft.author.name}`:""} ${(0,n.PI)(this.draft.createdAt)} &nbsp; _(${(0,n.Yq)(this.draft.createdAt,l)})_${u?` \\
Last updated ${(0,n.PI)(this.draft.updatedAt)} &nbsp; _(${(0,n.Yq)(this.draft.updatedAt,l)})_`:""}`),i}}},2476:(e,t,i)=>{i.d(t,{Ff:()=>o,cQ:()=>s,hd:()=>r});let r=globalThis.fetch;function s(e){}async function o(e,t){return t()}},2606:(e,t,i)=>{i.d(t,{a:()=>MergeConflictIncomingChangesNode});var r=i(1398),s=i(1182),o=i(2624),n=i(7660),a=i(2141),l=i(2870),u=i(5818),c=i(4484);let MergeConflictIncomingChangesNode=class MergeConflictIncomingChangesNode extends u.eu{constructor(e,t,i,r){super("conflict-incoming-changes",o.nk.fromFile(r,i.repoPath,i.HEAD.ref),e,t),this.parent=t,this.status=i,this.file=r}_commit;async getCommit(){if(null==this._commit){let e="rebase"===this.status.type?this.status.steps.current.commit?.ref:this.status.HEAD.ref;if(null==e)return;this._commit=this.view.container.git.commits(this.status.repoPath).getCommit(e)}return this._commit}getChildren(){return[]}async getTreeItem(){let e=await this.getCommit(),t=new r.TreeItem("Incoming changes",r.TreeItemCollapsibleState.None);return t.contextValue=u.U0.MergeConflictIncomingChanges,t.description=`${(0,n.M4)(this.status.incoming,{expand:!1,icon:!1})}${"rebase"===this.status.type?` (${(0,n.M4)(this.status.steps.current.commit,{expand:!1,icon:!1})})`:` (${(0,n.M4)(this.status.HEAD,{expand:!1,icon:!1})})`}`,t.iconPath=this.view.config.avatars?await e?.getAvatarUri({defaultStyle:l.H.get("defaultGravatarsStyle")})??new r.ThemeIcon("diff"):new r.ThemeIcon("diff"),t.command=this.getCommand(),t}getCommand(){return null==this.status.mergeBase?(0,a.Jl)("vscode.open","Open Revision",this.view.container.git.getRevisionUri(this.status.repoPath,this.status.HEAD.ref,this.file.path)):(0,a.gu)("gitlens.diffWith","Open Changes",{lhs:{sha:this.status.mergeBase,uri:o.nk.fromFile(this.file,this.status.repoPath,void 0,!0),title:`${this.file.path} (merge-base)`},rhs:{sha:this.status.HEAD.ref,uri:o.nk.fromFile(this.file,this.status.repoPath),title:`${this.file.path} (${null!=this.status.incoming?(0,n.M4)(this.status.incoming,{expand:!1,icon:!1}):"incoming"})`},repoPath:this.status.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getTooltip(e){let t=await this.getCommit();if(e.isCancellationRequested)return;let i=new r.MarkdownString(`Incoming changes from ${(0,n.M4)(this.status.incoming,{label:!1})}\\
$(file)${s.EO.Space}${this.file.path}`,!0);if(null==t)return i.appendMarkdown("rebase"===this.status.type?`

${(0,n.M4)(this.status.steps.current.commit,{capitalize:!0,label:!1})}`:`

${(0,n.M4)(this.status.HEAD,{capitalize:!0,label:!1})}`),i;let o=await (0,c.m)(this.view.container,t,this.file,this.view.config.formats.commits.tooltipWithStatus,{cancellation:e});return i.appendMarkdown(`

${o}`),i.isTrusted=!0,i}}},2624:(e,t,i)=>{i.d(t,{Bd:()=>R,nk:()=>C,t5:()=>k});var r=i(1398),s=i(4493),o=i(1182),n=i(2099),a=i(7062),l=i(745),u=i(4152),c=i(1555),h=i(6206),d=i(9686),p=i(811),g=i(9823),m=i(6770),f=i(5962),w=Object.defineProperty,v=Object.getOwnPropertyDescriptor,y=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?v(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&w(t,i,o),o};let b=class _GitUri extends r.Uri{repoPath;sha;constructor(e,t){let i;if(null==e)return void super({scheme:"unknown"});if(e.scheme===o.xB.GitLens){let i=e.path,r=(0,g.V3)(e.authority);null==r.uncPath||i.startsWith(r.uncPath)||(i=`${r.uncPath}${e.path}`),super({scheme:e.scheme,authority:e.authority,path:i,query:e.query,fragment:e.fragment}),this.repoPath=r.repoPath;let s=r.ref;null!=t&&"string"!=typeof t&&(s=t.sha),(!(0,f._k)(s)||(0,f.KH)(s))&&(this.sha=s);return}if((0,u.QK)(e)){super(e);let[,i,r]=e.path.split("/",3);this.repoPath=e.with({path:`/${i}/${r}`}).toString();let s=(0,g.JG)(e.authority),o=s.metadata?.ref?.id;null!=t&&"string"!=typeof t&&(o=t.sha),o&&(!(0,f._k)(o)||(0,f.KH)(o))&&(this.sha=o);return}if(void 0===t)return void super(e);if("string"==typeof t){super(e),this.repoPath=t;return}let r=e.authority,s=(0,d.Fd)(n.m.instance.git.getAbsoluteUri(t.fileName??e.fsPath,t.repoPath).fsPath);if(47===s.charCodeAt(0)&&47===s.charCodeAt(1)){let e=s.indexOf("/",2);-1===e?(r=s.substring(2),s="/"):(r=s.substring(2,e),s=s.substring(e)||"/")}switch(e.scheme){case"https":case"http":case"file":i=s?47!==s.charCodeAt(0)?`/${s}`:s:"/";break;default:i=47!==s.charCodeAt(0)?`/${s}`:s}super({scheme:e.scheme,authority:r,path:i,query:e.query,fragment:e.fragment}),this.repoPath=t.repoPath,(!(0,f._k)(t.sha)||(0,f.KH)(t.sha))&&(this.sha=t.sha)}get directory(){return(0,l.A3)(this.relativePath)}get fileName(){return(0,d.P8)(this.relativePath)}get isUncommitted(){return(0,f._k)(this.sha)}get isUncommittedStaged(){return(0,f.KH)(this.sha)}get relativePath(){return(0,l.Uf)((0,l.Sp)(this.fsPath),this.repoPath)[0]}get shortSha(){return(0,f.pV)(this.sha)}documentUri(){return r.Uri.from({scheme:this.scheme,authority:this.authority,path:this.path,query:this.query,fragment:this.fragment})}equals(e){return!!(0,p.k)(this,e)&&this.sha===(k(e)?e.sha:void 0)}getFormattedFileName(e){return(0,a.j)(this.fsPath,{...e,fileOnly:!0})}toFileUri(){return n.m.instance.git.getAbsoluteUri(this.fsPath,this.repoPath)}static fromFile(e,t,i,r=!1){let s=n.m.instance.git.getAbsoluteUri("string"==typeof e?e:r&&e.originalPath||e.path,t);return i?new _GitUri(s,{repoPath:t,sha:"string"!=typeof e&&"?"===e.status?`${i}^3`:i}):new _GitUri(s,t)}static fromRepoPath(e,t){return t?new _GitUri(n.m.instance.git.getAbsoluteUri(e,e),{repoPath:e,sha:t}):new _GitUri(n.m.instance.git.getAbsoluteUri(e,e),e)}static fromRevisionUri(e){return new _GitUri(e)}static async fromUri(e){if(k(e))return e;if(!n.m.instance.git.isTrackable(e)||e.scheme===o.xB.GitLens)return new _GitUri(e);if(e.scheme===o.xB.Git){let t=(0,s.o)(e);if(t?.path){let i,s=await n.m.instance.git.getOrOpenRepository(r.Uri.file(t.path));if(null==s)throw Error(`Unable to find repository for uri=${r.Uri.file(t.path).toString(!0)}`);switch(t.ref){case"":case"~":i=m.id;break;case null:i=void 0;break;default:i=t.ref}return new _GitUri(e,{fileName:t.path,repoPath:s.path,sha:i})}}if(e.scheme===o.xB.PRs){let t;try{t=JSON.parse(e.query)}catch{}if(t?.fileName){let i=await n.m.instance.git.getOrOpenRepository(e);if(null==i)throw Error(`Unable to find repository for uri=${r.Uri.file(t.fileName).toString(!0)}`);return new _GitUri(e,{fileName:t.fileName,repoPath:i.path,sha:t.isBase?t.baseCommit:t.headCommit})}}let t=await n.m.instance.git.getOrOpenRepository(e);return new _GitUri(e,t?.path)}};y([(0,c.B)()],b.prototype,"directory",1),y([(0,c.B)()],b.prototype,"fileName",1),y([(0,c.B)()],b.prototype,"isUncommitted",1),y([(0,c.B)()],b.prototype,"isUncommittedStaged",1),y([(0,c.B)()],b.prototype,"relativePath",1),y([(0,c.B)()],b.prototype,"shortSha",1),y([(0,c.B)()],b.prototype,"documentUri",1),y([(0,c.B)()],b.prototype,"toFileUri",1),y([(0,h.Yz)({exit:!0})],b,"fromUri",1);let C=b,R=Object.freeze(new C);function k(e){return e instanceof C}},2631:(e,t,i)=>{i.d(t,{W:()=>d});var r=i(1398),s=i(9679),o=i(1182),n=i(4168),a=i(9013),l=i(4692),u=i(5539),c=i(7864),h=i(4808);async function d(e,t,i,d,p){let g=(0,c.v6)(),m=[];try{var f,w,v;let c=r.window.createQuickPick();m.push(c,c.onDidHide(()=>g.fulfill(void 0)),c.onDidAccept(()=>c.busy?void 0:g.fulfill(c.selectedItems.map(e=>e.item))),c.onDidChangeSelection((0,u.s)(e=>{if(!c.canSelectMany||c.busy)return;let t=!1;for(let i of c.items){let r=e.includes(i);(i.picked!==r||i.alwaysShow!==r)&&(i.alwaysShow=i.picked=r,t=!0)}t&&(c.items=(0,a.tB)([...c.items]),c.selectedItems=e)},10)),c.onDidTriggerButton(e=>{e===s.tH&&(c.canSelectMany?c.selectedItems=[]:g.fulfill([]))})),c.ignoreFocusOut=p?.ignoreFocusOut??(0,l.dW)(),c.title=p?.appendReposToTitle?(f=e,w=i,v=t,f.git.openRepositoryCount<=1?w:`${w}${(0,h.xv)(`${(0,h.eV)(o.EO.Dot,2,2)}${v.formattedName}`,o.uR-w.length)}`):i,c.placeholder=d,c.matchOnDescription=!0,c.matchOnDetail=!0,c.canSelectMany=p?.multiselect??!0,c.buttons=p?.clearButton?[s.tH]:[],c.busy=!0,c.show();let y=await t.git.contributors().getContributors();if(!g.pending)return;let b=await Promise.all(y.map(e=>(0,n.N)(e,p?.picked?.(e)??!1)));if(!g.pending)return;return c.items=(0,a.tB)(b),c.canSelectMany?c.selectedItems=b.filter(e=>e.picked):c.activeItems=b.filter(e=>e.picked),c.busy=!1,await g.promise}finally{m.forEach(e=>void e.dispose())}}},2692:(e,t,i)=>{i.d(t,{Id:()=>S,Dv:()=>P,Do:()=>A,WJ:()=>I,ql:()=>D});var r=i(1398),s=i(7808),o=i(2141),n=i(9615),a=i(6045),l=i(6206),u=i(4941),c=i(1003),h=i(7864),d=i(8178),p=i(486),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),w=e=>{throw TypeError(e)},v=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o},y=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&w("Object expected"),i&&(r=t[f("asyncDispose")]),void 0===r&&(r=t[f("dispose")],i&&(s=r)),"function"!=typeof r&&w("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},b=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let C=(0,a.N)(),R=new TextDecoder("utf8"),k=new TextEncoder,S=class{constructor(e,t,i,s,o,n){this.container=e,this._commandRegistrar=t,this.descriptor=i,this.instanceId=s,this.parent=o,this.id=i.id,this.webview=o.webview;let a="onDidChangeViewState"in o;this._isInEditor=a,this._originalTitle=i.title,o.title=i.title,this._initializing=n(e,this).then(e=>{if(this.provider=e,this._disposed)return void e.dispose();this.disposable=r.Disposable.from(this._onDidDispose,r.window.onDidChangeWindowState(this.onWindowStateChanged,this),o.webview.onDidReceiveMessage(this.onMessageReceivedCore,this),a?o.onDidChangeViewState(({webviewPanel:e})=>{let{visible:t,active:i,viewColumn:r}=e;this.onParentVisibilityChanged(t,i,null!=this.viewColumn&&this.viewColumn!==r),this._viewColumn=r}):o.onDidChangeVisibility(()=>this.onParentVisibilityChanged(this.visible,this.active)),o.onDidDispose(this.onParentDisposed,this),...this.provider.registerCommands?.()??[],this.provider)})}static async create(e,t,i,r,s,o){let n=new S(e,t,i,r,s,o);return await n.initialize(),n}_onDidDispose=new r.EventEmitter;get onDidDispose(){return this._onDidDispose.event}id;_ready=!1;get ready(){return this._ready}cancellation;disposable;_isInEditor;provider;webview;_viewColumn;get viewColumn(){return this._viewColumn}_disposed=!1;dispose(){this._disposed=!0,this.cancellation?.cancel(),this.cancellation?.dispose(),A(this.descriptor.contextKeyPrefix),this.provider?.onFocusChanged?.(!1),this.provider?.onVisibilityChanged?.(!1),this._ready=!1,this._onDidDispose.fire(),this.disposable?.dispose()}registerWebviewCommand(e,t){return this._commandRegistrar.registerCommand(this.provider,this.id,this.instanceId,e,t)}_initializing;async initialize(){null!=this._initializing&&(await this._initializing,this._initializing=void 0)}getTelemetryContext(){return{"context.webview.id":this.id,"context.webview.type":this.descriptor.type,"context.webview.instanceId":this.instanceId,"context.webview.host":this.isHost("editor")?"editor":"view"}}isHost(e){return"editor"===e?this._isInEditor:!this._isInEditor}get active(){return"active"in this.parent?!this._disposed&&this.parent.active:!this._disposed&&void 0}get badge(){return"badge"in this.parent?this.parent.badge:void 0}set badge(e){if("badge"in this.parent)this.parent.badge=e;else throw Error("The 'badge' property not supported on Webview parent")}_description;get description(){return"description"in this.parent?this.parent.description:this._description}set description(e){"description"in this.parent&&(this.parent.description=e),this._description=e}_originalTitle;get originalTitle(){return this._originalTitle}get title(){return this.parent.title??this._originalTitle}set title(e){this.parent.title=e}get visible(){return!this._disposed&&this.parent.visible}canReuseInstance(e,...t){if(this.isHost("editor"))return(e?.column==null||e.column===this.parent.viewColumn)&&this.provider.canReuseInstance?.(...t)}getSplitArgs(){return this.isHost("view")?[]:this.provider.getSplitArgs?.()??[]}async show(e,t,...i){var s=[];try{let n;null==t&&(t={});let a={...this.getTelemetryContext(),loading:e},l=y(s,new d.e(`WebviewController.show(${this.id})`)),u=await this.provider.onShowing?.(e,t,...i);if(null!=u){let e;if([e,n]=u,!1===e)return void this.container.telemetry.sendEvent(`${this.descriptor.type}/showAborted`,{...a,duration:l.elapsed()})}e&&(this.cancellation??=new r.CancellationTokenSource,this.webview.html=await this.getHtml(this.webview)),this.isHost("editor")?e||this.parent.reveal(t.column??this.parent.viewColumn??this.descriptor.column??r.ViewColumn.Beside,t.preserveFocus??!1):this.isHost("view")&&(await (0,o.S4)(`${this.id}.focus`,t),e&&this.provider.onVisibilityChanged?.(!0)),I(this.descriptor.contextKeyPrefix),this.container.telemetry.sendEvent(`${this.descriptor.type}/shown`,{...a,duration:l.elapsed(),...n})}catch(e){var n=e,a=!0}finally{b(s,n,a)}}get baseWebviewState(){return{webviewId:this.id,webviewInstanceId:this.instanceId,timestamp:Date.now()}}_cspNonce=(0,s.m9)();get cspNonce(){return this._cspNonce}asWebviewUri(e){return this.webview.asWebviewUri(e)}async refresh(e){this.cancellation?.cancel(),this.cancellation=new r.CancellationTokenSource,e&&this.clearPendingIpcNotifications(),this.provider.onRefresh?.(e);let t=this._ready;this._ready=!1;let i=await this.getHtml(this.webview);if(e&&(this.webview.html=""),this.webview.html===i){t&&(this._ready=!0);return}this.webview.html=i}onParentDisposed(){this.dispose()}async onMessageReceivedCore(e){if(null!=e)switch(!0){case p.Ge.is(e):this._ready=!0,this.sendPendingIpcNotifications(),this.provider.onReady?.();break;case p.pY.is(e):this.onViewFocusChanged(e.params);break;case p.Vw.is(e):null!=e.params.args?(0,o.RS)(e.params.command,...e.params.args):(0,o.RS)(e.params.command);break;case p.OG.is(e):{let t=await this.container.subscription.getSubscription(),i=await this.container.productConfig.getApplicablePromo(t.state,e.params.location);this.respond(p.OG,e,{promo:i});break}case p.j0.is(e):this.container.telemetry.sendEvent(e.params.name,{...e.params.data,...this.provider.getTelemetryContext?.()??this.getTelemetryContext()},e.params.source);break;default:this.provider.onMessageReceived?.(e)}}onViewFocusChanged(e){I(this.descriptor.contextKeyPrefix),this.handleFocusChanged(e.focused)}onParentVisibilityChanged(e,t,i){this.descriptor.webviewHostOptions?.retainContextWhenHidden!==!0?e?this._ready?this.sendPendingIpcNotifications():null!=this.provider.onReloaded?(this.clearPendingIpcNotifications(),this.provider.onReloaded()):this.refresh():this._ready=!1:i&&this.refresh(),e?(this.container.usage.track(`${this.descriptor.trackingFeature}:shown`).catch(),I(this.descriptor.contextKeyPrefix),null!=t&&(this.provider.onActiveChanged?.(t),t||this.handleFocusChanged(!1))):(A(this.descriptor.contextKeyPrefix),null!=t&&this.provider.onActiveChanged?.(!1),this.handleFocusChanged(!1)),this.provider.onVisibilityChanged?.(e)}onWindowStateChanged(e){this.visible&&(this.notify(p.RR,{focused:e.focused}),this.provider.onWindowFocusChanged?.(e.focused))}handleFocusChanged(e){this.notify(p.ct,{focused:e}),this.provider.onFocusChanged?.(e)}getRootUri(){return this.container.context.extensionUri}_webRoot;getWebRoot(){return null==this._webRoot&&(this._webRoot=this.asWebviewUri(this.getWebRootUri()).toString()),this._webRoot}_webRootUri;getWebRootUri(){return null==this._webRootUri&&(this._webRootUri=r.Uri.joinPath(this.getRootUri(),"dist","webviews")),this._webRootUri}async getHtml(e){let t=this.getWebRootUri(),i=r.Uri.joinPath(t,this.descriptor.fileName),[s,o,n,a,l]=await Promise.all([r.workspace.fs.readFile(i),this.provider.includeBootstrap?.(),this.provider.includeHead?.(),this.provider.includeBody?.(),this.provider.includeEndOfBody?.()]);return this.replacePromisesWithIpcPromises(o),P(R.decode(s),this.id,this.instanceId,e.cspSource,this._cspNonce,this.asWebviewUri(this.getRootUri()).toString(),this.getWebRoot(),this.isHost("editor")?"editor":"view",o,n,a,l)}nextIpcId(){return`host:${C.next()}`}async notify(e,t,i){let r;if(this.replacePromisesWithIpcPromises(t),e.pack&&null!=t){let i=(0,d.u)((0,c.jr)(`${(0,u.zu)(this)}.notify serializing msg=${e.method}`,!0),{log:!1,logLevel:"debug"});r=k.encode(JSON.stringify(t)),i?.stop()}let s={id:this.nextIpcId(),scope:e.scope,method:e.method,params:r??t,packed:null!=r,completionId:i},o=await this.postMessage(s);return o?this._pendingIpcNotifications.clear():e===p.Fh?this._pendingIpcPromiseNotifications.add({msg:s,timestamp:Date.now()}):this.addPendingIpcNotificationCore(e,s),o}respond(e,t,i){return this.notify(e.response,i,t.completionId)}replacePromisesWithIpcPromises(e){let t=[];if(this.replacePromisesWithIpcPromisesCore(e,t),0===t.length)return;let i=this.cancellation?.token;queueMicrotask(()=>{for(let[e,r]of t)e.then(e=>{if(!i?.isCancellationRequested)return this.notify(p.Fh,{status:"fulfilled",value:e},r.id)},e=>{if(!i?.isCancellationRequested)return this.notify(p.Fh,{status:"rejected",reason:e},r.id)})})}replacePromisesWithIpcPromisesCore(e,t){if(null!=e&&"object"==typeof e)for(let i in e){let r=e[i];if(r instanceof Promise){let s={__ipc:"promise",id:this.nextIpcId(),method:p.Fh.method};e[i]=s,t.push([r,s])}this.replacePromisesWithIpcPromisesCore(r,t)}}async postMessage(e){let t,i;if(!this._ready)return Promise.resolve(!1);let s=(0,c.dQ)(),o=Promise.race([this.webview.postMessage(e).then(e=>(clearTimeout(t),e),e=>(clearTimeout(t),u.Vy.error(e,s),!1)),new Promise(e=>{t=setTimeout(()=>{(0,c.TT)(s,void 0,"TIMEDOUT"),e(!1)},3e4)})]);if(this.isHost("view")){let e=await (0,h.wW)(o,void 0,100);i=e.paused?await r.window.withProgress({location:{viewId:this.id}},()=>e.value):e.value}else i=await o;return i}_pendingIpcNotifications=new Map;_pendingIpcPromiseNotifications=new Set;addPendingIpcNotification(e,t,i){this.addPendingIpcNotificationCore(e,t.get(e)?.bind(i))}addPendingIpcNotificationCore(e,t){e.reset&&this._pendingIpcNotifications.clear(),null!=t&&this._pendingIpcNotifications.set(e,{msg:t,timestamp:Date.now()})}clearPendingIpcNotifications(){this._pendingIpcNotifications.clear()}sendPendingIpcNotifications(){if(!this._ready||0===this._pendingIpcNotifications.size&&0===this._pendingIpcPromiseNotifications.size)return;let e=[...this._pendingIpcNotifications.values(),...this._pendingIpcPromiseNotifications.values()].sort((e,t)=>e.timestamp-t.timestamp);for(let{msg:t}of(this._pendingIpcNotifications.clear(),this._pendingIpcPromiseNotifications.clear(),e.values()))"function"==typeof t?t():this.postMessage(t)}};function P(e,t,i,r,s,o,n,a,l,u,c,h){return e.replace(/#{(head|body|endOfBody|webviewId|webviewInstanceId|placement|cspSource|cspNonce|root|webroot|state)}/g,(e,d)=>{switch(d){case"head":return u??"";case"body":return c??"";case"state":return null!=l?JSON.stringify(l).replace(/"/g,"&quot;"):"";case"endOfBody":return`${null!=l?`<script type="text/javascript" nonce="${s}">window.bootstrap=${JSON.stringify(l)};</script>`:""}${h??""}`;case"webviewId":return t;case"webviewInstanceId":return i??"";case"placement":return a;case"cspSource":return r;case"cspNonce":return s;case"root":return o;case"webroot":return n;default:return""}})}function A(e){(0,n.o)(`${e}:visible`,!1)}function I(e){(0,n.o)(`${e}:visible`,!0)}function D(e,t,i,s=!1){let o=!1;for(let[n,a]of Object.entries(i)){let i=e[n];!s&&(i instanceof r.Uri||a instanceof r.Uri)&&i?.toString()===a?.toString()||(s||i!==a||void 0===a&&!(n in e)||null!=t&&n in t)&&(null==t&&(t={}),t[n]=a,o=!0)}return[o,t]}v([(0,l.Yz)({args:!1})],S.prototype,"show",1),v([(0,l.Yz)()],S.prototype,"refresh",1),v([(0,l.Yz)()],S.prototype,"onParentDisposed",1),v([(0,l.Yz)({args:{0:e=>null!=e?`${e.id}, method=${e.method}`:"<undefined>"}})],S.prototype,"onMessageReceivedCore",1),v([(0,l.Yz)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],S.prototype,"onViewFocusChanged",1),v([(0,l.Yz)()],S.prototype,"onParentVisibilityChanged",1),v([(e,t,i)=>{let r;if("function"==typeof i.value?r=i.value:"function"==typeof i.get&&(r=i.get),void 0===r)throw Error("Not supported");let s=`$sequentialize$${t}`;i.value=function(...e){Object.prototype.hasOwnProperty.call(this,s)||Object.defineProperty(this,s,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let t=this[s],i=async()=>await r.apply(this,e);return t=null==t?i():t.then(i,i),this[s]=t,t}},(0,l.Yz)({args:!1,enter:e=>`(${e.id}|${e.method}${e.completionId?`+${e.completionId}`:""})`})],S.prototype,"postMessage",1),S=v([(0,l.Is)(e=>`WebviewController(${e.id}${null!=e.instanceId?`|${e.instanceId}`:""})`)],S)},2812:(e,t,i)=>{i.d(t,{Ay:()=>u,Bo:()=>l,E$:()=>a,EG:()=>c,Kl:()=>n,eC:()=>s,x1:()=>o});var r=i(9091);function s(e){return null==e?void 0:Array.isArray(e)?e:[e]}function o(e,t){let i=0;return e.reduce((e,r)=>{let s=t(r,i++);return null!=s&&e.push(s),e},[])}function n(e,t){let i=e.length;for(;i--;)if(t(e[i],i,e))return i;return -1}function a(e,t){let i=[],r=e.length;e:for(let s of e[0]){let o=r-1;for(;o--;)if(!e[o+1].some(e=>t(e,s)))break e;i.some(e=>t(e,s))||i.push(s)}return i}function l(e){return"string"==typeof e[0]}function u(e,t,i,r=!1,s){let o={name:"",relativePath:"",children:new Map,descendants:[]},n=e.reduce((e,r)=>{let s=e,o="";for(let e of t(r)){o=i(o,e),void 0===s.children&&(s.children=new Map);let t=s.children.get(e);void 0===t&&(t={name:e,relativePath:o,parent:s,children:void 0,descendants:void 0},s.children.set(e,t)),void 0===s.descendants&&(s.descendants=[]),s.descendants.push(r),s=t}return s.value=r,e},o);return r&&(n=function e(t,i,r=!0,s){if(void 0===t.children)return t;let o=[...t.children.values()];for(let t of o)e(t,i,!1,s);if(!r&&1===o.length){let e=o[0];(void 0===e.value||s?.(e.value))&&(t.name=i(t.name,e.name),t.relativePath=e.relativePath,t.children=e.children,t.descendants=e.descendants,t.value=e.value)}return t}(n,i,!0,s)),n}function c(e,t){return(0,r.fj)(new Set(e),t)}},2870:(e,t,i)=>{i.d(t,{H:()=>n,V:()=>Configuration});var r=i(1398),s=i(1182),o=i(9638);let Configuration=class Configuration{static configure(e){e.subscriptions.push(r.workspace.onDidChangeConfiguration(n.onConfigurationChanged,n))}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeAny=new r.EventEmitter;get onDidChangeAny(){return this._onDidChangeAny.event}onConfigurationChanged(e){this._onDidChangeAny.fire(e),e.affectsConfiguration(s.Od)&&(this._overrides?.onDidChange!=null&&(e=this._overrides.onDidChange(e)),this._onDidChange.fire(e))}_overrides;dispose(){this._onDidChange.dispose(),this._onDidChangeAny.dispose()}applyOverrides(e){this._overrides=e}clearOverrides(){null!=this._overrides&&(this._overrides.get=void 0,this._overrides.getAll=void 0,queueMicrotask(()=>this._overrides=void 0))}get(e,t,i,o){let n=void 0===i?r.workspace.getConfiguration(s.Od,t).get(e):r.workspace.getConfiguration(s.Od,t).get(e,i);return o||this._overrides?.get==null?n:this._overrides.get(e,n)}getAll(e){let t=r.workspace.getConfiguration().get(s.Od);return e||this._overrides?.getAll==null?t:this._overrides.getAll(t)}getAny(e,t,i){return void 0===i?r.workspace.getConfiguration(void 0,t).get(e):r.workspace.getConfiguration(void 0,t).get(e,i)}getCore(e,t,i){return void 0===i?r.workspace.getConfiguration(void 0,t).get(e):r.workspace.getConfiguration(void 0,t).get(e,i)}changed(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(`${s.Od}.${t}`,i)):e.affectsConfiguration(`${s.Od}.${t}`,i))}changedAny(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(t,i)):e.affectsConfiguration(t,i))}changedCore(e,t,i){return null==e||(Array.isArray(t)?t.some(t=>e.affectsConfiguration(t,i)):e.affectsConfiguration(t,i))}inspect(e,t){return r.workspace.getConfiguration(s.Od,t).inspect(void 0===e?s.Od:e)}inspectAny(e,t){return r.workspace.getConfiguration(void 0,t).inspect(e)}inspectCore(e,t){return r.workspace.getConfiguration(void 0,t).inspect(e)}isUnset(e,t){let i=this.inspect(e,t);return void 0===i.workspaceFolderValue&&void 0===i.workspaceValue&&void 0===i.globalValue}async migrate(e,t,i){let s=this.inspect(e);if(void 0===s)return!1;let o=!1;return void 0!==s.globalValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.globalValue):s.globalValue,r.ConfigurationTarget.Global),o=!0),void 0!==s.workspaceValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceValue):s.workspaceValue,r.ConfigurationTarget.Workspace),o=!0),void 0!==s.workspaceFolderValue&&(await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceFolderValue):s.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder),o=!0),o||void 0===i.fallbackValue||(await this.update(t,i.fallbackValue,r.ConfigurationTarget.Global),o=!0),o}async migrateIfMissing(e,t,i){let s=this.inspect(e);if(void 0===s)return;let o=this.inspect(t);void 0!==s.globalValue&&o?.globalValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.globalValue):s.globalValue,r.ConfigurationTarget.Global),void 0!==s.workspaceValue&&o?.workspaceValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceValue):s.workspaceValue,r.ConfigurationTarget.Workspace),void 0!==s.workspaceFolderValue&&o?.workspaceFolderValue===void 0&&await this.update(t,null!=i.migrationFn?i.migrationFn(s.workspaceFolderValue):s.workspaceFolderValue,r.ConfigurationTarget.WorkspaceFolder)}matches(e,t,i){return e===t}name(e){return e}update(e,t,i){return r.workspace.getConfiguration(s.Od).update(e,t,i)}updateAny(e,t,i,s){return r.workspace.getConfiguration(void 0,i===r.ConfigurationTarget.Global?void 0:s).update(e,t,i)}updateEffective(e,t){let i=this.inspect(e);return void 0!==i.workspaceFolderValue?t===i.workspaceFolderValue?Promise.resolve(void 0):this.update(e,t,r.ConfigurationTarget.WorkspaceFolder):void 0!==i.workspaceValue?t===i.workspaceValue?Promise.resolve(void 0):this.update(e,t,r.ConfigurationTarget.Workspace):i.globalValue===t||void 0===i.globalValue&&t===i.defaultValue?Promise.resolve(void 0):this.update(e,(0,o.t7)(t,i.defaultValue)?void 0:t,r.ConfigurationTarget.Global)}};let n=new Configuration},2919:(e,t,i)=>{i.d(t,{PB:()=>Repositories,dX:()=>u});var r=i(6741),s=i(1182),o=i(9823),n=i(3553),a=i(9686),l=i(669);function u(e){let{path:t}=c(e);return t}function c(e){let t;switch(e.scheme.toLowerCase()){case s.xB.File:return{path:t=(0,a.Fd)(e.fsPath),ignoreCase:!r.j9};case s.xB.Git:return{path:t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!r.j9};case s.xB.GitLens:{t=e.path;let i=(0,o.V3)(e.authority);return null==i.uncPath||t.startsWith(i.uncPath)||(t=`${i.uncPath}${e.path}`),{path:t=47===t.charCodeAt(t.length-1)?t.slice(1,-1):t.startsWith("//")?t:t.slice(1),ignoreCase:!r.j9}}case s.xB.Virtual:case s.xB.GitHub:{t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1);let i=e.authority?.split("+",1)[0];return{path:i?`${i}/${t}`:t,ignoreCase:!1}}case s.xB.Vsls:case s.xB.VslsScc:return{path:t=47===(t=(0,n.EL)(e.path)).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!1};case s.xB.PRs:{t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1);let i=e.authority?.split("+",1)[0];if(i===s.xB.GitHub)return{path:i?`${i}/${t}`:t,ignoreCase:!1};return{path:t,ignoreCase:!r.j9}}default:return{path:t=47===(t=e.path).charCodeAt(t.length-1)?t.slice(1,-1):t.slice(1),ignoreCase:!1}}}let Repositories=class Repositories{_trie;_count=0;constructor(){this._trie=new l.F6(c)}get count(){return this._count}add(e){let t=this._trie.set(e.uri,e);return t&&this._count++,t}clear(){this._count=0,this._trie.clear()}forEach(e,t){for(let i of this._trie.getDescendants())e.call(t,i)}get(e){return this._trie.get(e)}getClosest(e){return this._trie.getClosest(e)}has(e){return this._trie.has(e)}remove(e,t=!0){let i=this._trie.delete(e,t);return i&&this._count--,i}values(){return this._trie.getDescendants()}}},2949:(e,t,i)=>{i.r(t),i.d(t,{AzureDevOpsAuthenticationProvider:()=>AzureDevOpsAuthenticationProvider});var r=i(1849),s=i(8576);let AzureDevOpsAuthenticationProvider=class AzureDevOpsAuthenticationProvider extends s.DP{get authProviderId(){return r.Q7.AzureDevOps}}},3037:(e,t,i)=>{let r,s;i.d(t,{A0:()=>w,H3:()=>T,ML:()=>I,Qw:()=>E,Sk:()=>$,m_:()=>C,qJ:()=>R});var o=i(1398),n=i(7808),a=i(2099),l=i(5225),u=i(2870),c=i(9615),h=i(5539),d=i(9091),p=i(4808);let g=0x40000000-1,m=new Map,f=new o.EventEmitter;f.event((0,h.s)(()=>{let e=null!=r?[...(0,d.x1)(r,([e,t])=>null!=t.uri?[e,{uri:t.uri.toString(),timestamp:t.timestamp}]:void 0)]:void 0;a.m.instance.storage.store("avatars",e).catch()},1e3));let w=f.event,v="00000000000000000000000000000000",y=new Map,b=[6048e5,6e4,3e5,6e5,36e5,864e5,6048e5];function C(e,t,i){return k(e,t,i)}function R(e,t){return k(e,void 0,{...t,cached:!0})}function k(e,t,i){P(r);let s=(i?.size??16)*2;if(!e){let e=S(`${v}:${s}`,void 0,s,v,i?.defaultStyle);return e.uri??e.fallback}let o=(0,n.Fx)(e.trim().toLowerCase()),a=`${o}:${s}`,l=S(a,e,s,o,i?.defaultStyle);if(null!=l.uri)return l.uri;if(!i?.cached&&null!=t&&(0,c.SD)("gitlens:repos:withHostingIntegrationsConnected")?.includes("string"==typeof t?t:t.repoPath)){var u;let i=m.get(a);return null==i&&(u=l,Date.now()>=u.timestamp+b[Math.min(u.retries,b.length-1)])&&(i=D(l,a,e,t,{size:s}).then(e=>e??l.uri??l.fallback),m.set(a,i.finally(()=>m.delete(a)))),i??l.fallback}return i?.cached?l.uri:l.uri??l.fallback}function S(e,t,i,s,n){let a=r.get(e);return null==a?(a={uri:null!=t&&0!==t.length?function(e,t=16){let i=(0,l.P)(e);if(null!=i&&(0,p.Q_)(i.authority,"github.com"))return o.Uri.parse(`https://avatars.githubusercontent.com/${i.userId?`u/${i.userId}`:i.login}?size=${t}`)}(t,i):void 0,fallback:A(s,i,n),timestamp:0,retries:0},r.set(e,a)):null==a.fallback&&(a.fallback=A(s,i,n)),a}function P(e){null==e&&(r=new Map(a.m.instance.storage.get("avatars")?.map(([e,t])=>[e,{uri:o.Uri.parse(t.uri),timestamp:t.timestamp,retries:0}])))}function A(e,t,i){return o.Uri.parse(`https://www.gravatar.com/avatar/${e}?s=${t}&d=${i??(null==s&&(s=u.H.get("defaultGravatarsStyle",void 0,"robohash")),s)}`)}function I(e,t,i){return A((0,n.Fx)(e.trim().toLowerCase()),t,i)}async function D(e,t,i,s,{size:l=16}={}){P(r);try{let t;if("string"!=typeof s){let e=await a.m.instance.git.remotes(s.repoPath).getBestRemoteWithIntegration();e?.hasIntegration()&&(t=await (await e.getIntegration())?.getAccountForCommit(e.provider.repoDesc,s.ref,{avatarSize:l}))}if(t?.avatarUrl==null){e.uri=void 0,e.timestamp=g,e.retries=0;return}return e.uri=o.Uri.parse(t.avatarUrl),e.timestamp=Date.now(),e.retries=0,null!=t.email&&(0,p.Q_)(i,t.email)&&r.set(`${(0,n.Fx)(t.email.trim().toLowerCase())}:${l}`,{...e}),f.fire({email:i}),e.uri}catch{e.uri=void 0,e.timestamp=Date.now(),e.retries++;return}}let _=new Map([["online","#28ca42"],["away","#cecece"],["busy","#ca5628"],["dnd","#ca5628"],["offline","#cecece"]]);function $(e){let t=y.get(e);if(null==t){let i=(0,p.K3)(`<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="4" height="16" viewBox="0 0 4 16">
	<circle cx="2" cy="14" r="2" fill="${_.get(e)}"/>
</svg>`);t=encodeURI(`data:image/svg+xml;base64,${i}`),y.set(e,t)}return t}function T(e){switch(e){case"all":a.m.instance.storage.delete("avatars"),r?.clear(),m.clear();break;case"failed":for(let e of r?.values()??[])null==e.uri&&(e.timestamp=0,e.retries=0);break;case"fallback":for(let e of r?.values()??[])e.fallback=void 0}}function E(e){s=e,T("fallback")}},3130:(e,t,i)=>{i.d(t,{BX:()=>s,vw:()=>r}),i(8178),i(8601);let r=/^(?:(git:\/\/)(.*?)\/|(https?:\/\/)(?:.*?@)?(.*?)\/|git@(.*):|(ssh:\/\/)(?:.*@)?(.*?)(?::.*?)?(?:\/|(?=~))|(?:.*?@)(.*?):)(.*)$/;function s(e){let t=r.exec(e);return null==t?["","",e]:[t[1]||t[3]||t[6],t[2]||t[4]||t[5]||t[7]||t[8],t[9].replace(/\.git\/?$/,"")]}},3151:(e,t,i)=>{i.d(t,{G5:()=>c,Hi:()=>p,PR:()=>d,Vt:()=>m,Xs:()=>f,dj:()=>g,u5:()=>h});var r=i(1398),s=i(4357),o=i(2870),n=i(797),a=i(8845),l=i(4808),u=i(711);function c(e,t){return(0,u.e2)(e,(0,s.Du)(s.WL.Noop,void 0,{label:"Use AI-powered GitLens features like Generate Commit Message, Explain Commit, and more",iconPath:new r.ThemeIcon("sparkle")}),{source:"ai"},t)}function h(e){switch(e){case"generate-commitMessage":return"Generate Commit Message";case"generate-stashMessage":return"Generate Stash Message";case"generate-changelog":return"Generate Changelog (Preview)";case"generate-create-cloudPatch":return"Create Cloud Patch Details";case"generate-create-codeSuggestion":return"Create Code Suggestion Details";case"generate-create-pullRequest":return"Create Pull Request Details (Preview)";case"explain-changes":return"Explain Changes";default:return"Unknown Action"}}let d=3.1;async function p(e,t,i){let s=await e.storage.getSecret(`gitlens.${t.id}.key`);if(s)return s;if(i||t.requiresAccount&&!await c(e,!1))return;let o=r.window.createInputBox();o.ignoreFocusOut=!0;let n=[];try{let e={iconPath:new r.ThemeIcon("link-external"),tooltip:`Open the ${t.name} API Key Page`};s=await new Promise(i=>{n.push(o.onDidHide(()=>i(void 0)),o.onDidChangeValue(e=>{if(e&&!t.validator(e)){o.validationMessage=`Please enter a valid ${t.name} API key`;return}o.validationMessage=void 0}),o.onDidAccept(()=>{let e=o.value.trim();if(!e||!t.validator(e)){o.validationMessage=`Please enter a valid ${t.name} API key`;return}i(e)}),o.onDidTriggerButton(i=>{i===e&&t.url&&r.env.openExternal(r.Uri.parse(t.url))})),o.password=!0,o.title=`Connect to ${t.name}`,o.placeholder=`Please enter your ${t.name} API key to use this feature`,o.prompt=`Enter your [${t.name} API Key](${t.url} "Get your ${t.name} API key")`,t.url&&(o.buttons=[e]),o.show()})}finally{o.dispose(),n.forEach(e=>void e.dispose())}if(s)return e.storage.storeSecret(`gitlens.${t.id}.key`,s).catch(),s}function g(e){if(null!==e)return null!=e?e:Math.max(0,Math.min(o.H.get("ai.modelOptions.temperature"),2))}async function m(e,t){let i={title:"Continue"},s={title:"Change Threshold"},o=await r.window.showWarningMessage(`This request will use approximately ${(0,l.td)("token",e)}, which exceeds the configured ${(0,a.bH)(t)} token threshold for large prompts.

Do you want to continue?`,{modal:!0},i,s,{title:"Cancel",isCloseAffordance:!0});return o===s&&(0,n.P9)({query:"gitlens.ai.largePromptWarningThreshold"}),o===i}function f(e){r.window.showWarningMessage(`The prompt was truncated to fit within the ${(0,l.Lu)(e.provider.name)} limits.`)}},3213:(e,t,i)=>{i.r(t),i.d(t,{fromCommitFileStatus:()=>v,fromGitHubIssue:()=>f,fromGitHubIssueOrPullRequestState:()=>a,fromGitHubPullRequest:()=>m,fromGitHubPullRequestLite:()=>n,fromGitHubPullRequestMergeableState:()=>d,fromGitHubPullRequestReviewDecision:()=>u,fromGitHubPullRequestReviewState:()=>c,fromGitHubPullRequestStatusCheckRollupState:()=>g,toGitHubPullRequestMergeableState:()=>p,toGitHubPullRequestReviewDecision:()=>h,toGitHubPullRequestState:()=>l});var r=i(6503),s=i(600),o=i(2356);function n(e,t){return new o.B9(t,{id:e.author.login,name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},String(e.number),e.id,e.title,e.permalink,{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:w(e.repository.viewerPermission)},a(e.state),new Date(e.createdAt),new Date(e.updatedAt),null==e.closedAt?void 0:new Date(e.closedAt),null==e.mergedAt?void 0:new Date(e.mergedAt),void 0,void 0,{head:{exists:null!=e.headRepository,owner:e.headRepository?.owner.login,repo:e.headRepository?.name,sha:e.headRefOid,branch:e.headRefName,url:e.headRepository?.url},base:{exists:null!=e.repository,owner:e.repository?.owner.login,repo:e.repository?.name,sha:e.baseRefOid,branch:e.baseRefName,url:e.repository?.url},isCrossRepository:e.isCrossRepository},e.isDraft)}function a(e){return"MERGED"===e?"merged":"CLOSED"===e?"closed":"opened"}function l(e){return"merged"===e?"MERGED":"closed"===e?"CLOSED":"OPEN"}function u(e){switch(e){case"APPROVED":return o.dq.Approved;case"CHANGES_REQUESTED":return o.dq.ChangesRequested;case"REVIEW_REQUIRED":return o.dq.ReviewRequired}}function c(e){switch(e){case"APPROVED":return o.c7.Approved;case"CHANGES_REQUESTED":return o.c7.ChangesRequested;case"COMMENTED":return o.c7.Commented;case"DISMISSED":return o.c7.Dismissed;case"PENDING":return o.c7.Pending}}function h(e){switch(e){case o.dq.Approved:return"APPROVED";case o.dq.ChangesRequested:return"CHANGES_REQUESTED";case o.dq.ReviewRequired:return"REVIEW_REQUIRED"}}function d(e){switch(e){case"MERGEABLE":return o.Q6.Mergeable;case"CONFLICTING":return o.Q6.Conflicting;case"UNKNOWN":return o.Q6.Unknown}}function p(e){switch(e){case o.Q6.Mergeable:return"MERGEABLE";case o.Q6.Conflicting:return"CONFLICTING";case o.Q6.FailingChecks:case o.Q6.BlockedByPolicy:case o.Q6.Unknown:return"UNKNOWN"}}function g(e){switch(e){case"SUCCESS":case"EXPECTED":return o.gI.Success;case"FAILURE":case"ERROR":return o.gI.Failed;case"PENDING":return o.gI.Pending;default:return}}function m(e,t){return new o.B9(t,{id:e.author.login,name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},String(e.number),e.id,e.title,e.permalink,{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:w(e.repository.viewerPermission)},a(e.state),new Date(e.createdAt),new Date(e.updatedAt),null==e.closedAt?void 0:new Date(e.closedAt),null==e.mergedAt?void 0:new Date(e.mergedAt),d(e.mergeable),e.viewerCanUpdate,{head:{exists:null!=e.headRepository,owner:e.headRepository?.owner.login,repo:e.headRepository?.name,sha:e.headRefOid,branch:e.headRefName,url:e.headRepository?.url},base:{exists:null!=e.repository,owner:e.repository?.owner.login,repo:e.repository?.name,sha:e.baseRefOid,branch:e.baseRefName,url:e.repository?.url},isCrossRepository:e.isCrossRepository},e.isDraft,e.additions,e.deletions,e.totalCommentsCount,0,u(e.reviewDecision),e.reviewRequests.nodes.map(e=>null!=e.requestedReviewer?{isCodeOwner:e.asCodeOwner,reviewer:{id:e.requestedReviewer.login,name:e.requestedReviewer.login,avatarUrl:e.requestedReviewer.avatarUrl,url:e.requestedReviewer.url},state:o.c7.ReviewRequested}:void 0).filter(e=>!!e),e.latestReviews.nodes.map(e=>({reviewer:{id:e.author.login,name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},state:c(e.state)})),e.assignees.nodes.map(e=>({id:e.login,name:e.login,avatarUrl:e.avatarUrl,url:e.url})),g(e.commits.nodes?.[0]?.commit.statusCheckRollup?.state))}function f(e,t){return new s.m2({id:t.id,name:t.name,domain:t.domain,icon:t.icon},String(e.number),e.id,e.title,e.url,new Date(e.createdAt),new Date(e.updatedAt),e.closed,a(e.state),{id:e.author.login,name:e.author.login,avatarUrl:e.author.avatarUrl,url:e.author.url},e.assignees.nodes.map(e=>({id:e.login,name:e.login,avatarUrl:e.avatarUrl,url:e.url})),{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:w(e.repository.viewerPermission),url:e.repository.url},null==e.closedAt?void 0:new Date(e.closedAt),e.labels?.nodes==null?void 0:e.labels.nodes.map(e=>({color:e.color,name:e.name})),e.comments?.totalCount,e.reactions?.totalCount,e.body)}function w(e){switch(e){case"ADMIN":return s.LI.Admin;case"MAINTAIN":return s.LI.Maintain;case"WRITE":return s.LI.Write;case"TRIAGE":return s.LI.Triage;case"READ":return s.LI.Read;default:return s.LI.None}}function v(e){switch(e){case"added":return r.NO.Added;case"changed":case"modified":return r.NO.Modified;case"removed":return r.NO.Deleted;case"renamed":return r.NO.Renamed;case"copied":return r.NO.Copied}}},3219:(e,t,i)=>{i.d(t,{d:()=>c,r:()=>GitTag});var r=i(8845),s=i(1555),o=i(4941),n=i(5277),a=Object.defineProperty,l=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?l(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&a(t,i,o),o};function c(e){return e instanceof GitTag}let GitTag=class GitTag{constructor(e,t,i,r,s,o,a){this.container=e,this.repoPath=t,this.refName=i,this.sha=r,this.message=s,this.date=o,this.commitDate=a,({name:this._name}=(0,n.oq)(i)),this.id=(0,n.gt)(t,this._name)}refType="tag";id;_name;get name(){return this._name}toString(){return`${(0,o.zu)(this)}(${this.id})`}get formattedDate(){return"absolute"===this.container.TagDateFormatting.dateStyle?this.formatDate(this.container.TagDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.name}formatCommitDate(e){return null!=this.commitDate?(0,r.Yq)(this.commitDate,e??"MMMM Do, YYYY h:mma"):""}formatCommitDateFromNow(){return null!=this.commitDate?(0,r.PI)(this.commitDate):""}formatDate(e){return null!=this.date?(0,r.Yq)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,r.PI)(this.date):""}getBasename(){let e=this.name.lastIndexOf("/");return -1!==e?this.name.substring(e+1):this.name}};u([(0,s.B)(e=>e??"MMMM Do, YYYY h:mma")],GitTag.prototype,"formatCommitDate",1),u([(0,s.B)(e=>e??"MMMM Do, YYYY h:mma")],GitTag.prototype,"formatDate",1),u([(0,s.B)()],GitTag.prototype,"getBasename",1)},3227:(e,t,i)=>{i.d(t,{$N:()=>GitWizardQuickPickItem,G0:()=>C,IC:()=>w,Rc:()=>v,iq:()=>k,rA:()=>y,sS:()=>R,vS:()=>b});var r=i(1398),s=i(564),o=i(1182),n=i(2099),a=i(5119),l=i(8518),u=i(8027),c=i(7660),h=i(9181),d=i(5962),p=i(2870),g=i(8845),m=i(4808),f=i(9207);let GitWizardQuickPickItem=class GitWizardQuickPickItem extends f.Fj{constructor(e,t){super(e,void 0,"gitlens.gitCommands",[t],{suppressKeyPress:!0})}executeSteps(e){return(0,s.g)(n.m.instance,this.args[0],e)}};async function w(e,t,i){let s="";if(i?.type===!0?s=!0===i.current&&e.current?"current branch":"branch":i?.type==="remote"?e.remote&&(s="remote branch"):i?.current===!0&&e.current&&(s="current branch"),i?.status&&!e.remote&&null!=e.upstream){let t=o.EO.Dash;if(e.upstream.missing)t=o.EO.Warning;else{let i=await e.getRemote();if(null!=i){let e,r;for(let{type:t}of i.urls)if("fetch"===t){if(e=!0,r)break}else if("push"===t&&(r=!0,e))break;e&&r?t=o.EO.ArrowsRightLeft:r?t=o.EO.ArrowRight:e&&(t=o.EO.ArrowLeft)}}let i=`${e.getTrackingStatus({suffix:`${o.EO.Space} `})}${t}${o.EO.Space} ${e.upstream.name}`;s=s?`${s}${o.EO.Space.repeat(2)}${i}`:i}return i?.ref&&(e.sha&&(s=s?`${s} $(git-commit)${o.EO.Space}${(0,d.pV)(e.sha)}`:`$(git-commit)${o.EO.Space}${(0,d.pV)(e.sha)}`),void 0!==e.date&&(s=s?`${s}${(0,m.eV)(o.EO.Dot,2,2)}${e.formattedDate}`:e.formattedDate)),{label:i?.checked||i?.checked==null&&i?.current==="checkmark"&&e.current?`${e.name}${(0,m.eV)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t??e.current,item:e,current:e.current,ref:e.name,remote:e.remote,iconPath:e.starred?new r.ThemeIcon("star-full"):i?.worktree?(0,u.wL)(n.m.instance,e):(0,u.BI)(n.m.instance,e)}}async function v(e,t,i){let s;return(0,l.kk)(e)?y(e,t,{...i,icon:i?.icon==="avatar"||i?.icon}):(i?.icon==="avatar"&&(p.H.get("gitCommands.avatars")?s=await e.getAvatarUri():i.icon=!0),i?.icon===!0&&(s=new r.ThemeIcon("git-commit")),i?.compact)?{label:e.summary,description:`${e.author.name}, ${e.formattedDate}${(0,m.eV)("$(git-commit)",2,1)}${e.shortSha}${(0,m.eV)(o.EO.Dot,2,2)}${e.formatStats("short")}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e,iconPath:s}:{label:e.summary,description:"",detail:`${o.EO.Space.repeat(2)}${e.author.name}, ${e.formattedDate}${(0,m.eV)("$(git-commit)",2,1)}${e.shortSha}${(0,m.eV)(o.EO.Dot,2,2)}${e.formatStats("short")}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:s}}function y(e,t,i){let s=null==e.stashNumber?"":`${e.stashNumber}: `;return i?.compact?{label:`${s}${e.summary}`,description:`${e.formattedDate}${(0,m.eV)(o.EO.Dot,2,2)}${e.formatStats("short")}`,alwaysShow:i.alwaysShow,buttons:i.buttons,picked:t,item:e,iconPath:i.icon?new r.ThemeIcon("archive"):void 0}:{label:`${s}${e.summary}`,description:"",detail:`${o.EO.Space.repeat(2)}${e.formattedDate}${(0,m.eV)(o.EO.Dot,2,2)}${e.formatStats("short")}`,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:i?.icon?new r.ThemeIcon("archive"):void 0}}function b(e,t,i,s){let n;return""===e?{label:"Working Tree",description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:(0,c.kA)(e,t,{refType:"revision",name:"Working Tree"}),current:!1,ref:e,remote:!1,iconPath:s?.icon?new r.ThemeIcon("file-directory"):void 0}:"HEAD"===e?{label:"HEAD",description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:(0,c.kA)(e,t,{refType:"revision",name:"HEAD"}),current:!1,ref:e,remote:!1,iconPath:s?.icon?new r.ThemeIcon("git-branch"):void 0}:("string"==typeof e?n=(0,c.kA)(e,t):e=(n=e).ref,(0,d.p8)(e))?{label:`Range ${n.name}`,description:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:n,current:!1,ref:e,remote:!1}:{label:`Commit ${n.name}`,description:s?.ref?`$(git-commit)${o.EO.Space}${e}`:"",alwaysShow:s?.alwaysShow,buttons:s?.buttons,picked:i,item:n,current:!1,ref:e,remote:!1}}function C(e,t,i){let s="";if(i?.type&&(s="remote"),i?.upstream){let t=(0,h.Qw)(e);s=s?`${s}${(0,m.eV)(o.EO.Dot,2,2)}${t}`:t}return{label:i?.checked?`${e.name}${(0,m.eV)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:new r.ThemeIcon("cloud")}}async function R(e,t,i){let r;(i?.branch||i?.status)&&(r=await e.git.status().getStatus());let s="";if(i?.branch&&null!=r&&(s=r.branch),i?.status&&null!=r){let e="";0!==r.files.length&&(e=r.getFormattedDiffStatus({compact:!0,prefix:(0,m.eV)(o.EO.Dot,2,2)}));let t=r.getUpstreamStatus({prefix:s?`${o.EO.Space} `:""}),i=`${t}${e}`;i&&(s=s?`${s}${i}`:i)}if(i?.fetched){let t=await e.getLastFetched();if(0!==t){let e=`Last fetched ${(0,g.PI)(new Date(t))}`;s=s?`${s}${(0,m.eV)(o.EO.Dot,2,2)}${e}`:e}}return{label:e.formattedName,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,repoPath:e.path}}function k(e,t,i){let s="";if(i?.type&&(s="tag"),i?.ref&&(s=`${s}${(0,m.eV)("$(git-commit)",2*!!s,1)}${(0,d.pV)(e.sha)}`,s=`${s?`${s}${(0,m.eV)(o.EO.Dot,2,2)}`:""}${e.formattedDate}`),i?.message){let t=(0,a.E)(e.message);s=s?`${s}${(0,m.eV)(o.EO.Dot,2,2)}${t}`:t}return{label:i?.checked?`${e.name}${(0,m.eV)("$(check)",2)}`:e.name,description:s,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,current:!1,ref:e.name,remote:!1,iconPath:new r.ThemeIcon("tag")}}},3263:(e,t,i)=>{i.d(t,{l:()=>CacheableChildrenViewNode});var r=i(6206),s=i(1016),o=i(5818),n=Object.defineProperty,a=Object.getOwnPropertyDescriptor;let CacheableChildrenViewNode=class CacheableChildrenViewNode extends o.eu{_children;get children(){return this._children}set children(e){this._children!==e&&((0,s.lm)(this._children,e),this._children=e)}dispose(){super.dispose(),this.children=void 0}refresh(e=!1){e&&(this.children=void 0)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?a(t,i):t,l=e.length-1;l>=0;l--)(s=e[l])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n(t,i,o)})([(0,r.Yz)()],CacheableChildrenViewNode.prototype,"refresh",1)},3276:(e,t,i)=>{i.r(t),i.d(t,{GitHubAuthenticationProvider:()=>GitHubAuthenticationProvider,GitHubEnterpriseAuthenticationProvider:()=>GitHubEnterpriseAuthenticationProvider,GitHubEnterpriseCloudAuthenticationProvider:()=>GitHubEnterpriseCloudAuthenticationProvider});var r=i(1398),s=i(2476),o=i(1849),n=i(8576);let GitHubAuthenticationProvider=class GitHubAuthenticationProvider extends n.DP{constructor(e,t,i){super(e,t,i),this.disposables.push(r.authentication.onDidChangeSessions(e=>{e.provider.id===this.authProviderId&&this.fireDidChange()}))}get authProviderId(){return o.Q7.GitHub}async getBuiltInExistingSession(e,t){return(0,s.Ff)(this.container.integrations.ignoreSSLErrors({id:this.authProviderId,domain:e?.domain}),async()=>{let i=await r.authentication.getSession(this.authProviderId,e.scopes,{forceNewSession:!!t||void 0,silent:!t||void 0});if(null!=i)return{...i,cloud:!1,domain:e.domain}})}async getSession(e,t){let i=await this.getBuiltInExistingSession(e);return(null!=i&&t?.forceNewSession&&(i=await this.getBuiltInExistingSession(e,!0)),null!=i)?i:super.getSession(e,t)}};let GitHubEnterpriseCloudAuthenticationProvider=class GitHubEnterpriseCloudAuthenticationProvider extends n.DP{get authProviderId(){return o.PY.CloudGitHubEnterprise}};let GitHubEnterpriseAuthenticationProvider=class GitHubEnterpriseAuthenticationProvider extends n.RH{get authProviderId(){return o.PY.GitHubEnterprise}async createSession(e){let t,i=r.window.createInputBox();i.ignoreFocusOut=!0;let s=[];try{let o={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the GitHub Access Tokens Page"};t=await new Promise(t=>{s.push(i.onDidHide(()=>t(void 0)),i.onDidChangeValue(()=>i.validationMessage=void 0),i.onDidAccept(()=>{let e=i.value.trim();if(!e){i.validationMessage="A personal access token is required";return}t(e)}),i.onDidTriggerButton(t=>{t===o&&r.env.openExternal(r.Uri.parse(`https://${e.domain}/settings/tokens`))})),i.password=!0,i.title=`GitHub Authentication  \u2022 ${e.domain}`,i.placeholder=`Requires a classic token with ${e.scopes.join(", ")} scopes`,i.prompt=`Paste your [GitHub Personal Access Token](https://${e.domain}/settings/tokens "Get your GitHub Access Token")`,i.buttons=[o],i.show()})}finally{i.dispose(),s.forEach(e=>void e.dispose())}if(t)return{id:this.configuredIntegrationService.getSessionId(e),accessToken:t,scopes:e?.scopes??[],account:{id:"",label:""},cloud:!1,domain:e.domain}}}},3282:(e,t,i)=>{i.d(t,{Jp:()=>u,sY:()=>h,td:()=>l,ub:()=>a,w8:()=>c});var r=i(1398),s=i(1182),o=i(7125),n=i(5962);async function a(e,t,{base:i,head:s},o,n){if(i?.remote&&s?.remote&&i?.branch&&s?.branch){if("string"==typeof t){let i=e.git.getRepository(t);if(null==i)return;t=i}try{let a=await e.ai.generateCreatePullRequest(t,`${i.remote.name}/${i.branch}`,`${s.remote.name}/${s.branch}`,o,{progress:{location:r.ProgressLocation.Notification},...n});return a?.parsed?{title:a.parsed.summary,description:a.parsed.body}:void 0}catch(e){r.window.showErrorMessage(e.message);return}}}async function l(e,t,i,r){if(null==e.refs)return;r??=(0,o.tI)(t.path,e.refs);let s=(0,n.Xn)(r.base.ref,r.head.ref,"..."),a=t.git.commits(),l=await a.getLeftRightCommitCount(s);return null==l&&await u(e,t,i)&&(l=await a.getLeftRightCommitCount(s)),l}async function u(e,t,i){let s=(0,o.Yv)(e);if(null==s.remote.url)return!1;let n=s.remote.url.replace(/\.git$/,""),a=!1;for(let e of(await t.git.remotes().getRemotes()))if(e.matches(n)){a=!0;break}if(a)return!0;let l={title:"Add Remote"};return!i?.silent&&await r.window.showInformationMessage(`${i?.promptMessage??`Unable to find a remote for PR #${e.id}.`}
Would you like to add a remote for '${s.provider.repoDomain}?`,{modal:!0},l,{title:"Cancel",isCloseAffordance:!0})===l&&(await t.git.remotes().addRemoteWithResult?.(s.provider.repoDomain,s.remote.url,{fetch:!0}),!0)}async function c(e,t,i){return i?e.git.getRepository(i):await h(e,t,{promptIfNeeded:!0})}async function h(e,t,i){let n=(0,o.Yv)(t),a=await e.repositoryIdentity.getRepository(n,{openIfNeeded:!0,keepOpen:!1,prompt:!1});if(null==a&&!i?.skipVirtual){let i=function(e){if("github"!==e.provider.id)return;let t=r.Uri.parse(e.refs?.base?.url??e.url);return t.with({scheme:s.xB.Virtual,authority:"github",path:t.path})}(t);null!=i&&(a=await e.git.getOrOpenRepository(i,{closeOnOpen:!0,detectNested:!1}))}if(null==a){let i=(0,o.Yv)(t,!1);a=await e.repositoryIdentity.getRepository(i,{openIfNeeded:!0,keepOpen:!1,prompt:!1})}return null==a&&i?.promptIfNeeded&&(a=await e.repositoryIdentity.getRepository(n,{openIfNeeded:!0,keepOpen:!1,prompt:!0})),a}},3296:(e,t,i)=>{i.d(t,{$t:()=>C,Ac:()=>w,CO:()=>v,Lt:()=>c,Ss:()=>d,TX:()=>f,U5:()=>a,VW:()=>m,XD:()=>h,d6:()=>QuickCommand,fg:()=>p,h8:()=>b,nH:()=>y,ud:()=>l,wc:()=>g,xb:()=>u});var r=i(9207),s=i(4357),o=i(2870),n=i(5485);function a(e){return"object"==typeof e&&"type"in e&&"custom"===e.type}function l(e){return"object"==typeof e&&"type"in e&&"input"===e.type}function u(e){return"object"==typeof e&&"type"in e&&"pick"===e.type}let c=Symbol("BreakStep");let QuickCommand=class QuickCommand{constructor(e,t,i,r,s){this.container=e,this.key=t,this.label=i,this.title=r,this.description=s?.description,this.detail=s?.detail}description;detail;initialState;_currentStep;_stepsIterator;get canConfirm(){return!0}get canSkipConfirm(){return!0}_picked=!1;get picked(){return this._picked}set picked(e){this._picked=e,e||(this._pickedVia="menu")}_pickedVia="menu";get pickedVia(){return this._pickedVia}set pickedVia(e){this._pickedVia=e}get skipConfirmKey(){return`${this.key}:${this.pickedVia}`}get value(){return this._currentStep}confirm(e){return!this.canConfirm||!this.canSkipConfirm||(null!=e?e:!o.H.get("gitCommands.skipConfirmations").includes(this.skipConfirmKey))}isMatch(e){return this.key===e}isFuzzyMatch(e){return this.label===e}executeSteps(){return this.steps(this.getStepState(!0))}async previous(){return(await this.next(s.WL.Back)).value}async next(e){null==this._stepsIterator&&(this._stepsIterator=this.steps(this.getStepState(!1)));let t=await this._stepsIterator.next(e);return(t.done&&(this.initialState=void 0,this._stepsIterator=void 0),t.value===c)?(this._currentStep=void 0,{...t,value:void 0}):(this._currentStep=t.value,t)}async retry(){return await this.next(s.WL.Noop),this.value}canStepsContinue(e){return e.counter>=(e.startingStep??0)}createConfirmStep(e,t,i,r={}){return m(e,t,{title:this.title},i,r)}getStepState(e){return{counter:0,...this.initialState,startingStep:e?this.initialState?.counter??0:0}}};function h(e){return e instanceof QuickCommand}async function d(e,t,i){if(!g(e,t,i))return!1;let[r]=await e.validate?.(i)??[!0];return!!r&&(t.counter++,!0)}function p(e,t,i){return!!g(e,t,i)&&!!(e.validate?.(i)??!0)&&(t.counter++,!0)}function g(e,t,i){if(null==i)return!1;if((0,s.qT)(i)){switch(i){case s.WL.Back:t.counter--,t.counter<=(t.startingStep??0)&&(t.counter=0);break;case s.WL.Cancel:y(t)}return!1}return!0}function m(e,t,i,o,n){return w({isConfirmationStep:!0,placeholder:`Confirm ${i.title}`,title:e,ignoreFocusOut:!0,items:[...t,(0,r.uK)(),o??(0,s.Du)(s.WL.Cancel)],selectedItems:[t.find(e=>e.picked)??t[0]],...n})}function f(e){let t=e.onDidActivate;return(e={type:"input",...e,ignoreFocusOut:!0}).onDidActivate=i=>{e.input=i,e.freeze=()=>(i.enabled=!1,e.frozen=!0,(0,n.Nx)(()=>{e.frozen=!1,i.enabled=!0,i.show()},{once:!0})),t?.(i)},e}function w(e){let t=e.onDidActivate;return(e={type:"pick",...e}).onDidActivate=i=>{e.quickpick=i,e.freeze=()=>{i.enabled=!1;let t=i.ignoreFocusOut;return i.ignoreFocusOut=!0,e.frozen=!0,(0,n.Nx)(()=>{e.frozen=!1,i.enabled=!0,i.ignoreFocusOut=t,i.show()},{once:!0})},t?.(i)},e}function v(e){return{type:"custom",...e}}function y(e){e.counter=-1}function b(e){return null!=e.command}function C(e,t){return{command:e,args:t}}},3361:(e,t,i)=>{function r(e){return s(e,1)}function s(e,t){return(i,r)=>{let s=0,o=e(e=>(++s>=t&&o.dispose(),i.call(r,e)));return o}}i.d(t,{HC:()=>a,I7:()=>n,Oo:()=>r,s:()=>s});let o=(e,t)=>t(e);function n(e,t=o){let i,r,s=!0;return{get pending(){return s},promise:new Promise((o,n)=>{i=()=>{s=!1,i=void 0,n()},r=e(async e=>{try{await t(e,o,n),s=!1}catch(e){s=!1,n(e)}})}).then(e=>(r.dispose(),e),e=>{throw r.dispose(),e}),cancel:()=>i?.()}}function a(e,t,i,r){let s,o=new WeakRef(i),n=e(e=>{let i=o.deref();null!=i?t.call(i,e):s.dispose()});return s=null==r?n:function(...e){let t=e;return{dispose:function(){if(t){for(let e of t)e&&"function"==typeof e.dispose&&e.dispose();t=void 0}}}}(n,...r)}},3374:(e,t,i)=>{i.d(t,{OB:()=>r,Oi:()=>s,fc:()=>o});let r=new Map([["workbench.view.scm",["branches","commits","remotes","repositories","stashes","tags","worktrees","contributors"]],["workbench.view.extension.gitlensPanel",["graph","graphDetails"]],["workbench.view.extension.gitlensInspect",["commitDetails","fileHistory","lineHistory","timeline","searchAndCompare"]],["workbench.view.extension.gitlens",["home","workspaces"]]]),s=["commit-file","file-commit","results-file","stash-file"],o=[...s,"conflict-file","status-file","uncommitted-file"]},3415:(e,t,i)=>{i.d(t,{l:()=>s});var r=i(224);function s(e){if(null!=e)try{return JSON.parse(JSON.stringify(e,r.t))}catch(e){throw e}}},3526:(e,t,i)=>{i.d(t,{V:()=>a,Y:()=>l});var r=i(2870),s=i(8845),o=i(9091),n=i(421);function a(e,t=!0){let i=new Date(e);if(Date.now()-e<n.s)return(0,s.PI)(i);if(t)return(0,s.Yq)(i,r.H.get("defaultDateShortFormat")??"short");let o=r.H.get("defaultDateFormat")??`dddd, MMMM Do, YYYY [at] ${r.H.get("defaultTimeFormat")??"h:mma"}`;return/[hHm]/.test(o)||(o+=` [at] ${r.H.get("defaultTimeFormat")??"h:mma"}`),(0,s.Yq)(i,o)}async function l(e){let t=new Map(e.map(e=>[e.id,e])),i=new Map;for(let[,e]of t){let r=await e.getCommonRepository();if(null==r||null==(r=t.get(r.id))){i.has(e.id),i.set(e.id,{repo:e,worktrees:new Map});continue}let s=i.get(r.id);null==s?(s={repo:r,worktrees:new Map},i.set(r.id,s)):s.worktrees.set(e.path,e)}return new Map((0,o.Tj)(i,([,e])=>[e.repo,e.worktrees]))}},3553:(e,t,i)=>{i.d(t,{EL:()=>a,VN:()=>l});var r=i(1398),s=i(9686);let o=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/,n=/^[/|\\]~(?:\d+?|external)(?:[/|\\]|$)/;function a(e){var t,i;if("string"==typeof e&&(0,s.bm)(e)&&(e=r.Uri.parse(e)),"string"==typeof e){return(t=e,o.test(t))?e:(e=(0,s.Fd)(e),`/~0${47===e.charCodeAt(0)?e:`/${e}`}`)}let n=e.fsPath;return(i=n,o.test(i))?e:(n=(0,s.Fd)(n),e.with({path:`/~0${47===n.charCodeAt(0)?n:`/${n}`}`}))}function l(e){return n.test(e)}},3566:(e,t,i)=>{i.d(t,{D:()=>C});var r=i(1398),s=i(652),o=i(5962),n=i(7019),a=i(4154),l=i(7660),u=i(4357),c=i(1288),h=i(8397);async function d(e,t,i){let{head:r,base:s}=i??{},n=!1;for(;;){let{title:d,placeholder:p}={title:"Compare",placeholder:"Choose a reference (branch, tag, etc) to compare",...i?.getTitleAndPlaceholder?.(1)};if(null==(t??=(await (0,h.t6)(d))?.path))return;if(null==r||n){let e=await (0,c.nA)(t,d,p,{allowRevisions:{ranges:!0},include:c.m7.BranchesAndTags|c.m7.HEAD,picked:r?.ref,sort:{branches:{current:!0}}});if(null==e.value)return;if((0,o.p8)(e.value.ref)){let i=(0,o.jY)(e.value.ref);if(null!=i)return r=(0,l.kA)(i.left||"HEAD",t,{refType:"revision"}),s=(0,l.kA)(i.right||"HEAD",t,{refType:"revision"}),{repoPath:t,head:r,base:s}}r=e.value}if(null==s||n){if({title:d,placeholder:p}={title:`Compare ${(0,l.M4)(r)} with`,placeholder:"Choose a reference (branch, tag, etc) to compare with",...i?.getTitleAndPlaceholder?.(2,r)},(0,l.gC)(r)){let i=e.git.getRepository(t),o=await i?.git.branches().getBranch(r.name);if(null!=o){let i=await (0,a.y1)(e,o),r=i.targetBranch.paused?i.baseBranch:i.targetBranch.value??i.defaultBranch;null!=r&&(s=(0,l.kA)(r,t,{refType:"revision"}))}}let o=await (0,c.nA)(t,d,p,{allowBack:!0,allowRevisions:!0,exclude:[r.ref],include:c.m7.BranchesAndTags|c.m7.HEAD,picked:s?.ref,sort:{branches:{current:!0}}});if(o.directive===u.WL.Back){n=!0;continue}if(null==o.value)return;s=o.value}break}return{repoPath:t,head:r,base:s}}var p=i(2141),g=i(4435),m=i(4941),f=i(4808),w=i(9442),v=Object.defineProperty,y=Object.getOwnPropertyDescriptor;let b=class extends w.Kt{constructor(e){super("gitlens.ai.generateChangelog"),this.container=e}async execute(e){try{let t=await d(this.container,e?.repoPath,{head:e?.head,getTitleAndPlaceholder:e=>{switch(e){case 1:return{title:"Generate Changelog",placeholder:"Choose a reference (branch, tag, etc) to generate a changelog for"};case 2:return{title:`Generate Changelog \u2022 Select Base to Start From`,placeholder:"Choose a base reference (branch, tag, etc) to generate the changelog from"}}}});if(null==t)return;let i=await this.container.git.refs(t.repoPath).getMergeBase(t.head.ref,t.base.ref);await C(this.container,(0,g.R)(async()=>{let e={base:i?{ref:i,label:i===t.base.ref?`\`${(0,o.pV)(i)}\``:`\`${t.base.ref}@${(0,o.pV)(i)}\``}:{ref:t.base.ref,label:`\`${t.base.ref}\``},head:{ref:t.head.ref,label:`\`${t.head.ref}\``}},r=await this.container.git.commits(t.repoPath).getLog((0,o.Xn)(i??t.base.ref,t.head.ref,".."));return r?.commits?.size?(0,s.f)(this.container,e,r):{changes:[],range:e}}),e?.source??{source:"commandPalette"},{progress:{location:r.ProgressLocation.Notification}})}catch(e){m.Vy.error(e,"GenerateChangelogCommand","execute"),(0,n.qQ)("Unable to generate changelog")}}};async function C(e,t,i,s){let o=await e.ai.generateChangelog(t,i,s),{range:n,changes:{length:a}=[]}=await t.value,l=`# Changelog for ${n.head.label??n.head.ref}
`;null!=o?l+=`> Generated by ${o.model.name} from ${(0,f.td)("commit",a)} between ${n.head.label??n.head.ref} and ${n.base.label??n.base.ref}

----

${o.content}
`:l+=`> No changes found between ${n.head.label??n.head.ref} and ${n.base.label??n.base.ref}
`;let u=await r.workspace.openTextDocument({language:"markdown",content:l});await r.window.showTextDocument(u)}b=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?y(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&v(t,i,o),o})([(0,p.G5)()],b)},3583:(e,t,i)=>{i.d(t,{V:()=>n,b:()=>o});var r=i(2141),s=i(7864);async function o(e){let t=(0,s.v6)();return await (0,r.RS)("gitlens.gitCommands",{...e,completion:t}),t.promise}async function n(e,t){await (0,r.Y0)("gitlens.browseRepoAtRevision",void 0,{uri:e,before:t?.before,openInNewWindow:t?.openInNewWindow})}},3592:(e,t,i)=>{i.d(t,{R3:()=>a,TF:()=>l,WQ:()=>o,_c:()=>u,hd:()=>n});var r=i(2099),s=i(3583);function o(e,t,i,r){return(0,s.b)({command:"remote",confirm:r?.confirm,state:{repo:e,subcommand:"add",name:t,url:i,flags:r?.fetch?["-f"]:void 0,reveal:r?.reveal}})}async function n(e,t){if("string"==typeof e){let t=r.m.instance.git.getRepository(e);if(null==t)return;e=t}await e.fetch({remote:t})}async function a(e,t){return(0,s.b)({command:"remote",state:{repo:e,subcommand:"prune",remote:t}})}async function l(e,t){return(0,s.b)({command:"remote",state:{repo:e,subcommand:"remove",remote:t}})}function u(e,t){return r.m.instance.views.revealRemote(e,t)}},3621:(e,t,i)=>{i.d(t,{$w:()=>a,Bb:()=>o,JX:()=>h,VC:()=>u,_c:()=>c,gv:()=>n,uY:()=>l});var r=i(2099),s=i(3583);function o(e,t){return(0,s.b)({command:"stash",state:{subcommand:"apply",repo:e,reference:t}})}function n(e,t){return(0,s.b)({command:"stash",state:{subcommand:"drop",repo:e,references:t}})}function a(e,t,i){return(0,s.b)({command:"stash",state:{subcommand:"rename",repo:e,reference:t,message:i}})}function l(e,t){return(0,s.b)({command:"stash",state:{subcommand:"pop",repo:e,reference:t}})}function u(e,t,i,r=!1,o=!1,n=!1,a){return(0,s.b)({command:"stash",state:{subcommand:"push",repo:e,uris:t,onlyStagedUris:a,message:i,flags:[...r?["--include-untracked"]:[],...o?["--keep-index"]:[],...n?["--staged"]:[]]}})}function c(e,t){return r.m.instance.views.revealStash(e,t)}function h(e,t){let{preserveFocus:i,...s}={...t,commit:e};return r.m.instance.views.commitDetails.show({preserveFocus:i},s)}},3631:(e,t,i)=>{i.d(t,{He:()=>a,Ht:()=>p,UJ:()=>u,Yk:()=>n,Zq:()=>d,kY:()=>c,km:()=>l,n$:()=>o,oq:()=>w,rt:()=>h,xM:()=>g});var r=i(5962);let s=/^(HEAD|\(.*\))$/;function o(e){return`(${(0,r.pV)(e)}...)`}function n(e,t,i){return`${e}|${t?"remotes/":"heads/"}${i}`}function a(e){if(e.remote){let t=p(e.name);return -1===t?[e.name,void 0]:[e.name.substring(t+1),e.name.substring(0,t)]}if(e.upstream?.name!=null){let t=p(e.upstream.name);return -1===t?[e.name,void 0]:[e.name,e.upstream.name.substring(0,t)]}return[e.name,void 0]}function l(e){return e.substring(p(e)+1)}function u(e){return e.upstream?.name.substring(p(e.upstream.name)+1)}async function c(e,t){let i;function r(t){return!t.remote&&t.upstream?.name!=null&&(t.upstream.name===e||t.upstream.name===i)}e.startsWith("remotes/")?(i=e,e=e.substring(8)):i=`remotes/${e}`;let s=t.values();if(Symbol.asyncIterator in s){for await(let e of s)if(r(e))return e}else for(let e of s)if(r(e))return e}async function h(e){let t=new Set;for await(let i of e.values())i.remote||i.upstream?.name==null||t.add(i.upstream.name);return t}function d(e){return e.substring(0,p(e))}function p(e){return e.startsWith("remotes/")?e.indexOf("/",8):e.indexOf("/")}function g(e){return!(e=e.trim()).length||s.test(e)}let m=/^(refs\/)?heads\//i,f=/^(refs\/)?remotes\//i;function w(e){let t,i=f.test(e);return{name:i?e.replace(f,""):e.replace(m,""),remote:i}}},3677:(e,t,i)=>{i.d(t,{Iy:()=>l,OH:()=>u,kZ:()=>a});var r=i(1398),s=i(9686),o=i(2141),n=i(745);function a(e){let t=r.workspace.getWorkspaceFolder(e);return null==t?(0,s.Fd)(e.fsPath):(0,s.Fd)((0,n.V8)(t.uri.fsPath,e.fsPath))||t.name}function l(e){return null!=e&&"object"==typeof e&&"uri"in e&&e.uri instanceof r.Uri&&"name"in e&&"index"in e}function u(e,t={location:"currentWindow"}){if(t?.location==="addToWorkspace"){let i=r.workspace.workspaceFolders?.length??0;return void r.workspace.updateWorkspaceFolders(i,0,{uri:e,name:t?.name})}(0,o.S4)("vscode.openFolder",e,{forceNewWindow:t?.location==="newWindow"})}},3782:(e,t,i)=>{i.d(t,{$T:()=>o,RU:()=>c,S_:()=>p,VC:()=>u,_c:()=>g,a$:()=>l,cL:()=>h,h1:()=>a,hd:()=>n,ru:()=>d});var r=i(2099),s=i(3583);function o(e,t){return(0,s.b)({command:"cherry-pick",state:{repo:e,references:t}})}function n(e,t){return(0,s.b)({command:"fetch",state:{repos:e,reference:t}})}function a(e,t){return(0,s.b)({command:"merge",state:{repo:e,reference:t}})}function l(e,t){return(0,s.b)({command:"pull",state:{repos:e,reference:t}})}function u(e,t,i){return(0,s.b)({command:"push",state:{repos:e,flags:t?["--force"]:[],reference:i}})}function c(e,t,i=!0){return(0,s.b)({command:"rebase",state:{repo:e,destination:t,flags:i?["--interactive"]:[]}})}function h(e,t,i){let r=[];return i?.hard?r.push("--hard"):i?.soft&&r.push("--soft"),(0,s.b)({command:"reset",confirm:null==i||i.hard,state:{repo:e,reference:t,flags:r}})}function d(e,t){return(0,s.b)({command:"revert",state:{repo:e,references:t}})}function p(e,t,i){return(0,s.b)({command:"switch",state:{repos:e,reference:t},confirm:i})}function g(e,t,i){return r.m.instance.views.revealRepository(e,t,i)}},3864:(e,t,i)=>{i.d(t,{V:()=>l,Zd:()=>u,dJ:()=>n,f0:()=>o,g5:()=>a});var r=i(3911),s=i(4808);function o(e){switch(e){case"generate-changelog":case"generate-create-pullRequest":return!0;default:return!1}}function n(e){switch(e){case"launchpad":case"startWork":case"associateIssueWithBranch":case"explain-changes":case"generate-create-cloudPatch":case"generate-create-codeSuggestion":case"generate-stashMessage":return!0;default:return!1}}let a=["graph"];function l(e){return"graph"===e?"Commit Graph":(0,s.ZH)(e)}function u(e){let t=e?.usages;if(!t?.length)return"eligible";let i=(new Date(t[t.length-1].expiresOn).getTime()-new Date().getTime())/36e5;return t.length<=r.Kt&&i>0&&i<24*r.tY?"active":"expired"}},3881:(e,t,i)=>{function r(e){let t=.001*performance.now(),i=Math.floor(t),r=Math.floor(t%1*1e9);return void 0!==e&&(i-=e[0],(r-=e[1])<0&&(i--,r+=1e9)),[i,r]}i.d(t,{k:()=>r})},3911:(e,t,i)=>{i.d(t,{Ep:()=>o,Kt:()=>r,kj:()=>n,qn:()=>u,tY:()=>s,zZ:()=>c});let r=3,s=1,o=0,n=14;var a,l,u=((a=u||{}).Community="community",a.CommunityWithAccount="community-with-account",a.Pro="pro",a.Advanced="advanced",a.Business="teams",a.Enterprise="enterprise",a),c=((l=c||{})[l.VerificationRequired=-1]="VerificationRequired",l[l.Community=0]="Community",l[l.ProPreview=1]="ProPreview",l[l.ProPreviewExpired=2]="ProPreviewExpired",l[l.ProTrial=3]="ProTrial",l[l.ProTrialExpired=4]="ProTrialExpired",l[l.ProTrialReactivationEligible=5]="ProTrialReactivationEligible",l[l.Paid=6]="Paid",l)},4045:(e,t,i)=>{i.r(t),i.d(t,{fromGitLabMergeRequest:()=>u,fromGitLabMergeRequestProvidersApi:()=>l,fromGitLabMergeRequestREST:()=>a,fromGitLabMergeRequestState:()=>o,toGitLabMergeRequestState:()=>n});var r=i(2356),s=i(4269);function o(e){return"locked"===e?"closed":e}function n(e){return e}function a(e,t,i){return new r.B9(t,{id:e.author?.id??"",name:e.author?.name??"Unknown",avatarUrl:e.author?.avatar_url??"",url:e.author?.web_url??""},String(e.iid),void 0,e.title,e.web_url,i,o(e.state),new Date(e.created_at),new Date(e.updated_at),null==e.closed_at?void 0:new Date(e.closed_at),null==e.merged_at?void 0:new Date(e.merged_at))}function l(e,t){let i={...e,id:String(e.number),permissions:e.permissions??{canMerge:!0,canMergeAndBypassProtections:!1}};return(0,s.QF)(i,t)}function u(e,t){let i;try{i=new URL(e.author?.avatarUrl??"").toString()}catch{try{let t=new URL(e.author?.webUrl??"");t.pathname="",t.search="",t.hash="",i=e.author?.avatarUrl?t.toString()+e.author?.avatarUrl:void 0}catch{i=void 0}}let[s,n]=e.project.fullPath.split("/");return new r.B9(t,{id:e.author?.id??"",name:e.author?.name??"Unknown",avatarUrl:i,url:e.author?.webUrl??""},e.iid,e.id,e.title,e.webUrl||"",{owner:s,repo:n,url:e.project.webUrl},o(e.state),new Date(e.createdAt),new Date(e.updatedAt),"closed"!==e.state?void 0:new Date(e.updatedAt),null==e.mergedAt?void 0:new Date(e.mergedAt),r.Q6.Unknown,void 0,function(e){if(null!=e.sourceProject)return{base:{owner:c(e.sourceProject.fullPath),branch:e.sourceBranch,exists:!0,url:e.sourceProject.webUrl,repo:e.sourceProject.fullPath,sha:e.diffRefs?.baseSha||""},head:{owner:c(e.project.fullPath),branch:e.targetBranch,exists:!0,url:e.project.webUrl,repo:e.project.fullPath,sha:e.diffRefs?.headSha||""},isCrossRepository:e.sourceProject.id!==e.project.id}}(e))}function c(e){return e.split("/").slice(0,-1).join("/")}},4119:(e,t,i)=>{i.d(t,{iw:()=>s,rd:()=>o});var r=i(7660);function s(e){return(0,r.kA)(e.ref,e.repoPath,{id:e.id,refType:e.refType,name:e.name,remote:e.remote,upstream:e.upstream,sha:e.sha})}function o(e,t){return"stash"===e.refType?(0,r.kA)(e.ref,e.repoPath,{refType:e.refType,name:e.name,number:e.stashNumber,message:t?.excludeMessage?void 0:e.message}):(0,r.kA)(e.ref,e.repoPath,{refType:e.refType,name:e.name,message:t?.excludeMessage?void 0:e.message})}},4123:(e,t,i)=>{i.d(t,{$5:()=>$,$s:()=>k,DD:()=>_,Di:()=>J,E9:()=>j,G4:()=>W,JX:()=>G,Kg:()=>O,Km:()=>U,MQ:()=>z,P3:()=>R,Qv:()=>S,Tq:()=>F,Ux:()=>D,VX:()=>N,WD:()=>P,YF:()=>y,YS:()=>E,_c:()=>M,cs:()=>x,eU:()=>C,eX:()=>I,fl:()=>A,gV:()=>L,m:()=>q,nA:()=>T,tl:()=>H,uT:()=>b,vM:()=>B,wq:()=>V});var r=i(1398),s=i(1182),o=i(2099),n=i(8829),a=i(2141),l=i(2870),u=i(797),c=i(7864),h=i(2624),d=i(8518),p=i(6821),g=i(6770),m=i(2272),f=i(4119),w=i(7660),v=i(5962);async function y(e,t,i){let s=!1,n=t.ref,a=i?.ref;if("string"!=typeof e){if("?"===e.status)n=`${n}^3`,s=!0;else if("A"===e.status)s=!0;else if("D"===e.status){let i=h.nk.fromFile(e,t.repoPath);try{await r.workspace.fs.stat(i)}catch{s=!0,[n,a]=[""===a?"HEAD":a??`${n}^`,n]}}}if(s){let i=h.nk.fromFile(e,t.repoPath);await o.m.instance.git.applyChangesToWorkingFile(i,n,a),await F(i,{preserveFocus:!0,preview:!1})}else await F(e,t,{preserveFocus:!0,preview:!1}),await o.m.instance.git.applyChangesToWorkingFile(h.nk.fromFile(e,t.repoPath,n),n,a)}async function b(e){await r.env.clipboard.writeText(e.ref)}async function C(e){let t;if((0,d.WM)(e))null==(t=e).message&&await t.ensureFullDetails();else if(null==(t=await o.m.instance.git.commits(e.repoPath).getCommit(e.ref)))return;let i=t.message??t.summary;await r.env.clipboard.writeText(i)}async function R(e,t,i,r,s){let{files:o,refs:n}=await Z(t,s);return i??=!l.H.get("views.openChangesInMultiDiffEditor"),r?.title||(r={...r,title:`Changes in ${(0,v.pV)(t.sha,{strings:{working:"Working Tree"}})}`}),P(e,o,n,i,r)}async function k(e){let{files:t}=await Z(e);if(await Q(t,{message:`Are you sure you want to externally open the changes for each of the ${t.length} files?`,confirmButton:"Open Changes",threshold:10}))for(let i of t)D(i,e)}async function S(e,t,i,r,s){let{files:o}=await Z(t,s);return A(e,o,t,i??=!l.H.get("views.openChangesInMultiDiffEditor"),r)}async function P(e,t,i,o,n){let a;if(o??=!l.H.get("views.openChangesInMultiDiffEditor")){if(!await Q(t,{message:`Are you sure you want to open the changes for each of the ${t.length} files?`,confirmButton:"Open Changes",threshold:10}))return;for(let e of(n={preserveFocus:!0,preview:!1,...n},t))""===i.rhs?await _(e,{repoPath:i.repoPath,ref:i.lhs},n):await I(e,i,n);return}if(!await Q(t,{message:`Are you sure you want to view the changes for all ${t.length} files?`,confirmButton:"View Changes",threshold:50}))return;null!=n&&({title:a,...n}=n),a??=`Changes between ${(0,v.pV)(i.lhs,{strings:{working:"Working Tree"}})} ${s.EO.ArrowLeftRightLong} ${(0,v.pV)(i.rhs,{strings:{working:"Working Tree"}})}`;let{git:c}=e,h=[];for(let e of t){let t="D"===e.status?void 0:await c.getBestRevisionUri(i.repoPath,e.path,i.rhs);""===i.rhs&&(t=null!=t?await c.getWorkingUri(i.repoPath,t):r.Uri.from({scheme:"untitled",authority:"",path:c.getAbsoluteUri(e.path,i.repoPath).fsPath}));let s="A"===e.status?void 0:await c.getBestRevisionUri(i.repoPath,e.originalPath??e.path,i.lhs),o=("D"===e.status?s:t)??c.getAbsoluteUri(e.path,i.repoPath);(t?.scheme!=="untitled"||null!=s)&&h.push({uri:o,lhs:s,rhs:t})}await (0,u.RZ)(h,a,n)}async function A(e,t,i,r,s){return P(e,t,{repoPath:i.repoPath,lhs:i.ref,rhs:""},r,s)}async function I(e,t,i){let s=(0,d.WM)(t);if("string"==typeof e||e instanceof r.Uri){if(!s)throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}else if(!s&&""===t.rhs)return _(e,{repoPath:t.repoPath,ref:t.lhs},i);if(i={preserveFocus:!0,preview:!1,...i},"A"===e.status&&s){let r=await t.getCommitForFile(e);(0,a.RS)("gitlens.diffWithPrevious",{commit:r,showOptions:i});return}let o=s?{repoPath:t.repoPath,rhs:t.sha,lhs:t.unresolvedPreviousSha}:t,n=h.nk.fromFile(e,o.repoPath),l="R"===e.status||"C"===e.status?h.nk.fromFile(e,o.repoPath,o.lhs,!0):n;await (0,a.RS)("gitlens.diffWith",{repoPath:o.repoPath,lhs:{uri:l,sha:o.lhs,title:i?.lhsTitle},rhs:{uri:n,sha:o.rhs,title:i?.rhsTitle},showOptions:i})}async function D(e,t,i){if("string"==typeof e){if(!(0,d.WM)(t))throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}return o.m.instance.git.diff(t.repoPath).openDiffTool?.(h.nk.fromFile(e,e.repoPath??t.repoPath),{ref1:(0,v._k)(t.ref)?"":`${t.ref}^`,ref2:(0,v._k)(t.ref)?"":t.ref,staged:(0,v.KH)(t.ref)||null!=e.indexStatus,tool:i})}async function _(e,t,i){let s;if("string"==typeof e||e instanceof r.Uri){if(!(0,d.WM)(t))throw Error("Invalid arguments");let i=await t.findFile(e);if(null==i)throw Error("Invalid arguments");e=i}"D"!==e.status&&(s=(0,d.WM)(t)?{repoPath:t.repoPath,ref:t.sha}:t,i={preserveFocus:!0,preview:!1,...i},await (0,a.Y0)("gitlens.diffWithWorking",void 0,{uri:h.nk.fromFile(e,s.repoPath,s.ref),showOptions:i,lhsTitle:i?.lhsTitle}))}async function $(e,t,i){t.lhs=t.lhs||"HEAD",t.rhs=t.rhs||"HEAD";let{files:r}=await (0,m.Hn)(e,t.repoPath,(0,v.Xn)(t.lhs,t.rhs,"..."),""===t.rhs);await P(e,r??[],t,!1,i)}async function T(e,t,i,r){return o.m.instance.git.diff(e).openDirectoryCompare?.(t,i,r)}async function E(e){return T(e.repoPath,e.ref,`${e.ref}^`)}async function x(e){return T(e.repoPath,e.ref,void 0)}async function O(e,t,i,o){let n,{git:a}=e;if(""===i.lhs)throw Error("Cannot get files for comparisons of a ref with working tree");n=""===i.rhs?i.lhs:`${i.lhs}..${i.rhs}`;let l=a.getRelativePath(t,i.repoPath),u=await a.diff(i.repoPath).getDiffStatus(n,void 0,{path:l});if(null==u)return void r.window.showWarningMessage(`No changes in '${l}' between ${(0,v.pV)(i.lhs,{strings:{working:"Working Tree"}})} ${s.EO.ArrowLeftRightLong} ${(0,v.pV)(i.rhs,{strings:{working:"Working Tree"}})}`);let c=`Changes in ${l} between ${(0,v.pV)(i.lhs,{strings:{working:"Working Tree"}})} ${s.EO.ArrowLeftRightLong} ${(0,v.pV)(i.rhs,{strings:{working:"Working Tree"}})}`;return P(e,u,i,!1,{...o,title:c})}async function F(e,t,i){let s;if(e instanceof r.Uri)s=e,i=t;else if(s=h.nk.fromFile(e,t.repoPath,t.ref),"string"!=typeof e&&"?"===e.status)return;i={preserveFocus:!0,preview:!1,...i},await (0,a.Y0)("gitlens.openWorkingFile",void 0,{uri:s,showOptions:i})}async function B(e,t,i){let s,a;if(e instanceof r.Uri){if((0,d.WM)(t))throw Error("Invalid arguments");s=e,i=t}else{let i;if(!(0,d.WM)(t))throw Error("Invalid arguments");if("string"==typeof e){let r=await t.findFile(e);if(null==r)throw Error("Invalid arguments");i=r}else i=e;s=o.m.instance.git.getRevisionUri(t.repoPath,"D"===i.status?await t.getPreviousSha()??g.nB:t.sha,i)}let{annotationType:l,line:c,...p}={preserveFocus:!0,preview:!1,...i};null!=c&&0!==c&&(p.selection=new r.Range(c,0,c,0));let m=await h.nk.fromUri(s);try{a=await (0,u.gF)(s,{throwOnError:!0,...p})}catch(t){if(!t?.message?.includes("Unable to resolve nonexistent file"))return void r.window.showErrorMessage(`Unable to open '${m.relativePath}' in revision '${m.sha}'`);let e=await (0,n.G)(o.m.instance,(0,w.kA)(m.sha,m.repoPath),{ignoreFocusOut:!0,initialPath:m.relativePath,title:`Open File at Revision \u2022 Unable to open '${m.relativePath}'`,placeholder:"Choose a file revision to open",keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,u.gF)(t,{...p,preserveFocus:!0,preview:!0})}}});if(null==e)return;a=await (0,u.gF)(e,p)}null!=l&&null!=a&&await o.m.instance.fileAnnotations.show(a,l,{selection:{line:c}})}async function L(e,t){let i;if(e instanceof r.Uri)i=e;else{if(null==t)throw Error("Invalid arguments");if(i=h.nk.fromFile(e,t.repoPath,t.ref),"string"!=typeof e&&"?"===e.status)return}await (0,a.RS)("gitlens.openFileOnRemote",i,{sha:t?.ref})}async function U(e,t,i){let{files:r,ref:s,options:n}=await Y(e,t,i);if(!await Q(r,{message:`Are you sure you want to open each of the ${r.length} files?`,confirmButton:"Open Files",threshold:10}))return;let a=(await Promise.all(r.map(e=>o.m.instance.git.getWorkingUri(s.repoPath,h.nk.fromFile(e,s.repoPath,s.ref))))).filter(e=>!!e);(0,u.k1)(a,n)}async function q(e,t,i){let{files:r,refs:s,options:n}=await K(e,t,i);await Q(r,{message:`Are you sure you want to open each of the ${r.length} file revisions?`,confirmButton:"Open Revisions",threshold:10})&&(0,u.k1)(r.map(e=>o.m.instance.git.getRevisionUri(s.repoPath,"D"===e.status?s.lhs:s.rhs,e)),n)}async function N(e,t){let i,s;if("string"==typeof e)i=e,s=t.ref;else if(i=e.path,"D"===e.status){let i=h.nk.fromFile(e,t.repoPath);try{await r.workspace.fs.stat(i),s=`${t.ref}^`}catch{s=t.ref}}else s="?"===e.status?`${t.ref}^3`:t.ref;await o.m.instance.git.checkout(t.repoPath,s,{path:i})}function M(e,t){return o.m.instance.views.revealCommit(e,t)}async function W(e,t){let i;if(null==t)return void await (0,a.RS)("gitlens.showQuickCommitDetails",{commit:e});i=t instanceof r.Uri?t:h.nk.fromFile(t,e.repoPath,e.ref),await (0,a.RS)("gitlens.showQuickCommitFileDetails",i,{sha:e.sha,commit:e})}function G(e,t){let{preserveFocus:i,...r}={...t,commit:e};return o.m.instance.views.commitDetails.show({preserveFocus:i},r)}function H(e,t){let{preserveFocus:i,...r}={...t,commit:e};return o.m.instance.views.graphDetails.show({preserveFocus:i},r)}async function V(e,t){await (0,a.RS)("gitlens.showInCommitGraph",{ref:(0,f.rd)(e),preserveFocus:t?.preserveFocus})}async function j(e,t){let i;(0,d.WM)(t)?((t.fileset?.files==null||t.fileset?.filtered)&&await t.ensureFullDetails(),i=t.fileset?.files??[]):i=t.map(t=>new p.l(e,t.repoPath,t.path,t.status,t.originalPath)),await Q(i,{message:`Are you sure you want to open each of the ${i.length} files?`,confirmButton:"Open Files",threshold:10})&&await (0,a.RS)("gitlens.openOnlyChangedFiles",{uris:i.filter(e=>"D"!==e.status).map(e=>e.uri)})}async function z(e,t){let i=await e.git.getOrOpenScmRepository(t.repoPath),s=await i?.getCommit("HEAD");if(s?.hash!==t.ref)return void r.window.showWarningMessage(`Commit ${(0,w.M4)(t,{capitalize:!0,icon:!1})} cannot be undone, because it is no longer the most recent commit.`);let o=await e.git.status(t.repoPath).getStatus();if(o?.files.length){let e={title:"Undo Commit"};if(await r.window.showWarningMessage(`You have uncommitted changes in the working tree.

Do you still want to undo ${(0,w.M4)(t,{capitalize:!1,icon:!1})}?`,{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})!==e)return}await (0,a.wS)("git.undoCommit",t.repoPath)}async function Q(e,t){if(e.length<=t.threshold)return!0;let i={title:t.confirmButton??"Open"},s={title:t.cancelButton??"Cancel",isCloseAffordance:!0};return await r.window.showWarningMessage(t.message,{modal:!0},i,s)===i}async function Y(e,t,i){return(0,d.WM)(e)?(e.fileset?.files==null&&await e.ensureFullDetails(),{commit:e,files:e.fileset?.files??[],options:t,ref:{repoPath:e.repoPath,ref:e.sha}}):{files:e,options:i,ref:t}}async function K(e,t,i){return(0,d.WM)(e)?(e.fileset?.files==null&&await e.ensureFullDetails(),{commit:e,files:e.fileset?.files??[],options:t,refs:{repoPath:e.repoPath,rhs:e.sha,lhs:e.resolvedPreviousSha??await e.getPreviousSha()??e.unresolvedPreviousSha}}):{files:e,options:i,refs:t}}async function Z(e,t){return e.fileset?.files==null&&await e.ensureFullDetails(),{files:(null!=t?e.fileset?.files?.filter(t):e.fileset?.files)??[],refs:{repoPath:e.repoPath,rhs:e.sha,lhs:e.resolvedPreviousSha??await e.getPreviousSha()??e.unresolvedPreviousSha}}}async function J(e,t,i,r){let s=e.git.commits(t);if(await s.isAncestorOf(i,r))return[r,i];if(await s.isAncestorOf(r,i))return[i,r];let[o,n]=await Promise.allSettled([s.getCommit(i),s.getCommit(r)]),a=(0,c.Ro)(o),l=(0,c.Ro)(n);return null!=l&&null!=a&&l.date>a.date?[r,i]:[i,r]}},4152:(e,t,i)=>{i.d(t,{CZ:()=>n,G3:()=>a,QK:()=>l,t2:()=>o});var r=i(1398),s=i(1182);async function o(e){try{return await r.workspace.fs.stat(e),!0}catch{return!1}}async function n(e){if(null!=e)return r.env.openExternal(e)}function a(e){return s.MV.has(e.scheme)}function l(e){return e.scheme===s.xB.Virtual||e.scheme===s.xB.GitHub}},4154:(e,t,i)=>{i.d(t,{Z5:()=>o,b3:()=>n,y1:()=>s});var r=i(7864);async function s(e,t,i){let[s,a,l]=await Promise.allSettled([e.git.branches(t.repoPath).getBaseBranchName?.(t.name),o(e,t.repoPath,t.getRemoteName()),n(e,t,{cancellation:i?.cancellation,timeout:i?.timeout})]),u=(0,r.Ro)(s);return{baseBranch:u,defaultBranch:(0,r.Ro)(a),targetBranch:(0,r.Ro)(l)??{value:void 0,paused:!1}}}async function o(e,t,i,r){let s=await e.git.branches(t).getDefaultBranchName(i);if(null!=s)return s;let o=await e.git.remotes(t).getBestRemoteWithIntegration();if(null==o)return;let n=await o.getIntegration(),a=await n?.getDefaultBranch?.(o.provider.repoDesc,r);return a&&`${o.name}/${a?.name}`}async function n(e,t,i){let s=await e.git.branches(t.repoPath).getTargetBranchName?.(t.name);return null!=s?{value:s,paused:!1}:i?.cancellation?.isCancellationRequested?{value:void 0,paused:!1}:(0,r.wW)((i?.associatedPullRequest??t?.getAssociatedPullRequest())?.then(i=>{if(i?.refs?.base==null)return;let r=`${t.getRemoteName()}/${i.refs.base.branch}`;return e.git.branches(t.repoPath).setTargetBranchName?.(t.name,r),r}),i?.cancellation,i?.timeout)}},4168:(e,t,i)=>{i.d(t,{N:()=>s});var r=i(2870);async function s(e,t,i){let s={label:e.label,description:e.current?"you":e.email,alwaysShow:i?.alwaysShow,buttons:i?.buttons,picked:t,item:e,iconPath:r.H.get("gitCommands.avatars")?await e.getAvatarUri():void 0};return i?.alwaysShow==null&&t&&(s.alwaysShow=!0),s}},4241:(e,t,i)=>{i.d(t,{u:()=>RemoteProvider});var r=i(1398),s=i(4152),o=i(1555),n=i(6732),a=i(7864),l=i(5853),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor;let RemoteProvider=class RemoteProvider{constructor(e,t,i="https",r,s=!1){this.domain=e,this.path=t,this.protocol=i,this.custom=s,this._name=r}_name;get autolinks(){return[{url:this.issueLinkPattern,prefix:"",title:`Open Issue #<num> on ${this.name}`,referenceType:"branch",alphanumeric:!1,ignoreCase:!0}]}get avatarUri(){}get displayPath(){return this.path}get icon(){return"remote"}get owner(){return this.splitPath(this.path)[0]}get remoteKey(){return this.domain?`${this.domain}/${this.path}`:this.path}get repoDesc(){return{owner:this.owner,name:this.repoName}}get providerDesc(){if(null!=this.gkProviderId&&null!=this.owner&&null!=this.repoName)return{id:this.gkProviderId,repoDomain:this.owner,repoName:this.repoName}}get repoName(){return this.splitPath(this.path)[1]}get supportedFeatures(){return{}}async copy(e){let t=await this.getUrlsFromResources(e);t.length&&await r.env.clipboard.writeText(t.join(`
`))}async open(e){let t=await this.getUrlsFromResources(e);return!!t.length&&(await Promise.allSettled(t.map(s.CZ))).every(e=>!0===(0,a.Ro)(e))}url(e,t){switch(e.type){case l.J.Branch:return this.getUrlForBranch(e.branch);case l.J.Branches:return this.getUrlForBranches();case l.J.Commit:return this.getUrlForCommit(e.sha);case l.J.Comparison:return this.getUrlForComparison(e.base,e.head,e.notation??"...");case l.J.CreatePullRequest:return this.getUrlForCreatePullRequest(e,t);case l.J.File:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,void 0,e.range);case l.J.Repo:return this.getUrlForRepository();case l.J.Revision:return this.getUrlForFile(e.fileName,null!=e.branchOrTag?e.branchOrTag:void 0,null!=e.sha?e.sha:void 0,e.range);default:return}}get baseUrl(){return this.getRepoBaseUrl(this.path)}getRepoBaseUrl(e){return`${this.protocol}://${this.domain}/${e}`}formatName(e){return null!=this._name?this._name:`${e}${this.custom?` (${this.domain})`:""}`}splitPath(e){let t=e.indexOf("/");return[e.substring(0,t),e.substring(t+1)]}async isReadyForForCrossForkPullRequestUrls(){return Promise.resolve(!0)}getUrlForRepository(){return this.baseUrl}encodeUrl(e){return(0,n.W)(e)?.replace(/#/g,"%23")}async getUrlsFromResources(e){let t=[];if(Array.isArray(e))for(let i of e)t.push(this.url(i));else t.push(this.url(e));return(await Promise.allSettled(t)).map(e=>(0,a.Ro)(e)).filter(e=>null!=e)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o)})([(0,o.B)()],RemoteProvider.prototype,"remoteKey",1)},4256:(e,t,i)=>{i.d(t,{FV:()=>c,e8:()=>d,sF:()=>h});let r=/[\\*_{}[\]()#+\-.!<>]/g,s=/\\([\\`*_{}[\]()#+\-.!<>])/g,o=/(\[((?:\\.|[^[\]\\])+)\]\(((?:\\.|[^()\\])+)\))/g,n=/^===/gm,a=/^\u200b===/gm,l=/\r?\n/g,u=/`/g;function c(e,t){if(t?.preserveLinks){let i=new Map,s=0;if(e=(e=e.replace(o,e=>{let t=`$$$GLLINK${s++}GLLINK$$$`;return i.set(t,e),t})).replace(r,"\\$&"),t?.preserveLinks&&i.size)for(let[t,r]of i)e=e.replace(t,r)}else e=e.replace(r,"\\$&");return(e=e.replace(n,"​==="),e=t?.inlineBackticks?h(e):e.replace(u,"\\$&"),t?.quoted)?e.trim().replace(l,`	\\
>  `):e}function h(e){let t="\\`\\`\\`",i="",r=!0,s=!1,o="";for(let n=0;n<e.length;n+=1){let a=e[n];if(`
`===a&&s&&(r=!1),"```"===e.substring(n,n+3)){s?(s=!1,r?i+=`\`\`\`${o}\`\`\``:(i+=`${t}${o}${t}`,r=!0),o=""):s=!0,n+=2;continue}s?o+=a:i+=a}return s&&(i+=r?"```"+o:t+o),i}function d(e){return e.replace(s,"$1").replace(a,"===")}},4269:(e,t,i)=>{i.d(t,{Ac:()=>W,EO:()=>N,Gz:()=>M,Ii:()=>b,J3:()=>F,KC:()=>y,Mt:()=>S,NT:()=>v,QF:()=>O,W3:()=>k,XP:()=>C,Y9:()=>P,bT:()=>w,d8:()=>B,iG:()=>q,lE:()=>g,mN:()=>R,n2:()=>m,tf:()=>A});var r,s,o,n=i(4478),a=i(928),l=i(7279),u=i(1849),c=i(600),h=i(2356),d=i(4808),p=i(1678);let g=n.GitPullRequestReviewState,m=n.GitBuildStatusState,f=[u.PY.CloudGitHubEnterprise,u.PY.GitHubEnterprise,u.PY.CloudGitLabSelfHosted,u.PY.GitLabSelfHosted,u.PY.BitbucketServer],w=[u.Q7.GitHub,u.Q7.GitLab,u.Q7.Bitbucket,u.Q7.AzureDevOps,u.tp.Jira,u.tp.Trello,...f];function v(e){return f.includes(e)}function y(e){return[u.Q7.GitHub,u.Q7.GitLab,u.Q7.Bitbucket,u.Q7.AzureDevOps].includes(e)}function b(e){return e===u.PY.CloudGitHubEnterprise||e===u.PY.CloudGitLabSelfHosted||e===u.PY.BitbucketServer}var C=((r=C||{}).Author="author",r.Assignee="assignee",r.ReviewRequested="review-requested",r.Mention="mention",r),R=((s=R||{}).Author="author",s.Assignee="assignee",s.Mention="mention",s),k=((o=k||{}).Project="project",o.Repo="repo",o.Repos="repos",o);let S={[u.Q7.GitHub]:{domain:"github.com",id:u.Q7.GitHub,name:"GitHub",type:"hosting",iconKey:u.Q7.GitHub,issuesPagingMode:"repos",pullRequestsPagingMode:"repos",supportedPullRequestFilters:["author","assignee","review-requested","mention"],supportedIssueFilters:["author","assignee","mention"],scopes:["repo","read:user","user:email"]},[u.PY.CloudGitHubEnterprise]:{domain:"",id:u.PY.CloudGitHubEnterprise,name:"GitHub Enterprise",type:"hosting",iconKey:u.PY.GitHubEnterprise,issuesPagingMode:"repos",pullRequestsPagingMode:"repos",supportedPullRequestFilters:["author","assignee","review-requested","mention"],supportedIssueFilters:["author","assignee","mention"],scopes:["repo","read:user","user:email"]},[u.PY.GitHubEnterprise]:{domain:"",id:u.PY.GitHubEnterprise,name:"GitHub Enterprise",type:"hosting",iconKey:u.PY.GitHubEnterprise,issuesPagingMode:"repos",pullRequestsPagingMode:"repos",supportedPullRequestFilters:["author","assignee","review-requested","mention"],supportedIssueFilters:["author","assignee","mention"],scopes:["repo","read:user","user:email"]},[u.Q7.GitLab]:{domain:"gitlab.com",id:u.Q7.GitLab,name:"GitLab",type:"hosting",iconKey:u.Q7.GitLab,issuesPagingMode:"repo",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee","review-requested"],supportedIssueFilters:["author","assignee"],scopes:["api","read_user","read_repository"]},[u.PY.CloudGitLabSelfHosted]:{domain:"",id:u.PY.CloudGitLabSelfHosted,name:"GitLab Self-Hosted",type:"hosting",iconKey:u.PY.GitLabSelfHosted,issuesPagingMode:"repo",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee","review-requested"],supportedIssueFilters:["author","assignee"],scopes:["api","read_user","read_repository"]},[u.PY.GitLabSelfHosted]:{domain:"",id:u.PY.GitLabSelfHosted,name:"GitLab Self-Hosted",type:"hosting",iconKey:u.PY.GitLabSelfHosted,issuesPagingMode:"repo",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee","review-requested"],supportedIssueFilters:["author","assignee"],scopes:["api","read_user","read_repository"]},[u.Q7.Bitbucket]:{domain:"bitbucket.org",id:u.Q7.Bitbucket,name:"Bitbucket",type:"hosting",iconKey:u.Q7.Bitbucket,pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author"],scopes:["account:read","repository:read","pullrequest:read","issue:read"]},[u.PY.BitbucketServer]:{domain:"",id:u.PY.BitbucketServer,name:"Bitbucket Data Center",type:"hosting",iconKey:u.PY.BitbucketServer,supportedPullRequestFilters:["author","review-requested"],scopes:["Project (Read)","Repository (Write)"]},[u.Q7.AzureDevOps]:{domain:"dev.azure.com",id:u.Q7.AzureDevOps,name:"Azure DevOps",type:"hosting",iconKey:u.Q7.AzureDevOps,issuesPagingMode:"project",pullRequestsPagingMode:"repo",supportedPullRequestFilters:["author","assignee"],supportedIssueFilters:["author","assignee","mention"],scopes:["vso.code","vso.identity","vso.project","vso.profile","vso.work"]},[u.tp.Jira]:{domain:"atlassian.net",id:u.tp.Jira,name:"Jira",type:"issues",iconKey:u.tp.Jira,scopes:["read:status:jira","read:application-role:jira","write:attachment:jira","read:comment:jira","read:project-category:jira","read:project:jira","read:issue.vote:jira","read:field-configuration:jira","write:issue:jira","read:issue-security-level:jira","write:issue.property:jira","read:issue.changelog:jira","read:avatar:jira","read:issue-meta:jira","read:permission:jira","offline_access","read:issue:jira","read:me","read:audit-log:jira","read:project.component:jira","read:group:jira","read:project-role:jira","write:comment:jira","read:label:jira","write:comment.property:jira","read:issue-details:jira","read:issue-type-hierarchy:jira","read:issue.transition:jira","read:user:jira","read:field:jira","read:issue-type:jira","read:project.property:jira","read:comment.property:jira","read:project-version:jira"],supportedIssueFilters:["author","assignee","mention"]},[u.tp.Trello]:{domain:"trello.com",id:u.tp.Trello,name:"Trello",type:"issues",iconKey:u.tp.Trello,scopes:[]}};function P(e,t){if(null!=e.updatedDate&&null!=e.author&&null!=e.url)return{type:"issue",provider:t,id:e.number,nodeId:e.graphQLId??e.id,title:e.title,url:e.url,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate??void 0,closed:null!=e.closedDate,state:null!=e.closedDate?"closed":"opened",author:{id:e.author.id??"",name:e.author.name??"",avatarUrl:e.author.avatarUrl??void 0,url:e.author.url??void 0},assignees:e.assignees?.map(e=>({id:e.id??"",name:e.name??"",avatarUrl:e.avatarUrl??void 0,url:e.url??void 0}))??[],project:{id:e.project?.id??"",name:e.project?.name??"",resourceId:e.project?.resourceId??"",resourceName:e.project?.namespace??""},repository:e.repository?.owner?.login!=null?{owner:e.repository.owner.login,repo:e.repository.name}:void 0,labels:e.labels.map(e=>({color:e.color??void 0,name:e.name})),commentsCount:e.commentCount??void 0,thumbsUpCount:e.upvoteCount??void 0,body:e.description??void 0}}function A(e,t){return{provider:t,id:e.id,name:e.name??void 0,email:e.email??void 0,avatarUrl:e.avatarUrl??void 0,username:e.username??void 0}}let I={[h.gI.Success]:n.GitBuildStatusState.Success,[h.gI.Failed]:n.GitBuildStatusState.Failed,[h.gI.Pending]:n.GitBuildStatusState.Pending},D={[n.GitBuildStatusState.Success]:h.gI.Success,[n.GitBuildStatusState.Failed]:h.gI.Failed,[n.GitBuildStatusState.Pending]:h.gI.Pending,[n.GitBuildStatusState.ActionRequired]:h.gI.Failed,[n.GitBuildStatusState.Error]:void 0,[n.GitBuildStatusState.Cancelled]:void 0,[n.GitBuildStatusState.OptionalActionRequired]:void 0,[n.GitBuildStatusState.Skipped]:void 0,[n.GitBuildStatusState.Running]:void 0,[n.GitBuildStatusState.Warning]:void 0},_={[h.c7.Approved]:n.GitPullRequestReviewState.Approved,[h.c7.ChangesRequested]:n.GitPullRequestReviewState.ChangesRequested,[h.c7.Commented]:n.GitPullRequestReviewState.Commented,[h.c7.ReviewRequested]:n.GitPullRequestReviewState.ReviewRequested,[h.c7.Dismissed]:null,[h.c7.Pending]:null},$={[n.GitPullRequestReviewState.Approved]:h.c7.Approved,[n.GitPullRequestReviewState.ChangesRequested]:h.c7.ChangesRequested,[n.GitPullRequestReviewState.Commented]:h.c7.Commented,[n.GitPullRequestReviewState.ReviewRequested]:h.c7.ReviewRequested},T={[h.Q6.Mergeable]:n.GitPullRequestMergeableState.Mergeable,[h.Q6.Conflicting]:n.GitPullRequestMergeableState.Conflicts,[h.Q6.Unknown]:n.GitPullRequestMergeableState.Unknown,[h.Q6.FailingChecks]:n.GitPullRequestMergeableState.FailingChecks,[h.Q6.BlockedByPolicy]:n.GitPullRequestMergeableState.Blocked},E={[n.GitPullRequestMergeableState.Mergeable]:h.Q6.Mergeable,[n.GitPullRequestMergeableState.Conflicts]:h.Q6.Conflicting,[n.GitPullRequestMergeableState.Blocked]:h.Q6.BlockedByPolicy,[n.GitPullRequestMergeableState.FailingChecks]:h.Q6.FailingChecks,[n.GitPullRequestMergeableState.Unknown]:h.Q6.Unknown,[n.GitPullRequestMergeableState.Behind]:h.Q6.Unknown,[n.GitPullRequestMergeableState.UnknownAndBlocked]:h.Q6.Unknown,[n.GitPullRequestMergeableState.Unstable]:h.Q6.Unknown},x={[n.GitPullRequestReviewState.Approved]:h.dq.Approved,[n.GitPullRequestReviewState.ChangesRequested]:h.dq.ChangesRequested,[n.GitPullRequestReviewState.Commented]:void 0,[n.GitPullRequestReviewState.ReviewRequested]:h.dq.ReviewRequired};function O(e,t,i){var r,s,o;return new h.B9(t,U(e.author),e.id,e.graphQLId||e.id,e.title,e.url??"",{owner:e.repository.owner.login,repo:e.repository.name,accessLevel:c.LI.Write,id:e.repository.id},(r=e.state)===n.GitPullRequestState.Open?"opened":r===n.GitPullRequestState.Closed?"closed":"merged",e.createdDate,e.updatedDate,e.closedDate??void 0,e.mergedDate??void 0,e.mergeableState?E[e.mergeableState]:void 0,!!(e.permissions?.canMerge||e.permissions?.canMergeAndBypassProtections)||void 0,{base:{branch:e.baseRef?.name??"",sha:e.baseRef?.oid??"",repo:e.repository.name,owner:e.repository.owner.login,exists:null!=e.baseRef,url:e.repository.remoteInfo?.cloneUrlHTTPS?e.repository.remoteInfo.cloneUrlHTTPS.replace(/\.git$/,""):""},head:{branch:e.headRef?.name??"",sha:e.headRef?.oid??"",repo:e.headRepository?.name??"",owner:e.headRepository?.owner.login??"",exists:null!=e.headRef,url:e.headRepository?.remoteInfo?.cloneUrlHTTPS?e.headRepository.remoteInfo.cloneUrlHTTPS.replace(/\.git$/,""):""},isCrossRepository:e.headRepository?.id!==e.repository.id},e.isDraft,e.additions??void 0,e.deletions??void 0,e.commentCount??void 0,e.upvoteCount??void 0,e.reviewDecision?x[e.reviewDecision]:void 0,null==(s=e.reviews)?void 0:s?.filter(e=>e.state===n.GitPullRequestReviewState.ReviewRequested).map(e=>({isCodeOwner:!1,reviewer:U(e.reviewer),state:h.c7.ReviewRequested})),null==(o=e.reviews)?void 0:o?.filter(e=>e.state!==n.GitPullRequestReviewState.ReviewRequested).map(e=>({isCodeOwner:!1,reviewer:U(e.reviewer),state:$[e.state]})),e.assignees?.map(U)??void 0,e.headCommit?.buildStatuses?.[0]?.state?D[e.headCommit.buildStatuses[0].state]:void 0,i?.project,e.version)}function F(e,t,i){return new c.m2(t,e.id,e.graphQLId,e.title,e.url??"",e.createdDate,e.updatedDate??e.closedDate??e.createdDate,null!=e.closedDate,null!=e.closedDate?"closed":"opened",U(e.author),e.assignees?.map(U)??void 0,void 0,e.closedDate??void 0,void 0,e.commentCount??void 0,e.upvoteCount??void 0,e.description??void 0,i?.project!=null?{id:i.project.id,name:i.project.name,resourceId:i.project.resourceId,resourceName:i.project.resourceName}:e.project?.id&&e.project?.resourceId&&e.project?.namespace?{id:e.project.id,name:e.project.name,resourceId:e.project.resourceId,resourceName:e.project.namespace}:void 0)}function B(e){return{...function(e){var t;let i=[...e.reviewRequests??[],...e.latestReviews??[]];return{id:e.id,graphQLId:e.nodeId,number:Number.parseInt(e.id,10),title:e.title,url:e.url,state:"opened"===(t=e.state)?n.GitPullRequestState.Open:"closed"===t?n.GitPullRequestState.Closed:n.GitPullRequestState.Merged,isDraft:e.isDraft??!1,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate??null,mergedDate:e.mergedDate??null,commentCount:e.commentsCount??null,upvoteCount:e.thumbsUpCount??null,commitCount:null,fileCount:null,additions:e.additions??null,deletions:e.deletions??null,author:L(e.author),assignees:e.assignees?.map(L)??null,baseRef:e.refs?.base==null?null:{name:e.refs.base.branch,oid:e.refs.base.sha},headRef:e.refs?.head==null?null:{name:e.refs.head.branch,oid:e.refs.head.sha},reviews:i.filter(e=>e.state!==h.c7.Dismissed&&e.state!==h.c7.Pending).map(e=>({reviewer:L(e.reviewer),state:_[e.state]??n.GitPullRequestReviewState.ReviewRequested})),reviewDecision:function(e,t){switch(e){case h.dq.Approved:return n.GitPullRequestReviewState.Approved;case h.dq.ChangesRequested:return n.GitPullRequestReviewState.ChangesRequested;case h.dq.ReviewRequired:return n.GitPullRequestReviewState.ReviewRequested;default:if(t?.some(e=>e.state===h.c7.ReviewRequested))return n.GitPullRequestReviewState.ReviewRequested;if(t?.some(e=>e.state===h.c7.Commented))return n.GitPullRequestReviewState.Commented;return null}}(e.reviewDecision,i),repository:null!=e.repository?{id:e.repository.repo,name:e.repository.repo,owner:{login:e.repository.owner},remoteInfo:null}:{id:"",name:"",owner:{login:""},remoteInfo:null},headRepository:e.refs?.head!=null?{id:e.refs.head.repo,name:e.refs.head.repo,owner:{login:e.refs.head.owner},remoteInfo:null}:null,headCommit:null!=e.statusCheckRollupState?{buildStatuses:[{completedAt:null,description:"",name:"",state:I[e.statusCheckRollupState],startedAt:null,stage:null,url:""}]}:null,permissions:null==e.viewerCanUpdate?null:{canMerge:!0===e.viewerCanUpdate&&null!=e.repository.accessLevel&&e.repository.accessLevel>=c.LI.Write,canMergeAndBypassProtections:!0===e.viewerCanUpdate&&null!=e.repository.accessLevel&&e.repository.accessLevel>=c.LI.Admin},mergeableState:e.mergeableState?T[e.mergeableState]:n.GitPullRequestMergeableState.Unknown}}(e),uuid:a.EntityIdentifierUtils.encode((0,p.Dz)(e))}}function L(e){return{id:e.id??null,avatarUrl:e.avatarUrl??null,name:e.name??null,url:e.url??null,email:"",username:e.name??null}}function U(e){return{id:e?.id??"",name:e?.name??"unknown",avatarUrl:e?.avatarUrl??void 0,url:e?.url??""}}let q=l.GitProviderUtils.getActionablePullRequests;function N(e){return(0,d.Q_)(e,"github.com")}function M(e){return(0,d.Q_)(e,"gitlab.com")}function W(e){return N(e.domain)}},4283:(e,t,i)=>{i.d(t,{ek:()=>o,hM:()=>n,re:()=>a});var r=i(1398),s=i(811);function o(e){let t=e?.input;if(null!=t&&"object"==typeof t){if("uri"in t&&t.uri instanceof r.Uri)return t.uri;if("modified"in t&&t.modified instanceof r.Uri)return t.modified}}function n(e){let t=e?.input;return null==t||"object"!=typeof t?{modified:void 0}:"uri"in t&&t.uri instanceof r.Uri?{modified:t.uri}:"modified"in t&&t.modified instanceof r.Uri?"original"in t&&t.original instanceof r.Uri?{modified:t.modified,original:t.original}:{modified:t.modified}:{modified:void 0}}function a(e){return r.window.tabGroups.all.flatMap(e=>e.tabs).filter(t=>t.isActive&&function(e,t){if(null==t)return!1;let i=e?.input;if(null==i||"object"!=typeof i)return!1;function o(e,t){return t instanceof r.Uri&&(0,s.k)(e,t)}return"uri"in i&&o(t,i.uri)||"modified"in i&&o(t,i.modified)||"original"in i&&o(t,i.original)}(t,e)).sort((e,t)=>(e.group.isActive?-1:1)-(t.group.isActive?-1:1))}},4357:(e,t,i)=>{i.d(t,{Du:()=>l,WL:()=>n,hr:()=>u,qT:()=>a});var r,s=i(3911),o=i(4808),n=((r=n||{})[r.Back=0]="Back",r[r.Cancel=1]="Cancel",r[r.LoadMore=2]="LoadMore",r[r.Noop=3]="Noop",r[r.Reload=4]="Reload",r[r.RequiresVerification=5]="RequiresVerification",r[r.SignIn=6]="SignIn",r[r.StartPreview=7]="StartPreview",r[r.StartProTrial=8]="StartProTrial",r[r.RequiresPaidSubscription=9]="RequiresPaidSubscription",r);function a(e){return"number"==typeof e&&null!=n[e]}function l(e,t,i){let r=i?.label,n=i?.detail,a=i?.description;if(null==r)switch(e){case 0:r="Back";break;case 1:r="Cancel";break;case 2:r="Load more";break;case 3:r="Try again";break;case 4:r="Refresh";break;case 6:r="Sign In";break;case 7:r="Continue",n=`Continuing gives you ${s.Ep} days to preview this and other local Pro features`;break;case 8:r="Try GitLens Pro",n=`Get ${(0,o.td)("day",s.kj)} of GitLens Pro for free \u2014 no credit card required.`;break;case 5:r="Resend Email",n="You must verify your email before you can continue";break;case 9:r="Upgrade to Pro",null!=n?a??=" —   GitLens Pro is required to use this feature":n="Upgrading to GitLens Pro is required to use this feature"}return{label:r,description:a,detail:n,iconPath:i?.iconPath,buttons:i?.buttons,alwaysShow:!0,picked:t,directive:e,onDidSelect:i?.onDidSelect}}function u(e){return null!=e&&"directive"in e}},4401:(e,t,i)=>{i.d(t,{k:()=>CommitFileNode,p:()=>CommitFileNodeBase});var r=i(1398),s=i(1182),o=i(534),n=i(2624),a=i(567),l=i(2141),u=i(745),c=i(9686),h=i(2278),d=i(6572),p=i(5818),g=i(7273);let CommitFileNodeBase=class CommitFileNodeBase extends g.p{constructor(e,t,i,r,s,o){super(e,n.nk.fromFile(r,s.repoPath,s.sha),t,i,r),this.commit=s,this.options=o,this.updateContext({commit:s,file:r}),this._uniqueId=(0,p.pF)(e,this.context)}get id(){return this._uniqueId}toClipboard(){return this.file.path}get priority(){return 0}get ref(){return this.commit}getChildren(){return[]}async getTreeItem(){if(null==this.commit.file){let e=await this.commit.getCommitForFile(this.file);if(null==e){let e=await this.view.container.git.commits(this.repoPath).getLogForPath(this.file.path,this.commit.sha,{limit:2});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}let e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);if(e.id=this.id,e.contextValue=this.contextValue,e.description=this.description,"type"===this.view.config.files.icon)e.resourceUri=r.Uri.from({scheme:s.xB.Git,authority:"gitlens-view",path:this.uri.path,query:JSON.stringify({path:this.uri.fsPath,ref:this.uri.sha,decoration:(0,h.E)("commit-file",{status:this.file.status}).toString()})});else{e.resourceUri=(0,h.E)("commit-file",{status:this.file.status});let t=(0,a.O)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,c.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,c.HS)("images","light",t))}}return e.tooltip=(0,d.h)(this.file),e.command=this.getCommand(),this._label=void 0,e}get contextValue(){return this.commit.isUncommitted?this.commit.isUncommittedStaged?`${p.U0.File}+staged`:`${p.U0.File}+unstaged`:`${p.U0.File}+committed${this.options?.branch?.current?"+current":""}${this.options?.branch?.current&&this.options.branch.sha===this.commit.ref?"+HEAD":""}${this.options?.unpublished?"+unpublished":""}`}get description(){return o.Z.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})}_folderName;get folderName(){return void 0===this._folderName&&(this._folderName=(0,u.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return void 0===this._label&&(this._label=o.Z.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}getCommand(){let e;return e=this.commit.lines.length?this.commit.lines[0].line-1:this.options?.selection?.active.line??0,(0,l.gu)("gitlens.diffWithPrevious","Open Changes with Previous Revision",void 0,{commit:this.commit,uri:n.nk.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}})}};let CommitFileNode=class CommitFileNode extends CommitFileNodeBase{constructor(e,t,i,r,s){super("commit-file",e,t,i,r,s)}}},4435:(e,t,i)=>{i.d(t,{R:()=>r});let Lazy=class Lazy{constructor(e){this.valueProvider=e}_evaluated=!1;get evaluated(){return this._evaluated}_exception;_value;get value(){if(!this._evaluated)try{this._value=this.valueProvider()}catch(e){throw this._exception=e,e}finally{this._evaluated=!0}if(this._exception)throw this._exception;return this._value}};function r(e){return new Lazy(e)}},4460:(e,t,i)=>{i.r(t),i.d(t,{OpenAIProvider:()=>OpenAIProvider});var r=i(1820),s=i(2870),o=i(8730);let n=[{id:"gpt-4.1",name:"GPT-4.1",maxTokens:{input:1047576,output:32768},provider:r.lh},{id:"gpt-4.1-2025-04-14",name:"GPT-4.1 (2025-04-14)",maxTokens:{input:1047576,output:32768},provider:r.lh,hidden:!0},{id:"gpt-4.1-mini",name:"GPT-4.1 mini",maxTokens:{input:1047576,output:32768},provider:r.lh},{id:"gpt-4.1-mini-2025-04-14",name:"GPT-4.1 mini (2025-04-14)",maxTokens:{input:1047576,output:32768},provider:r.lh,hidden:!0},{id:"gpt-4.1-nano",name:"GPT-4.1 nano",maxTokens:{input:1047576,output:32768},provider:r.lh},{id:"gpt-4.1-nano-2025-04-14",name:"GPT-4.1 nano (2025-04-14)",maxTokens:{input:1047576,output:32768},provider:r.lh,hidden:!0},{id:"o4-mini",name:"o4 mini",maxTokens:{input:2e5,output:1e5},provider:r.lh,temperature:null},{id:"o4-mini-2025-04-16",name:"o4 mini (2025-04-16)",maxTokens:{input:2e5,output:1e5},provider:r.lh,temperature:null,hidden:!0},{id:"o3",name:"o3",maxTokens:{input:2e5,output:1e5},provider:r.lh,temperature:null},{id:"o3-2025-04-16",name:"o3 (2025-04-16)",maxTokens:{input:2e5,output:1e5},provider:r.lh,temperature:null,hidden:!0},{id:"o3-mini",name:"o3 mini",maxTokens:{input:2e5,output:1e5},provider:r.lh,temperature:null},{id:"o3-mini-2025-01-31",name:"o3 mini",maxTokens:{input:2e5,output:1e5},provider:r.lh,temperature:null,hidden:!0},{id:"o1",name:"o1",maxTokens:{input:2e5,output:1e5},provider:r.lh,temperature:null},{id:"o1-2024-12-17",name:"o1",maxTokens:{input:2e5,output:1e5},provider:r.lh,temperature:null,hidden:!0},{id:"o1-preview",name:"o1 preview",maxTokens:{input:128e3,output:32768},provider:r.lh,temperature:null,hidden:!0},{id:"o1-preview-2024-09-12",name:"o1 preview",maxTokens:{input:128e3,output:32768},provider:r.lh,temperature:null,hidden:!0},{id:"o1-mini",name:"o1 mini",maxTokens:{input:128e3,output:65536},provider:r.lh,temperature:null},{id:"o1-mini-2024-09-12",name:"o1 mini",maxTokens:{input:128e3,output:65536},provider:r.lh,temperature:null,hidden:!0},{id:"gpt-4o",name:"GPT-4o",maxTokens:{input:128e3,output:16384},provider:r.lh,default:!0},{id:"gpt-4o-2024-11-20",name:"GPT-4o",maxTokens:{input:128e3,output:16384},provider:r.lh,hidden:!0},{id:"gpt-4o-2024-08-06",name:"GPT-4o",maxTokens:{input:128e3,output:16384},provider:r.lh,hidden:!0},{id:"gpt-4o-2024-05-13",name:"GPT-4o",maxTokens:{input:128e3,output:4096},provider:r.lh,hidden:!0},{id:"chatgpt-4o-latest",name:"GPT-4o",maxTokens:{input:128e3,output:16384},provider:r.lh,hidden:!0},{id:"gpt-4o-mini",name:"GPT-4o mini",maxTokens:{input:128e3,output:16384},provider:r.lh},{id:"gpt-4o-mini-2024-07-18",name:"GPT-4o mini",maxTokens:{input:128e3,output:16384},provider:r.lh,hidden:!0},{id:"gpt-4-turbo",name:"GPT-4 Turbo",maxTokens:{input:128e3,output:4096},provider:r.lh,hidden:!0},{id:"gpt-4-turbo-2024-04-09",name:"GPT-4 Turbo preview (2024-04-09)",maxTokens:{input:128e3,output:4096},provider:r.lh,hidden:!0},{id:"gpt-4-turbo-preview",name:"GPT-4 Turbo preview",maxTokens:{input:128e3,output:4096},provider:r.lh,hidden:!0},{id:"gpt-4-0125-preview",name:"GPT-4 0125 preview",maxTokens:{input:128e3,output:4096},provider:r.lh,hidden:!0},{id:"gpt-4-1106-preview",name:"GPT-4 1106 preview",maxTokens:{input:128e3,output:4096},provider:r.lh,hidden:!0},{id:"gpt-4",name:"GPT-4",maxTokens:{input:8192,output:4096},provider:r.lh,hidden:!0},{id:"gpt-4-0613",name:"GPT-4 0613",maxTokens:{input:8192,output:4096},provider:r.lh,hidden:!0},{id:"gpt-4-32k",name:"GPT-4 32k",maxTokens:{input:32768,output:4096},provider:r.lh,hidden:!0},{id:"gpt-4-32k-0613",name:"GPT-4 32k 0613",maxTokens:{input:32768,output:4096},provider:r.lh,hidden:!0},{id:"gpt-3.5-turbo",name:"GPT-3.5 Turbo",maxTokens:{input:16385,output:4096},provider:r.lh,hidden:!0},{id:"gpt-3.5-turbo-0125",name:"GPT-3.5 Turbo 0125",maxTokens:{input:16385,output:4096},provider:r.lh,hidden:!0},{id:"gpt-3.5-turbo-1106",name:"GPT-3.5 Turbo 1106",maxTokens:{input:16385,output:4096},provider:r.lh,hidden:!0},{id:"gpt-3.5-turbo-16k",name:"GPT-3.5 Turbo 16k",maxTokens:{input:16385,output:4096},provider:r.lh,hidden:!0}];let OpenAIProvider=class OpenAIProvider extends o.G{id=r.lh.id;name=r.lh.name;descriptor=r.lh;config={keyUrl:"https://platform.openai.com/account/api-keys",keyValidator:/(?:sk-)?[a-zA-Z0-9]{32,}/};getModels(){return Promise.resolve(n)}getUrl(e){return s.H.get("ai.openai.url")||"https://api.openai.com/v1/chat/completions"}getHeaders(e,t,i,r){return r.includes(".azure.com")?{Accept:"application/json","Content-Type":"application/json","api-key":t}:super.getHeaders(e,t,i,r)}}},4473:(e,t,i)=>{i.d(t,{q:()=>d});var r=i(1398),s=i(224),o=i(2099),n=i(9779),a=i(8518),l=i(8219),u=i(3219),c=i(1510);function h(...e){if(0===e.length)return"";if(e.length>1)return JSON.stringify(e,s.q);let[t]=e;if(null==t)return"";switch(typeof t){case"string":return t;case"number":case"boolean":case"undefined":case"symbol":case"bigint":return String(t);default:if(t instanceof Error)return String(t);if(t instanceof r.Uri){if("sha"in t&&"string"==typeof t.sha&&t.sha)return`${t.sha}:${t.toString()}`;return t.toString()}if((0,l.Z6)(t)||(0,n.P)(t)||(0,a.WM)(t)||(0,u.d)(t)||(0,c.sN)(t))return t.toString();if((0,o.u)(t))return"<container>";return JSON.stringify(t,s.q)}}function d(e,t,...i){let r;if(0===i.length)return e;if(null!=t)try{r=t(...i)}catch{r=h(...i)}else r=h(...i);return`${e}$${r}`}},4478:(e,t,i)=>{let r,s,o,n,a,l,u,c,h,d,p,g,m,f,w,v;var y=Object.create,b=Object.defineProperty,C=Object.getOwnPropertyDescriptor,R=Object.getOwnPropertyNames,k=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty,P=(e,t)=>{for(var i in t)b(e,i,{get:t[i],enumerable:!0})},A=(e,t,i,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let s of R(t))S.call(e,s)||s===i||b(e,s,{get:()=>t[s],enumerable:!(r=C(t,s))||r.enumerable});return e},I={};P(I,{AzureDevOps:()=>el,AzureDevopsUtils:()=>ig,Bitbucket:()=>ew,BitbucketServer:()=>eC,BitbucketServerUtils:()=>iy,BitbucketUtils:()=>iw,EntityIdentifierProviderType:()=>iS,EntityIdentifierUtils:()=>iC,EntityType:()=>ik,EntityVersion:()=>iR,GitBuildStatusStage:()=>D,GitBuildStatusState:()=>_,GitDiffLineType:()=>O,GitHub:()=>tp,GitHubIssueCloseReason:()=>ry,GitHubUtils:()=>rc,GitIssueState:()=>ek,GitLab:()=>tz,GitLabUtils:()=>rd,GitMergeStrategy:()=>$,GitProviderUtils:()=>iM,GitPullRequestMergeableState:()=>x,GitPullRequestReviewState:()=>E,GitPullRequestState:()=>T,GraphQLErrors:()=>eS,Jira:()=>il,JiraServer:()=>iu,JiraUtils:()=>rg,PullRequestAsyncStatus:()=>rv,Trello:()=>ip,TrelloUtils:()=>rf,Utils:()=>rC,default:()=>rb,isFetch:()=>G}),e.exports=A(b({},"__esModule",{value:!0}),I);var D=((r=D||{}).Build="build",r.Production="production",r.Staging="staging",r.Test="test",r),_=((s=_||{}).ActionRequired="ACTION_REQUIRED",s.Cancelled="CANCELLED",s.Error="ERROR",s.Failed="FAILED",s.Pending="PENDING",s.Running="RUNNING",s.Skipped="SKIPPED",s.Success="SUCCESS",s.Warning="WARNING",s.OptionalActionRequired="OPTIONAL_ACTION_REQUIRED",s),$=((o=$||{}).MergeCommit="MERGE_COMMIT",o.Rebase="REBASE",o.RebaseThenMergeCommit="REBASE_THEN_MERGE_COMMIT",o.FastForward="FAST_FORWARD",o.Squash="SQUASH",o),T=((n=T||{}).Open="OPEN",n.Closed="CLOSED",n.Merged="MERGED",n),E=((a=E||{}).Approved="APPROVED",a.ChangesRequested="CHANGES_REQUESTED",a.Commented="COMMENTED",a.ReviewRequested="REVIEW_REQUESTED",a),x=((l=x||{}).Behind="BEHIND",l.Blocked="BLOCKED",l.Conflicts="CONFLICTS",l.FailingChecks="FAILING_CHECKS",l.Mergeable="MERGEABLE",l.Unknown="UNKNOWN",l.UnknownAndBlocked="UNKNOWN_AND_BLOCKED",l.Unstable="UNSTABLE",l),O=((u=O||{}).ADDED="ADDED",u.DELETED="DELETED",u.UNMODIFIED="UNMODIFIED",u),F={APPROVED:0,COMMENTED:1,REVIEW_REQUESTED:2,CHANGES_REQUESTED:3},B=e=>e&&0!==e.length?e.reduce((e,t)=>F[t.state]>F[e]?t.state:e,"APPROVED"):null,L=(e,t)=>e.name||e.username||e.email||t,U=e=>{let t=Object.values(e).map(e=>e.name).sort((e,t)=>e.localeCompare(t));return Object.values(e).forEach(e=>{-1!==e.priority&&(e.priority=t.indexOf(e.name))}),e},q=(d=null!=(c=i(5615))?y(k(c)):{},A(!h&&c&&c.__esModule?d:b(d,"default",{value:c,enumerable:!0}),c)),N=globalThis.fetch||q.default,M=async e=>{let t=e.headers.get("content-type")||"",i=null;if(t.startsWith("application/json")){let t=await e.text();i=t.trim().length>0?JSON.parse(t):null}else if(t.startsWith("text/")||""===t)i=await e.text();else if(t.startsWith("application/vnd.github.raw+json"))i=await e.arrayBuffer();else throw Error(`Unsupported content-type: ${t}`);let r={body:i,headers:Object.fromEntries(e.headers.entries()),status:e.status,statusText:e.statusText};if(!e.ok){let t=Error(e.statusText);throw Object.assign(t,{response:r}),t}return r},W=e=>async({url:t,...i})=>M(await e(t,i)),G=(e,t=!1)=>"fetch"===e.name||t,H=class{constructor(e){let t=(null==e?void 0:e.request)||N;this.config={...e,request:G(t,null==e?void 0:e.forceIsFetch)?W(t):t}}updateConfig(e){this.config={...this.config,...e,request:e.request&&G(e.request,(null==e?void 0:e.forceIsFetch)??this.config.forceIsFetch)?W(e.request):this.config.request}}},V=class extends H{},j=(e,t)=>{let i={};return e&&(i.Authorization=`${t?"Basic":"Bearer"} ${e}`),i},z=e=>e?e.reduce((e,t)=>(e[t]=!0,e),{}):void 0,Q=(e,t,i)=>!e||t.some(t=>e[t])?i:"",Y=async e=>{var t,i,r;let s=[],o=!0,n;for(;o;){let a=await e(n);s=s.concat(a.data),o=!!(null!=(t=null==a?void 0:a.pageInfo)&&t.hasNextPage),n=(null==(i=null==a?void 0:a.pageInfo)?void 0:i.endCursor)||(null==(r=null==a?void 0:a.pageInfo)?void 0:r.nextPage)}return s},K=(e,t={})=>j(t.token||e.token,t.isPAT||e.isPAT),Z=e=>e.url.replace("/_apis/git/repositories/","/_git/").replace(`/${e.repository.project.id}/`,`/${encodeURIComponent(e.repository.project.name)}/`).replace(`/${e.repository.id}/`,`/${encodeURIComponent(e.repository.name)}/`).replace("/pullRequests/","/pullrequest/"),J="https://app.vssps.visualstudio.com/_apis",X="https://dev.azure.com",ee={active:"OPEN",completed:"MERGED",abandoned:"CLOSED"},et={10:"APPROVED",5:"APPROVED",0:"REVIEW_REQUESTED",[-5]:"CHANGES_REQUESTED",[-10]:"CHANGES_REQUESTED"},ei=e=>({id:e.id,name:e.displayName??null,username:(e.uniqueName||e.displayName)??null,email:null,avatarUrl:e.imageUrl??null,url:null}),er=e=>e.startsWith("refs/heads/")?e.replace("refs/heads/",""):e,es=e=>{switch(e){case"conflicts":return"CONFLICTS";case"failure":return"FAILING_CHECKS";case"rejectedByPolicy":return"BLOCKED";case"succeeded":return"MERGEABLE";default:return"UNKNOWN"}},eo=(e,t)=>{var i;let r=[],s=[];return t.reviewers.forEach(e=>{let t={reviewer:ei(e),state:et[e.vote??0]||"REVIEW_REQUESTED"};e.isRequired&&r.push(t),s.push(t)}),{id:t.pullRequestId.toString(),title:t.title,number:t.codeReviewId,state:ee[t.status],isDraft:t.isDraft,commentCount:null,upvoteCount:null,author:ei(t.createdBy),createdDate:new Date(t.creationDate),updatedDate:new Date(t.closedDate||t.creationDate),closedDate:t.closedDate?new Date(t.closedDate):null,mergedDate:t.closedDate&&"completed"===t.status?new Date(t.closedDate):null,repository:{id:t.repository.id,name:t.repository.name,project:t.repository.project.name,owner:{login:e},remoteInfo:null},headCommit:{buildStatuses:null},baseRef:{name:er(t.targetRefName),oid:t.lastMergeTargetCommit.commitId},headRef:{name:er(t.sourceRefName),oid:t.lastMergeSourceCommit.commitId},url:Z(t),assignees:t.reviewers.map(ei),reviews:s,reviewDecision:B(r),additions:null,deletions:null,fileCount:null,commitCount:null,headRepository:t.forkSource?{id:t.forkSource.repository.id,name:t.forkSource.repository.name,project:void 0,owner:{login:e},remoteInfo:null}:{id:t.repository.id,name:t.repository.name,project:t.repository.project.name,owner:{login:e},remoteInfo:null},mergeableState:es(t.mergeStatus),labels:(null==(i=t.labels)?void 0:i.map(e=>({color:null,description:null,id:e.id,name:e.name})))??[],permissions:null}},en=(e,t)=>({id:t.id,name:t.name,namespace:e,project:t.project.name,projectId:t.project.id,webUrl:t.webUrl,httpsUrl:t.remoteUrl,sshUrl:t.sshUrl,defaultBranch:t.defaultBranch?{name:er(t.defaultBranch)}:null,permissions:null}),ea=(e,t,i,r)=>{var s,o,n,a,l,u;let c=i.fields,h=c["System.AssignedTo"],d=c["System.State"],p=c["System.WorkItemType"],g;return d&&p&&(g=null==(s=r[p])?void 0:s[d]),{id:i.id.toString(),number:i.id.toString(),title:c["System.Title"],commentCount:c["System.CommentCount"],author:{avatarUrl:(null==(n=null==(o=c["System.CreatedBy"]._links)?void 0:o.avatar)?void 0:n.href)??null,email:null,id:c["System.CreatedBy"].id,name:c["System.CreatedBy"].uniqueName??null,username:c["System.CreatedBy"].displayName??null,url:null},closedDate:c["Microsoft.VSTS.Common.ClosedDate"]?new Date(c["Microsoft.VSTS.Common.ClosedDate"]):null,createdDate:new Date(c["System.CreatedDate"]),updatedDate:new Date(c["System.ChangedDate"]),url:i._links.html.href,assignees:h?[{avatarUrl:(null==(l=null==(a=h._links)?void 0:a.avatar)?void 0:l.href)??null,email:null,id:h.id,name:h.uniqueName??null,username:h.displayName??null,url:null}]:[],description:c["System.Description"]??null,state:{name:(null==g?void 0:g.title)||d,color:null},type:c["System.WorkItemType"],repository:null,project:{namespace:e,name:t,resourceId:null,key:null,id:null},upvoteCount:0,labels:(null==(u=i.fields["System.Tags"])?void 0:u.split(";").map(e=>({color:null,description:null,id:null,name:e.trim()})))??[]}},el=class extends H{async getCurrentUser(e={},t={}){if(t.isPAT||this.config.isPAT)throw Error("Azure DevOps does not support PATs for this function.");let i=await this.config.request({url:`${J}/profile/profiles/me`,headers:K(this.config,t)});return{data:{id:i.body.id,name:i.body.displayName,username:i.body.displayName,email:i.body.emailAddress,avatarUrl:null,url:null}}}async getCurrentUserForInstance(e,t={}){let i=(await this.config.request({url:`${X}/${encodeURIComponent(e.namespace)}/_apis/ConnectionData`,headers:K(this.config,t)})).body.authorizedUser;if("Anonymous"===i.providerDisplayName)throw Error("Current user not found.");return{data:{id:i.id,name:i.providerDisplayName,username:i.providerDisplayName,email:i.properties.Account.$value,avatarUrl:null}}}async getUserForCommit(e,t={}){if(!e.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let i=(await this.config.request({url:`${X}/${encodeURIComponent(e.repo.namespace)}/${encodeURIComponent(e.repo.project)}/_apis/git/repositories/${encodeURIComponent(e.repo.name)}/commits/${e.oid}`,headers:K(this.config,t)})).body.author;return{data:{name:i.name,email:i.email,avatarUrl:i.imageUrl}}}async getOrgsForUser(e,t={}){return{data:(await this.config.request({url:`${J}/accounts?memberId=${e.userId}&api-version=6.0`,headers:K(this.config,t)})).body.value.map(e=>({id:e.accountId,name:e.accountName}))}}async getAzureProjects(e,t={}){let i=new URL(`${X}/${encodeURIComponent(e.namespace)}/_apis/projects`);i.searchParams.set("$top","100"),e.cursor&&i.searchParams.set("$skip",e.cursor);let r=await this.config.request({url:i.toString(),headers:K(this.config,t)}),s=r.headers["x-ms-continuationtoken"];return{pageInfo:{hasNextPage:!!s,endCursor:s||null},data:r.body.value.map(t=>({id:t.id,name:t.name,namespace:e.namespace}))}}async getAzureProjectScopeDescriptor(e,t={}){let{namespace:i,projectId:r}=e;return{data:{scope:(await this.config.request({url:`https://vssps.dev.azure.com/${encodeURIComponent(i)}/_apis/graph/descriptors/${r}?api-version=6.0`,headers:K(this.config,t)})).body.value}}}async getAzureGraphAccountsForAzureProject(e,t={}){let{namespace:i,projectScopeDescriptor:r,cursor:s}=e,o=new URL(`https://vssps.dev.azure.com/${encodeURIComponent(i)}/_apis/graph/users`);r&&o.searchParams.set("scopeDescriptor",r),s&&o.searchParams.set("continuationToken",s);let n=await this.config.request({url:o.toString(),headers:K(this.config,t)}),a=n.headers["x-ms-continuationtoken"];return{pageInfo:{endCursor:a||null,hasNextPage:!!a},data:n.body.value.map(e=>{var t,i,r,s;return{avatarUrl:(null==(i=null==(t=e._links)?void 0:t.avatar)?void 0:i.href)??null,descriptor:e.descriptor??null,email:e.mailAddress??null,name:e.displayName??null,storageKeyURL:(null==(s=null==(r=e._links)?void 0:r.storageKey)?void 0:s.href)??null,username:e.displayName??null}})}}async getAccountFromAzureGraphAccount(e,t={}){let{azureGraphAccount:i}=e;if(!i.storageKeyURL)throw Error("Expected 'storageKeyURL' to not be null for 'azureGraphAccount'");let r=await this.config.request({url:i.storageKeyURL,headers:K(this.config,t)});return{data:{avatarUrl:i.avatarUrl,email:i.email,id:r.body.value,name:i.name,username:i.username,url:null}}}async getAccountsFromAzureGraphAccounts(e,t={}){let i=[];for(let r of e.azureGraphAccounts){let e=await this.getAccountFromAzureGraphAccount({azureGraphAccount:r},t);i.push(e.data)}return{data:i}}async getRepo(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let i=await this.config.request({url:`${X}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/git/repositories/${encodeURIComponent(e.name)}`,headers:K(this.config,t)});return{data:en(e.namespace,i.body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForAzureProject(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');return{data:(await this.config.request({url:`${X}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/git/repositories`,headers:K(this.config,t)})).body.value.map(t=>en(e.namespace,t))}}async getRefs(e,t,i={}){if(!t.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let r=new URL(`${X}/${encodeURIComponent(t.repo.namespace)}/${encodeURIComponent(t.repo.project)}/_apis/git/repositories/${encodeURIComponent(t.repo.name)}/refs`);r.searchParams.set("filter",e),r.searchParams.set("$top","100"),t.cursor&&r.searchParams.set("continuationToken",t.cursor);let s=await this.config.request({url:r.toString(),headers:K(this.config,i)}),o=s.headers["x-ms-continuationtoken"];return{pageInfo:{hasNextPage:!!o,endCursor:o||null},data:s.body.value.map(e=>({name:er(e.name),commit:{oid:e.objectId,authoredDate:null,committedDate:null}}))}}async getBranches(e,t={}){return this.getRefs("heads",e,t)}async getTags(e,t={}){return this.getRefs("tags",e,t)}async getPullRequestsForRepoBase(e,t={},i=100){let{page:r,repo:s,assigneeLogins:o,authorLogin:n}=e||{};if(!s.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let a="searchCriteria.status=1";return o&&o.length&&(a+=`&searchCriteria.reviewerId=${o[0]}`),n&&(a+=`&searchCriteria.creatorId=${n}`),await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(s.namespace)}/${encodeURIComponent(s.project||"")}/_apis/git/repositories/${encodeURIComponent(s.name)}/pullRequests?${a}&%24top=${i}&%24skip=${((r||1)-1)*i}`,headers:K(this.config,t)})}async getPullRequestsForRepo(e,t={}){let i=e.page||1,r=await this.getPullRequestsForRepoBase(e,t,100);return{pageInfo:{hasNextPage:100===r.body.value.length,nextPage:i+1},data:r.body.value.map(t=>eo(e.repo.namespace,t))}}async getPullRequestsForRepos(e,t={}){if(!e.repos.every(e=>e.project))throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{repos:i}=e||{},r=[];return await Promise.all(i.map(async i=>{try{(await this.getPullRequestsForRepoBase({repo:i,...e},t)).body.value.forEach(e=>{r.push(eo(i.namespace,e))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:r}}async getPullRequestsForProjectBase(e,t={},i=100){let{namespace:r,project:s,page:o,assigneeLogins:n,authorLogin:a,repo:l}=e;if(null!=l&&l.project&&l.project!==s)throw Error("Could not fetch pull requests, project mismatch");let u=new URL(`${t.baseUrl||X}/${encodeURIComponent(r)}/${encodeURIComponent(s)}/_apis/git/pullRequests`);return u.searchParams.set("searchCriteria.status","1"),u.searchParams.set("$top",i.toString()),u.searchParams.set("$skip",(((o||1)-1)*i).toString()),null!=l&&l.id&&(null==l?void 0:l.project)===s&&u.searchParams.set("searchCriteria.repositoryId",l.id),n&&n.length&&u.searchParams.set("searchCriteria.reviewerId",n[0]),a&&u.searchParams.set("searchCriteria.creatorId",a),await this.config.request({url:u.toString(),headers:K(this.config,t)})}async getPullRequestsForProject(e,t={}){let i=e.page||1,r=await this.getPullRequestsForProjectBase(e,t,100);return{pageInfo:{hasNextPage:(null==r?void 0:r.body.value.length)===100,nextPage:i+1},data:(null==r?void 0:r.body.value.map(t=>eo(e.namespace,t)))||[]}}async getPullRequestsForProjects(e,t={}){let{projects:i}=e||{},r=[];return await Promise.all(i.map(async i=>{try{if(!e.repo||e.repo.project&&e.repo.project===i.project){let s=await this.getPullRequestsForProjectBase({...i,...e},t);null==s||s.body.value.forEach(e=>{r.push(eo(i.namespace,e))})}}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:r}}async getAzurePullRequestLastMergeStatus(e,t={}){if(!e.repo.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{repo:{namespace:i,project:r,name:s},pullRequestId:o}=e,n=await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(i)}/${encodeURIComponent(r||"")}/_apis/git/repositories/${s}/pullrequests/${o}?includeCommits=true?api-version=6.0`,headers:{...K(this.config,t)}});if(!n.body.mergeStatus)throw Error("Could not fetch pull request");return{data:n.body.mergeStatus}}async updatePullRequest(e,t,i){return await this.config.request({method:"PATCH",url:`${i.baseUrl||X}/${encodeURIComponent(e.repository.owner.login)}/${encodeURIComponent(e.repository.project)}/_apis/git/repositories/${e.repository.name}/pullrequests/${e.id}?api-version=6.0`,body:t,headers:{...K(this.config,i),"Content-Type":"application/json"}})}async closePullRequest(e,t={}){let{pullRequest:i}=e;if(!(await this.updatePullRequest(i,JSON.stringify({status:"abandoned"}),t)).body.status)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){var i;let{pullRequest:r,mergeStrategy:s}=e,o;switch(s){case"MERGE_COMMIT":o="noFastForward";break;case"REBASE":o="rebase";break;case"REBASE_THEN_MERGE_COMMIT":o="rebaseMerge";break;case"SQUASH":o="squash"}let n={completionOptions:{mergeStrategy:o},lastMergeSourceCommit:{commitId:null==(i=r.headRef)?void 0:i.oid},status:"completed"};if(!(await this.updatePullRequest(r,JSON.stringify(n),t)).body.status)throw Error("Could not merge pull request")}async addPullRequestLabel(e,t={}){let{pullRequest:i,label:r}=e;if(!i.repository.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let s={name:r.name};if(!(await this.config.request({method:"POST",url:`${t.baseUrl||X}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/labels?api-version=6.0`,body:JSON.stringify(s),headers:{...K(this.config,t),"Content-Type":"application/json"}})).body.id)throw Error("Could not add pull request label")}async removePullRequestLabel(e,t={}){let{pullRequest:i,label:r}=e;if(!i.repository.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');await this.config.request({method:"DELETE",url:`${t.baseUrl||X}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/labels/${encodeURIComponent(r.name)}?api-version=6.0`,headers:{...K(this.config,t)}})}async setPullRequestLabels(e,t={}){let{pullRequest:i,labels:r}=e;if(!i.repository.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let s=i.labels;if(!s)throw Error('Azure DevOps requires "labels" for this function.');for(let e of r)s.find(t=>t.id===e.id)||await this.addPullRequestLabel({pullRequest:i,label:e},t);for(let e of s)r.find(t=>e.id===t.id)||await this.removePullRequestLabel({pullRequest:i,label:e},t)}async setPullRequestAsDraft(e,t={}){let{pullRequest:i,isDraft:r}=e;if(!(await this.updatePullRequest(i,JSON.stringify({isDraft:r}),t)).body.status)throw Error("Could not set the pull request as draft")}async addPullRequestReviewer(e,t={}){let{pullRequest:i,reviewer:r,isRequired:s}=e,o={id:r.id,isRequired:s};if(!(await this.config.request({method:"PUT",url:`${t.baseUrl||X}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/reviewers/${r.id}?api-version=6.0`,body:JSON.stringify(o),headers:{...K(this.config,t),"Content-Type":"application/json"}})).body.id)throw Error("Could not add pull request reviewer")}async removePullRequestReviewer(e,t={}){let{pullRequest:i,reviewer:r}=e;await this.config.request({method:"DELETE",url:`${t.baseUrl||X}/${encodeURIComponent(i.repository.owner.login)}/${encodeURIComponent(i.repository.project)}/_apis/git/repositories/${i.repository.name}/pullrequests/${i.id}/reviewers/${r.id}?api-version=6.0`,headers:{...K(this.config,t),Accept:"application/json"}})}async setPullRequestReviewers(e,t={}){let{pullRequest:i,reviewers:r}=e;for(let e of r)i.assignees.find(t=>t.id===e.id)||await this.addPullRequestReviewer({pullRequest:i,reviewer:e,isRequired:!0},t);for(let e of i.assignees)r.find(t=>e.id===t.id)||await this.removePullRequestReviewer({pullRequest:i,reviewer:e},t)}async getIssuesForAzureProject(e,t={}){let{page:i,assigneeLogins:r,authorLogin:s,mentionLogin:o,labelNames:n,statusByWorkItemIdByStatusId:a}=e||{},l=i||1,u=["[Microsoft.VSTS.Common.ClosedDate] = ''","[System.TeamProject] = @project","[Microsoft.VSTS.Common.ResolvedDate] = ''"];s&&u.push(`[System.CreatedBy] = '${s.replace("'","''")}'`),r&&r[0]&&u.push(`[System.AssignedTo] = '${r[0].replace("'","''")}'`),o&&u.push("[System.Id] IN (@recentMentions)"),n&&n.forEach(e=>u.push(`[System.Tags] Contains '${e}'`));let c=`Select [Microsoft.VSTS.Common.ClosedDate], [Microsoft.VSTS.Common.ResolvedDate] From WorkItems Where ${u.join(" AND ")} order by [System.CreatedDate] desc`,h=await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/wit/wiql?api-version=6.0`,body:JSON.stringify({query:c}),method:"POST",headers:{...K(this.config,t),"Content-Type":"application/json"}}),d=h.body.workItems.slice((l-1)*200,200*l).map(e=>e.id);if(0==d.length)return{pageInfo:{hasNextPage:!1,nextPage:null},data:[]};let p=await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(e.namespace)}/${encodeURIComponent(e.project)}/_apis/wit/workitemsbatch?api-version=6.0`,body:JSON.stringify({ids:d,$expand:"Links"}),method:"POST",headers:{...K(this.config,t),"Content-Type":"application/json"}});return{pageInfo:{hasNextPage:h.body.workItems.length>200*l,nextPage:l+1},data:p.body.value.map(t=>ea(e.namespace,e.project,t,a||{}))}}async getPermissionsForRepos(e,t={}){let{namespace:i,repos:r}=e,s={4:["canPush","canCreateWebhook"],1024:["isAdmin"],2048:["isAdmin"],4096:["isAdmin"],8192:["isAdmin"]},o={alwaysAllowAdministrators:!1,evaluations:r.flatMap(e=>{let t=`repoV2/${e.projectId}/${e.id}`;return Object.keys(s).map(e=>({securityNamespaceId:"2e9eb7ed-3c0a-47d4-87c1-0ffdd275fd87",token:t,permissions:e}))})};return{data:(await this.config.request({method:"POST",url:`${t.baseUrl||X}/${encodeURIComponent(i)}/_apis/security/permissionevaluationbatch?api-version=7.1`,body:JSON.stringify(o),headers:{...K(this.config,t),"Content-Type":"application/json"}})).body.evaluations.reduce((e,t)=>{let[,i,r]=t.token.split("/"),o=`${i}/${r}`;for(let i of s[t.permissions])void 0===e[o]&&(e[o]={canCreateWebhook:!0,canPush:!0,isAdmin:!0}),!1===t.value&&(e[o][i]=!1);return e},{})}}async decorateReposWithPermissions(e,t={}){let{namespace:i,repos:r}=e,s=await this.getPermissionsForRepos({namespace:i,repos:r},t);return{data:r.map(e=>({...e,permissions:s.data[`${e.projectId}/${e.id}`]}))}}async updateIssue(e,t,i={}){return await this.config.request({method:"PATCH",url:`${i.baseUrl||X}/${encodeURIComponent(e.project.namespace)}/${encodeURIComponent(e.project.name)}/_apis/wit/workitems/${e.id}?api-version=6.0`,body:JSON.stringify(t),headers:{...K(this.config,i),"Content-Type":"application/json-patch+json"}})}async setIssueStatus(e,t={}){var i;let{issue:r,status:s}=e,o=[{op:"add",path:"/fields/System.State",value:s.name}];if(!(null!=(i=(await this.updateIssue(r,o,t)).body.fields)&&i["System.State"]))throw Error("Could not set issue status")}async setIssueAssignee(e,t={}){var i;let{issue:r,assignee:s}=e,o=[{op:"add",path:"/fields/System.AssignedTo",value:(null==s?void 0:s.name)??""}];if(!(null!=(i=(await this.updateIssue(r,o,t)).body.fields)&&i["System.State"]))throw Error("Could not set issue assignee")}async setIssueLabels(e,t={}){var i;let{issue:r,labels:s}=e,o=[{op:"replace",path:"/fields/System.Tags",value:s.map(e=>e.name).join(";")}];if(!(null!=(i=(await this.updateIssue(r,o,t)).body.fields)&&i["System.Tags"]))throw Error("Could not set issue tags")}async getIssueTypesForAzureProject(e,t={}){if(!e.project)throw Error('Azure DevOps requires a "project" (name or ID) for this function.');let{namespace:i,project:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(i)}/${encodeURIComponent(r||"")}/_apis/wit/workitemtypes?api-version=6.0`,headers:{...K(this.config,t)}})).body.value}}async getLabelsForProject(e,t={}){let{namespace:i,project:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||X}/${encodeURIComponent(i)}/${encodeURIComponent(r||"")}/_apis/wit/tags?api-version=6.0`,headers:{...K(this.config,t)}})).body.value.map(e=>({color:null,description:null,id:e.id,name:e.name,url:e.url}))}}},eu=(e,t={})=>j(t.token||e.token,t.isPAT||e.isPAT),ec="https://api.bitbucket.org/2.0",eh={OPEN:"OPEN",MERGED:"MERGED",DECLINED:"CLOSED"},ed=e=>({id:e.uuid,name:e.display_name||e.nickname,username:e.nickname||e.display_name,email:null,avatarUrl:e.links.avatar.href,url:e.links.html.href}),ep=e=>{let t=e.links.clone,i=null==t?void 0:t.find(e=>"ssh"===e.name),r=null==t?void 0:t.find(e=>"https"===e.name);return i&&r?{cloneUrlHTTPS:r.href,cloneUrlSSH:i.href}:null},eg=e=>{var t,i;return{id:e.uuid,namespace:e.workspace.slug,name:e.slug,webUrl:e.links.html.href,httpsUrl:(null==(t=e.links.clone.find(e=>"https"===e.name))?void 0:t.href)??null,sshUrl:(null==(i=e.links.clone.find(e=>"ssh"===e.name))?void 0:i.href)??null,defaultBranch:{name:e.mainbranch.name},permissions:null}},em=e=>{var t;let i=e.id,r=(null==(t=e.participants)?void 0:t.map(e=>{let t="REVIEW_REQUESTED";return e.approved?t="APPROVED":"changes_requested"===e.state?t="CHANGES_REQUESTED":null!==e.participated_on&&(t="COMMENTED"),{reviewer:ed(e.user),state:t}}))??[];return{id:i.toString(),title:e.title,number:i,state:eh[e.state],isDraft:!1,commentCount:e.comment_count,upvoteCount:null,author:ed(e.author),createdDate:new Date(e.created_on),updatedDate:new Date(e.updated_on),closedDate:null,mergedDate:null,repository:{id:e.destination.repository.uuid,name:e.destination.repository.name,owner:{login:e.destination.repository.full_name.split("/")[0]},remoteInfo:ep(e.destination.repository)},headCommit:{buildStatuses:null},baseRef:{name:e.destination.branch.name,oid:e.destination.commit.hash},headRef:{name:e.source.branch.name,oid:e.source.commit.hash},url:e.links.html.href,assignees:null,reviews:r,reviewDecision:B(r),additions:null,deletions:null,fileCount:null,commitCount:null,headRepository:{id:e.source.repository.uuid,name:e.source.repository.name,owner:{login:e.source.repository.full_name.split("/")[0]},remoteInfo:ep(e.source.repository)},mergeableState:"UNKNOWN",permissions:null}},ef=e=>{switch(e){case"owner":case"admin":return{canCreateWebhook:!0,canPush:!0,isAdmin:!0};case"write":return{canCreateWebhook:!1,canPush:!0,isAdmin:!1};case"read":case"none":return{canCreateWebhook:!1,canPush:!1,isAdmin:!1}}},ew=class extends H{async refreshToken(e){return{data:(await this.config.request({url:"https://bitbucket.org/site/oauth2/access_token",method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:`Basic ${e.base64ClientIDColonClientSecret}`},body:`grant_type=refresh_token&refresh_token=${e.refreshToken}`})).body}}async getCurrentUser(e={},t={}){return{data:ed((await this.config.request({url:`${ec}/user`,headers:eu(this.config,t)})).body)}}async getUserForCommit(e,t={}){var i;let r=(await this.config.request({url:`${ec}/repositories/${e.repo.namespace}/${e.repo.name}/commit/${e.oid}`,headers:eu(this.config,t)})).body.author,s=r.raw.match(/([^<]+)<(.+)>/);return{data:{name:s?s[1].trim():null,email:s?s[2]:null,avatarUrl:(null==(i=r.user)?void 0:i.links.avatar.href)||null}}}async getRepo(e,t={}){return{data:eg((await this.config.request({url:`${ec}/repositories/${e.namespace}/${e.name}`,headers:eu(this.config,t)})).body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForCurrentUser(e,t={}){let i=new URL(`${ec}/repositories`);i.searchParams.set("role","member"),i.searchParams.set("pagelen","100"),e.cursor&&i.searchParams.set("after",e.cursor);let r=await this.config.request({url:i.toString(),headers:eu(this.config,t)}),s=!!r.body.next,o=null;return r.body.next&&(o=new URL(r.body.next).searchParams.get("after")),{pageInfo:{hasNextPage:s,endCursor:o},data:r.body.values.map(eg)}}async getBranches(e,t={}){var i;let r=new URL(`${ec}/repositories/${e.repo.namespace}/${e.repo.name}/refs/branches`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","100");let s=await this.config.request({url:r.toString(),headers:eu(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.map(e=>{let t=new Date(e.target.date);return{name:e.name,commit:{oid:e.target.hash,authoredDate:t,committedDate:t}}})}}async getTags(e,t={}){let i=new URL(`${ec}/repositories/${e.repo.namespace}/${e.repo.name}/refs/tags`);i.searchParams.set("pagelen","100"),e.cursor&&i.searchParams.set("page",e.cursor);let r=await this.config.request({url:i.toString(),headers:eu(this.config,t)}),s=!!r.body.next,o=null;return r.body.next&&(o=new URL(r.body.next).searchParams.get("page")),{pageInfo:{hasNextPage:s,endCursor:o},data:r.body.values.map(e=>{let t=new Date(e.target.date);return{name:e.name,commit:{oid:e.target.hash,authoredDate:t,committedDate:t}}})}}async getWorkspacesForUser(e,t={}){var i;let r=new URL(`${ec}/user/permissions/workspaces`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","50");let s=await this.config.request({url:r.toString(),headers:eu(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.map(e=>({id:e.workspace.uuid,slug:e.workspace.slug,name:e.workspace.name}))}}async getPullRequestsForUserAndWorkspace(e,t={}){var i;let r=new URL(`${ec}/workspaces/${e.workspaceSlug}/pullrequests/${e.userId}`);if(r.searchParams.set("fields","+values.participants,+values.destination.repository.links.clone.*,+values.source.repository.links.clone.*"),r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","50"),e.repos&&e.repos.length>0){let t=`state = "open" AND (${e.repos.map(e=>`source.repository.full_name = "${e.namespace}/${e.name}"`).join(" OR ")})`;r.searchParams.set("q",t)}let s=await this.config.request({url:r.toString(),headers:eu(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.map(em)}}async getPullRequestsForRepoBase(e,t={}){var i;let r=new URL(`${ec}/repositories/${encodeURI(e.repo.namespace)}/${encodeURI(e.repo.name)}/pullrequests?state=OPEN`),s=[];e.reviewerId&&s.push(`reviewers.uuid="${e.reviewerId}"`),e.authorLogin&&s.push(`author.uuid="${e.authorLogin}"`);let o='state="OPEN"';return s.length&&(o+=` AND (${s.join(e.useOrFilter?" OR ":" AND ")})`),r.searchParams.set("fields","+values.participants,+values.destination.repository.links.clone.*,+values.source.repository.links.clone.*"),r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","50"),r.searchParams.set("q",o),await this.config.request({url:r.toString(),headers:eu(this.config,t)})}async getPullRequestsForRepo(e,t={}){let i=[],r=await this.getPullRequestsForRepoBase(e,t);r.body.values.forEach(e=>{i.push(em(e))});let s=!!r.body.next;return{pageInfo:{hasNextPage:s,nextPage:s?r.body.page+1:null},data:i}}async getPullRequestsForRepos(e,t={}){let i=[];return await Promise.all(e.repos.map(async r=>{try{(await this.getPullRequestsForRepoBase({repo:r,...e},t)).body.values.forEach(e=>{i.push(em(e))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:i}}async getAccountsForWorkspace(e,t={}){var i;let r=new URL(`${ec}/workspaces/${encodeURI(e.workspace)}/members`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","100");let s=await this.config.request({url:r.toString(),headers:eu(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.map(e=>ed(e.user))}}async getReposPermissionsForCurrentUser(e,t={}){var i;let r=new URL(`${ec}/user/permissions/repositories`);r.searchParams.set("page",(null==(i=e.page)?void 0:i.toString())||"1"),r.searchParams.set("pagelen","100");let s=await this.config.request({url:r.toString(),headers:eu(this.config,t)}),o=!!s.body.next;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.page+1:null},data:s.body.values.reduce((e,t)=>({...e,[t.repository.uuid]:ef(t.permission)}),{})}}async decorateReposWithPermissions(e,t={}){let i={},r=1;do{let e=await this.getReposPermissionsForCurrentUser({page:r},t);i={...e.data,...i},r=e.pageInfo.hasNextPage?e.pageInfo.nextPage:null}while(null!==r)return{data:e.repos.map(e=>({...e,permissions:i[e.id]??{canCreateWebhook:!1,canPush:!1,isAdmin:!1}}))}}async closePullRequest(e,t={}){let{pullRequest:i}=e;if(!(await this.config.request({method:"POST",url:`${ec}/repositories/${i.repository.owner.login}/${i.repository.name}/pullrequests/${i.id}/decline`,headers:eu(this.config,t)})).body.title)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){let{pullRequest:i,mergeStrategy:r}=e,s;switch(r){case"MERGE_COMMIT":s="merge_commit";break;case"FAST_FORWARD":s="fast_forward";break;case"SQUASH":s="squash"}let o={merge_strategy:s,type:"pullrequest"};if(!(await this.config.request({method:"POST",url:`${ec}/repositories/${i.repository.owner.login}/${i.repository.name}/pullrequests/${i.id}/merge`,body:JSON.stringify(o),headers:{...eu(this.config,t),"Content-Type":"application/json"}})).body.title)throw Error("Could not merge pull request")}async setPullRequestReviewers(e,t={}){let{pullRequest:i,reviewers:r}=e,s={reviewers:r.map(e=>{if(e.username)throw Error('Bitbucket reviewer requires "username" for this function.');return{username:e.username}})};if(!(await this.config.request({method:"PUT",url:`${ec}/repositories/${i.repository.owner.login}/${i.repository.name}/pullrequests/${i.id}`,body:JSON.stringify(s),headers:{...eu(this.config,t),"Content-Type":"application/json"}})).body.title)throw Error("Could not set pull request reviewers")}},ev=e=>({name:e.displayName,email:e.emailAddress,avatarUrl:e.avatarUrl??null,id:e.id.toString(),username:e.name,url:e.links.self[0].href}),ey=e=>{var t,i,r,s,o,n;let a={UNAPPROVED:"REVIEW_REQUESTED",NEEDS_WORK:"CHANGES_REQUESTED",APPROVED:"APPROVED"},l=e.reviewers.map(e=>({reviewer:ev(e.user),state:a[e.status]})),u=(null==(t=e.toRef.repository.links.clone.find(e=>"ssh"===e.name))?void 0:t.href)??null,c=(null==(i=e.toRef.repository.links.clone.find(e=>"https"===e.name))?void 0:i.href)??null;c||(c=(null==(r=e.toRef.repository.links.clone.find(e=>"http"===e.name))?void 0:r.href)??null);let h=(null==(s=e.fromRef.repository.links.clone.find(e=>"ssh"===e.name))?void 0:s.href)??null,d=(null==(o=e.fromRef.repository.links.clone.find(e=>"https"===e.name))?void 0:o.href)??null;return d||(d=(null==(n=e.fromRef.repository.links.clone.find(e=>"http"===e.name))?void 0:n.href)??null),{id:e.id.toString(),number:e.id,title:e.title,url:e.links.self[0].href,state:({OPEN:"OPEN",MERGED:"MERGED",DECLINED:"CLOSED"})[e.state],isDraft:!1,createdDate:new Date(e.createdDate),updatedDate:new Date(e.updatedDate),closedDate:e.closedDate?new Date(e.closedDate):null,mergedDate:"MERGED"==e.state&&e.closedDate?new Date(e.closedDate):null,baseRef:{name:e.toRef.displayId,oid:e.toRef.latestCommit},headRef:{name:e.fromRef.displayId,oid:e.fromRef.latestCommit},commentCount:e.properties.commentCount,upvoteCount:null,commitCount:null,fileCount:null,additions:null,deletions:null,author:ev(e.author.user),assignees:null,reviews:l,reviewDecision:B(l),repository:{id:e.toRef.repository.id.toString(),name:e.toRef.repository.name,owner:{login:e.toRef.repository.project.key},remoteInfo:c&&u?{cloneUrlHTTPS:c,cloneUrlSSH:u}:null},headRepository:{id:e.fromRef.repository.id.toString(),name:e.fromRef.repository.name,owner:{login:e.fromRef.repository.project.key},remoteInfo:d&&h?{cloneUrlHTTPS:d,cloneUrlSSH:h}:null},headCommit:null,mergeableState:"UNKNOWN",permissions:null,version:e.version}},eb=e=>{var t,i,r;return{id:e.id.toString(),namespace:e.project.key,name:e.slug,webUrl:(null==(t=e.links.self[0])?void 0:t.href)??null,httpsUrl:(null==(i=e.links.clone.find(e=>"https"===e.name||"http"===e.name))?void 0:i.href)??null,sshUrl:(null==(r=e.links.clone.find(e=>"ssh"===e.name))?void 0:r.href)??null,defaultBranch:null,permissions:null}},eC=class extends V{getBaseUrl(e){let t=e.baseUrl||this.config.baseUrl;if(!t)throw Error('Bitbucket Server requires "baseUrl"');return t}getRequestHeaders(e){return j(e.token||this.config.token)}async getCurrentUser(e={},t={}){let{headers:{"x-auserid":i,"x-ausername":r}}=await this.config.request({url:`${this.getBaseUrl(t)}/users?limit=2`,headers:this.getRequestHeaders(t)}),s=i?parseInt(i,10):null,o=decodeURIComponent(r),n=(await this.config.request({url:`${this.getBaseUrl(t)}/users?filter=${r}&avatarSize=64`,headers:this.getRequestHeaders(t)})).body.values.find(({emailAddress:e,id:t,name:i,slug:r})=>s?s===t:o===i||o===e||o===r);if(!n)throw Error("Could not find current Bitbucket Server user");return{data:ev(n)}}async getRepo(e,t={}){return{data:eb((await this.config.request({url:`${this.getBaseUrl(t)}/projects/${e.namespace}/repos/${e.name}`,headers:this.getRequestHeaders(t)})).body)}}async getRepos(e,t={}){let i=[],r=[];return await Promise.all(e.map(async e=>{try{let r=await this.getRepo(e,t);i.push(r.data)}catch(t){r.push({input:e,error:t})}})),{data:i,errors:r}}async getReposForCurrentUser(e,t={}){let i=e.page??0,r=await this.config.request({url:`${this.getBaseUrl(t)}/repos?start=${i}`,headers:this.getRequestHeaders(t)});return{pageInfo:{hasNextPage:!r.body.isLastPage,nextPage:r.body.nextPageStart},data:r.body.values.map(eb)}}async getPullRequestsForRepoBase(e,t={}){var i;let r=new URL(`${this.getBaseUrl(t)}/projects/${encodeURI(e.repo.namespace)}/repos/${encodeURI(e.repo.name)}/pull-requests?state=OPEN`);return r.searchParams.set("start",(null==(i=e.page)?void 0:i.toString())||"0"),r.searchParams.set("limit","50"),await this.config.request({url:r.toString(),headers:this.getRequestHeaders(t)})}async getPullRequestsForRepo(e,t={}){let i=[],r=await this.getPullRequestsForRepoBase(e,t);r.body.values.forEach(t=>{if(e.authorLogin&&t.author.user.name!==e.authorLogin)return null;i.push(ey(t))});let s=0!==r.body.values.length;return{pageInfo:{hasNextPage:s,nextPage:s?r.body.start+r.body.values.length:null},data:i}}async getPullRequestsForRepos(e,t={}){let i=[];return await Promise.all(e.repos.map(async r=>{try{(await this.getPullRequestsForRepoBase({repo:r,...e},t)).body.values.forEach(t=>{if(e.authorLogin&&t.author.user.name!==e.authorLogin)return null;i.push(ey(t))})}catch(e){if(404!==e.statusCode&&401!==e.statusCode)throw e}})),{data:i}}async getPullRequestsForCurrentUser(e,t={}){var i;let r=new URL(`${this.getBaseUrl(t)}/dashboard/pull-requests`);r.searchParams.set("state","OPEN"),r.searchParams.set("start",(null==(i=e.page)?void 0:i.toString())||"0"),r.searchParams.set("limit","50");let s=await this.config.request({url:r.toString(),headers:this.getRequestHeaders(t)}),o=0!==s.body.values.length;return{pageInfo:{hasNextPage:o,nextPage:o?s.body.start+s.body.values.length:null},data:s.body.values.map(ey)}}async closePullRequest(e,t={}){let{pullRequest:i}=e;if(void 0===i.version)throw Error('Bitbucket Server requires "version" for this function.');if(!(await this.config.request({method:"POST",url:`${this.getBaseUrl(t)}/projects/${i.repository.owner.login}/repos/${i.repository.name}/pull-requests/${i.id}/decline`,body:JSON.stringify({version:i.version}),headers:{...this.getRequestHeaders(t),"Content-Type":"application/json"}})).body.title)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){let{pullRequest:i,mergeStrategyId:r}=e;if(e.mergeStrategy)throw Error('Bitbucket Server uses "mergeStrategyId" instead of "mergeStrategy".');if(void 0===i.version)throw Error('Bitbucket Server requires "version" for this function.');if(!(await this.config.request({method:"POST",url:`${this.getBaseUrl(t)}/projects/${i.repository.owner.login}/repos/${i.repository.name}/pull-requests/${i.id}/merge`,body:JSON.stringify({strategyId:r,version:i.version}),headers:{...this.getRequestHeaders(t),"Content-Type":"application/json"}})).body.title)throw Error("Could not merge pull request")}async getMergeStrategies(e={}){let t=await this.config.request({url:`${this.getBaseUrl(e)}/admin/pull-requests/git`,headers:{...this.getRequestHeaders(e),"Content-Type":"application/json"}});return{data:{defaultStrategy:t.body.mergeConfig.defaultStrategy,strategies:t.body.mergeConfig.strategies}}}async setPullRequestReviewers(e,t={}){let{pullRequest:i,reviewers:r}=e;if(void 0===i.version)throw Error('Bitbucket Server requires "version" for this function.');let s={reviewers:r.map(e=>{if(e.username)throw Error('Bitbucket Server reviewer requires "username" for this function.');return{user:{name:e.username}}}),version:i.version};if(!(await this.config.request({method:"PUT",url:`${this.getBaseUrl(t)}/projects/${i.repository.owner.login}/repos/${i.repository.name}/pull-requests/${i.id}`,body:JSON.stringify(s),headers:{...this.getRequestHeaders(t),"Content-Type":"application/json"}})).body.title)throw Error("Could not set pull request reviewers")}},eR=i(9259),ek=((p=ek||{}).Open="OPEN",p.Closed="CLOSED",p),eS=class extends Error{constructor(e,t){let i=null==t?void 0:t.map(e=>`'${e.message}'`).join(", ");super(i?`${e}: ${i}`:e),this.graphQLErrors=t??[]}},eP={AS_CODE_OWNER:[3,0,0],CHECK_RUN:[3,0,0],PR_ISSUE_FULL_DATABASE_ID:[3,12,0],LATEST_REVIEWS:[3,0,0],VIEWER_CAN_MERGE_AS_ADMIN:[3,5,0]},eA=e=>!!e,eI=(e,t)=>{let i=eP[t];for(let t=0;t<3&&!(e[t]>i[t]);t++)if(e[t]<i[t])return!1;return!0},eD="https://api.github.com",e_=`${eD}/graphql`,e$=`
description
dueOn
id
number
state
title
url
`,eT=`
... on CheckRun {
  completedAt
  conclusion
  name
  status
  permalink
  startedAt
}
`,eE=/\/api\/v\d+$/,ex=`
color
description
id
name
`,eO=e=>{if(e.endsWith("/api/graphql"))throw Error("The graphql endpoint is being used as the baseUrl. This package uses both GraphQL and REST APIs, and the REST version cannot be assumed. Use the REST endpoint as the baseUrl instead.")},eF=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(eO(i=i.replace(/\/$/,"")),eE.test(i)&&(i=i.replace(eE,"")),`${i}/api/graphql`):e_},eB=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(eO(i=i.replace(/\/$/,"")),eE.test(i)&&(i=i.replace(eE,"")),`${i}/api/v3`):eD},eL=(e,t,i)=>{let r=j(i.token||e.token);return r["X-Github-Next-Global-ID"]="1",r["Content-Type"]="application/json",r.Accept="application/vnd.github.merge-info-preview+json",e.request({url:eF(e,i),method:"POST",headers:r,body:JSON.stringify(t)})},eU={user:!0,"user:email":!0,"read:user":!0},eq=e=>e.some(e=>eU[e]),eN=(e=!1,t=!1,i)=>`
__typename
${Q(i,["graphQLId"],"id")}
${Q(i,["id"],"databaseId")}
${Q(i,["name"],"name")}
${Q(i,["name","username"],"login")}
${t?Q(i,["email"],"email"):""}
${Q(i,["avatarUrl"],`avatarUrl${e?"(size: $avatarSize)":""}`)}
${Q(i,["url"],"url")}
`,eM=(e=!1)=>`
latestReviews(first: 100) {
  nodes {
    author {
      ... on User {
        ${eN(!1,e)}
      }
      ... on EnterpriseUserAccount {
        ${eG(!1)}
      }
    }
    state
  }
}
`,eW=(e=!1)=>`
__typename
id
databaseId
login
avatarUrl${e?"(size: $avatarSize)":""}
url
`,eG=(e=!1)=>`
__typename
id
login
avatarUrl${e?"(size: $avatarSize)":""}
url
`,eH=(e,t=!1,i)=>`
id
${!i||eI(i,"PR_ISSUE_FULL_DATABASE_ID")?"fullDatabaseId":"databaseId"}
number
title
state
author {
  ... on User {
    ${eN(!1,t)}
  }
  ... on Bot {
    ${eW(!1)}
  }
  ... on EnterpriseUserAccount {
    ${eG(!1)}
  }
}
commits(last: 1) {
  totalCount
  nodes {
    commit {
      ... on Commit {
        oid
        statusCheckRollup {
          contexts(first: 100) {
            totalCount
nodes {
  ${!i||eI(i,"CHECK_RUN")?eT:""}
  ... on StatusContext {
    context
    createdAt
    description
    state
    targetUrl
  }
}
          }
        }
      }
    }
  }
}
baseRef {
  name
  target {
    oid
  }
}
headRef {
  name
  target {
    oid
  }
}
repository {
  id
  databaseId
  name
  owner {
    login
  }
  url
  sshUrl
  viewerPermission
}
headRepository {
  id
  databaseId
  name
  owner {
    login
  }
  url
  sshUrl
}
${e?"isDraft":""}
url
createdAt
comments {
  totalCount
}
reactions(content: THUMBS_UP) {
  totalCount
}
updatedAt
closedAt
mergedAt
assignees(first: 100) {
  nodes {
    ${eN(!1,t)}
  }
}
reviewRequests(first: 100) {
  nodes {
    ${!i||eI(i,"AS_CODE_OWNER")?"asCodeOwner":""}
    requestedReviewer {
      ... on User {
        ${eN(!1,t)}
      }
    }
  }
}
${!i||eI(i,"LATEST_REVIEWS")?eM(t):""}
additions
deletions
changedFiles
mergeable
mergeStateStatus
milestone {
  ${e$}
}
labels(first: 100) {
  nodes {
    ${ex}
  }
}
${!i||eI(i,"VIEWER_CAN_MERGE_AS_ADMIN")?"viewerCanMergeAsAdmin":""}
`,eV=(e=!1,t)=>`
id
${!t||eI(t,"PR_ISSUE_FULL_DATABASE_ID")?"fullDatabaseId":"databaseId"}
title
author {
  ... on User {
    ${eN(!1,e)}
  }
  ... on Bot {
    ${eW(!1)}
  }
  ... on EnterpriseUserAccount {
    ${eG(!1)}
  }
}
closedAt
createdAt
number
updatedAt
url
reactions(content: THUMBS_UP) {
  totalCount
}
repository {
  databaseId
  id
  name
  owner {
    login
  }
}
comments {
  totalCount
}
assignees(first: 100) {
  nodes {
    ${eN(!1,e)}
  }
}
state
milestone {
  ${e$}
}
labels(first: 100) {
  nodes {
    ${ex}
  }
}
`,ej={"-linked":"-linked",archived:"archived",assignee:"assignee",author:"author",base:"base",closed:"closed",commenter:"commenter",comments:"comments",created:"created",draft:"draft",head:"head",label:"label",language:"language",linked:"linked",in:"in",interactions:"interactions",involves:"involves",is:"is",mentions:"mentions",merged:"merged",milestone:"milestone",no:"no",org:"org",project:"project",reactions:"reactions",repo:"repo",review:"review","reviewed-by":"reviewed-by","review-requested":"review-requested",state:"state",status:"status",team:"team","team-review-requested":"team-review-requested",type:"type",updated:"updated",user:"user","user-review-requested":"user-review-requested"},ez=RegExp('(([^\\s]+:)?\\"(?:[^\\"\\\\]|\\\\.)*\\"?)|([^\\"\\s]+)',"g"),eQ=e=>{let t=[];return(e.match(ez)??[]).forEach(e=>{e.includes(":")&&"is:closed"!=e&&ej[e.split(":")[0]]&&t.push(e)}),t},eY=(e,t,i,r)=>{let s="issue"===e;return{query:`
query SearchIssuesOrPullRequests($query: String! $after: String) {
  search(type:ISSUE query:$query first: ${r.maxPageSize} after:$after) {
    pageInfo {
      hasNextPage
      endCursor
    }
    nodes {
      ... on ${s?"Issue":"PullRequest"} {
        ${s?eV(r.supportsEmail,r.enterpriseVersion??null):eH(r.supportsDrafts??!1,r.supportsEmail,r.enterpriseVersion??null)}
      }
    }
  }
}`,variables:{query:`is:${e} is:open ${r.includeFromArchivedRepos?"":"archived:false"} ${t}`,after:i}}},eK=(e=[])=>e.some(e=>(null==e?void 0:e.message)==="Field 'isDraft' doesn't exist on type 'PullRequest'"),eZ=/@@ -(\d+)(?:,\d+ | )\+(\d+)(?:,\d+ | )@@(?:\\n)?/,eJ=`
\\ No newline at end of file
+`,eX=(e,t,i,r)=>{let s=eZ.exec(e);if(!s||!s[0]||!s[1])return[];let o=parseInt(s[1],10),n=parseInt(s[2],10),a=e.replace(eJ,`
+`).split(`
`).slice(1),l=o-1,u=n-1,c=a.map(e=>{let t,i;switch(e[0]){case"-":t="DELETED",l+=1,i=`${e.slice(1)}
`;break;case"+":t="ADDED",u+=1,i=`${e.slice(1)}
`;break;default:t="UNMODIFIED",u+=1,l+=1,i=`${e}
`}return{line:i,oldLineNumber:"ADDED"!==t?l:null,newLineNumber:"DELETED"!==t?u:null,type:t}});if(null!==i&&null!==t&&null!==r&&i<t){let e=0,s=c.length,o="LEFT"===r?"oldLineNumber":"newLineNumber";for(let r=0;r<c.length;r++){let n=c[r][o];n===i?e=r:n===t&&(s=r)}c=c.slice(e,s+1)}return c},e0=`
id
databaseId
owner {
  login
}
name
url
sshUrl
defaultBranchRef {
  name
}
viewerPermission
`,e1={__typename:"User",id:"U_kgDNJ5k",databaseId:10137,name:"Deleted user",login:"ghost",email:"",avatarUrl:"https://avatars.githubusercontent.com/u/10137?v=4",url:"https://github.com/ghost"},e2={APPROVED:"APPROVED",CHANGES_REQUESTED:"CHANGES_REQUESTED",COMMENTED:"COMMENTED",REVIEW_REQUESTED:"REVIEW_REQUESTED"},e4={MERGEABLE:"MERGEABLE",CONFLICTING:"CONFLICTS",UNKNOWN:"UNKNOWN"},e5={BEHIND:"BEHIND",BLOCKED:"BLOCKED",UNKNOWN:"UNKNOWN_AND_BLOCKED",UNSTABLE:"UNSTABLE",CLEAN:null,DIRTY:null,DRAFT:null,HAS_HOOKS:null},e7={OPEN:"OPEN",CLOSED:"CLOSED"},e8=["ADMIN","MAINTAIN","TRIAGE","WRITE"],e6=e=>({color:`#${e.color}`,description:e.description,graphQLId:e.id,id:null,name:e.name}),e3=e=>({canCreateWebhook:"ADMIN"===e,canPush:"ADMIN"===e||"MAINTAIN"===e||"WRITE"===e,isAdmin:"ADMIN"===e}),e9=e=>({id:e.databaseId.toString(),graphQLId:e.id,namespace:e.owner.login,name:e.name,webUrl:e.url,httpsUrl:e.url.endsWith(".git")?e.url:`${e.url}.git`,sshUrl:e.sshUrl,defaultBranch:e.defaultBranchRef,permissions:e3(e.viewerPermission)}),te=e=>({canCreateWebhook:e.admin,canPush:e.admin||e.maintain||e.push,isAdmin:e.admin}),tt=e=>({id:e.id.toString(),graphQLId:e.node_id,namespace:e.owner.login,name:e.name,webUrl:e.html_url,httpsUrl:e.clone_url,sshUrl:e.ssh_url,defaultBranch:{name:e.default_branch},permissions:te(e.permissions)}),ti=e=>({path:e.path,isDirectory:"tree"===e.type}),tr={OPEN:"OPEN",CLOSED:"CLOSED",MERGED:"MERGED"},ts={id:!0,graphQLId:!0,name:!0,username:!0,email:!0,avatarUrl:!0,url:!0},to=(e,t=ts)=>{let i={};return t.id&&(i.id="databaseId"in e?e.databaseId.toString():e.id),t.graphQLId&&(i.graphQLId=e.id),t.name&&(i.name=e.name??e.login),t.username&&(i.username=e.login),t.email&&(i.email=e.email??null),t.avatarUrl&&(i.avatarUrl=e.avatarUrl),t.url&&(i.url=e.url),i},tn=(e,t)=>"COMPLETED"!==e?({IN_PROGRESS:"RUNNING",PENDING:"PENDING",QUEUED:"PENDING",REQUESTED:"PENDING",WAITING:"PENDING"})[e]:({ACTION_REQUIRED:"ACTION_REQUIRED",CANCELLED:"CANCELLED",FAILURE:"FAILED",NEUTRAL:null,SKIPPED:"SKIPPED",STALE:"FAILED",STARTUP_FAILURE:"FAILED",SUCCESS:"SUCCESS",TIMED_OUT:"ERROR"})[t],ta=e=>({ERROR:"ERROR",EXPECTED:"PENDING",FAILURE:"FAILED",PENDING:"PENDING",SUCCESS:"SUCCESS"})[e],tl=e=>{var t,i,r,s,o,n,a,l,u,c,h,d;let p=null;p=e.author?e.author:e1;let g=((null==(t=e.reviewRequests)?void 0:t.nodes)||[]).filter(eA).filter(e=>!e.asCodeOwner),m=null==(i=e.headRepository)?void 0:i.url;m&&!m.endsWith(".git")&&(m=`${m}.git`);let f=null==(r=e.repository)?void 0:r.url;f&&!f.endsWith(".git")&&(f=`${f}.git`);let w=g.filter(e=>e.requestedReviewer&&"__typename"in e.requestedReviewer).map(e=>({reviewer:to(e.requestedReviewer),state:"REVIEW_REQUESTED"})).concat(((null==(s=e.latestReviews)?void 0:s.nodes)||[]).filter(eA).map(e=>{let t=e1;return e.author&&e.author.__typename&&(t=e.author),{reviewer:to(t),state:e2[e.state]}}));return{id:void 0!==e.fullDatabaseId?e.fullDatabaseId:e.databaseId.toString(),graphQLId:e.id,title:e.title,number:e.number,state:tr[e.state],commentCount:e.comments.totalCount,upvoteCount:e.reactions.totalCount,author:p&&p.__typename?to(p):null,createdDate:new Date(e.createdAt),isDraft:e.isDraft,repository:{id:e.repository.databaseId,graphQLId:e.repository.id,name:e.repository.name,owner:{login:e.repository.owner.login},remoteInfo:{cloneUrlHTTPS:f,cloneUrlSSH:e.repository.sshUrl}},headRepository:e.headRepository?{id:e.headRepository.databaseId,graphQLId:e.headRepository.id,name:e.headRepository.name,owner:{login:e.headRepository.owner.login},remoteInfo:{cloneUrlHTTPS:m,cloneUrlSSH:e.headRepository.sshUrl}}:null,headCommit:{buildStatuses:(null==(l=null==(a=null==(n=null==(o=e.commits.nodes)?void 0:o.filter(eA)[0])?void 0:n.commit.statusCheckRollup)?void 0:a.contexts.nodes)?void 0:l.filter(eA).map(e=>"context"in e?{completedAt:null,description:e.description,name:e.context,state:ta(e.state),startedAt:new Date(e.createdAt),stage:null,url:e.targetUrl}:{completedAt:e.completedAt?new Date(e.completedAt):null,description:null,name:e.name,state:tn(e.status,e.conclusion),startedAt:e.startedAt?new Date(e.startedAt):null,stage:null,url:e.permalink}))??[]},headRef:e.headRef?{name:e.headRef.name,oid:(null==(u=e.headRef.target)?void 0:u.oid)??null}:null,baseRef:e.baseRef?{name:e.baseRef.name,oid:(null==(c=e.baseRef.target)?void 0:c.oid)??null}:null,url:e.url,updatedDate:new Date(e.updatedAt),closedDate:e.closedAt?new Date(e.closedAt):null,mergedDate:e.mergedAt?new Date(e.mergedAt):null,assignees:e.assignees.nodes?e.assignees.nodes.filter(eA).map(e=>to(e)):null,reviews:w,reviewDecision:B(w),additions:e.additions,deletions:e.deletions,fileCount:e.changedFiles,commitCount:e.commits.totalCount,mergeableState:e5[e.mergeStateStatus]??e4[e.mergeable],milestone:e.milestone?td(e.milestone):null,labels:(null==(d=null==(h=e.labels)?void 0:h.nodes)?void 0:d.filter(eA).map(e6))??[],permissions:{canMerge:e8.includes(e.repository.viewerPermission),canMergeAndBypassProtections:e.viewerCanMergeAsAdmin??!1}}},tu=e=>{var t,i;let{comments:r,isOutdated:s,isResolved:o,originalLine:n,originalStartLine:a,startDiffSide:l}=e,u=null==(t=r.nodes)?void 0:t[0];if(!u)return null;let{author:c,body:h,databaseId:d,id:p,path:g,publishedAt:m,url:f}=u;return{author:c?{avatarUrl:c.avatarUrl,email:null,name:c.login}:null,body:h,createdAt:m?new Date(m):null,diffLines:eX(u.diffHunk,n,a,l),id:d,isOutdated:s,isResolved:o,graphQLId:p,filename:g,replies:(null==(i=r.nodes)?void 0:i.filter(eA).slice(1).map(tc))??[],url:f}},tc=e=>({author:e.author?{avatarUrl:e.author.avatarUrl,email:null,name:e.author.login}:null,body:e.body,createdAt:e.publishedAt?new Date(e.publishedAt):null,graphQLId:e.id,id:e.databaseId,url:e.url}),th=e=>{var t,i,r;let s=null;return s=e.author?e.author:e1,{id:void 0!==e.fullDatabaseId?e.fullDatabaseId:e.databaseId.toString(),graphQLId:e.id,number:e.number,title:e.title,author:s&&s.__typename?to(s):null,commentCount:e.comments.totalCount,closedDate:e.closedAt?new Date(e.closedAt):null,createdDate:new Date(e.createdAt),description:null,state:{name:e7[e.state],color:null},type:null,repository:{id:e.repository.databaseId,graphQLId:e.repository.id,name:e.repository.name,owner:{login:e.repository.owner.login}},url:e.url,updatedDate:new Date(e.updatedAt),assignees:(null==(t=e.assignees.nodes)?void 0:t.filter(eA).map(e=>to(e)))??[],upvoteCount:e.reactions.totalCount,milestone:e.milestone?td(e.milestone):null,labels:(null==(r=null==(i=e.labels)?void 0:i.nodes)?void 0:r.filter(eA).map(e6))??[]}},td=e=>({id:e.number.toString(),graphQLId:e.id.toString(),number:e.number,title:e.title,description:e.description,isOpen:"OPEN"==e.state,url:e.url,startDate:null,dueDate:e.dueOn?new Date(e.dueOn):null}),tp=class extends V{constructor(){super(...arguments),this._scopesCache={},this._enterpriseVersionsCache={}}async getScopes(e){let t=e.token||this.config.token;if(!t)return[];let i=this._scopesCache[t];if(!i){let r=(await eL(this.config,{query:"query { rateLimit(dryRun: true) { __typename } }"},e)).headers["x-oauth-scopes"];i=r?r.split(", "):[],this._scopesCache[t]=i}return i}async getEnterpriseVersion(e){let t=e.baseUrl||this.config.baseUrl;if(!t)return null;let i=this._enterpriseVersionsCache[t];if(!i){let r=await this.config.request({url:`${eB(this.config,e)}/meta`,headers:j(e.token||this.config.token)});if(!r.body.installed_version)return null;i=r.body.installed_version.split(".").slice(0,3).map(e=>parseInt(e,10)),this._enterpriseVersionsCache[t]=i}return i}getEnterpriseAvatarUrlIfNeeded(e,t,i){let r=i.baseUrl||this.config.baseUrl;return!r||r.startsWith(eD)?e:t?`https://avatars.githubusercontent.com/u/e?email=${encodeURIComponent(t)}`:""}async getCurrentUser(e={},t={}){var i;if(e.fields&&!e.fields.length)throw Error('"fields" must contain at least one field or be omitted');let r=z(e.fields),s=await this.getScopes(t),o=await eL(this.config,{query:`
query getCurrentUser {
  viewer {
    ${eN(!1,eq(s),r)}
  }
}
`},t),n=null==(i=o.body.data)?void 0:i.viewer;if(!n)throw new eS("Current user not found.",o.body.errors);return{data:to(n,r)}}async getAccountsForRepo(e,t={}){var i,r,s,o,n;let a=await this.getScopes(t),{repo:{namespace:l,name:u},cursor:c}=e,h=await eL(this.config,{query:`
query getAccountsForRepo($owner: String!, $name: String! $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    assignableUsers(first: $first, after: $cursor) {
      nodes {
        ${eN(!1,eq(a))}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{owner:l,name:u,cursor:c,first:100}},t);if(!h.body.data)throw new eS("Could not fetch accounts for repo",h.body.errors);return{pageInfo:(null==(r=null==(i=h.body.data.repository)?void 0:i.assignableUsers)?void 0:r.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(n=null==(o=null==(s=h.body.data.repository)?void 0:s.assignableUsers)?void 0:o.nodes)?void 0:n.map(e=>to(e)))??[]}}async getUserForCommit(e,t={}){var i,r;let s=await eL(this.config,{query:`
query getUserForCommit(
  $owner: String!
  $name: String!
  $oid: GitObjectID!
  $avatarSize: Int
) {
  repository(owner: $owner, name: $name) {
    object(oid: $oid) {
      ... on Commit {
        author {
          name
          email
          avatarUrl(size: $avatarSize)
        }
      }
    }
  }
}
`,variables:{owner:e.repo.namespace,name:e.repo.name,oid:e.oid,avatarSize:e.avatarSize}},t),o=null==(i=s.body.data)?void 0:i.repository;if(!o)throw new eS("Repository not found.",s.body.errors);let n=null==(r=o.object)?void 0:r.author;if(!n)throw new eS("Commit not found.",s.body.errors);return{data:{name:n.name,email:n.email,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(n.avatarUrl,n.email,t)}}}async createCommit(e,t={}){let{commitMessage:i,deletedFiles:r,newOrModifiedFiles:s,repo:o,target:n}=e,a=await eL(this.config,{query:`
mutation createCommitOnBranch(
  $branchName: String!,
  $expectedHeadOid: GitObjectID!,
  $fileChanges: FileChanges!,
  $message: CommitMessage!,
  $repositoryNameWithOwner: String!,
) {
  createCommitOnBranch(input: {
    branch: {
      branchName: $branchName,
      repositoryNameWithOwner: $repositoryNameWithOwner,
    },
    expectedHeadOid: $expectedHeadOid,
    fileChanges: $fileChanges,
    message: $message
  }) {
    commit {
      authoredDate
      committedDate
      oid
    }
    ref {
      name
    }
  }
}
`,variables:{branchName:n.name,expectedHeadOid:n.oid,fileChanges:{additions:Object.entries(s).map(([e,t])=>({contents:eR.Base64.encode(t),path:e})),deletions:r.map(e=>({path:e}))},message:{body:i.description,headline:i.summary},repositoryNameWithOwner:`${o.namespace}/${o.name}`}},t);if(!a.body.data)throw new eS("Could not create commit",a.body.errors);return{data:{name:a.body.data.createCommitOnBranch.ref.name,commit:{authoredDate:new Date(a.body.data.createCommitOnBranch.commit.authoredDate),committedDate:new Date(a.body.data.createCommitOnBranch.commit.committedDate),oid:a.body.data.createCommitOnBranch.commit.oid}}}}async getAccountForEmail(e,t={}){var i,r,s;let o=await this.getScopes(t),n=await eL(this.config,{query:`
query getAccountForEmail($query: String! $avatarSize: Int) {
  search(query: $query, type: USER, first: 1) {
    nodes {
      ... on User {
        ${eN(!0,eq(o))}
      }
    }
  }
}
`,variables:{query:`in:email ${e.email}`,avatarSize:e.avatarSize}},t),a=null==(s=null==(r=null==(i=n.body.data)?void 0:i.search)?void 0:r.nodes)?void 0:s[0];if(!a)throw new eS("Could not find user via email",n.body.errors);return{data:to({...a,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(a.avatarUrl,a.email,t)})}}async getAccountForUsername(e,t={}){var i;let r=await this.getScopes(t),s=await eL(this.config,{query:`
query getUserForUsername($login: String! $avatarSize: Int) {
  user(login: $login) {
    ${eN(!0,eq(r))}
  }
}
`,variables:{login:e.username,avatarSize:e.avatarSize}},t),o=null==(i=s.body.data)?void 0:i.user;if(!o)throw new eS("Could not find user via username",s.body.errors);return{data:to({...o,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(o.avatarUrl,o.email,t)})}}async getOrgsForCurrentUser(e={},t={}){let i=await eL(this.config,{query:`
query getOrgsForCurrentUser($cursor: String, $first: Int!) {
  viewer {
    organizations(first: $first after: $cursor) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        id
        databaseId
        name
        login
        email
        avatarUrl
      }
    }
  }
}
`,variables:{cursor:e.cursor,first:100}},t);if(!i.body.data)throw new eS("Could not fetch orgs for current user",i.body.errors);let r=i.body.data.viewer.organizations.nodes||[];return{pageInfo:i.body.data.viewer.organizations.pageInfo,data:r.map(e=>({id:e.databaseId.toString(),graphQLId:e.id,username:e.login,name:e.name||null,email:e.email||null,avatarUrl:e.avatarUrl}))}}async getOrgMembers(e,t={}){var i,r,s,o,n,a,l,u,c;let h=await eL(this.config,{query:`
query getOrgMember($cursor: String, $first: Int!, $login: String!) {
  viewer {
    organization(login: $login) {
      membersWithRole(first: $first after: $cursor) {
        pageInfo {
          endCursor
          hasNextPage
        }
        nodes {
          ${eN(!1,!0)}
        }
      }
    }
  }
}
`,variables:{cursor:e.cursor,first:100,login:e.org}},t);if(!(null!=(r=null==(i=h.body.data)?void 0:i.viewer.organization)&&r.membersWithRole)&&null!=(s=h.body.errors)&&s.length)throw new eS("Could not read the members of the organization",h.body.errors);let d=(null==(n=null==(o=h.body.data)?void 0:o.viewer.organization)?void 0:n.membersWithRole.nodes)||[];return{pageInfo:{hasNextPage:(null==(l=null==(a=h.body.data)?void 0:a.viewer.organization)?void 0:l.membersWithRole.pageInfo.hasNextPage)??!1,endCursor:(null==(c=null==(u=h.body.data)?void 0:u.viewer.organization)?void 0:c.membersWithRole.pageInfo.endCursor)??null},data:d.map(e=>to({...e,avatarUrl:this.getEnterpriseAvatarUrlIfNeeded(e.avatarUrl,e.email,t)}))}}async getRepo(e,t={}){var i;let r=await eL(this.config,{query:`
query getRepo($owner: String!, $name: String!) {
  repository(owner: $owner, name: $name) {
    ${e0}
  }
}
`,variables:{owner:e.namespace,name:e.name}},t);if(!(null!=(i=r.body.data)&&i.repository))throw new eS(`Repository ${e.namespace}/${e.name} not found`,r.body.errors);return{data:e9(r.body.data.repository)}}async getRepos(e,t={}){let i=e.map(({namespace:e,name:t},i)=>`
      getRepo_${i}: repository(owner: "${e}", name: "${t}") {
        ${e0}
      }
    `).join(`
`),r=await eL(this.config,{query:`
query batchGetRepos {
  ${i}
}
`},t);if(!r.body.data)throw new eS("Could not fetch repos",r.body.errors);let s=[],o=[];return e.forEach((e,t)=>{let i=r.body.data[`getRepo_${t}`];i?s.push(e9(i)):o.push({input:e})}),{data:s,errors:o}}async fetchMultipleRESTPages(e,t,i,r){let s=[];for(let r=0;r<t;r++)s.push(i(e+r));let o=await Promise.all(s),n=[];for(let e of o){if(!e.body)throw Error(e.statusText||"Unknown error");n=n.concat(e.body.map(e=>r(e)))}let a=o.every(e=>100===e.body.length);return{data:n,pageInfo:{hasNextPage:a,nextPage:a?e+t:null}}}async getReposForCurrentUser(e,t={}){if(e.simultaneousPagesToFetch&&e.simultaneousPagesToFetch>40)throw Error("The argument 'simultaneousPagesToFetch' cannot exceed 40 for 'getReposForCurrentUser'");let i=new URLSearchParams;return i.append("per_page","100"),e.affiliations&&i.append("affiliation",e.affiliations.join(",")),await this.fetchMultipleRESTPages(e.page??1,e.simultaneousPagesToFetch??4,e=>this.config.request({url:`${eB(this.config,t)}/user/repos?${i.toString()}&page=${e}`,headers:{...j(t.token||this.config.token),Accept:"application/vnd.github.raw+json","X-Github-Next-Global-ID":1}}),tt)}async getReposForOrg(e,t={}){if(e.simultaneousPagesToFetch&&e.simultaneousPagesToFetch>40)throw Error("The argument 'simultaneousPagesToFetch' cannot exceed 40 for 'getReposForOrg'");return await this.fetchMultipleRESTPages(e.page??1,e.simultaneousPagesToFetch??4,i=>this.config.request({url:`${eB(this.config,t)}/orgs/${e.orgName}/repos?per_page=100&page=${i}`,headers:{...j(t.token||this.config.token),Accept:"application/vnd.github.raw+json","X-Github-Next-Global-ID":1}}),tt)}async getReposForUsernames(e,t={}){if(!e.usernames.length)return{pageInfo:{endCursor:null,hasNextPage:!1},data:[]};let i=await eL(this.config,{query:`
query getReposForUsernames($query: String!, $cursor: String, $first: Int!) {
  search(query: $query, type: REPOSITORY, first: $first, after: $cursor) {
    pageInfo {
      endCursor
      hasNextPage
    }
    nodes {
      ... on Repository {
        ${e0}
      }
    }
  }
}
`,variables:{query:`fork:true ${e.usernames.map(e=>`user:${e}`).join(" ")}`,cursor:e.cursor,first:100}},t);if(!i.body.data)throw new eS("Could not fetch repos for usernames",i.body.errors);let r=i.body.data.search.nodes||[];return{pageInfo:i.body.data.search.pageInfo,data:r.map(e9)}}async getReposForOwners(e,t={}){return this.getReposForUsernames({usernames:e.owners.filter(e=>e.username).map(e=>e.username),cursor:e.cursor},t)}async getRefs(e,t,i={}){var r;let s=await eL(this.config,{query:`
query getRefs($owner: String!, $name: String!, $refPrefix: String!, $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    refs(refPrefix: $refPrefix first: $first after: $cursor) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        name
        target {
          ... on Commit {
            oid
            authoredDate
            committedDate
          }
        }
      }
    }
  }
}
`,variables:{owner:t.repo.namespace,name:t.repo.name,refPrefix:e,cursor:t.cursor,first:100}},i),o=null==(r=s.body.data)?void 0:r.repository;if(!o)throw new eS("Ref repository not found.",s.body.errors);let n=o.refs;return n?{pageInfo:n.pageInfo,data:(n.nodes||[]).map(e=>{var t;let i=null!=(t=e.target)&&t.oid?e.target:null;return{name:e.name,commit:i?{oid:i.oid,authoredDate:new Date(i.authoredDate),committedDate:new Date(i.committedDate)}:null}})}:{pageInfo:{endCursor:null,hasNextPage:!1},data:[]}}async getBranches(e,t={}){return this.getRefs("refs/heads/",e,t)}async getTags(e,t={}){return this.getRefs("refs/tags/",e,t)}async getBlame(e,t={}){var i;let r=await eL(this.config,{query:`
query getBlame($owner: String!, $name: String!, $ref: String!, $path: String!) {
  repository(owner: $owner, name: $name) {
    object(expression: $ref) {
      ... on Commit {
        blame(path: $path) {
          ranges {
            startingLine
            endingLine
            commit {
              oid
              parents(first:100) {
                nodes {
                  oid
                }
              }
              authoredDate
              committedDate
              message
              author {
                name
                email
                avatarUrl
              }
              committer {
                name
                email
                avatarUrl
              }
              additions
              deletions
              changedFilesIfAvailable
            }
          }
        }
      }
    }
  }
}
`,variables:{owner:e.repo.namespace,name:e.repo.name,ref:e.ref,path:e.path}},t),s=null==(i=r.body.data)?void 0:i.repository;if(!s)throw new eS("Blame repository not found.",r.body.errors);let o=s.object;if(!o||!("blame"in o))throw new eS("Ref not found.",r.body.errors);if(0===o.blame.ranges.length)throw new eS("File not found.",r.body.errors);return{data:{ranges:o.blame.ranges.map(e=>{var t;return{startingLine:e.startingLine,endingLine:e.endingLine,commit:{oid:e.commit.oid,parentOids:(null==(t=e.commit.parents.nodes)?void 0:t.map(e=>e.oid))||[],authoredDate:new Date(e.commit.authoredDate),author:e.commit.author?{name:e.commit.author.name,email:e.commit.author.email,avatarUrl:e.commit.author.avatarUrl}:null,committedDate:new Date(e.commit.committedDate),committer:e.commit.committer?{name:e.commit.committer.name,email:e.commit.committer.email,avatarUrl:e.commit.committer.avatarUrl}:null,message:e.commit.message,fileCount:e.commit.changedFilesIfAvailable,additions:e.commit.additions,deletions:e.commit.deletions}}})}}}async getFileContents(e,t={}){let i=await this.config.request({url:`${eB(this.config,t)}/repos/${e.repo.namespace}/${e.repo.name}/contents/${encodeURIComponent(e.path)}?ref=${e.ref}`,headers:{...j(t.token||this.config.token),Accept:"application/vnd.github.raw+json"}});if(i.headers["content-type"].startsWith("application/json"))throw Error(`GitHub: got directory when fetching "${e.path}", getFileContents does not support fetching directories`);if(!i.headers["content-type"].startsWith("application/vnd.github.raw+json"))throw Error(`GitHub: unsupported content type "${i.headers["content-type"]}" when fetching "${e.path}"`);return{data:new Blob([i.body])}}async searchPullRequests(e,t={}){var i;let r=await this.getEnterpriseVersion(t),s=eq(await this.getScopes(t)),o=t=>eY("pr",t&&"boolean"==typeof e.isDraft?`${e.query} draft:${e.isDraft}`:e.query,e.cursor,{maxPageSize:e.maxPageSize??15,supportsEmail:s,supportsDrafts:t,enterpriseVersion:r,includeFromArchivedRepos:e.includeFromArchivedRepos}),n=await eL(this.config,o(!0),t);n.body.errors&&eK(n.body.errors)&&(this.config.baseUrl||t.baseUrl)&&(n=await eL(this.config,o(!1),t));let{data:a}=n.body;if(!a)throw new eS("Could not search pull requests",n.body.errors);return{pageInfo:{hasNextPage:a.search.pageInfo.hasNextPage,endCursor:a.search.pageInfo.endCursor},data:(null==(i=a.search.nodes)?void 0:i.filter(eA).map(tl))||[]}}async searchIssues(e,t={}){var i;let r=await this.getEnterpriseVersion(t),s=eq(await this.getScopes(t)),o=await eL(this.config,eY("issue",e.query,e.cursor,{supportsEmail:s,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:e.maxPageSize??100,enterpriseVersion:r}),t),{data:n}=o.body;if(!n)throw new eS("Could not search issues",o.body.errors);return{pageInfo:{hasNextPage:n.search.pageInfo.hasNextPage,endCursor:n.search.pageInfo.endCursor},data:(null==(i=n.search.nodes)?void 0:i.filter(eA).map(th))||[]}}async getPullRequestsAssociatedWithUser(e,t={}){var i;let r=[`involves:${e.username}`];return null!=(i=e.repos)&&i.length&&e.repos.forEach(e=>{r.push(`repo:${e.namespace}/${e.name}`)}),e.labelNames&&e.labelNames.forEach(e=>{r.push(`label:"${e}"`)}),this.searchPullRequests({query:r.join(" "),cursor:e.cursor,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:e.maxPageSize},t)}async getPullRequestsForRepos(e,t={}){let{assigneeLogins:i,updatedBefore:r,authorLogin:s,repos:o,reviewRequestedLogin:n,startQuery:a,mentionLogin:l,labelNames:u,maxPageSize:c}=e,h=eQ(a||"");return o.forEach(e=>{h.push(`repo:${e.namespace}/${e.name}`)}),i&&i.forEach(e=>{h.push(`assignee:${e}`)}),r&&h.push(`updated:<${r}`),s&&h.push(`author:${s}`),n&&h.push(`review-requested:${n}`),l&&h.push(`mentions:${l}`),u&&u.forEach(e=>{h.push(`label:"${e}"`)}),this.searchPullRequests({query:`sort:updated ${h.join(" ")}`,isDraft:e.isDraft,cursor:e.cursor,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:c},t)}async getPullRequestForRepo(e,t={}){var i;let r=await this.getEnterpriseVersion(t),s=eq(await this.getScopes(t)),o=t=>({query:`query getPullRequest(
  $owner: String!
  $name: String!
  $number: Int!
) {
  repository(
    owner: $owner,
    name: $name
  ) {
    pullRequest(number: $number) {
      ${eH(t,s,r)}
    }
  }
}`,variables:{owner:e.repo.namespace,name:e.repo.name,number:e.number}}),n=await eL(this.config,o(!0),t);n.body.errors&&eK(n.body.errors)&&(this.config.baseUrl||t.baseUrl)&&(n=await eL(this.config,o(!1),t));let{data:a}=n.body;if(!a)throw new eS("Could not fetch pull request by number",n.body.errors);let l=null==(i=n.body.data)?void 0:i.repository.pullRequest;return{data:l?tl(l):null}}async getPullRequestByGraphQLId(e,t={}){var i;let r=await this.getEnterpriseVersion(t),s=eq(await this.getScopes(t)),o=t=>({query:`query getPullRequest(
  $graphQLId: ID!
) {
  node(id: $graphQLId) {
    ... on PullRequest {
      ${eH(t,s,r)}
    }
  }
}`,variables:{graphQLId:e.graphQLId}}),n=await eL(this.config,o(!0),t);n.body.errors&&eK(n.body.errors)&&(this.config.baseUrl||t.baseUrl)&&(n=await eL(this.config,o(!1),t));let{data:a}=n.body;if(!a)throw new eS("Could not fetch pull request by id",n.body.errors);let l=null==(i=n.body.data)?void 0:i.node;return{data:l?tl(l):null}}async closePullRequest(e,t={}){var i,r,s;let{pullRequest:{graphQLId:o}}=e;if(!o)throw Error('GitHub requires "graphQLId" for this function.');let n=`mutation ClosePullRequest($pullRequestGraphQLId: ID!) {
  closePullRequest(input: { pullRequestId: $pullRequestGraphQLId }) {
    pullRequest {
      id
    }
  }
}`,a=await eL(this.config,{query:`${n}`,variables:{pullRequestGraphQLId:o}},t);if(!(null!=(s=null==(r=null==(i=a.body.data)?void 0:i.closePullRequest)?void 0:r.pullRequest)&&s.id))throw new eS("Could not close pull request",a.body.errors)}async mergePullRequest(e,t={}){var i,r,s,o;let n,{pullRequest:a,mergeStrategy:l}=e;if(!a.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');if(!(null!=(i=a.headRef)&&i.oid))throw Error('GitHub requires "headRef.oid" for this function.');switch(l){case"MERGE_COMMIT":n="MERGE";break;case"REBASE":n="REBASE";break;case"SQUASH":n="SQUASH"}let u=`mutation MergePullRequest(
  $pullRequestGraphQLId: ID!,
  $expectedSourceSha: GitObjectID!,
  $mergeStrategy: PullRequestMergeMethod,
) {
  mergePullRequest(input: {
    pullRequestId: $pullRequestGraphQLId,
    expectedHeadOid: $expectedSourceSha,
    mergeMethod: $mergeStrategy,
  }) {
    pullRequest {
      id
    }
  }
}`,c=await eL(this.config,{query:`${u}`,variables:{pullRequestGraphQLId:a.graphQLId,expectedSourceSha:a.headRef.oid,mergeStrategy:n}},t);if(!(null!=(o=null==(s=null==(r=c.body.data)?void 0:r.mergePullRequest)?void 0:s.pullRequest)&&o.id))throw new eS("Could not merge pull request",c.body.errors)}async setPullRequestMilestone(e,t={}){var i,r,s;let{pullRequest:o,milestone:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation SetPullRequestMilestone($pullRequestGraphQLId: ID!, $milestoneGraphQLId: ID) {
  updatePullRequest(input: { pullRequestId: $pullRequestGraphQLId, milestoneId: $milestoneGraphQLId }) {
    pullRequest {
      id
    }
  }
}`,l=await eL(this.config,{query:`${a}`,variables:{pullRequestGraphQLId:o.graphQLId,milestoneGraphQLId:(null==n?void 0:n.graphQLId)??null}},t);if(!(null!=(s=null==(r=null==(i=l.body.data)?void 0:i.updatePullRequest)?void 0:r.pullRequest)&&s.id))throw new eS("Could not set milestone of pull request",l.body.errors)}async markPullRequestReadyForReview(e,t){var i,r,s;let o=`mutation MarkReadyToReview($pullRequestGraphQLId: ID!) {
  markPullRequestReadyForReview(input: { pullRequestId: $pullRequestGraphQLId }) {
    pullRequest {
      id
    }
  }
}`,n=await eL(this.config,{query:o,variables:{pullRequestGraphQLId:e}},t);if(!(null!=(s=null==(r=null==(i=n.body.data)?void 0:i.markPullRequestReadyForReview)?void 0:r.pullRequest)&&s.id))throw new eS("Could not mark pull request ready to review",n.body.errors)}async convertPullRequestToDraft(e,t){var i,r,s;let o=`mutation ConvertToDraft($pullRequestGraphQLId: ID!) {
  convertPullRequestToDraft(input: { pullRequestId: $pullRequestGraphQLId }) {
    pullRequest {
      id
    }
  }
}`,n=await eL(this.config,{query:o,variables:{pullRequestGraphQLId:e}},t);if(!(null!=(s=null==(r=null==(i=n.body.data)?void 0:i.convertPullRequestToDraft)?void 0:r.pullRequest)&&s.id))throw new eS("Could not convert pull request to draft",n.body.errors)}async setPullRequestAsDraft(e,t={}){let{pullRequest:{graphQLId:i},isDraft:r}=e;if(!i)throw Error('GitHub requires "graphQLId" for this function.');if(r)return void await this.convertPullRequestToDraft(i,t);await this.markPullRequestReadyForReview(i,t)}async setPullRequestReviewers(e,t={}){var i,r,s;let{pullRequest:{reviews:o,graphQLId:n},reviewers:a}=e;if(!o)throw Error('GitHub requires "reviews" for this function');if(!n)throw Error('GitHub requires "graphQLId" for this function.');let l=o.filter(e=>"REVIEW_REQUESTED"!==e.state).map(e=>{if(!e.reviewer.graphQLId)throw Error('GitHub requires reviewer "graphQLId" for this function.');return e.reviewer.graphQLId}),u=a.map(e=>{if(!e.graphQLId)throw Error('GitHub requires reviewer "graphQLId" for this function.');return e.graphQLId}).filter(e=>-1===l.indexOf(e)),c=`mutation SetPullRequestReviewers($pullRequestGraphQLId: ID!, $reviewerGraphQLIds: [ID!]!) {
  requestReviews(input: { pullRequestId: $pullRequestGraphQLId, userIds: $reviewerGraphQLIds }) {
    pullRequest {
      id
    }
  }
}`,h=await eL(this.config,{query:c,variables:{pullRequestGraphQLId:n,reviewerGraphQLIds:u}},t);if(!(null!=(s=null==(r=null==(i=h.body.data)?void 0:i.requestReviews)?void 0:r.pullRequest)&&s.id))throw new eS("Could not set pull request reviewers",h.body.errors)}async reRequestPullRequestReviews(e,t={}){var i,r,s;let{pullRequest:{reviews:o,graphQLId:n},reviewers:a}=e;if(!n)throw Error('GitHub requires "graphQLId" for this function.');if(!o)throw Error('GitHub requires "reviews" for this function.');let l=[];for(let e of a){if(!e.graphQLId)throw Error('GitHub requires reviwer "graphQLId" for this function.');if(!o.find(t=>t.reviewer.graphQLId===e.graphQLId))throw Error("Can only re-request review from existing reviewer.");l.push(e.graphQLId)}let u=`mutation SetPullRequestReviewers($pullRequestGraphQLId: ID!, $reviewerGraphQLIds: [ID!]!) {
  requestReviews(input: { pullRequestId: $pullRequestGraphQLId, userIds: $reviewerGraphQLIds, union: true }) {
    pullRequest {
      id
    }
  }
}`,c=await eL(this.config,{query:u,variables:{pullRequestGraphQLId:n,reviewerGraphQLIds:l}},t);if(!(null!=(s=null==(r=null==(i=c.body.data)?void 0:i.requestReviews)?void 0:r.pullRequest)&&s.id))throw new eS("Could not re-request pull request reviews",c.body.errors)}async setPullRequestAssignees(e,t={}){var i,r,s;let{pullRequest:o,assignees:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=n.map(e=>{if(!e.graphQLId)throw Error('GitHub requires assignee "graphQLId" for this function.');return e.graphQLId}),l=`mutation SetPullRequestAssignees($pullRequestGraphQLId: ID!, $assigneeGraphQLIds: [ID!]!) {
  updatePullRequest(input: { pullRequestId: $pullRequestGraphQLId, assigneeIds: $assigneeGraphQLIds }) {
    pullRequest {
      id
    }
  }
}`,u=await eL(this.config,{query:l,variables:{pullRequestGraphQLId:o.graphQLId,assigneeGraphQLIds:a}},t);if(!(null!=(s=null==(r=null==(i=u.body.data)?void 0:i.updatePullRequest)?void 0:r.pullRequest)&&s.id))throw new eS("Could not set pull request assignees",u.body.errors)}async getReviewsForPullRequest(e,t={}){var i,r,s,o;let{repo:{namespace:n,name:a},pullRequestId:l}=e,u=`query getPullRequests(
  $namespace: String!
  $name: String!
  $pullRequestId: Int!
) {
  repository(
    owner: $namespace,
    name: $name
  ) {
    pullRequest(number: $pullRequestId) {
      reviewThreads(first: 100) {
        nodes {
          isOutdated
          isResolved
          originalLine
          originalStartLine
          startDiffSide
          comments(first: 100) {
            nodes {
              author {
                avatarUrl
                login
              }
              body
              databaseId
              diffHunk
              id
              path
              publishedAt
              pullRequestReview {
                id
              }
              url
            }
          }
        }
      }
      reviews(first: 100) {
        nodes {
          author {
            avatarUrl
            login
          }
          body
          databaseId
          id
          publishedAt
          url
        }
      }
    }
  }
}`,c=await eL(this.config,{query:u,variables:{namespace:n,name:a,pullRequestId:l}},t),h=(null==(r=null==(i=c.body.data)?void 0:i.repository.pullRequest.reviewThreads.nodes)?void 0:r.filter(eA).reduce((e,t)=>{var i,r;if(!(null!=(r=null==(i=t.comments.nodes)?void 0:i[0])&&r.pullRequestReview))return e;let s=t.comments.nodes[0].pullRequestReview,o=tu(t);return o&&(e[s.id]||(e[s.id]=[]),e[s.id].push(o)),e},{}))??{};return{data:(null==(o=null==(s=c.body.data)?void 0:s.repository.pullRequest.reviews.nodes)?void 0:o.filter(eA).filter(e=>h[e.id]).map(e=>({author:e.author?{avatarUrl:e.author.avatarUrl,email:null,name:e.author.login}:null,body:e.body,createdAt:e.publishedAt?new Date(e.publishedAt):null,id:e.databaseId,graphQLId:e.id,reviewComments:h[e.id],url:e.url})))??[]}}async getIssuesAssociatedWithUser(e,t={}){var i;let[r,s]=(null==(i=e.cursor)?void 0:i.split(";"))||[void 0,void 0],o=[];e.labelNames&&e.labelNames.forEach(e=>{o.push(`label:"${e}"`)});let[n,a]=await Promise.all(["null"===r?null:this.searchIssues({query:`author:${e.username} ${o.join(" ")}`,cursor:r,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:e.maxPageSize},t),"null"===s?null:this.searchIssues({query:`assignee:${e.username} ${o.join(" ")}`,cursor:s,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:e.maxPageSize},t)]),l={},u=[],c=e=>{l[e.id]||(l[e.id]=!0,u.push(e))};return null==n||n.data.forEach(c),null==a||a.data.forEach(c),{pageInfo:{hasNextPage:(null==n?void 0:n.pageInfo.hasNextPage)||(null==a?void 0:a.pageInfo.hasNextPage)||!1,endCursor:`${(null==n?void 0:n.pageInfo.hasNextPage)&&(null==n?void 0:n.pageInfo.endCursor)||"null"};${(null==a?void 0:a.pageInfo.hasNextPage)&&(null==a?void 0:a.pageInfo.endCursor)||"null"}`},data:u}}async setPullRequestLabels(e,t={}){var i,r,s;let{pullRequest:o,labels:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation SetPullRequestLabels($pullRequestGraphQLId: ID!, $labelGraphQLIds: [ID!]) {
  updatePullRequest(input: { pullRequestId: $pullRequestGraphQLId, labelIds: $labelGraphQLIds }) {
    pullRequest {
      id
    }
  }
}`,l=await eL(this.config,{query:a,variables:{pullRequestGraphQLId:o.graphQLId,labelGraphQLIds:n.map(e=>{if(!e.graphQLId)throw Error('GitHub requires label "graphQLId" for this function.');return e.graphQLId})}},t);if(!(null!=(s=null==(r=null==(i=l.body.data)?void 0:i.updatePullRequest)?void 0:r.pullRequest)&&s.id))throw new eS("Could not set pull request labels",l.body.errors)}async getIssuesForRepos(e,t={}){let i=eQ(e.startQuery||""),{cursor:r,assigneeLogins:s,updatedBefore:o,authorLogin:n,mentionLogin:a,labelNames:l}=e;return e.repos.forEach(e=>{i.push(`repo:${e.namespace}/${e.name}`)}),s&&s.forEach(e=>{i.push(`assignee:${e}`)}),o&&i.push(`updated:<${o}`),n&&i.push(`author:${n}`),a&&i.push(`mentions:${a}`),l&&l.forEach(e=>{i.push(`label:"${e}"`)}),this.searchIssues({query:`sort:updated ${i.join(" ")}`,cursor:r,includeFromArchivedRepos:e.includeFromArchivedRepos,maxPageSize:e.maxPageSize},t)}async closeIssueWithReason(e,t={}){var i,r,s;let{issue:o,reason:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation CloseIssueWithReason($issueGraphQLId: ID!, $reason: IssueClosedStateReason!) {
  closeIssue(input: { issueId: $issueGraphQLId, stateReason: $reason }) {
    issue {
      id
    }
  }
}`,l=await eL(this.config,{query:a,variables:{issueGraphQLId:o.graphQLId,reason:n}},t);if(!(null!=(s=null==(r=null==(i=l.body.data)?void 0:i.closeIssue)?void 0:r.issue)&&s.id))throw new eS("Could not close issue with reason",l.body.errors)}async closeIssue(e,t={}){var i,r,s;let{issue:o}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let n=`mutation SetIssueState($issueGraphQLId: ID!) {
  updateIssue(input: { id: $issueGraphQLId, state: CLOSED }) {
    issue {
      id
    }
  }
}`,a=await eL(this.config,{query:n,variables:{issueGraphQLId:o.graphQLId}},t);if(!(null!=(s=null==(r=null==(i=a.body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw new eS("Could not close issue",a.body.errors)}async reOpenIssue(e,t={}){var i,r,s;let{issue:o}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let n=`mutation ReOpenIssue($issueGraphQLId: ID!) {
  reopenIssue(input: { issueId: $issueGraphQLId }) {
    issue {
      id
    }
  }
}`,a=await eL(this.config,{query:n,variables:{issueGraphQLId:o.graphQLId}},t);if(!(null!=(s=null==(r=null==(i=a.body.data)?void 0:i.reopenIssue)?void 0:r.issue)&&s.id))throw new eS("Could not reopen issue",a.body.errors)}async setIssueLabels(e,t={}){var i,r,s;let{issue:o,labels:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=n.map(e=>e.graphQLId),l=`mutation SetIssueLabels($issueGraphQLId: ID!, $labelGraphQLIds: [ID!]) {
  updateIssue(input: { id: $issueGraphQLId, labelIds: $labelGraphQLIds }) {
    issue {
      id
    }
  }
}`,u=await eL(this.config,{query:l,variables:{issueGraphQLId:o.graphQLId,labelGraphQLIds:a}},t);if(!(null!=(s=null==(r=null==(i=u.body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw new eS("Could not set issue labels",u.body.errors)}async setIssueMilestone(e,t={}){var i,r,s;let{issue:o,milestone:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');if(n&&!n.graphQLId)throw Error('GitHub requires milestone "graphQLId" for this function.');let a=`mutation SetIssueMilestone($issueGraphQLId: ID!, $milestoneGraphQLId: ID) {
  updateIssue(input: { id: $issueGraphQLId, milestoneId: $milestoneGraphQLId }) {
    issue {
      id
    }
  }
}`,l=await eL(this.config,{query:`${a}`,variables:{issueGraphQLId:o.graphQLId,milestoneGraphQLId:(null==n?void 0:n.graphQLId)??null}},t);if(!(null!=(s=null==(r=null==(i=l.body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw new eS("Could not set milestone of issue",l.body.errors)}async setIssueAssignees(e,t={}){var i,r,s;let{issue:o,assignees:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=n.map(e=>{if(!e.graphQLId)throw Error('GitHub requires assignee "graphQLId" for this function.');return e.graphQLId}),l=`mutation SetIssueAssignees($issueGraphQLId: ID!, $assigneeGraphQLIds: [ID!]!) {
  updateIssue(input: { id: $issueGraphQLId, assigneeIds: $assigneeGraphQLIds }) {
    issue {
      id
    }
  }
}`,u=await eL(this.config,{query:l,variables:{issueGraphQLId:o.graphQLId,assigneeGraphQLIds:a}},t);if(!(null!=(s=null==(r=null==(i=u.body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw new eS("Could not set issue assignees",u.body.errors)}async getMilestonesForRepo(e,t={}){var i,r,s;let{repo:{namespace:o,name:n},cursor:a}=e,l=await eL(this.config,{query:`
query getLabelsForRepo($owner: String!, $name: String! $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    milestones(first: $first, after: $cursor) {
      nodes {
        ${e$}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{owner:o,name:n,cursor:a,first:100}},t);if(!l.body.data)throw new eS("Could not fetch milestones",l.body.errors);return{pageInfo:(null==(i=l.body.data.repository.milestones)?void 0:i.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(s=null==(r=l.body.data.repository.milestones)?void 0:r.nodes)?void 0:s.map(td))??[]}}async getLabelsForRepo(e,t={}){var i,r,s;let{repo:{namespace:o,name:n},cursor:a}=e,l=await eL(this.config,{query:`
query getLabelsForRepo($owner: String!, $name: String! $cursor: String, $first: Int!) {
  repository(owner: $owner, name: $name) {
    labels(first: $first, after: $cursor) {
      nodes {
        ${ex}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{owner:o,name:n,cursor:a,first:100}},t);if(!l.body.data)throw new eS("Could not fetch labels",l.body.errors);return{pageInfo:(null==(i=l.body.data.repository.labels)?void 0:i.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(s=null==(r=l.body.data.repository.labels)?void 0:r.nodes)?void 0:s.map(e6))??[]}}async getTreeForRepo(e,t={}){let i=await this.config.request({url:`${eB(this.config,t)}/repos/${e.repo.namespace}/${e.repo.name}/git/trees/${e.branch}?recursive=1`,headers:{...j(t.token||this.config.token)}});if(!i.body)throw Error("Could not fetch trees");return{data:i.body.tree.map(ti)}}},tg=/\/api\/v\d+$/,tm=e=>{if(e.endsWith("/api/graphql"))throw Error("The graphql endpoint is being used as the baseUrl. This package uses both GraphQL and REST APIs, and the REST version cannot be assumed. Use the REST endpoint as the baseUrl instead.")},tf=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(tm(i=i.replace(/\/$/,"")),tg.test(i)||(i+="/api/v4"),i):"https://gitlab.com/api/v4"},tw=(e,t)=>{let i=t.baseUrl||e.baseUrl;return i?(tm(i=i.replace(/\/$/,"")),tg.test(i)&&(i=i.replace(tg,"")),`${i}/api/graphql`):"https://gitlab.com/api/graphql"},tv=(e,t,i)=>{let r=j(i.token||e.token);return e.request({url:tw(e,i),method:"POST",headers:{...r,"Content-Type":"application/json"},body:JSON.stringify(t)})},ty=e=>null==e?void 0:e.map(e=>`"${e.message}"`).join(", "),tb=e=>e.split("/").slice(0,-1).join("/"),tC=e=>e.split("/").at(-1)??"",tR=e=>({id:e.id.replace(tA,""),graphQLId:e.id,namespace:tb(e.fullPath),name:tC(e.fullPath),webUrl:e.webUrl}),tk=e=>({id:e.id.replace(tA,""),graphQLId:e.id,httpsUrl:e.httpUrlToRepo,namespace:tb(e.fullPath),name:tC(e.fullPath),sshUrl:e.sshUrlToRepo,webUrl:e.webUrl}),tS={assigned:"assignedMergeRequests",authored:"authoredMergeRequests",reviewRequested:"reviewRequestedMergeRequests"},tP={CAN_BE_MERGED:"MERGEABLE",CANNOT_BE_MERGED:"CONFLICTS",CANNOT_BE_MERGED_RECHECK:"UNKNOWN",UNCHECKED:"UNKNOWN",CHECKING:"UNKNOWN"},tA="gid://gitlab/Project/",tI=`
description
dueDate
id
iid
startDate
state
title
webPath
`,tD=`
id
fullPath
webUrl
httpUrlToRepo
sshUrlToRepo
repository {
  rootRef
}
userPermissions {
  adminOperations
  downloadCode
  pushCode
}
`,t_=`
id
name
username
publicEmail
avatarUrl
webUrl
`,t$=`
color
description
id
title
`,tT=`
author {
  ${t_}
}
assignees {
  nodes {
    ${t_}
  }
}
closedAt
createdAt
description
dueDate
id
iid
labels {
  nodes {
    ${t$}
  }
}
state
title
type
updatedAt
upvotes
userNotesCount
webUrl
milestone {
  ${tI}
}
`,tE=`
stages {
  nodes {
    jobs {
      nodes {
        allowFailure
        createdAt
        finishedAt
        id
        name
        status
      }
    }
    name
  }
}
`,tx=(e,t,i)=>`
id
state
author {
  ${t_}
}
diffRefs {
  baseSha
  headSha
}
diffStatsSummary {
  additions
  deletions
  fileCount
}
commitCount
draft
userNotesCount
upvotes
title
webUrl
createdAt
updatedAt
mergedAt
iid
targetBranch
sourceBranch
assignees {
  nodes {
    ${t_}
  }
}
reviewers {
  nodes {
    ${t_}
    mergeRequestInteraction {
      approved
      reviewState
    }
  }
}
mergeStatusEnum
labels {
  nodes {
    ${t$}
  }
}
${e?"project { id httpUrlToRepo fullPath sshUrlToRepo webUrl archived } sourceProject { id httpUrlToRepo fullPath sshUrlToRepo webUrl }":""}
${t?`milestone { ${tI} }`:""}
${i?`headPipeline { ${tE} }`:""}
`,tO=e=>`${e.namespace}/${e.name}`,tF=e=>`${e.namespace}/${e.name}`,tB=e=>({canCreateWebhook:e.adminOperations,canPush:e.pushCode,isAdmin:e.adminOperations}),tL=e=>{var t;return{id:e.id.replace(tA,""),graphQLId:e.id,namespace:tb(e.fullPath),name:tC(e.fullPath),webUrl:e.webUrl,httpsUrl:e.httpUrlToRepo,sshUrl:e.sshUrlToRepo,defaultBranch:null!=(t=e.repository)&&t.rootRef?{name:e.repository.rootRef}:null,permissions:tB(e.userPermissions)}},tU=e=>({path:e.path,isDirectory:"tree"===e.type}),tq={opened:"OPEN",merged:"MERGED",closed:"CLOSED"},tN=(e,t,i)=>{let r=e.avatarUrl;return!t&&null!=r&&r.startsWith("/")?r=`https://gitlab.com${r}`:t&&null!=r&&r.startsWith("/")&&i&&(r=`${i.replace(/\/+?$/,"")}${r}`),{id:e.id.replace("gid://gitlab/User/",""),graphQLId:e.id,name:e.name,username:e.username,email:e.publicEmail??null,avatarUrl:r,url:e.webUrl}},tM=e=>({color:e.color,description:e.description,id:e.id.replace("gid://gitlab/ProjectLabel/",""),graphQLId:e.id,name:e.title}),tW=(e,t)=>e?"FAILED"===e&&t?"WARNING":({CANCELED:"CANCELLED",CREATED:"PENDING",FAILED:"FAILED",MANUAL:"OPTIONAL_ACTION_REQUIRED",PENDING:"PENDING",PREPARING:"RUNNING",RUNNING:"RUNNING",SCHEDULED:"PENDING",SKIPPED:"SKIPPED",SUCCESS:"SUCCESS",WAITING_FOR_CALLBACK:"PENDING",WAITING_FOR_RESOURCE:"PENDING"})[e]:null,tG=(e,t,i)=>{var r;return{reviewer:tN(e,t,i),state:null!=(r=e.mergeRequestInteraction)&&r.reviewState?({APPROVED:"APPROVED",REQUESTED_CHANGES:"CHANGES_REQUESTED",REVIEWED:"COMMENTED",UNAPPROVED:"REVIEW_REQUESTED",UNREVIEWED:"REVIEW_REQUESTED"})[e.mergeRequestInteraction.reviewState]:"REVIEW_REQUESTED"}},tH=(e,t,i,r,s)=>{var o,n,a,l,u,c,h,d,p,g,m,f;let w=null!=(o=e.reviewers)&&o.nodes?e.reviewers.nodes.map(e=>tG(e,r,s)):null;return{id:e.id.replace("gid://gitlab/MergeRequest/",""),graphQLId:e.id,title:e.title,number:parseInt(e.iid,10),state:tq[e.state],commentCount:e.userNotesCount||0,upvoteCount:e.upvotes,author:e.author?tN(e.author,r,s):null,createdDate:new Date(e.createdAt),isDraft:e.draft,repository:{id:t.id,graphQLId:t.graphQLId,name:t.name,owner:{login:t.namespace},remoteInfo:t.httpsUrl&&t.sshUrl?{cloneUrlHTTPS:t.httpsUrl,cloneUrlSSH:t.sshUrl}:null},headRepository:i?{id:i.id,graphQLId:i.graphQLId,name:i.name,owner:{login:i.namespace},remoteInfo:{cloneUrlHTTPS:i.httpsUrl,cloneUrlSSH:i.sshUrl}}:null,headCommit:{buildStatuses:(null==(l=null==(a=null==(n=e.headPipeline)?void 0:n.stages)?void 0:a.nodes)?void 0:l.flatMap(e=>{var i,r;return(null==(r=null==(i=e.jobs)?void 0:i.nodes)?void 0:r.map(i=>({completedAt:i.finishedAt?new Date(i.finishedAt):null,description:null,name:i.name??null,state:tW(i.status,i.allowFailure),stage:e.name??null,startedAt:new Date(i.createdAt),url:`${t.webUrl}/-/jobs/${i.id.replace("gid://gitlab/Ci::Build/","")}`})))??[]}))??[]},baseRef:{name:e.targetBranch,oid:(null==(u=e.diffRefs)?void 0:u.baseSha)??null},headRef:{name:e.sourceBranch,oid:(null==(c=e.diffRefs)?void 0:c.headSha)??null},url:e.webUrl,updatedDate:new Date(e.updatedAt),closedDate:e.mergedAt?new Date(e.mergedAt):null,mergedDate:e.mergedAt?new Date(e.mergedAt):null,assignees:null!=(h=e.assignees)&&h.nodes?e.assignees.nodes.map(e=>tN(e,r,s)):null,reviews:w,reviewDecision:B(w),additions:(null==(d=e.diffStatsSummary)?void 0:d.additions)||0,deletions:(null==(p=e.diffStatsSummary)?void 0:p.deletions)||0,fileCount:(null==(g=e.diffStatsSummary)?void 0:g.fileCount)||0,commitCount:e.commitCount||0,mergeableState:tP[e.mergeStatusEnum],milestone:e.milestone?tj(e.milestone,t.webUrl):null,labels:(null==(f=null==(m=e.labels)?void 0:m.nodes)?void 0:f.map(tM))??[],permissions:null}},tV=(e,t,i,r)=>{var s,o;return{author:tN(e.author,i,r),assignees:e.assignees.nodes.map(e=>tN(e,i,r)),commentCount:e.userNotesCount,closedDate:e.closedAt?new Date(e.closedAt):null,createdDate:new Date(e.createdAt),description:e.description,graphQLId:e.id,id:e.id.replace("gid://gitlab/Issue/",""),labels:(null==(o=null==(s=e.labels)?void 0:s.nodes)?void 0:o.map(tM))??[],number:e.iid,repository:{id:t.id.replace(tA,""),graphQLId:t.id,name:t.name,owner:{login:t.namespace}},updatedDate:new Date(e.updatedAt),upvoteCount:e.upvotes,state:{name:e.state,color:null},type:e.type,title:e.title,url:e.webUrl,milestone:e.milestone?tj(e.milestone,t.webUrl):null}},tj=(e,t)=>({id:e.id.replace("gid://gitlab/Milestone/",""),graphQLId:e.id,number:parseInt(e.iid,10),title:e.title,description:e.description,isOpen:"active"===e.state,url:`${t}/-/${e.webPath.replace(/.+?\/-\//,"")}`,startDate:e.startDate?new Date(e.startDate):null,dueDate:e.dueDate?new Date(e.dueDate):null}),tz=class extends V{getIsSelfHosted(e){return!!e.baseUrl||!!this.config.baseUrl}async getCurrentUser(e={},t={}){var i;let r=null==(i=(await tv(this.config,{query:`
query getCurrentUser {
  currentUser {
    ${t_}
  }
}
`},t)).body.data)?void 0:i.currentUser;if(!r)throw Error("Current user not found.");return{data:tN(r,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)}}async getUserForCommit(e,t={}){var i,r,s,o;let n=tO(e.repo),a=null==(o=null==(s=null==(r=null==(i=(await tv(this.config,{query:`
query getUserForCommit($fullPath: ID!, $oid: String!) {
  project(fullPath: $fullPath) {
    repository {
      tree(ref: $oid) {
        lastCommit {
          authorName
          authorEmail
          authorGravatar
        }
      }
    }
  }
}
`,variables:{fullPath:n,oid:e.oid}},t)).body.data)?void 0:i.project)?void 0:r.repository)?void 0:s.tree)?void 0:o.lastCommit;if(!a)throw Error("Commit not found.");return{data:{name:a.authorName,email:a.authorEmail,avatarUrl:a.authorGravatar}}}async getAccountForEmail(e,t={}){var i,r,s;let o=null==(s=null==(r=null==(i=(await tv(this.config,{query:`
query getAccountForEmail($email: String!) {
  users(search: $email) {
    nodes {
      ${t_}
    }
  }
}
`,variables:{email:e.email}},t)).body.data)?void 0:i.users)?void 0:r.nodes)?void 0:s[0];if(!o)throw Error("User not found.");return{data:tN(o,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)}}async getAccountForUsername(e,t={}){var i;let r=null==(i=(await tv(this.config,{query:`
query getAccountForUsername($username: String!) {
  user(username: $username) {
    ${t_}
  }
}
`,variables:{username:e.username}},t)).body.data)?void 0:i.user;if(!r)throw Error("User not found.");return{data:tN(r,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)}}async getAccountsForRepo(e,t={}){var i,r,s,o,n,a,l;let{repo:{namespace:u,name:c},cursor:h}=e,d=await tv(this.config,{query:`
query getAccountsForRepo(
  $fullPath: ID!
  $after: String
) {
  project(
    fullPath: $fullPath
  ) {
    projectMembers(after: $after) {
      nodes {
        user {
          ${t_}
        }
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{fullPath:`${u}/${c}`,after:h}},t),p=null==(o=null==(s=null==(r=null==(i=d.body.data)?void 0:i.project)?void 0:r.projectMembers)?void 0:s.nodes)?void 0:o.map(e=>e.user).filter(e=>null!==e);return{pageInfo:(null==(l=null==(a=null==(n=d.body.data)?void 0:n.project)?void 0:a.projectMembers)?void 0:l.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==p?void 0:p.map(e=>tN(e,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)))??[]}}async getRepo(e,t={}){var i;let r=tO(e),s=await tv(this.config,{query:`
query getRepo($fullPath: ID!) {
  project(fullPath: $fullPath) {
    ${tD}
  }
}
`,variables:{fullPath:r}},t);if(!(null!=(i=s.body.data)&&i.project))throw Error(`Repository ${r} not found`);return{data:tL(s.body.data.project)}}async getReposBase(e,t={}){let i=e.map(tO).map((e,t)=>`
      getRepo_${t}: project(fullPath: "${e}") {
        ${tD}
      }
    `).join(`
`),r=await tv(this.config,{query:`
query batchGetRepos {
  ${i}
}
`},t);if(!r.body.data)throw Error(ty(r.body.errors)||r.statusText||"Unknown error");let s=[],o=[];return e.forEach((e,t)=>{let i=r.body.data[`getRepo_${t}`];i?s.push(tL(i)):o.push({input:e})}),{data:s,errors:o}}async getRepos(e,t={}){let i=[];for(let t=0;t<e.length;t+=15)i.push(e.slice(t,t+15));return(await Promise.all(i.map(e=>this.getReposBase(e,t)))).reduce((e,t)=>({data:[...e.data,...t.data],errors:[...e.errors,...t.errors]}),{data:[],errors:[]})}async getReposForCurrentUser(e,t={}){var i,r,s,o,n;let a=await tv(this.config,{query:`
query getReposForCurrentUser($after: String) {
  projects(membership: true first: 100 after: $after) {
    pageInfo {
      endCursor
      hasNextPage
    }
    nodes {
      ${tD}
    }
  }
}
`,variables:{after:e.cursor}},t);if(!(null!=(i=a.body.data)&&i.projects))throw Error(ty(a.body.errors)||a.statusText||"Unknown error");let l=(null==(s=null==(r=a.body.data)?void 0:r.projects)?void 0:s.nodes)||[];return{pageInfo:null==(n=null==(o=a.body.data)?void 0:o.projects)?void 0:n.pageInfo,data:l.map(tL)}}async getRefs(e,t,i={}){var r;let s=tO(t.repo),o=new URL(`${tf(this.config,i)}/projects/${encodeURIComponent(s)}/repository/${e}`);o.searchParams.set("page",(null==(r=t.page)?void 0:r.toString())||"1"),o.searchParams.set("per_page","100");let n=await this.config.request({url:o.toString(),headers:j(i.token||this.config.token)}),a=n.headers["x-next-page"];return{pageInfo:{hasNextPage:!!a,nextPage:a?parseInt(a,10):null},data:n.body.map(e=>({name:e.name,commit:{oid:e.commit.id,authoredDate:new Date(e.commit.authored_date),committedDate:new Date(e.commit.committed_date)}}))}}async getBranches(e,t={}){return this.getRefs("branches",e,t)}async getTags(e,t={}){return this.getRefs("tags",e,t)}async getBlame(e,t={}){let i=tO(e.repo),r=new URL(`${tf(this.config,t)}/projects/${encodeURIComponent(i)}/repository/files/${encodeURIComponent(e.path)}/blame`);r.searchParams.set("ref",e.ref);let s=await this.config.request({url:r.toString(),headers:j(t.token||this.config.token)}),o=0;return{data:{ranges:s.body.map(e=>({startingLine:o+1,endingLine:o+=e.lines.length,commit:{oid:e.commit.id,parentOids:e.commit.parent_ids,authoredDate:new Date(e.commit.authored_date),author:{name:e.commit.author_name,email:e.commit.author_email,avatarUrl:null},committedDate:new Date(e.commit.committed_date),committer:{name:e.commit.committer_name,email:e.commit.committer_email,avatarUrl:null},message:e.commit.message,fileCount:null,additions:null,deletions:null}}))}}}async getPullRequestsForUser(e,t={}){var i,r,s,o;let n="";null!=(i=e.repo)&&i.id?n=`projectId:"${e.repo.id}"`:null!=(r=e.repo)&&r.namespace&&null!=(s=e.repo)&&s.name&&(n=`projectPath:"${e.repo.namespace}/${e.repo.name}"`);let a=tS[e.association],l=await tv(this.config,{query:`
query getPullRequestsForUser($username: String! $cursor: String $labelNames: [String!]) {
  user(username: $username) {
    ${a}(state:opened first:100 after:$cursor labels: $labelNames${n?` ${n}`:""}) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        ${tx(!0,!0,!0)}
      }
    }
  }
}
`,variables:{username:e.username,cursor:e.cursor,labelNames:e.labelNames}},t);if(!l.body.data)throw Error(ty(l.body.errors)||l.statusText||"Unknown error");if(!l.body.data.user)throw Error("User not found");let u=l.body.data.user[a];if(!u)throw Error("Unexpected response");return{pageInfo:u.pageInfo,data:(null==(o=u.nodes)?void 0:o.filter(t=>e.includeFromArchivedRepos||!t.project.archived).map(e=>tH(e,tk(e.project),tk(e.sourceProject),this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)))||[]}}async getPullRequestsAssociatedWithUser(e,t={}){var i,r;let[s,o,n]=(null==(i=e.cursor)?void 0:i.split(";"))||[void 0,void 0,void 0],a=(null==s?void 0:s.split("-"))||[],l=(null==o?void 0:o.split("-"))||[],u=(null==n?void 0:n.split("-"))||[],c=[],h=[],d=[],p=0;do{let i=e.repos&&e.repos[p];"null"===a[p]?c.push(null):c.push(this.getPullRequestsForUser({username:e.username,association:"authored",cursor:a[p],includeFromArchivedRepos:e.includeFromArchivedRepos,labelNames:e.labelNames,...i&&{repo:i}},t)),"null"===l[p]?h.push(null):h.push(this.getPullRequestsForUser({username:e.username,association:"assigned",cursor:l[p],includeFromArchivedRepos:e.includeFromArchivedRepos,labelNames:e.labelNames,...i&&{repo:i}},t)),"null"===u[p]?d.push(null):d.push(this.getPullRequestsForUser({username:e.username,association:"reviewRequested",cursor:u[p],includeFromArchivedRepos:e.includeFromArchivedRepos,labelNames:e.labelNames,...i&&{repo:i}},t)),p++}while(p<((null==(r=e.repos)?void 0:r.length)||0))let g=[c,h,d].flat(),m=await Promise.all(g),f={},w=[],v=e=>{f[e.id]||(f[e.id]=!0,w.push(e))},y=!1,b=m.map((t,i)=>{var r;let s="";return t&&t.data.forEach(v),null!=t&&t.pageInfo.hasNextPage?(y=!0,s+=`${t.pageInfo.endCursor||"null"}`):s+="null",null!=(r=e.repos)&&r.length&&(i+1)%e.repos.length!=0?s+="-":i+1<m.length&&(s+=";"),s}).join("");return{pageInfo:{hasNextPage:y,endCursor:b},data:w}}getVariablesForPullRequests(e){let{updatedBefore:t,isDraft:i,authorLogin:r,assigneeLogins:s,labelNames:o,reviewRequestedLogin:n}=e||{},a={},l=[],u=[],c=(e,t,i)=>{l.push(`$${e}: ${i}`),u.push(`${e}: $${e}`),a[e]=t};return t&&c("updatedBefore",t,"Time"),r&&c("authorUsername",r,"String"),s&&c("assigneeUsername",s[0],"String"),o&&c("labelName",o,"[String]"),null!=i&&c("draft",i,"Boolean"),n&&c("reviewerUsername",n,"String"),{variables:a,variableTypes:l,mergeRequestArguments:u}}async getPullRequestsForRepoBase(e,t={},i){var r,s,o;let{cursor:n,repo:a}=e||{},l=tO(a),{variables:u,variableTypes:c,mergeRequestArguments:h}=this.getVariablesForPullRequests(e),d={fullPath:l,...u},p=await tv(this.config,{query:`
query getPullRequestsForRepo(
  $fullPath: ID!
  $after: String
  ${c.length?c.join(" "):""}
) {
  project(
    fullPath: $fullPath
  ) {
    id
    fullPath
    webUrl
    archived
    mergeRequests(
      first: 100
      state: opened
      sort: UPDATED_DESC
      after: $after
      ${h.length?h.join(" "):""}
    ) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        ${tx(!1,!0,!0)}
      }
    }
  }
}
`,variables:{...d,after:n}},t),g=[],m=null==(r=p.body.data)?void 0:r.project;if(!i&&null!=m&&m.archived)return{pageInfo:null,data:[]};let f=tR(m||{id:"",fullPath:"",webUrl:""});return((null==(s=null==m?void 0:m.mergeRequests)?void 0:s.nodes)||[]).forEach(e=>{g.push(tH(e,f,null,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl))}),{pageInfo:null==(o=null==m?void 0:m.mergeRequests)?void 0:o.pageInfo,data:g}}async getPullRequestsForRepo(e,t={}){return this.getPullRequestsForRepoBase(e,t,!1)}async getPullRequestsForRepos(e,t={}){let{repos:i,assigneeLogins:r,updatedBefore:s,authorLogin:o,labelNames:n,isDraft:a,reviewRequestedLogin:l}=e;return{data:(await Promise.all(i.map(i=>this.getPullRequestsForRepoBase({repo:i,assigneeLogins:r,updatedBefore:s,authorLogin:o,labelNames:n,isDraft:a,reviewRequestedLogin:l},t,e.includeFromArchivedRepos??!1)))).flatMap(e=>e.data)}}async closePullRequest(e,t={}){var i,r,s;let{pullRequest:o}=e,n=`mutation ClosePullRequest($fullPath: ID!, $pullRequestId: String!) {
  mergeRequestUpdate(input: { projectPath: $fullPath, iid: $pullRequestId, state: CLOSED }) {
    errors,
    mergeRequest {
      id
    }
  }
}`,a=null==(i=(await tv(this.config,{query:n,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString()}},t)).body.data)?void 0:i.mergeRequestUpdate;if(!(null!=(r=null==a?void 0:a.mergeRequest)&&r.id)||(null==(s=null==a?void 0:a.errors)?void 0:s.length)!==0)throw Error("Could not close pull request")}async mergePullRequest(e,t={}){var i,r,s,o;let{pullRequest:n,mergeStrategy:a}=e;if(!(null!=(i=n.headRef)&&i.oid))throw Error('GitLab requires "headRef.oid" for this function.');let l=`mutation MergePullRequest(
  $fullPath: ID!,
  $pullRequestId: String!,
  $expectedSourceSha: String!,
  $squash: Boolean!,
) {
  mergeRequestAccept(input: {
    projectPath: $fullPath,
    iid: $pullRequestId,
    sha: $expectedSourceSha,
    squash: $squash,
}) {
    errors,
    mergeRequest {
      id
    }
  }
}`,u=null==(r=(await tv(this.config,{query:l,variables:{fullPath:`${n.repository.owner.login}/${n.repository.name}`,pullRequestId:n.number.toString(),expectedSourceSha:n.headRef.oid,squash:"SQUASH"===a}},t)).body.data)?void 0:r.mergeRequestAccept;if(!(null!=(s=null==u?void 0:u.mergeRequest)&&s.id)||(null==(o=null==u?void 0:u.errors)?void 0:o.length)!==0)throw Error("Could not merge pull request")}async setPullRequestMilestone(e,t={}){var i,r,s;let{pullRequest:o,milestone:n}=e;if(!o.graphQLId)throw Error('GitHub requires "graphQLId" for this function.');let a=`mutation SetPullRequestMilestone($fullPath: ID!, $pullRequestId: String!, $milestoneGraphQLId: MilestoneID) {
  mergeRequestSetMilestone(input: { projectPath: $fullPath, iid: $pullRequestId, milestoneId: $milestoneGraphQLId }) {
    errors,
    mergeRequest {
      id
    }
  }
}`,l=await tv(this.config,{query:a,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),milestoneGraphQLId:null==n?void 0:n.graphQLId}},t),u=null==(i=l.body.data)?void 0:i.mergeRequestSetMilestone;if(!(null!=(r=null==u?void 0:u.mergeRequest)&&r.id)||l.body.errors||(null==(s=null==u?void 0:u.errors)?void 0:s.length)!==0)throw Error("Could not set milestone of pull request")}async setPullRequestAsDraft(e,t={}){var i,r,s;let{pullRequest:o,isDraft:n}=e,a=`mutation MergeRequestSetDraft($fullPath: ID!, $pullRequestId: String!, $isDraft: Boolean!) {
  mergeRequestSetDraft(input: { projectPath: $fullPath, iid: $pullRequestId, draft: $isDraft }) {
      errors,
      mergeRequest {
        id
      }
    }
  }`,l=null==(i=(await tv(this.config,{query:a,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),isDraft:n}},t)).body.data)?void 0:i.mergeRequestSetDraft;if(!(null!=(r=null==l?void 0:l.mergeRequest)&&r.id)||(null==(s=null==l?void 0:l.errors)?void 0:s.length)!==0)throw Error("Could not set pull request as draft")}async setPullRequestReviewers(e,t={}){var i,r,s;let{pullRequest:o,reviewers:n}=e,a=n.map(e=>{if(!e.username)throw Error('GitLab requires reviewer "username" for this function.');return e.username}),l=`mutation MergeRequestSetReviewers($fullPath: ID!, $pullRequestId: String!, $reviewerUsernames: [String!]!) {
  mergeRequestSetReviewers(input: { projectPath: $fullPath, iid: $pullRequestId, reviewerUsernames: $reviewerUsernames }) {
      errors,
      mergeRequest {
        id
      }
    }
  }`,u=null==(i=(await tv(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),reviewerUsernames:a}},t)).body.data)?void 0:i.mergeRequestSetReviewers;if(!(null!=(r=null==u?void 0:u.mergeRequest)&&r.id)||(null==(s=null==u?void 0:u.errors)?void 0:s.length)!==0)throw Error("Could not set pull request reviewers")}async reRequestPullRequestReview(e,t={}){var i,r,s;let{pullRequest:o,reviewer:n}=e;if(!n.graphQLId)throw Error('GitLab requires reviwer "graphQLId" for this function.');let a=`mutation MergeRequestReviewerRereview($fullPath: ID!, $pullRequestId: String!, $reviewerUserId: UserID!) {
  mergeRequestReviewerRereview(input: { projectPath: $fullPath, iid: $pullRequestId, userId: $reviewerUserId }) {
      errors,
      mergeRequest {
        id
      }
    }
  }`,l=null==(i=(await tv(this.config,{query:a,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),reviewerUserId:n.graphQLId}},t)).body.data)?void 0:i.mergeRequestReviewerRereview;if(!(null!=(r=null==l?void 0:l.mergeRequest)&&r.id)||(null==(s=null==l?void 0:l.errors)?void 0:s.length)!==0)throw Error("Could not set pull request reviewers")}async reRequestPullRequestReviews(e,t={}){let{pullRequest:i,reviewers:r}=e,s=i.reviews;if(!s)throw Error('GitLab requires "reviews" for this function.');let o=r.filter(e=>s.find(t=>t.reviewer.graphQLId===e.graphQLId));await Promise.all(o.map(e=>this.reRequestPullRequestReview({pullRequest:i,reviewer:e},t)))}async setPullRequestAssignees(e,t={}){var i,r,s;let{pullRequest:o,assignees:n}=e,a=n.map(e=>{if(!e.username)throw Error('GitLab requires assignee "username" for this function.');return e.username}),l=`mutation MergeRequestSetAssignees($fullPath: ID!, $pullRequestId: String!, $assigneeUsernames: [String!]!) {
  mergeRequestSetAssignees(input: { projectPath: $fullPath, iid: $pullRequestId, assigneeUsernames: $assigneeUsernames }) {
    errors,
    mergeRequest {
      id
    }
  }
}`,u=null==(i=(await tv(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),assigneeUsernames:a}},t)).body.data)?void 0:i.mergeRequestSetAssignees;if(!(null!=(r=null==u?void 0:u.mergeRequest)&&r.id)||(null==(s=null==u?void 0:u.errors)?void 0:s.length)!==0)throw Error("Could not set pull request assignees")}async setPullRequestLabels(e,t={}){var i,r,s;let{pullRequest:o,labels:n}=e,a=n.map(e=>{if(!e.graphQLId)throw Error('GitLab requires "graphQLId" for labels in this function.');return e.graphQLId}),l=`mutation SetPullRequestLabels($fullPath: ID!, $pullRequestId: String!, $labelGraphQLIds: [LabelID!]!) {
  mergeRequestSetLabels(input: { projectPath: $fullPath, iid: $pullRequestId, labelIds: $labelGraphQLIds }) {
    mergeRequest {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await tv(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,pullRequestId:o.number.toString(),labelGraphQLIds:a}},t)).body.data)?void 0:i.mergeRequestSetLabels)?void 0:r.mergeRequest)&&s.id))throw Error("Could not set pull request labels")}async getIssue(e,t={}){var i,r,s;let o=tF(e),n=await tv(this.config,{query:`
query GetSingleIssue($projectId: ID!, $issueNumber: String!) {
  project(fullPath: $projectId) {
    id
    fullPath
    webUrl
    issue(iid: $issueNumber) {
      ${tT}
    }
  }
}
`,variables:{issueNumber:e.number,projectId:o}},t);if(!(null!=(i=n.body.data)&&i.project))throw Error(`Repository ${o} not found`);if(!(null!=(s=null==(r=n.body.data)?void 0:r.project)&&s.issue))throw Error(`Issue ${e.number} not found`);return{data:tV(n.body.data.project.issue,tR(n.body.data.project),this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)}}getVariablesForIssues(e){let{updatedBefore:t,authorLogin:i,assigneeLogins:r,labelNames:s}=e||{},o={},n=[],a=[],l=(e,t,i)=>{n.push(`$${e}: ${i}`),a.push(`${e}: $${e}`),o[e]=t};return t&&l("updatedBefore",t,"Time"),i&&l("authorUsername",i,"String"),r&&l("assigneeUsername",r[0],"String"),s&&l("labelName",s,"[String]"),{variables:o,variableTypes:n,issueArguments:a}}async getIssuesForRepo(e,t={}){var i,r,s;let{cursor:o,repo:n}=e||{},a=tO(n),{variables:l,variableTypes:u,issueArguments:c}=this.getVariablesForIssues(e),h={fullPath:a,...l},d=`
      query GetIssuesFromProject(
        $fullPath: ID!
        $after: String
        ${u.length?u.join(" "):""}
      ) {
        project(
          fullPath: $fullPath
        ) {
          id
          fullPath
          webUrl
          issues(
            first: 100
            state: opened
            sort: UPDATED_DESC
            after: $after
            ${c.length?c.join(" "):""}
          ) {
            nodes {
              ${tT}
            }
            pageInfo {
              endCursor
              hasNextPage
            }
          }
        }
      }`,p=await tv(this.config,{query:d,variables:{...h,after:o}},t),g=[],m=null==(i=p.body.data)?void 0:i.project,f=tR(m||{id:"",fullPath:"",webUrl:""});return((null==(r=null==m?void 0:m.issues)?void 0:r.nodes)||[]).forEach(e=>{g.push(tV(e,f,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl))}),{pageInfo:(null==(s=null==m?void 0:m.issues)?void 0:s.pageInfo)??{endCursor:null,hasNextPage:!1},data:g.sort((e,t)=>(e.updatedDate||e.createdDate).getTime()-(t.updatedDate||t.createdDate).getTime())}}async getIssuesForRepos(e,t={}){var i,r,s,o,n;let{cursor:a}=e||{},l=e.repoIds.map(e=>e.toString().startsWith(tA)?e:`${tA}${e}`),{variables:u,variableTypes:c,mergeRequestArguments:h}=this.getVariablesForPullRequests(e),d={projectIds:l,...u},p=`
      query GetIssuesFromProject(
        $projectIds: [ID!]
        $after: String
        ${c.length?c.join(" "):""}
        ) {
        projects(
          ids: $projectIds
          after: $after
        ) {
          pageInfo {
            endCursor
            hasNextPage
          }
          nodes {
            id
            fullPath
            webUrl
            archived
            issues(
              first: 100
              state: opened
              sort: UPDATED_DESC
              ${h.length?h.join(" "):""}
            ) {
              nodes {
                ${tT}
              }
            }
          }
        }
      }`,g=await tv(this.config,{query:p,variables:{...d,after:a}},t),m=[];return((null==(r=null==(i=g.body.data)?void 0:i.projects)?void 0:r.nodes)||[]).forEach(i=>{var r;if(!e.includeFromArchivedRepos&&i.archived)return;let s=tR(i);((null==(r=i.issues)?void 0:r.nodes)||[]).forEach(e=>m.push(tV(e,s,this.getIsSelfHosted(t),this.config.baseUrl??t.baseUrl)))}),{pageInfo:(null==(n=null==(o=null==(s=g.body)?void 0:s.data)?void 0:o.projects)?void 0:n.pageInfo)??{endCursor:null,hasNextPage:!1},data:m.sort((e,t)=>(e.updatedDate||e.createdDate).getTime()-(t.updatedDate||t.createdDate).getTime())}}async setIssueState(e,t={}){var i,r,s;let{issue:o,state:n}=e;if(!o.repository)throw Error('GitLab requires "repository" for this function.');let a=`mutation SetIssueState($fullPath: ID!, $issueId: String!, $status: IssueStateEvent!) {
	updateIssue(input: { projectPath: $fullPath, iid: $issueId, stateEvent: $status }) {
    issue {
      id
    }
	}
}`;if(!(null!=(s=null==(r=null==(i=(await tv(this.config,{query:a,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,issueId:o.number,status:"OPEN"===n?"REOPEN":"CLOSE"}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not set issue status")}async closeIssue(e,t={}){await this.setIssueState({...e,state:"CLOSED"},t)}async reOpenIssue(e,t={}){await this.setIssueState({...e,state:"OPEN"},t)}async setIssueLabels(e,t={}){var i,r,s;let{issue:o,labels:n}=e;if(!o.repository)throw Error('GitLab requires a "repository" for this function.');let a=n.map(e=>{if(!e.graphQLId)throw Error('GitLab requires label "graphQLId" for this function.');return e.graphQLId}),l=`mutation SetIssueLabels($fullPath: ID!, $issueId: String!, $labelGraphQLIds: [ID!]) {
  updateIssue(input: { projectPath: $fullPath, iid: $issueId, labelIds: $labelGraphQLIds }) {
    issue {
      id
    }
  }
}`;if(!(null!=(s=null==(r=null==(i=(await tv(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,issueId:o.number,labelGraphQLIds:a}},t)).body.data)?void 0:i.updateIssue)?void 0:r.issue)&&s.id))throw Error("Could not set issue labels")}async setIssueMilestone(e,t={}){var i,r,s;let{issue:o,milestone:n}=e;if(!o.repository)throw Error('GitLab requires "repository" for this function.');let a=`mutation SetIssueMilestone($fullPath: ID!, $issueId: String!, $milestoneId: ID) {
  updateIssue(input: { projectPath: $fullPath, iid: $issueId, milestoneId: $milestoneId }) {
    errors
    issue {
      id
      milestone {
        id
      }
    }
  }
}`,l=await tv(this.config,{query:a,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,issueId:o.number,milestoneId:(null==n?void 0:n.id)??null}},t),u=null==(i=l.body.data)?void 0:i.updateIssue;if(!(null!=(r=null==u?void 0:u.issue)&&r.id)||l.body.errors||(null==(s=null==u?void 0:u.errors)?void 0:s.length)!==0)throw Error("Could not set milestone of issue")}async setIssueAssignees(e,t={}){var i,r,s;let{issue:o,assignees:n}=e;if(!o.repository)throw Error('GitLab requires "repository" for this function.');let a=n.map(e=>e.username),l=`mutation SetIssueAssignees($fullPath: ID!, $issueId: String!, $assigneeUsernames: [String!]!) {
  issueSetAssignees(input: { projectPath: $fullPath, iid: $issueId, assigneeUsernames: $assigneeUsernames }) {
    errors,
    issue {
      id
    }
  }
}`,u=null==(i=(await tv(this.config,{query:l,variables:{fullPath:`${o.repository.owner.login}/${o.repository.name}`,issueId:o.number,assigneeUsernames:a}},t)).body.data)?void 0:i.issueSetAssignees;if(!(null!=(r=null==u?void 0:u.issue)&&r.id)||(null==(s=null==u?void 0:u.errors)?void 0:s.length)!==0)throw Error("Could not set issue assignees")}async getMilestonesForRepo(e,t={}){var i,r,s,o,n,a,l;let{repo:{namespace:u,name:c},cursor:h}=e,d=await tv(this.config,{query:`
query getLabelsForRepo(
  $fullPath: ID!
  $after: String
) {
  project(
    fullPath: $fullPath
  ) {
    webUrl
    milestones(after: $after) {
      nodes {
        ${tI}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{fullPath:`${u}/${c}`,after:h}},t);return{pageInfo:(null==(s=null==(r=null==(i=d.body.data)?void 0:i.project)?void 0:r.milestones)?void 0:s.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(l=null==(a=null==(n=null==(o=d.body.data)?void 0:o.project)?void 0:n.milestones)?void 0:a.nodes)?void 0:l.map(e=>{var t,i;return tj(e,(null==(i=null==(t=d.body.data)?void 0:t.project)?void 0:i.webUrl)||"")}))??[]}}async getLabelsForRepo(e,t={}){var i,r,s,o,n,a,l;let{repo:{namespace:u,name:c},cursor:h}=e,d=await tv(this.config,{query:`
query getLabelsForRepo(
  $fullPath: ID!
  $after: String
) {
  project(
    fullPath: $fullPath
  ) {
    labels(after: $after) {
      nodes {
        ${t$}
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
`,variables:{fullPath:`${u}/${c}`,after:h}},t);return{pageInfo:(null==(s=null==(r=null==(i=d.body.data)?void 0:i.project)?void 0:r.labels)?void 0:s.pageInfo)??{endCursor:null,hasNextPage:!1},data:(null==(l=null==(a=null==(n=null==(o=d.body.data)?void 0:o.project)?void 0:n.labels)?void 0:a.nodes)?void 0:l.map(tM))??[]}}async getTreeForRepo(e,t={}){let i=tO(e.repo),r=new URL(e.cursor??`${tf(this.config,t)}/projects/${encodeURIComponent(i)}/repository/tree`);r.searchParams.set("per_page","10000"),r.searchParams.set("recursive","true"),r.searchParams.set("pagination","keyset"),r.searchParams.set("ref",e.branch);let s=await this.config.request({url:r.toString(),headers:j(t.token||this.config.token)}),o=s.headers.link;return{data:s.body.map(tU),pageInfo:{endCursor:o?o.substring(1,o.indexOf(">")):null,hasNextPage:!!o}}}},tQ=["assignee","comment","summary","created","creator","updated","votes","issuetype","status","labels","components","project","fixVersions","description"],tY="/rest/api/2/search/jql",tK="/rest/api/2/search",tZ=(e,t,i,r)=>{var s,o,n,a;let l=e.fields.assignee,u=!r,c=(e.fields[(null==t?void 0:t.Sprint)??""]??[]).filter(e=>"object"==typeof e);return{id:e.id,commentCount:e.fields.comment.comments.length,number:e.key,title:e.fields.summary,url:i?`${i}/browse/${e.key}`:null,closedDate:null,createdDate:new Date(e.fields.created),author:t1(e.fields.creator,i,u),updatedDate:new Date(e.fields.updated),assignees:l?[t1(l,i,u)]:[],description:e.fields.description,repository:null,project:{name:e.fields.project.name,resourceId:r??null,key:e.fields.project.key,namespace:null,id:e.fields.project.id},state:t2(e.fields.status),statusTransitions:(null==(s=e.transitions)?void 0:s.map(tJ))??[],components:(null==(o=e.fields.components)?void 0:o.map(tX))??[],type:e.fields.issuetype.name,upvoteCount:(null==(n=e.fields.votes)?void 0:n.votes)||0,labels:(null==(a=e.fields.labels)?void 0:a.map(e=>({color:null,description:null,id:null,name:e})))??[],sprints:c.map(t4),fixVersions:e.fields.fixVersions.map(t5)}},tJ=e=>{let t;switch(e.to.statusCategory.name){case"To Do":t="TO_DO";break;case"In Progress":t="IN_PROGRESS";break;default:t="DONE"}return{name:e.name,id:e.id,to:{id:e.to.id,name:e.to.name,color:e.to.statusCategory.colorName,category:t}}},tX=e=>({description:e.description??null,id:e.id,name:e.name}),t0=(e,t,i)=>i&&e.name?`${t}/secure/ViewProfile.jspa?name=${encodeURIComponent(e.name)}`:`${t}/jira/people/${e.accountId}`,t1=(e,t,i)=>({id:(i?e.key:e.accountId)??"",name:e.displayName,email:e.emailAddress,avatarUrl:e.avatarUrls["48x48"],username:e.displayName,url:t0(e,t,i)}),t2=e=>{let t;switch(e.statusCategory.name){case"To Do":t="TO_DO";break;case"In Progress":t="IN_PROGRESS";break;default:t="DONE"}return{id:e.id,name:e.name,color:e.statusCategory.colorName,category:t}},t4=e=>({id:e.id.toString(),name:e.name,isActive:"active"===e.state,startDate:e.startDate?new Date(e.startDate):null,endDate:e.endDate?new Date(e.endDate):null,completedDate:e.completeDate?new Date(e.completeDate):null}),t5=e=>({id:e.id,description:e.description,name:e.name,archived:e.archived,released:e.released,releaseDate:e.releaseDate?new Date(e.releaseDate):null}),t7=(e,t,i)=>i?`${t.baseUrl||"https://api.atlassian.com/ex/jira"}/${i}`:`${(null==t?void 0:t.baseUrl)||e.baseUrl}`,t8=async(e,t,i={})=>{let{resourceId:r}=t;return(await e.request({url:`${t7(e,i,r)}/rest/api/2/field`,headers:j(i.token||e.token)})).body},t6=async(e,t,i,r={})=>{let{number:s,resourceId:o,fields:n}=t||{};return{data:tZ((await e.request({url:`${t7(e,r,o)}/rest/api/2/issue/${s}?fields=${tQ.join(",")}&expand=transitions`,headers:j(r.token||e.token)})).body,n,i,o)}},t3=async(e,t,i,r={})=>{let{cursor:s,resourceId:o,labelNames:n,fields:a}=t||{},l=["statusCategory != Done",`(creator = currentUser() OR assignee = currentUser()
OR comment ~ currentUser() OR summary ~ currentUser() OR description ~ currentUser())`];n&&n.forEach(e=>l.push(`labels = "${e}"`));let u=`${l.join(" AND ")} ORDER BY updated DESC`,c=!o,h=new URL(`${t7(e,r,o)}${c?tK:tY}`);h.searchParams.set("jql",u),h.searchParams.set("maxResults","100"),h.searchParams.set("fields",tQ.join(",")),h.searchParams.set("expand","transitions"),s&&(c?h.searchParams.set("startAt",s):h.searchParams.set("nextPageToken",s));let d=await e.request({url:h.toString(),headers:j(r.token||e.token)}),p=d.body.issues.map(e=>tZ(e,a,i,o)),g=!1,m="";return c?(g=100==p.length,m=(parseInt(s??"0",10)+p.length).toString()):(g=!!d.body.nextPageToken,m=d.body.nextPageToken??null),{data:p,pageInfo:{hasNextPage:g,endCursor:m}}},t9=async(e,t,i,r={})=>{let{cursor:s,resourceId:o,jql:n,fields:a}=t||{},l=[...tQ],u=null==a?void 0:a.Sprint;u&&l.push(u);let c=!o,h=new URL(`${t7(e,r,o)}${c?tK:tY}`);h.searchParams.set("jql",n.join(" AND ")),h.searchParams.set("maxResults","100"),h.searchParams.set("fields",l.join(",")),h.searchParams.set("expand","transitions"),s&&(c?h.searchParams.set("startAt",s):h.searchParams.set("nextPageToken",s));let d=await e.request({url:h.toString(),headers:j(r.token||e.token)}),p=d.body.issues.map(e=>tZ(e,a,i,o)),g=!1,m="";return c?(g=100==p.length,m=(parseInt(s??"0",10)+p.length).toString()):(g=!!d.body.nextPageToken,m=d.body.nextPageToken??null),{data:p,pageInfo:{hasNextPage:g,endCursor:m}}},ie=async(e,t,i,r={})=>{let{assigneeLogins:s,authorLogin:o,mentionLogin:n,labelNames:a,cursor:l,projectKey:u,resourceId:c,fields:h}=t||{},d=[`project = "${u}"`,"statusCategory != Done"];return o&&d.push(`creator in ("${o}")`),s&&0!==s.length&&d.push(`assignee in ("${s.join('", "')}")`),n&&d.push(`comment ~ "${n}"`),a&&a.forEach(e=>d.push(`labels = "${e}"`)),t9(e,{resourceId:c,jql:d,cursor:l,fields:h},i,r)},it=async(e,t,i,r={})=>{let{assigneeLogins:s,authorLogin:o,mentionLogin:n,labelNames:a,cursor:l,projectKeys:u,resourceId:c,fields:h}=t||{},d=["("+u.map(e=>`project = "${e}"`).join(" OR ")+")","statusCategory != Done"];return o&&d.push(`creator in ("${o}")`),s&&0!==s.length&&d.push(`assignee in ("${s.join('", "')}")`),n&&d.push(`comment ~ "${n}"`),a&&a.forEach(e=>d.push(`labels = "${e}"`)),t9(e,{resourceId:c,jql:d,fields:h,cursor:l},i,r)},ii=async(e,t,i={})=>{let{issue:r,labels:s}=t;if(!r.project)throw Error('Jira requires a "project" for this function.');let o={fields:{labels:s.map(e=>e.name)}};await e.request({method:"PUT",url:`${t7(e,i,r.project.resourceId??void 0)}/rest/api/2/issue/${r.id}`,body:JSON.stringify(o),headers:{...j(i.token||e.token),"Content-Type":"application/json"}})},ir=async(e,t,i={})=>{let{issue:r,components:s}=t;if(!r.project)throw Error('Jira requires a "project" for this function.');let o={fields:{components:s.map(e=>({id:e.id}))}};await e.request({method:"PUT",url:`${t7(e,i,r.project.resourceId??void 0)}/rest/api/2/issue/${r.id}`,body:JSON.stringify(o),headers:{...j(i.token||e.token),"Content-Type":"application/json"}})},is=async(e,t,i={})=>{let{issue:r,status:s}=t;if(!r.project)throw Error('Jira requires a "project" for this function.');if(!s.id)throw Error('Jira requires a status "id" for this function.');let o={transition:{id:s.id}};await e.request({method:"POST",url:`${t7(e,i,r.project.resourceId??void 0)}/rest/api/2/issue/${r.id}/transitions`,body:JSON.stringify(o),headers:{...j(i.token||e.token),"Content-Type":"application/json"}})},io=async(e,t,i={})=>{let{resourceId:r,projectIdOrKey:s}=t,o=new URL(`${t7(e,i,r)}/rest/api/2/project/${s}/components`);return{data:(await e.request({url:o.toString(),headers:j(i.token||e.token)})).body}},ia="https://api.atlassian.com/ex/jira",il=class extends H{constructor(){super(...arguments),this._resourceUrlCache={},this._issueFieldsCache={}}async getIssueFieldsForResource(e,t={}){if(!this._issueFieldsCache[e.resourceId]){let i=await t8(this.config,e,t);this._issueFieldsCache[e.resourceId]=i.reduce((e,t)=>({...e,[t.name]:t.id}),{})}return this._issueFieldsCache[e.resourceId]??null}async getResourceUrl(e,t={}){var i;let r=t.token||this.config.token;if(!r)return null;let s=this._resourceUrlCache[r];return s?s[e.resourceId]??null:(await this.getJiraResourcesForCurrentUser(t),(null==(i=this._resourceUrlCache[r])?void 0:i[e.resourceId])??null)}async getCurrentUserForResource(e,t={}){let i=await this.getResourceUrl({resourceId:e.resourceId},t),r=await this.config.request({url:`${t.baseUrl||ia}/${e.resourceId}/rest/api/2/myself`,headers:j(t.token||this.config.token)});return{data:{name:r.body.displayName,email:r.body.emailAddress,avatarUrl:r.body.avatarUrls["48x48"],id:r.body.accountId,username:r.body.displayName,url:i?`${i}/jira/people/${r.body.accountId}`:null}}}async getJiraResourcesForCurrentUser(e={}){let t=await this.config.request({url:`${e.baseUrl||"https://api.atlassian.com/"}/oauth/token/accessible-resources`,headers:j(e.token||this.config.token)}),i=e.token||this.config.token,r=i?this._resourceUrlCache[i]||{}:void 0,s=t.body.map(e=>(r&&(r[e.id]=e.url),{avatarUrl:e.avatarUrl,id:e.id,name:e.name,url:e.url}));return i&&(this._resourceUrlCache[i]=r),{data:s}}async getJiraProjectsForResource(e,t={}){let i=new URL(`${t.baseUrl||ia}/${e.resourceId}/rest/api/2/project/search`);i.searchParams.set("maxResults","100"),e.cursor&&i.searchParams.set("startAt",e.cursor);let r=await this.config.request({url:i.toString(),headers:j(t.token||this.config.token)});return{pageInfo:{hasNextPage:0!==r.body.values.length,endCursor:(r.body.startAt+r.body.values.length).toString()},data:r.body.values.map(t=>({id:t.id,key:t.key,name:t.name,resourceId:e.resourceId}))}}async getJiraProjectsForResources(e,t={}){let i=[];return await Promise.all(e.resourceIds.map(async e=>{try{return await Y(i=>this.getJiraProjectsForResource({resourceId:e,cursor:i},t))}catch{return[]}})).then((...e)=>{e.forEach(e=>{i=i.concat(...e)})}),{data:i}}async getAccountsForJiraProject(e,t={}){let{resourceId:i,projectKey:r,cursor:s}=e,o=await this.getResourceUrl({resourceId:i},t),n=new URL(`${t.baseUrl||ia}/${i}/rest/api/2/user/assignable/search`);n.searchParams.set("maxResults","100"),s&&n.searchParams.set("startAt",s),n.searchParams.set("project",r);let a=await this.config.request({url:n.toString(),headers:j(t.token||this.config.token)});return{pageInfo:{hasNextPage:0!==a.body.length,endCursor:((s?parseInt(s):0)+a.body.length).toString()},data:a.body.filter(e=>"app"!==e.accountType&&e.active).map(e=>t1(e,o,!1))}}async getComponentsForJiraProject(e,t={}){return await io(this.config,e,t)}async getIssue(e,t={}){let i=await this.getIssueFieldsForResource({resourceId:e.resourceId},t),r=await this.getResourceUrl({resourceId:e.resourceId},t);return await t6(this.config,{...e,fields:i},r,t)}async getIssuesForProject(e,t={}){let i=await this.getIssueFieldsForResource({resourceId:e.resourceId},t),r=await this.getResourceUrl({resourceId:e.resourceId},t);return await ie(this.config,{...e,fields:i},r,t)}async getIssuesForProjects(e,t={}){let i=await this.getIssueFieldsForResource({resourceId:e.resourceId},t),r=await this.getResourceUrl({resourceId:e.resourceId},t);return await it(this.config,{...e,fields:i},r,t)}async getIssuesForResourceForCurrentUser(e,t={}){let i=await this.getIssueFieldsForResource({resourceId:e.resourceId},t),r=await this.getResourceUrl({resourceId:e.resourceId},t);return await t3(this.config,{...e,fields:i},r,t)}async setIssueStatus(e,t={}){await is(this.config,e,t)}async setIssueAssignee(e,t={}){let{issue:i,assignee:r}=e;if(!i.project)throw Error('Jira Cloud requires a "project" for this function.');if(!i.project.resourceId)throw Error('Jira Cloud requires a project "resourceId" for this function.');let s={accountId:null==r?void 0:r.id};await this.config.request({method:"PUT",url:`${t.baseUrl||ia}/${i.project.resourceId}/rest/api/2/issue/${i.id}/assignee`,body:JSON.stringify(s),headers:{...j(t.token||this.config.token),"Content-Type":"application/json"}})}async setIssueComponents(e,t={}){await ir(this.config,e,t)}async setIssueLabels(e,t={}){await ii(this.config,e,t)}async getLabelsForResource(e,t={}){let{resourceId:i,cursor:r}=e,s=new URL(`${t.baseUrl||ia}/${i}/rest/api/2/label`);s.searchParams.set("maxResults","100"),r&&s.searchParams.set("startAt",r);let o=await this.config.request({url:s.toString(),headers:j(t.token||this.config.token)});return{pageInfo:{hasNextPage:!o.body.isLast,endCursor:(o.body.startAt+o.body.values.length).toString()},data:o.body.values.map(e=>({color:null,description:null,id:null,name:e}))}}},iu=class extends V{constructor(){super(...arguments),this._issueFieldsCache={}}async getIssueFieldsForResource(e={}){let t=(null==e?void 0:e.baseUrl)||this.config.baseUrl||"";if(!this._issueFieldsCache[t]){let i=await t8(this.config,{},e);this._issueFieldsCache[t]=i.reduce((e,t)=>({...e,[t.name]:t.id}),{})}return this._issueFieldsCache[t]??null}async getCurrentUser(e={}){let t=await this.config.request({url:`${(null==e?void 0:e.baseUrl)||this.config.baseUrl}/rest/api/2/myself`,headers:j((null==e?void 0:e.token)||this.config.token)});return{data:{name:t.body.displayName,email:t.body.emailAddress,avatarUrl:t.body.avatarUrls["48x48"],id:t.body.key,username:t.body.displayName,url:null}}}async getJiraProjects(e={}){return{data:(await this.config.request({url:`${(null==e?void 0:e.baseUrl)||this.config.baseUrl}/rest/api/2/project`,headers:j((null==e?void 0:e.token)||this.config.token)})).body.map(e=>({id:e.id,name:e.name}))}}async getIssue(e,t={}){let i=e.resourceUrl||t.baseUrl||this.config.baseUrl;if(!i)throw Error('Jira Server requires a "resourceUrl" or "baseUrl" for this function.');let r=await this.getIssueFieldsForResource(t);return await t6(this.config,{...e,fields:r},i,t)}async getIssuesForProject(e,t={}){let i=e.resourceUrl||t.baseUrl||this.config.baseUrl;if(!i)throw Error('Jira Server requires a "resourceUrl" or "baseUrl" for this function.');let r=await this.getIssueFieldsForResource(t);return await ie(this.config,{...e,fields:r},i,t)}async getIssuesForProjects(e,t={}){let i=e.resourceUrl||t.baseUrl||this.config.baseUrl;if(!i)throw Error('Jira Server requires a "resourceUrl" or "baseUrl" for this function.');let r=await this.getIssueFieldsForResource(t);return await it(this.config,{...e,fields:r},i,t)}async getIssuesForResourceForCurrentUser(e,t={}){let i=e.resourceUrl||t.baseUrl||this.config.baseUrl;if(!i)throw Error('Jira Server requires a "resourceUrl" or "baseUrl" for this function.');let r=await this.getIssueFieldsForResource(t);return await t3(this.config,{...e,fields:r},i,t)}async setIssueStatus(e,t={}){await is(this.config,e,t)}async setIssueLabels(e,t={}){await ii(this.config,e,t)}async setIssueComponents(e,t={}){await ir(this.config,e,t)}async getLabels(e={}){return{data:(await this.config.request({url:`${(null==e?void 0:e.baseUrl)||this.config.baseUrl}/rest/api/2/jql/autocompletedata/suggestions?fieldName=labels`,headers:j(e.token||this.config.token)})).body.results.map(({displayName:e})=>({color:null,description:null,id:null,name:e}))}}async getComponentsForJiraProject(e,t={}){return await io(this.config,e,t)}},ic="https://api.trello.com",ih=e=>({id:e.id,username:e.username,url:e.url,name:e.fullName,email:e.email,avatarUrl:e.avatarUrl}),id=(e,t)=>{let i=new Date(1e3*parseInt(e.id.substring(0,8),16));return{id:e.id,commentCount:e.badges.comments,number:e.idShort.toString(),title:e.name,url:e.url,closedDate:null,createdDate:new Date(i.toISOString()),author:null,updatedDate:new Date(e.dateLastActivity),assignees:e.members.map(e=>({id:e.id,username:e.username,name:e.fullName,email:null,avatarUrl:e.avatarUrl,url:null})),description:null,state:t[e.idList??""]?{id:e.idList,name:t[e.idList].name,color:null}:null,type:null,repository:null,upvoteCount:e.badges.votes,labels:e.labels.map(e=>({color:e.color,description:null,id:e.id,name:e.name}))}},ip=class extends H{async getCurrentUser(e,t={}){let i=await this.config.request({url:`${t.baseUrl||ic}/1/members/me?key=${e.appKey}&token=${t.token||this.config.token}`,headers:j(t.token||this.config.token)});return{data:{name:i.body.fullName,email:i.body.email,avatarUrl:i.body.avatarHash?`https://trello-members.s3.amazonaws.com/${i.body.id}/${i.body.avatarHash}/50.png`:null,id:i.body.id,username:i.body.username,url:i.body.url}}}async getBoardsForCurrentUser(e,t={}){return{data:(await this.config.request({url:`${t.baseUrl||ic}/1/members/me/boards?fields=name&key=${e.appKey}&token=${t.token||this.config.token}&filter=open`,headers:j(t.token||this.config.token)})).body.map(e=>({id:e.id,name:e.name}))}}async getListsForTrelloBoard(e,t={}){let{appKey:i,boardId:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||ic}/1/boards/${r}/lists?key=${i}&token=${t.token||this.config.token}`,headers:j(t.token||this.config.token)})).body}}async getAccountForId(e,t={}){let{appKey:i,memberId:r}=e;return{data:ih((await this.config.request({url:`${t.baseUrl||ic}/1/members/${r}/?key=${i}&token=${t.token||this.config.token}`})).body)}}async getAccountsForTrelloBoard(e,t={}){let{appKey:i,boardId:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||ic}/1/boards/${r}/members?key=${i}&token=${t.token||this.config.token}`,headers:j(t.token||this.config.token)})).body.map(e=>({id:e.id,name:e.fullName,username:e.username,email:null,avatarUrl:null,url:null}))}}async getIssuesForBoard(e,t={}){let i=["-is:archived","sort:edited"],{appKey:r,boardId:s,filterText:o,assigneeLogins:n,labelNamesOrColors:a,trelloBoardListsById:l}=e||{};n&&i.push("@me"),a&&a.forEach(e=>i.push(`label:"${e}"`));let u=`${o?`${o}`:""}${i.join(" ")} board:${s}`;return{data:(await this.config.request({url:`${t.baseUrl||ic}/1/search?key=${r}&query=${u}&cards_limit=1000&token=${t.token||this.config.token}&card_members=true`,headers:j(t.token||this.config.token)})).body.cards.map(e=>id(e,l||{}))}}async updateIssue(e,t,i,r){return await this.config.request({method:"PUT",url:`${r.baseUrl||ic}/1/cards/${t.id}?key=${e}&token=${r.token||this.config.token}&${i}`,headers:j(r.token||this.config.token)})}async setIssueStatus(e,t={}){let{appKey:i,issue:r,status:s}=e;if(!s.id)throw Error('Trello requires a status "id" for this function.');let o=`idList=${s.id}`;if(!(await this.updateIssue(i,r,o,t)).body.id)throw Error("Could not set issue status")}async setIssueAssignees(e,t={}){let{appKey:i,issue:r,assignees:s}=e,o=s.map(e=>e.id),n=`idMembers=${encodeURIComponent(o.join(","))}`;if(!(await this.updateIssue(i,r,n,t)).body.id)throw Error("Could not set issue status")}async setIssueLabels(e,t={}){let{appKey:i,issue:r,labels:s}=e,o=s.map(e=>e.id).join(",");if(!(await this.config.request({method:"PUT",url:`${t.baseUrl||ic}/1/cards/${r.id}?key=${i}&token=${t.token||this.config.token}&idLabels=${encodeURIComponent(o)}`,headers:j(t.token||this.config.token)})).body.id)throw Error("Could not set issue status")}async setIssueArchived(e,t={}){let{appKey:i,issue:r,archived:s}=e;if(!(await this.config.request({method:"PUT",url:`${t.baseUrl||ic}/1/cards/${r.id}?key=${i}&token=${t.token||this.config.token}&closed=${s}`,headers:j(t.token||this.config.token)})).body.id)throw Error("Could not update issue archived status")}async archiveIssue(e,t={}){await this.setIssueArchived({...e,archived:!0},t)}async unArchiveIssue(e,t={}){await this.setIssueArchived({...e,archived:!1},t)}async getLabelsForBoard(e,t={}){let{appKey:i,boardId:r}=e;return{data:(await this.config.request({url:`${t.baseUrl||ic}/1/boards/${r}/labels?key=${i}&token=${t.token||this.config.token}`,headers:j(t.token||this.config.token)})).body.map(e=>({color:e.color,description:null,id:e.id,name:e.name}))}}},ig={};P(ig,{default:()=>im});var im={},iw={};P(iw,{default:()=>iv});var iv={},iy={};P(iy,{restApiPullRequestToCommonPullRequest:()=>ib});var ib=e=>ey(e),iC={};P(iC,{decode:()=>iq,decodeV0:()=>iN,encode:()=>iU,validate:()=>iL});var iR=((g=iR||{}).Zero="0",g.One="1",g),ik=((m=ik||{}).PullRequest="pr",m.Issue="issue",m),iS=((f=iS||{}).Azure="azure",f.Github="github",f.GithubEnterprise="githubEnterprise",f.Gitlab="gitlab",f.GitlabSelfHosted="gitlabSelfHosted",f.Bitbucket="bitbucket",f.BitbucketServer="bitbucketServer",f.Jira="jira",f.JiraServer="jiraServer",f.Trello="trello",f),iP=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.entityId)throw Error("Missing required fields for Azure DevOps issue uniqueId");let t=[];return t.push("azure"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Azure DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:null,entityId:e[6]}}},iA=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.repoId||!e.entityId)throw Error("Missing required fields for Azure DevOps pull request uniqueId");let t=[];return t.push("azure"),t.push("pr"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<8)throw Error("Invalid Azure DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:e[6],entityId:e[7]}}},iI=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},iD=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},i_=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},i$=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},iT=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},iE=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},ix=class{constructor(){}validate(e){if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.projectId||!e.entityId)throw Error("Missing required fields for Jira issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"jira"==e.provider?(t.push(""),t.push(e.resourceId)):(t.push(e.domain),t.push("")),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Jira issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:""==e[4]?null:e[4],accountOrOrgId:null,organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},iO=class{constructor(){}validate(e){if(!e.accountOrOrgId)throw Error("accountOrOrgId is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.accountOrOrgId||!e.projectId||!e.entityId)throw Error("Missing required fields for Trello issue uniqueId");let t=[];return t.push("trello"),t.push("issue"),t.push("1"),t.push(""),t.push(e.accountOrOrgId),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Trello issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:e[4],organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},iF=(e,t)=>{if("issue"!==t&&"pr"!==t)throw Error("unknown entityType");switch(e){case"azure":return"pr"===t?new iA:new iP;case"bitbucket":case"bitbucketServer":return"pr"===t?new iD:new iI;case"github":case"githubEnterprise":return"pr"===t?new i$:new i_;case"gitlab":case"gitlabSelfHosted":return"pr"===t?new iE:new iT;case"jira":case"jiraServer":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new ix;case"trello":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new iO;default:throw Error("unknown provider")}},iB=e=>{if(!e.entityType)throw Error("entityType is required");if(!e.provider)throw Error("provider is required");if(!e.entityId)throw Error("entityID is required")},iL=e=>{if("0"===e.version)return void iB(e);iF(e.provider,e.entityType).validate(e)},iU=e=>iF(e.provider,e.entityType).encode(e),iq=e=>{let t=JSON.parse(e);if(!t||!t.length)throw Error("invalid issue unique id");return iF(t[0],t[1]).decode(t)},iN=(e,t,i)=>{if(!i)throw Error("entityID is required");try{let r=JSON.parse(i);if(!r||!r.length)throw Error("Invalid pull request uniqueId");let s=[e,t,"0",...r];return iF(e,t).decode(s)}catch{return{provider:e,entityType:t,version:"0",domain:"",resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:i}}},iM={};P(iM,{CHANGES_REQUESTED_ACTION_CATEGORY:()=>i8,CHANGES_REQUESTED_BUCKET_ID:()=>iY,CONFLICTS_ACTION_CATEGORY:()=>i5,CONFLICTS_BUCKET_ID:()=>iz,DRAFT_ACTION_CATEGORY:()=>i9,DRAFT_BUCKET_ID:()=>iJ,FAILING_CI_ACTION_CATEGORY:()=>i4,FAILING_CI_BUCKET_ID:()=>ij,NEEDS_MY_REVIEW_ACTION_CATEGORY:()=>i7,NEEDS_MY_REVIEW_BUCKET_ID:()=>iQ,OTHER_ACTION_CATEGORY:()=>re,OTHER_BUCKET_ID:()=>iX,PINNED_BUCKET_ID:()=>iG,READY_TO_MERGE_ACTION_CATEGORY:()=>i1,READY_TO_MERGE_BUCKET_ID:()=>iH,REVIEWER_COMMENTED_ACTION_CATEGORY:()=>i6,REVIEWER_COMMENTED_BUCKET_ID:()=>iK,SNOOZED_BUCKET_ID:()=>i0,UNASSIGNED_REVIEWERS_ACTION_CATEGORY:()=>i2,UNASSIGNED_REVIEWERS_BUCKET_ID:()=>iV,WAITING_FOR_REVIEW_ACTION_CATEGORY:()=>i3,WAITING_FOR_REVIEW_BUCKET_ID:()=>iZ,getActionablePullRequests:()=>rt,groupPullRequestsByAssignee:()=>rs,groupPullRequestsByAuthor:()=>ro,groupPullRequestsByGitKrakenTeam:()=>ru,groupPullRequestsByRepo:()=>rr,groupPullRequestsByReviewer:()=>rn,groupPullRequestsByWorkspace:()=>rl,groupPullRequestsIntoBuckets:()=>ri});var iW=(e,t,i,r)=>({id:e,faIconName:i,name:t,priority:r,pullRequests:[]}),iG="pinned",iH="readyToMerge",iV="unassignedReviewers",ij="failingCI",iz="conflicts",iQ="needsMyReview",iY="changesRequested",iK="reviewerCommented",iZ="waitingForReview",iJ="draft",iX="other",i0="snoozed",i1="readyToMerge",i2="unassignedReviewers",i4="failingCI",i5="conflicts",i7="needsMyReview",i8="changesRequested",i6="reviewerCommented",i3="waitingForReview",i9="draft",re="other",rt=(e,t,i)=>e.map(e=>{var r,s,o,n,a,l,u,c,h,d,p,g,m,f;let w={...e,suggestedActionCategory:re,priority:1e3,viewer:{canMerge:!1,isAuthor:!1,isAssignee:!1,isReviewer:!1,shouldMerge:!1,shouldAssignReviewer:!1,waitingOnReviews:!1,shouldReview:!1},failingCI:!1,hasConflicts:!1,changeRequestReviewCount:0,codeSuggestionsCount:0,commentReviewCount:0,approvalReviewCount:0};t&&(w.viewer.isAuthor=(null==(r=e.author)?void 0:r.id)===t.id,w.viewer.isAssignee=(null==(s=e.assignees)?void 0:s.some(e=>e.id===t.id))??!1,w.viewer.isReviewer=(null==(o=e.reviews)?void 0:o.some(e=>e.reviewer.id===t.id))??!1),w.viewer.canMerge=(null==(n=e.permissions)?void 0:n.canMerge)??!0,w.hasConflicts="CONFLICTS"===e.mergeableState,w.failingCI=(null==(l=null==(a=e.headCommit)?void 0:a.buildStatuses)?void 0:l.some(e=>"ERROR"===e.state||"FAILED"===e.state))||"FAILING_CHECKS"===e.mergeableState,w.commentReviewCount=(null==(u=e.reviews)?void 0:u.filter(e=>"COMMENTED"===e.state).length)??0,w.approvalReviewCount=(null==(c=e.reviews)?void 0:c.filter(e=>"APPROVED"===e.state).length)??0,w.changeRequestReviewCount=(null==(h=e.reviews)?void 0:h.filter(e=>"CHANGES_REQUESTED"===e.state).length)??0;let v=null==(d=null==i?void 0:i.enrichedItemsByUniqueId)?void 0:d[e.uuid];null!=v&&(w.viewer.enrichedItems=v,v.some(e=>"pin"===e.type)&&(w.viewer.pinned=!0,w.priority-=800),v.some(e=>"snooze"===e.type)&&(w.viewer.snoozed=!0));let y=(null==(g=null==(p=null==i?void 0:i.codeSuggestionsCountByPrUuid)?void 0:p[e.uuid])?void 0:g.count)||0;return y&&(w.codeSuggestionsCount=y),t&&!w.viewer.isAuthor&&(!w.viewer.isAssignee||w.viewer.isReviewer)||!w.viewer.canMerge||w.isDraft||w.failingCI||"MERGEABLE"!==e.mergeableState||e.reviewDecision&&"APPROVED"!==e.reviewDecision||(w.viewer.shouldMerge=!0,w.suggestedActionCategory=i1),(!t||w.viewer.isAuthor)&&e.isDraft&&(w.suggestedActionCategory=i9),(!t||w.viewer.isAuthor)&&"REVIEW_REQUESTED"===e.reviewDecision&&(w.suggestedActionCategory=i3,w.viewer.waitingOnReviews=!0),(!t||w.viewer.isAuthor)&&"COMMENTED"===e.reviewDecision&&(w.suggestedActionCategory=i6),(!t||w.viewer.isAuthor)&&w.failingCI&&(w.suggestedActionCategory=i4),(!t||w.viewer.isAuthor)&&w.hasConflicts&&(w.suggestedActionCategory=i5),(!t||w.viewer.isAuthor)&&("CHANGES_REQUESTED"===e.reviewDecision||w.codeSuggestionsCount>0)&&(w.suggestedActionCategory=i8),t&&!w.viewer.isAuthor||null!=(m=e.reviews)&&m.length||(w.suggestedActionCategory=i2,w.viewer.shouldAssignReviewer=!0),t&&null!=(f=e.reviews)&&f.some(e=>e.reviewer.id===t.id&&"REVIEW_REQUESTED"===e.state)&&(w.suggestedActionCategory=i7,w.viewer.shouldReview=!0),w}),ri=(e,t,i)=>{var r,s,o,n,a,l,u,c,h,d,p,g;let m={pinned:iW(iG,"Pinned","thumbtack",(null==(r=null==i?void 0:i.bucketPriorityOverride)?void 0:r.pinned)??-1),readyToMerge:iW(iH,"Ready to Merge","code-merge",(null==(s=null==i?void 0:i.bucketPriorityOverride)?void 0:s.readyToMerge)??0),unassignedReviewers:iW(iV,"Unassigned Reviewers","user-plus",(null==(o=null==i?void 0:i.bucketPriorityOverride)?void 0:o.unassignedReviewers)??1),failingCI:iW(ij,"Failing CI","circle-x",(null==(n=null==i?void 0:i.bucketPriorityOverride)?void 0:n.failingCI)??2),conflicts:iW(iz,"Resolve Conflicts","triangle-exclamation",(null==(a=null==i?void 0:i.bucketPriorityOverride)?void 0:a.conflicts)??3),needsMyReview:iW(iQ,"Needs My Review","eye",(null==(l=null==i?void 0:i.bucketPriorityOverride)?void 0:l.needsMyReview)??4),changesRequested:iW(iY,"Suggested Changes","file-plus",(null==(u=null==i?void 0:i.bucketPriorityOverride)?void 0:u.changesRequested)??5),reviewerCommented:iW(iK,"Reviewer Commented","comment",(null==(c=null==i?void 0:i.bucketPriorityOverride)?void 0:c.reviewerCommented)??6),waitingForReview:iW(iZ,"Waiting for Review","circle-pause",(null==(h=null==i?void 0:i.bucketPriorityOverride)?void 0:h.waitingForReview)??7),draft:iW(iJ,"Draft","compass-drafting",(null==(d=null==i?void 0:i.bucketPriorityOverride)?void 0:d.draft)??8),other:iW(iX,"Other","ellipsis",(null==(p=null==i?void 0:i.bucketPriorityOverride)?void 0:p.other)??9),snoozed:iW(i0,"Snoozed","snooze",(null==(g=null==i?void 0:i.bucketPriorityOverride)?void 0:g.snoozed)??10)},f=rt(e,t,i).reduce((e,t)=>(e[t.uuid]=t,e),{});return e.forEach(e=>{let i=f[e.uuid],r=!0;if(i.viewer.snoozed)return void m[i0].pullRequests.push(e);i.viewer.pinned&&m[iG].pullRequests.push(e),t&&!i.viewer.isAuthor&&(!i.viewer.isAssignee||i.viewer.isReviewer)||i.isDraft||!i.viewer.canMerge||"MERGEABLE"!==i.mergeableState||e.reviewDecision&&"APPROVED"!==e.reviewDecision||(m[iH].pullRequests.push(e),r=!1),i.viewer.shouldAssignReviewer&&(m[iV].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&i.failingCI&&(m[ij].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&i.hasConflicts&&(m[iz].pullRequests.push(e),r=!1),i.viewer.shouldReview&&(m[iQ].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&("CHANGES_REQUESTED"===i.reviewDecision||i.codeSuggestionsCount>0)&&(m[iY].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&"COMMENTED"===i.reviewDecision&&(m[iK].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&"REVIEW_REQUESTED"===i.reviewDecision&&(m[iZ].pullRequests.push(e),r=!1),i.isDraft&&(m[iJ].pullRequests.push(e),r=!1),r&&m[iX].pullRequests.push(e)}),Object.values(m).forEach(e=>{e.pullRequests.sort((e,t)=>f[e.uuid].priority-f[t.uuid].priority)}),m},rr=e=>{let t={};return e.forEach(e=>{let i=e.repository.id;t[i]?t[i].pullRequests.push(e):t[i]={name:e.repository.name,priority:0,pullRequests:[e],id:i}}),U(t)},rs=e=>{let t="internal-no-assignees",i={[t]:{name:"No assignees",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{e.assignees&&e.assignees.length?e.assignees.forEach(t=>{let r=t.id;i[r]?i[r].pullRequests.push(e):i[r]={accountData:t,name:L(t,`Unknown Assignee ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:r}}):i[t].pullRequests.push(e)}),U(i)},ro=e=>{let t="internal-no-author",i={[t]:{name:"No author",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{if(e.author){let t=e.author.id;i[t]?i[t].pullRequests.push(e):i[t]={accountData:e.author,name:L(e.author,`Unknown Author ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:t}}else i[t].pullRequests.push(e)}),U(i)},rn=e=>{let t="internal-no-reviewer",i={[t]:{name:"No reviewers",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{e.reviews&&e.reviews.length?e.reviews.forEach(t=>{let r=t.reviewer.id;i[r]?i[r].pullRequests.push(e):i[r]={accountData:t.reviewer,name:L(t.reviewer,`Unknown Reviewer ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:r}}):i[t].pullRequests.push(e)}),U(i)},ra=e=>{var t;return e.azureProject?[`${e.azureProject}-${e.azureOrganizationId}`]:(null==(t=e.providerData)?void 0:t.repositories.nodes.map(t=>`${e.provider}-${t.repositoryId}`))??[]},rl=(e,t)=>{let i="internal-no-workspace",r={[i]:{name:"No workspace",priority:-1,pullRequests:[],id:i,faIconName:"folder-xmark"}};if(t.length){let s=t.reduce((e,t)=>(ra(t).forEach(i=>{e[i]?e[i].push(t):e[i]=[t]}),e),{});e.forEach(e=>{let{provider:t}=iq(e.uuid),o="github"===t?e.repository.graphQLId:e.repository.id,n="azure"===t?[`${t}-${o}`,`${e.repository.project}-${e.repository.owner.login}`]:[`${t}-${o}`],a=!1,l=n.reduce((e,t)=>s[t]?e.concat(s[t]):e,[]);null!=l&&l.length&&l.forEach(t=>{a=!0;let i=t.id;r[i]?r[i].pullRequests.push(e):r[i]={name:t.name,priority:0,pullRequests:[e],id:i,faIconName:"folder"}}),a||r[i].pullRequests.push(e)})}else r[i].pullRequests=e;return U(r)},ru=(e,t,i,r)=>{let s="internal-no-team",o={[s]:{name:"No team",priority:-1,pullRequests:[],id:s}};return r.length?e.forEach(e=>{var n,a,l;let u=!1,c=new Set;c.add(null==(n=e.author)?void 0:n.id),null==(a=e.assignees)||a.forEach(e=>c.add(e.id)),null==(l=e.reviews)||l.forEach(e=>c.add(e.reviewer.id)),r.forEach(r=>{var s;if(null==(s=r.members)?void 0:s.some(e=>{var r,s;let o=null==(s=null==(r=t[e.id])?void 0:r[i])?void 0:s.providerID;return o&&c.has(o)})){u=!0;let t=r.id;o[t]?o[t].pullRequests.push(e):o[t]={name:r.name,priority:0,pullRequests:[e],id:t,teamData:r}}}),u||o[s].pullRequests.push(e)}):o[s].pullRequests=e,U(o)},rc={};P(rc,{getPullRequestRank:()=>rh});var rh=(e,t,i)=>{var r,s,o;let n=0,a,l;return null==(r=e.reviews)||r.forEach(e=>{e.reviewer.id===t&&(a=e.state),"CHANGES_REQUESTED"===e.state?l="CHANGES_REQUESTED":"APPROVED"===e.state&&"CHANGES_REQUESTED"!==l&&(l="APPROVED")}),l||(l="REVIEW_REQUESTED"),(null==(s=e.author)?void 0:s.id)===t?n+=1e3:null!=(o=e.assignees)&&o.find(e=>e.id===t)?n+=900:"REVIEW_REQUESTED"===a?n+=800:i&&(n+=700),"APPROVED"===l?"MERGEABLE"===e.mergeableState?n+=100:"CONFLICTS"===e.mergeableState?n+=90:n+=80:"CHANGES_REQUESTED"==l&&(n+=70),n},rd={};P(rd,{default:()=>rp});var rp={},rg={};P(rg,{default:()=>rm});var rm={},rf={};P(rf,{default:()=>rw});var rw={},rv=((w=rv||{}).Conflicts="conflicts",w.Failure="failure",w.NotSet="notSet",w.Queued="queued",w.RejectedByPolicy="rejectedByPolicy",w.Succeeded="succeeded",w),ry=((v=ry||{}).Completed="COMPLETED",v.NotPlanned="NOT_PLANNED",v),rb=e=>{let t={request:null==e?void 0:e.request};return{azureDevOps:new el({...t,...null==e?void 0:e.azureDevOps}),bitbucket:new ew({...t,...null==e?void 0:e.bitbucket}),bitbucketServer:new eC({...t,...null==e?void 0:e.bitbucketServer}),github:new tp({...t,...null==e?void 0:e.github}),gitlab:new tz({...t,...null==e?void 0:e.gitlab}),jira:new il({...t,...null==e?void 0:e.jira}),jiraServer:new iu({...t,...null==e?void 0:e.jiraServer}),trello:new ip({...t,...null==e?void 0:e.trello})}},rC={azureDevOps:ig,bitbucket:iw,bitbucketServer:iy,github:rc,gitlab:rd,gitProvider:iM,jira:rg,trello:rf,entityIdentifier:iC}},4484:(e,t,i)=>{i.d(t,{f:()=>FileRevisionAsCommitNode,m:()=>w});var r=i(1398),s=i(8103),o=i(534),n=i(2624),a=i(567),l=i(2141),u=i(2870),c=i(9686),h=i(7864),d=i(2278),p=i(5818),g=i(7273),m=i(1396),f=i(2606);let FileRevisionAsCommitNode=class FileRevisionAsCommitNode extends g.p{constructor(e,t,i,r,s={}){super("file-commit",n.nk.fromFile(i,r.repoPath,r.sha),e,t,i),this.commit=r,this._options=s}toClipboard(){return`${this.commit.shortSha}: ${this.commit.summary}`}get isTip(){return(this._options.branch?.current&&this._options.branch.sha===this.commit.ref)??!1}get ref(){return this.commit}async getChildren(){if(!this.commit.file?.hasConflicts)return[];let e=await this.view.container.git.status(this.commit.repoPath).getPausedOperationStatus?.();return null==e?[]:[new m.N(this.view,this,e,this.file),new f.a(this.view,this,e,this.file)]}async getTreeItem(){if(null==this.commit.file){let e=await this.commit.getCommitForFile(this.file);if(null==e){let e=await this.view.container.git.commits(this.repoPath).getLogForPath(this.file.path,this.commit.sha,{limit:2});null!=e&&(this.commit=e.commits.get(this.commit.sha)??this.commit)}else this.commit=e}let e=new r.TreeItem(s.c.fromTemplate(this.view.config.formats.commits.label,this.commit,{dateFormat:u.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),this.commit.file?.hasConflicts?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);if(e.contextValue=this.contextValue,e.description=s.c.fromTemplate(this.view.config.formats.commits.description,this.commit,{dateFormat:u.H.get("defaultDateFormat"),getBranchAndTagTips:e=>this._options.getBranchAndTagTips?.(e,{compact:!0}),messageTruncateAtNewLine:!0}),e.resourceUri=(0,d.E)("commit-file",{status:this.file.status}),!this.commit.isUncommitted&&this.view.config.avatars&&(e.iconPath=this._options.unpublished?new r.ThemeIcon("arrow-up",new r.ThemeColor("gitlens.unpublishedCommitIconColor")):await this.commit.getAvatarUri({defaultStyle:u.H.get("defaultGravatarsStyle")})),null==e.iconPath){let t=(0,a.O)(this.file.status);e.iconPath={dark:this.view.container.context.asAbsolutePath((0,c.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,c.HS)("images","light",t))}}return e.command=this.getCommand(),e}get contextValue(){return this.commit.isUncommitted?this.commit.file?.hasConflicts?`${p.U0.File}+conflicted`:this.commit.isUncommittedStaged?`${p.U0.File}+staged`:`${p.U0.File}+unstaged`:`${p.U0.File}+committed${this._options.branch?.current?"+current":""}${this.isTip?"+HEAD":""}${this._options.unpublished?"+unpublished":""}`}getCommand(){let e;return(e=this.commit.lines.length?this.commit.lines[0].line-1:this._options.selection?.active.line??0,this.commit.file?.hasConflicts)?(0,l.gu)("gitlens.diffWith","Open Changes",{lhs:{sha:"MERGE_HEAD",uri:n.nk.fromFile(this.file,this.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:n.nk.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}}):(0,l.gu)("gitlens.diffWithPrevious","Open Changes with Previous Revision",void 0,{commit:this.commit,uri:n.nk.fromFile(this.file,this.commit.repoPath),line:e,showOptions:{preserveFocus:!0,preview:!0}})}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getConflictBaseUri(){if(!this.commit.file?.hasConflicts)return;let e=await this.view.container.git.refs(this.repoPath).getMergeBase("MERGE_HEAD","HEAD");return n.nk.fromFile(this.file,this.repoPath,e??"HEAD")}async getTooltip(e){let t=await w(this.view.container,this.commit,this.file,this.view.config.formats.commits.tooltipWithStatus,{getBranchAndTagTips:this._options.getBranchAndTagTips,unpublished:this._options.unpublished,cancellation:e}),i=new r.MarkdownString(t,!0);return i.supportHtml=!0,i.isTrusted=!0,i}};async function w(e,t,i,r,n){let a,l,[c,d]=await Promise.allSettled([e.git.remotes(t.repoPath).getBestRemotesWithProviders(n?.cancellation),null==t.message?t.ensureFullDetails():void 0]);if(n?.cancellation?.isCancellationRequested)return;let p=(0,h.Ro)(c,[]),[g]=p;if(g?.hasIntegration()){let[e,i]=await Promise.allSettled([(0,h.zu)(t.getEnrichedAutolinks(g),n?.cancellation),t.getAssociatedPullRequest(g)]),r=(0,h.Ro)(e);r?.paused||(a=r?.value),l=(0,h.Ro)(i)}let m=o.Z.fromTemplate(`\${status}\${ (originalPath)}\${'&nbsp;&nbsp;\u2022&nbsp;&nbsp;'changesDetail}`,i,{outputFormat:"markdown"});return s.c.fromTemplateAsync(r.replace("{{slot-status}}",m),t,{enrichedAutolinks:a,dateFormat:u.H.get("defaultDateFormat"),getBranchAndTagTips:n?.getBranchAndTagTips,messageAutolinks:!0,messageIndent:4,pullRequest:l,outputFormat:"markdown",remotes:p,unpublished:n?.unpublished})}},4493:(e,t,i)=>{i.d(t,{o:()=>s});var r=i(1182);function s(e){if(e.scheme===r.xB.Git)try{return JSON.parse(e.query)}catch{}}},4692:(e,t,i)=>{let r;i.d(t,{G5:()=>g,Hn:()=>v,Xz:()=>p,dW:()=>m,g4:()=>f,kH:()=>w,mP:()=>y,r$:()=>h});var s=i(1398),o=i(6741),n=i(9686),a=i(4808);i(6549);var l=i(2141),u=i(2870),c=i(4152);let h=(0,a.Mt)(s.env.machineId);async function d(){let e;if(null!=r)return r;let t=(0,o.uo)();switch(s.env.appName){case"Visual Studio Code":e="code";break;case"Visual Studio Code - Insiders":e="code-insiders";break;case"Visual Studio Code - Exploration":e="code-exploration";break;case"VSCodium":e="codium";break;case"Cursor":e="cursor";break;case"Windsurf":e="windsurf";break;default:try{let t=await s.workspace.fs.readFile(s.Uri.file((0,n.HS)(s.env.appRoot,"product.json")));e=JSON.parse(new TextDecoder().decode(t)).applicationName}catch{e="code"}}if(r=e,s.env.remoteName)return e;async function i(e){return await (0,c.t2)(s.Uri.file(e))?e:void 0}switch(t){case"windows":case"linux":r=await i((0,n.HS)(s.env.appRoot,"..","..","bin",e))??await i((0,n.HS)(s.env.appRoot,"bin",e))??e;break;case"macOS":r=await i((0,n.HS)(s.env.appRoot,"bin",e))??await i((0,n.HS)(s.env.appRoot,"..","..","bin",e))??e;break;default:throw Error(`Unsupported platform: ${t}`)}return r}async function p(){let e=(0,n.Fd)(await d()).replace(/ /g,"\\ ");return`${e} --wait --reuse-window`}function g(e,t){return{dark:s.Uri.file(e.context.asAbsolutePath(`images/dark/${t}`)),light:s.Uri.file(e.context.asAbsolutePath(`images/light/${t}`))}}function m(){return!u.H.get("advanced.quickPick.closeOnFocusOut")}function f(e){return e.kind===s.ColorThemeKind.Dark||e.kind===s.ColorThemeKind.HighContrast}function w(e){return e.kind===s.ColorThemeKind.Light||e.kind===s.ColorThemeKind.HighContrastLight}async function v(e,t,i,r=!0){r&&null==s.window.tabGroups.activeTabGroup.activeTab&&(r=!1),await (0,l.S4)("workbench.action.openWalkthrough",{category:`${e}#${t}`,step:i},r)}async function y(e){await (0,l.S4)("revealFileInOS",e)}},4793:(e,t,i)=>{i.d(t,{KH:()=>c,LK:()=>l,ZQ:()=>u});var r=i(1398),s=i(3911),o=i(2870),n=i(9615),a=i(9975);function l(){return(0,n.SD)("gitlens:plus:enabled",o.H.get("plusFeatures.enabled",void 0,!0))}async function u(){if(l())return!0;let e={title:"Enable"};return await r.window.showInformationMessage("Pro features are currently disabled. Would you like to enable them?",{modal:!0},e,{title:"Cancel",isCloseAffordance:!0})===e&&(await o.H.updateEffective("plusFeatures.enabled",!0),!0)}async function c(e,t,i,o){for(;;){let n=await e.subscription.getSubscription();if(n.account?.verified===!1){let s={title:"Resend Email"},o={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${t}

You must verify your email before you can continue.`,{modal:!0},s,o)===s&&await e.subscription.resendVerification(i))continue;return!1}let l=n.plan.effective.id;if((0,a.zx)(l))break;if(o?.allowPreview&&null==n.account&&!(0,a.lc)(n)){let s={title:"Continue"},o={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${t}

Do you want to continue to get immediate access to preview local Pro features for 3 days?`,{modal:!0},s,o)!==s)return!1;e.subscription.startPreviewTrial(i);break}if(null==n.account){let o={title:"Try GitLens Pro"},n={title:"Sign In"},a={title:"Cancel",isCloseAffordance:!0},l=await r.window.showWarningMessage(`${t}

Do you want to start your free ${s.kj}-day Pro trial for full access to all GitLens Pro features?`,{modal:!0},o,n,a);if((l===o||l===n)&&await e.subscription.loginOrSignUp(l===o,i))continue}else{let o={title:"Upgrade to Pro"},n={title:"Cancel",isCloseAffordance:!0};await r.window.showWarningMessage(`${t}

Do you want to upgrade for full access to all GitLens Pro features?`,{modal:!0},o,n)===o&&e.subscription.upgrade(s.qn.Pro,i)}return!1}return!0}},4797:(e,t,i)=>{i.d(t,{Ol:()=>n,vt:()=>l});var r=i(1398),s=i(7308),o=i(4692);async function n(e,t,i,n){if(null==i)return;let a=await (0,s.p9)(i,n??{});if(0===a.length)return;let l=r.window.createQuickPick();l.ignoreFocusOut=(0,o.dW)();let u=[];try{let i=await new Promise(i=>{u.push(l.onDidHide(()=>i(void 0)),l.onDidAccept(()=>{0!==l.activeItems.length&&i(l.activeItems[0])})),l.title=e,l.placeholder=t,l.matchOnDescription=!0,l.matchOnDetail=!0,l.items=a,l.show()});return i?.item}finally{l.dispose(),u.forEach(e=>void e.dispose())}}async function a(e,t,i){let s,o=r.window.createInputBox();o.ignoreFocusOut=!0;let n=[];try{s=await new Promise(i=>{n.push(o.onDidHide(()=>i(void 0)),o.onDidAccept(()=>{let e=o.value.trim();if(null==e){o.validationMessage="Please enter a valid branch name";return}i(e)})),o.title=e,o.placeholder=t,o.prompt="Enter a name for the new branch",o.show()})}finally{o.dispose(),n.forEach(e=>void e.dispose())}return s}async function l(e,t){if(null==t)return;let i={label:"Create New Branch",description:"Creates a branch to apply the Cloud Patch to. (Typing an existing branch name will use that branch.)"},s={label:"Select Existing Branch",description:"Selects an existing branch to apply the Cloud Patch to."},l=[i,s],u=r.window.createQuickPick();u.ignoreFocusOut=(0,o.dW)();let c=[];try{let r=await new Promise(t=>{c.push(u.onDidHide(()=>t(void 0)),u.onDidAccept(()=>{0!==u.activeItems.length&&t(u.activeItems[0])})),u.title=e,u.placeholder="Choose a branch option",u.matchOnDescription=!0,u.matchOnDetail=!0,u.items=l,u.show()});if(r===i)return await a(e,"Enter a name for the new branch",t);if(r===s)return await n(e,"Choose an existing branch",t);return}finally{u.dispose(),c.forEach(e=>void e.dispose())}}},4808:(e,t,i)=>{let r,s,o;i.d(t,{$f:()=>v,$l:()=>y,Br:()=>q,EO:()=>H,Es:()=>M,Ey:()=>c.E,GW:()=>E,K3:()=>c.K,Lu:()=>C,Mt:()=>b,Ow:()=>x,Q_:()=>p,RG:()=>P,VU:()=>I,Vx:()=>T,W1:()=>d,ZH:()=>h,eV:()=>B,kU:()=>W,lF:()=>m,mF:()=>L,td:()=>U,vJ:()=>S,wN:()=>g,xv:()=>N,yz:()=>w,zd:()=>f});var n=i(1251),a=i(3881),l=i(1182),u=i(8845),c=i(6989);function h(e){return`${e[0].toLocaleUpperCase()}${e.slice(1)}`}function d(e,t){null==r&&(r=new Intl.Collator(void 0,{sensitivity:"accent"}));let i=r.compare(e,t);return 0===i?0:i>0?1:-1}function p(e,t){return null==e&&null==t||null!=e&&null!=t&&0===d(e,t)}function g(e,t){return null==s&&(s=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"})),s.compare(e,t)}function m(e,t,i=0,r=e.length,s=0,o=t.length){for(;i<r&&s<o;i++,s++){let r=e.charCodeAt(i),o=t.charCodeAt(s);if(r<o)return -1;if(r>o)return 1}let n=r-i,a=o-s;return n<a?-1:+(n>a)}function f(e,t,i=0,r=e.length,s=0,o=t.length){for(;i<r&&s<o;i++,s++){let n=e.charCodeAt(i),a=t.charCodeAt(s);if(n===a)continue;let l=n-a;if(!(32===l&&F(a))){if(!(-32===l&&F(n))){if(O(n)&&O(a))return l;return m(e.toLowerCase(),t.toLowerCase(),i,r,s,o)}}}let n=r-i,a=o-s;return n<a?-1:+(n>a)}function w(e){return e?.replace(/[<>&"]/g,e=>{switch(e){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";case'"':return"&quot;";default:return e}})}function v(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}function y(e){let[t,i]=(0,a.k)(e);return 1e3*t+Math.floor(i/1e6)}function b(e){let t=0;for(let i=0;i<e.length;i++)t=(t<<5)-t+e.charCodeAt(i),t&=t;return Math.abs(t%100)+1}function C(e){return e.endsWith("s")?`${e}'`:`${e}'s`}let R={ellipsisWidth:0,limit:0x40000000-1},k={ansiWidth:0,controlWidth:0,ambiguousWidth:1,emojiWidth:2,fullWidthWidth:2,regularWidth:1,wideWidth:2};function S(e,t,i){return null==e||0===e.length?{truncated:!1,ellipsed:!1,width:0,index:0}:(0,n.A)(e,{limit:t,ellipsisWidth:i??0},k)}function P(e){return null==e||0===e.length?0:(0,n.A)(e,R,k).width}let A=["¹","²","³","⁴","⁵","⁶","⁷","⁸","⁹"];function I(e){return A[e-1]??""}let D=/\$\{(?:'.*?[^\\]'|\W*)?(\w*?)(?:'.*?[^\\]'|[\W\d]*)\}/g,_=new Map;function $(e){return 95===e||e>=97&&e<=122||e>=65&&e<=90||e>=48&&e<=57}function T(e){let t=_.get(e);if(null!=t)return t;t=[];let i=e.length,r=0;for(;r<i;){let i=e.indexOf("${",r);if(-1===i)break;let s=e.indexOf("}",i);if(-1===s)break;let o=i+2,n="",a="",l="",u=!1,c="right",h="";if("'"===e[o]){let t=++o;if(-1===(o=e.indexOf("'",o)))break;t!==o&&(a=e.slice(t,o)),o++}else if(!$(e.charCodeAt(o))){let t=o++;for(;o<s&&!$(e.charCodeAt(o));)o++;t!==o&&(a=e.slice(t,o))}for(;o<s;){let t=e.charCodeAt(o);if($(t))n+=e[o++];else{if(124!==t)break;for(;o<s;){if((t=e.charCodeAt(++o))>=48&&t<=57){l+=e[o];continue}63===t?(u=!0,o++):45===t&&(c="left",o++);break}}}if(o<s){if("'"===e[o]){let t=++o;if(-1===(o=e.indexOf("'",o)))break;t!==o&&(h=e.slice(t,o)),o++}else if(!$(e.charCodeAt(o))){let t=o++;for(;o<s&&!$(e.charCodeAt(o));)o++;t!==o&&(h=e.slice(t,o))}}r=s+1,t.push({key:n,start:i,end:r,options:{prefix:a||void 0,suffix:h||void 0,truncateTo:l?parseInt(l,10):void 0,collapseWhitespace:u,padDirection:c}})}return _.set(e,t),t}function E(e,t){if(null==e||0===e.length)return e;if(null==t)return e.replace(D,"");let i=T(e);if(0===i.length)return e;let r=0,s="";for(let o of i)s+=e.slice(r,o.start)+(t[o.key]??""),r=o.end;return r<e.length&&(s+=e.slice(r)),s}async function x(e,t){let i;if(null==e||0===e.length)return e;if(null==t)return e.replace(D,"");let r=T(e);if(0===r.length)return e;let s=0,o="";for(let n of r)null!=(i=t[n.key])&&"object"==typeof i&&"function"==typeof i.then&&(i=await i),o+=e.slice(s,n.start)+(i??""),s=n.end;return s<e.length&&(o+=e.slice(s)),o}function O(e){return e>=l.s7.a&&e<=l.s7.z}function F(e){return e>=l.s7.A&&e<=l.s7.Z}function B(e,t=0,i=0,r=" "){return 0===t&&0===i?e:`${0===t?"":r.repeat(t)}${e}${0===i?"":r.repeat(i)}`}function L(e,t,i){return e.length===t?e:e.length>t?e.substring(0,t):e.padEnd(t,i)}function U(e,t,i){let r;if(null==i)return o??=(0,u.zd)(),`${o(t)} ${e}${1===t?"":"s"}`;let s=1===t?e:i.plural??`${e}s`;return i.only?s:(0===t?r=i.zero??t:!1===i.format?r=t:null!=i.format?r=i.format(t):(o??=(0,u.zd)(),r=o(t)),`${r}${i.infix??" "}${s}`)}function q(e,t){let i=e.indexOf(t);if(-1===i)return[e];let r=e.substring(0,i),s=e.substring(i+t.length);return null!=s?[r,s]:[r]}function N(e,t,i="…",r){if(!e)return e;if(t<=1)return i;if((r=r??P(e))<=t)return e;if(r===e.length)return`${e.substring(0,t-1)}${i}`;let s=Math.floor(t/(r/e.length)),o=P(e.substring(0,s));for(;o<t;)o+=P(e[s++]);return o>=t&&s--,`${e.substring(0,s)}${i}`}function M(e,t,i="…",r){if(!e)return e;if(t<=1)return i;if((r=r??P(e))<=t)return e;if(r===e.length)return`${i}${e.substring(r-t)}`;let s=Math.floor(t/(r/e.length)),o=P(e.substring(0,s));for(;o<t;)o+=P(e[s++]);return o>=t&&s--,`${i}${e.substring(e.length-s)}`}function W(e,t,i="…"){if(!e)return e;if(t<=1)return i;let r=P(e);return r<=t?e:`${e.slice(0,Math.floor(t/2)-1)}${i}${e.slice(r-Math.ceil(t/2))}`}let G=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,63,52,53,54,55,56,57,58,59,60,61,0,0,0,64,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,0,0,0,0,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]);function H(e){return null==e||""===e?"":function(e,t){let i=Array(4096);i[0]="0",i[1]="1",i[2]="2";let r=[],s=e.length,o=G[e.charCodeAt(0)],n=32,a=1;function l(i){let r=0,s=1;do r|=Number((o&n)>0)*s,s<<=1,0==(n>>=1)&&(n=t,o=G[e.charCodeAt(a++)]);while(s!==i)return r}let u=l(4);switch(u){case 0:u=l(256);break;case 1:u=l(65536);break;case 2:return""}let c=String.fromCharCode(u);i[3]=c,r.push(c);let h=4,d=4,p=3;for(;a<=s;){switch(u=l(1<<p)){case 0:u=l(256),i[h]=String.fromCharCode(u),u=h++,d--;break;case 1:u=l(65536),i[h]=String.fromCharCode(u),u=h++,d--;break;case 2:return r.join("")}0===d&&(d=1<<p++);let e=i[u];if(void 0===e){if(u!==h)return;e=c+c[0]}r.push(e),i[h++]=c+e[0],d--,c=e,0===d&&(d=1<<p++)}}(e,32)??""}},4898:(e,t,i)=>{i.d(t,{UZ:()=>$,Vy:()=>x,Zh:()=>O,_v:()=>E,hJ:()=>B,pX:()=>F,qJ:()=>LaunchpadProvider});var r=i(1398),s=i(7808),o=i(1849),n=i(2320),a=i(4123),l=i(3282),u=i(7125),c=i(2141),h=i(2870),d=i(9615),p=i(4152),g=i(9388),m=i(6206),f=i(9091),w=i(4941),v=i(1003),y=i(7864),b=i(1017),C=i(8493),R=i(5759),k=i(6239),S=i(4269),P=i(6527),A=i(6606),I=Object.defineProperty,D=Object.getOwnPropertyDescriptor,_=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?D(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&I(t,i,o),o};let $=[o.Q7.GitHub,o.PY.CloudGitHubEnterprise,o.Q7.GitLab,o.PY.CloudGitLabSelfHosted,o.Q7.AzureDevOps,o.Q7.Bitbucket,o.PY.BitbucketServer];function T(e){return $.includes(e)}let LaunchpadProvider=class LaunchpadProvider{constructor(e){this.container=e,this._disposable=r.Disposable.from(this._onDidChange,this._onDidRefresh,h.H.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConnectionState(this.onIntegrationConnectionStateChanged,this),...this.registerCommands())}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidRefresh=new r.EventEmitter;get onDidRefresh(){return this._onDidRefresh.event}_disposable;dispose(){this._disposable.dispose()}_prs;async getPullRequestsWithSuggestionCounts(e){return(e?.force||null==this._prs||this._prs.expiresAt<Date.now())&&(this._prs={promise:this.fetchPullRequestsWithSuggestionCounts(e?.cancellation),expiresAt:Date.now()+18e5}),this._prs?.promise}async fetchPullRequestsWithSuggestionCounts(e){let t,i=(0,v.dQ)(),[r,s]=await Promise.allSettled([L(this.container.integrations.getMyPullRequests($,e,!0),"getMyPullRequests",this.container),this.container.subscription.getSubscription(!0)]);if("rejected"===r.status)throw w.Vy.error(r.reason,i,"Failed to get pull requests"),r.reason;let o=(0,y.Ro)(r)?.value;if(o?.error!=null)throw w.Vy.error(o.error,i,"Failed to get pull requests"),o.error;let n=(0,y.Ro)(s);if(o?.value?.length&&n?.account!=null)try{t=await L(this.container.drafts.getCodeSuggestionCounts(o.value.filter(e=>(0,S.Ac)(e.provider))),"getCodeSuggestionCounts",this.container)}catch(e){w.Vy.error(e,i,"Failed to get code suggestion counts")}return{prs:o,suggestionCounts:t}}async getSearchedPullRequests(e,t){let i=await this.getConnectedIntegrations(),r=await this.getPullRequestIdentityFromSearch(e,i),s={value:[],duration:0},o=async e=>{let{provider:t,ownerAndRepo:i,prNumber:s}=r??{};if((null==t||t===e.id)&&null!=s&&null!=i){let[t,r]=i.split("/",2),o=await L(e?.getPullRequest({key:i,owner:t,name:r},s),"getPullRequest",this.container);if(o?.value!=null)return{value:[o.value],duration:o.duration}}},n=async i=>{let r=await L(i?.searchPullRequests(e,void 0,t),"searchPullRequests",this.container);if(null!=r)return{value:r.value,duration:r.duration}},a=r?o:n;return await Promise.allSettled([...i.keys()].filter(e=>(i.get(e)&&T(e))??!1).map(async e=>{let t=await this.container.integrations.get(e);if(null==t)return;let i=await a(t),r=i?.value;r&&(s.value?.push(...r),s.duration=Math.max(s.duration,i.duration))})),{prs:s,suggestionCounts:void 0}}_enrichedItems;async getEnrichedItems(e){return(e?.force||null==this._enrichedItems||this._enrichedItems.expiresAt<Date.now())&&(this._enrichedItems={promise:L(this.container.enrichments.get(void 0,e?.cancellation),"getEnrichedItems",this.container),expiresAt:Date.now()+18e5}),this._enrichedItems?.promise}_codeSuggestions;async getCodeSuggestions(e,t){if(!(e.codeSuggestionsCount<1)){if((null==this._codeSuggestions||t?.force)&&(this._codeSuggestions=new Map),t?.force||!this._codeSuggestions.has(e.uuid)||this._codeSuggestions.get(e.uuid).expiresAt<Date.now()){let t=e.provider.id;if(!T(t)||!(0,S.Ac)(e.provider))return;this._codeSuggestions.set(e.uuid,{promise:L(this.container.drafts.getCodeSuggestions(e,t,{includeArchived:!1}),"getCodeSuggestions",this.container),expiresAt:Date.now()+18e5})}return this._codeSuggestions.get(e.uuid).promise}}refresh(){this._prs=void 0,this._enrichedItems=void 0,this._codeSuggestions=void 0,this._onDidChange.fire()}async pin(e){e.viewer.pinned=!0,this._onDidChange.fire(),await this.container.enrichments.pinItem(e.enrichable),this._enrichedItems=void 0,this._onDidChange.fire()}async unpin(e){if(e.viewer.pinned=!1,this._onDidChange.fire(),null==e.viewer.enrichedItems)return;let t=e.viewer.enrichedItems.find(e=>"pin"===e.type);null!=t&&(await this.container.enrichments.unpinItem(t.id),this._enrichedItems=void 0,this._onDidChange.fire())}async snooze(e){e.viewer.snoozed=!0,this._onDidChange.fire(),await this.container.enrichments.snoozeItem(e.enrichable),this._enrichedItems=void 0,this._onDidChange.fire()}async unsnooze(e){if(e.viewer.snoozed=!1,this._onDidChange.fire(),null==e.viewer.enrichedItems)return;let t=e.viewer.enrichedItems.find(e=>"snooze"===e.type);null!=t&&(await this.container.enrichments.unsnoozeItem(t.id),this._enrichedItems=void 0,this._onDidChange.fire())}async merge(e){if(e.headRef?.oid==null)return;let t=e.provider.id;if(!T(t)||"Merge"!==await r.window.showQuickPick(["Merge","Cancel"],{placeHolder:`Are you sure you want to merge ${e.headRef?.name??"this pull request"}${e.baseRef?.name?` into ${e.baseRef.name}`:""}? This cannot be undone.`}))return;let i=await this.container.integrations.get(t);null!=i&&(await i.mergePullRequest(e.underlyingPullRequest),this.refresh())}open(e){null!=e.url&&((0,p.CZ)(e.url),this._prs=void 0)}openCodeSuggestion(e,t){let i=e.codeSuggestions?.value?.find(e=>e.id===t);null!=i&&(this._codeSuggestions?.delete(e.uuid),this._prs=void 0,(0,c.RS)("gitlens.openCloudPatch",{type:"code_suggestion",draft:i}))}openCodeSuggestionInBrowser(e){(0,p.CZ)(this.container.drafts.generateWebUrl(e))}async switchTo(e,t){if(e.openRepository?.localBranch?.current)return void(0,C.$)({type:"wip",inReview:t?.startCodeSuggestion,repository:e.openRepository.repo,source:"launchpad"});let i=this.getItemBranchDeepLink(e,t?.startCodeSuggestion?b.zB.SwitchToAndSuggestPullRequest:t?.openInWorktree?b.zB.SwitchToPullRequestWorktree:b.zB.SwitchToPullRequest);if(null==i)return;let r=t?.openInWorktree?await (0,l.sY)(this.container,e.underlyingPullRequest,{skipVirtual:!0}):void 0;this._codeSuggestions?.delete(e.uuid),await this.container.deepLinks.processDeepLinkUri(i,!1,r)}async openChanges(e){if(e.openRepository?.localBranch?.current&&(await this.switchTo(e),null!=e.refs)){let t=(0,u.tI)(e.openRepository.repo.path,e.refs);await (0,a.$5)(this.container,{repoPath:t.repoPath,lhs:t.base.ref,rhs:t.head.ref},{title:`Changes in Pull Request #${e.id}`})}}async openInGraph(e){let t=this.getItemBranchDeepLink(e);null!=t&&await this.container.deepLinks.processDeepLinkUri(t,!1)}generateWebUrl(){return this.container.urls.getGkDevUrl("launchpad")}getItemBranchDeepLink(e,t){if("pullrequest"!==e.type||null==e.headRef||e.repoIdentity?.remote?.url==null)return;let i=null==t&&e.openRepository?.localBranch?.current?e.openRepository.localBranch.name:e.headRef.name;return F(this.container,e.underlyingPullRequest,i,e.repoIdentity.remote.url,t)}async getMatchingOpenRepository(e,t){if(null==e.repoIdentity.remote.url)return;let i=t.get(e.repoIdentity.remote.url);if(null==i){if(e.underlyingPullRequest?.refs?.base?.url==null||null==(i=t.get(e.underlyingPullRequest.refs.base.url)))return;let[r]=i;return{repo:r}}let[r,s]=i,o=`${s.name}/${e.refs?.head.branch??e.headRef?.name}`,n=await r.git.branches().getLocalBranchByUpstream?.(o);return{repo:r,remote:s,localBranch:n}}async getMatchingRemoteMap(e){let t=new Set;for(let i of e)null!=i.repoIdentity.remote.url&&t.add(i.repoIdentity.remote.url.replace(/\.git$/,""));let i=new Map;async function r(e){if(0!==t.size)for(let r of(await e.git.remotes().getRemotes())){if(0===t.size)return;let s=r.url.replace(/\.git$/,"");if(t.has(s)){if(i.set(s,[e,r]),t.delete(s),0===t.size)return}else for(let[s]of t)if(r.matches(s)){if(i.set(s,[e,r]),t.delete(s),0===t.size)return;break}}}return await Promise.allSettled((0,f.Tj)(this.container.git.openRepositories,e=>r(e))),i}isMaybeSupportedLaunchpadPullRequestSearchUrl(e){return(0,R.X)(e)||(0,k.R)(e)||(0,u.z2)(e)}async getPullRequestIdentityFromSearch(e,t){for(let i of $)if(t.get(i)){let t=await this.container.integrations.get(i);if(null==t)continue;let r=t.getPullRequestIdentityFromMaybeUrl(e);if(r)return r}return(0,u.Gv)(e)}async getCategorizedItems(e,t){let i,r,s=(0,v.dQ)(),o=!!e?.search,a=!o&&(e?.force||null==this._prs),l=new Set((h.H.get("launchpad.ignoredRepositories")??[]).map(e=>e.toLowerCase())),c=h.H.get("launchpad.staleThreshold");null!=c&&(i=new Date).setDate(i.getDate()-c);try{let[a,c,h]=await Promise.allSettled([this.container.git.isDiscoveringRepositories,this.getEnrichedItems({force:e?.force,cancellation:t}),o?"string"==typeof e.search?this.getSearchedPullRequests(e.search,t):{prs:{value:e.search,duration:0},suggestionCounts:void 0}:this.getPullRequestsWithSuggestionCounts({force:e?.force,cancellation:t})]);if(t?.isCancellationRequested)throw new n.AL;if("rejected"===h.status)return w.Vy.error(h.reason,s,"Failed to get pull requests with suggestion counts"),r={error:h.reason instanceof Error?h.reason:Error(String(h.reason))};let d=(0,y.Ro)(c),p=(0,y.Ro)(h),g=p?.prs;if(g?.value==null)return r={items:[],timings:{prs:p?.prs?.duration,codeSuggestionCounts:p?.suggestionCounts?.duration,enrichedItems:d?.duration}};let m={};if(d?.value!=null)for(let e of d.value)e.entityId in m?m[e.entityId].push(e):m[e.entityId]=[e];let v=l.size?g.value.filter(e=>!l.has(`${e.repository.owner.toLowerCase()}/${e.repository.repo.toLowerCase()}`)):g.value,b=await this.container.integrations.getMyCurrentAccounts($),C=v.map(e=>{let t=(0,S.d8)(e),i=e.provider.id,r=T(i)?(0,P.dF)(i)?(0,P.u7)(i):(0,P.Kb)(i)?(0,P.pn)(i):void 0:void 0;if(!r)return void w.Vy.warn(`Unsupported provider ${i}`);let s={type:"pr",id:t.uuid,url:e.url,provider:r},o=(0,u.Yv)(e);return{...t,type:"pullrequest",uuid:t.uuid,provider:e.provider,enrichable:s,repoIdentity:o,refs:e.refs,underlyingPullRequest:e}}),R=this.getActionablePullRequests(C.filter(e=>null!=e),b,{enrichedItemsByUniqueId:m}),k=await this.getMatchingRemoteMap(R),{suggestionCounts:I}=p,D=await Promise.allSettled(R.map(async t=>{let r=I?.value?.[t.uuid]?.count??0,s=A.P5.get(t.suggestedActionCategory);!e?.search&&null!=i&&t.updatedDate.getTime()<i.getTime()?s="other":r>0&&t.viewer.isAuthor&&(s="code-suggestions");let n=await this.getMatchingOpenRepository(t,k),a=function(e,t,i){let r=[...A.eS.get(e)];return i?(r.push("show-overview","open-changes"),(0,S.Ac)(t)&&r.push("code-suggest")):(r.push("open-worktree","switch"),(0,S.Ac)(t)&&r.push("switch-and-code-suggest")),r.push("open-in-graph"),r}(s,t.provider,n?.localBranch?.current??!1);return{...t,currentViewer:b.get(t.provider.id),codeSuggestionsCount:r,isNew:!o&&this.isItemNewInGroup(t,s),isSearched:o,actionableCategory:s,suggestedActions:a,openRepository:n,underlyingPullRequest:t.underlyingPullRequest}}));return r={items:[...(0,f.x1)(D,e=>(0,y.Ro)(e))],timings:{prs:p?.prs?.duration,codeSuggestionCounts:p?.suggestionCounts?.duration,enrichedItems:d?.duration}}}finally{e?.search||this.updateGroupedIds(r?.items??[]),null!=r&&a&&this._onDidRefresh.fire(r)}}getActionablePullRequests(e,t,i){let r=(0,f.Fi)(e,e=>e.provider.id),s=[];for(let[e,o]of r.entries()){let r=t.get(e);if(null==r){w.Vy.warn(`No current user for integration ${e}`);continue}let n=(0,S.iG)(o,{id:r.id},i);s.push(...n)}return s}_groupedIds;isItemNewInGroup(e,t){return null!=this._groupedIds&&!this._groupedIds.has(`${e.uuid}:${A.Nm.get(t)}`)}updateGroupedIds(e){let t=new Set;for(let i of e){let e=A.Nm.get(i.actionableCategory),r=`${i.uuid}:${e}`;t.has(r)||t.add(r)}this._groupedIds=t}async hasConnectedIntegration(){for(let e of $){let t=await this.container.integrations.get(e);if(null!=t&&(t.maybeConnected??await t.isConnected()))return(0,d.o)("gitlens:launchpad:connected",!0),!0}return(0,d.o)("gitlens:launchpad:connected",!1),!1}async getConnectedIntegrations(){let e=new Map;return await Promise.allSettled($.map(async t=>{let i=await this.container.integrations.get(t);if(null==i)return void e.set(t,!1);let r=(i.maybeConnected??await i.isConnected())&&await i.access();e.set(t,r)})),(0,d.o)("gitlens:launchpad:connected",(0,f.zN)(e.values(),e=>e)),e}async ensureLaunchpadItemCodeSuggestions(e,t){return e.codeSuggestions??=await this.getCodeSuggestions(e,t),e.codeSuggestions}registerCommands(){return[(0,c.Lb)("gitlens.launchpad.indicator.toggle",()=>{let e=h.H.get("launchpad.indicator.enabled")??!1;h.H.updateEffective("launchpad.indicator.enabled",!e)})]}onConfigurationChanged(e){if(!h.H.changed(e,"launchpad"))return;let t=h.H.get("launchpad");this.container.telemetry.sendEvent("launchpad/configurationChanged",{"config.launchpad.staleThreshold":t.staleThreshold,"config.launchpad.includedOrganizations":t.includedOrganizations?.length??0,"config.launchpad.ignoredOrganizations":t.ignoredOrganizations?.length??0,"config.launchpad.ignoredRepositories":t.ignoredRepositories?.length??0,"config.launchpad.indicator.enabled":t.indicator.enabled,"config.launchpad.indicator.icon":t.indicator.icon,"config.launchpad.indicator.label":t.indicator.label,"config.launchpad.indicator.useColors":t.indicator.useColors,"config.launchpad.indicator.groups":t.indicator.groups.join(","),"config.launchpad.indicator.polling.enabled":t.indicator.polling.enabled,"config.launchpad.indicator.polling.interval":t.indicator.polling.interval}),(h.H.changed(e,"launchpad.includedOrganizations")||h.H.changed(e,"launchpad.ignoredOrganizations")||h.H.changed(e,"launchpad.ignoredRepositories")||h.H.changed(e,"launchpad.staleThreshold"))&&(this.refresh(),this.getCategorizedItems({force:!0}))}async onIntegrationConnectionStateChanged(e){T(e.key)&&(0,d.o)("gitlens:launchpad:connected","connected"===e.reason||await this.hasConnectedIntegration())}};function E(e){if(e.viewer.snoozed)return["snoozed"];let t=[];e.viewer.pinned&&t.push("pinned"),e.openRepository?.localBranch?.current&&t.push("current-branch"),e.isDraft&&t.push("draft");let i=A.Nm.get(e.actionableCategory);return e.isDraft&&"needs-review"!==i||t.push(i),t}function x(e){if(null==e||0===e.length)return new Map;let t=new Map(A.Rp.map(e=>[e,[]]));for(let i of(e.sort((e,t)=>(e.viewer.pinned?-1:1)-(t.viewer.pinned?-1:1)||A.t6.indexOf(e.actionableCategory)-A.t6.indexOf(t.actionableCategory)||t.updatedDate.getTime()-e.updatedDate.getTime()),e))for(let e of E(i))t.get(e).push(i);return t.get("needs-review").sort((e,t)=>(e.isDraft?1:-1)-(t.isDraft?1:-1)),t.get("pinned").sort((e,t)=>t.updatedDate.getTime()-e.updatedDate.getTime()),t.get("draft").sort((e,t)=>t.updatedDate.getTime()-e.updatedDate.getTime()),t}function O(e){if(null==e||0===e.length)return new Map;let t=new Map(A.Rp.map(e=>[e,0]));function i(e){t.set(e,(t.get(e)??0)+1)}for(let t of e){if(t.viewer.snoozed){i("snoozed");continue}t.viewer.pinned&&i("pinned"),t.openRepository?.localBranch?.current&&i("current-branch"),i(t.isDraft?"draft":A.Nm.get(t.actionableCategory))}return t}function F(e,t,i,s,n){let a=h.H.get("deepLinks.schemeOverride"),l="string"==typeof a?a:r.env.uriScheme,u=new URLSearchParams({url:t.provider.id!==o.Q7.AzureDevOps&&s.startsWith("https")?s.endsWith(".git")?s:`${s}.git`:s});return n&&u.set("action",n),u.set("prId",t.id),u.set("prTitle",t.title),t.refs&&(u.set("prBaseRef",t.refs.base.sha),u.set("prHeadRef",t.refs.head.sha)),r.Uri.parse(`${l}://${e.context.extension.id}/link/${b.vk.Repository}/-/${b.vk.Branch}/${encodeURIComponent(i)}?${u.toString()}`)}function B(e){return(0,s.Fx)(e.uuid)}function L(e,t,i){return(0,y.Mp)(e,{timeout:3e4,onSlow:e=>{i.telemetry.sendEvent("launchpad/operation/slow",{timeout:3e4,operation:t,duration:e})}})}_([(0,m.Yz)({args:{0:e=>`force=${e?.force}`}})],LaunchpadProvider.prototype,"getPullRequestsWithSuggestionCounts",1),_([(0,m.Yz)({args:!1})],LaunchpadProvider.prototype,"fetchPullRequestsWithSuggestionCounts",1),_([(0,m.Yz)({args:{0:e=>`force=${e?.force}`}})],LaunchpadProvider.prototype,"getEnrichedItems",1),_([(0,m.Yz)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`,1:e=>`force=${e?.force}`}})],LaunchpadProvider.prototype,"getCodeSuggestions",1),_([(0,m.Rm)()],LaunchpadProvider.prototype,"refresh",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"pin",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"unpin",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"snooze",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"unsnooze",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"merge",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"open",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"openCodeSuggestion",1),_([(0,m.Rm)()],LaunchpadProvider.prototype,"openCodeSuggestionInBrowser",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"switchTo",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"openChanges",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`}})],LaunchpadProvider.prototype,"openInGraph",1),_([(0,g.G)(e=>`${e?.force??!1}|${e?.search!=null&&"string"!=typeof e.search?e.search.map(e=>e.url).join(","):e?.search}`),(0,m.Rm)({args:{0:e=>`force=${e?.force}`,1:!1}})],LaunchpadProvider.prototype,"getCategorizedItems",1),_([(0,m.Rm)({args:{0:e=>`${e.id} (${e.provider.name} ${e.type})`,1:e=>`force=${e?.force}`}})],LaunchpadProvider.prototype,"ensureLaunchpadItemCodeSuggestions",1)},4931:(e,t,i)=>{i.d(t,{F8:()=>h,PB:()=>a,TF:()=>u,VO:()=>d,_c:()=>c,ho:()=>l,vt:()=>n});var r=i(2099),s=i(7864),o=i(3583);async function n(e,t,i,r){let n=(0,s.v6)();if(await (0,o.b)({command:"worktree",state:{subcommand:"create",repo:e,uri:t,reference:i,addRemote:r?.addRemote,createBranch:r?.createBranch,flags:r?.createBranch?["-b"]:void 0,result:n,reveal:r?.reveal}}),!n.pending)return n.promise;n.cancel()}function a(e,t,i){return(0,o.b)({command:"worktree",state:{subcommand:"copy-changes",repo:t,worktree:i,changes:{type:e}}})}function l(e,t){return(0,o.b)({command:"worktree",state:{subcommand:"open",repo:e.repoPath,worktree:e,flags:h(t?.location),openOnly:t?.openOnly}})}function u(e,t){return(0,o.b)({command:"worktree",state:{subcommand:"delete",repo:e,uris:t}})}function c(e,t){return r.m.instance.views.revealWorktree(e,t)}function h(e){if(null!=e)switch(e){case"newWindow":return["--new-window"];case"addToWorkspace":return["--add-to-workspace"];default:return[]}}function d(e){if(null!=e)return e.includes("--new-window")?"newWindow":e.includes("--add-to-workspace")?"addToWorkspace":"currentWindow"}},4941:(e,t,i)=>{i.d(t,{Vy:()=>a,j8:()=>BufferedLogChannel,nH:()=>c,zu:()=>u});var r,s=i(6206);i(4808);var o=((r=o||{})[r.Off=0]="Off",r[r.Error=1]="Error",r[r.Warn=2]="Warn",r[r.Info=3]="Info",r[r.Debug=4]="Debug",r);let n=["accessToken","password","token"],a=new class Logger2{output;provider;configure(e,t,i=!1){if(null!=e.sanitizeKeys)for(let t of n)e.sanitizeKeys.add(t);else e.sanitizeKeys=new Set(n);this.provider=e,this._isDebugging=i,this.logLevel=t}enabled(e){return this.level>=l(e)}_isDebugging=!1;get isDebugging(){return this._isDebugging}level=0;_logLevel="off";get logLevel(){return this._logLevel}set logLevel(e){this._logLevel=e,this.level=l(this._logLevel),"off"===e?(this.output?.dispose?.(),this.output=void 0):this.output??=this.provider.createChannel(this.provider.name)}get timestamp(){return`[${new Date().toISOString().replace(/T/," ").slice(0,-1)}]`}debug(e,...t){let i;(!(this.level<4)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging,null==this.output||this.level<4||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!0,t)}`))}error(e,t,...i){let r;if(!(this.level<1)||this.isDebugging){if(null==(r=null==t||"string"==typeof t?t:`${t.prefix} ${i.shift()??""}`)){let t=e instanceof Error?e.stack:void 0;if(t){let e=/.*\s*?at\s(.+?)\s/.exec(t);null!=e&&(r=e[1])}}this.isDebugging,null==this.output||this.level<1||this.output.appendLine(`${this.timestamp} ${r??""}${this.toLoggableParams(!1,i)}${null!=e?`
${String(e)}`:""}`)}}log(e,...t){let i;(!(this.level<3)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging,null==this.output||this.level<3||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!1,t)}`))}warn(e,...t){let i;(!(this.level<2)||this.isDebugging)&&("string"==typeof e?i=e:(i=t.shift(),null!=e&&(i=`${e.prefix} ${i??""}`)),this.isDebugging,null==this.output||this.level<2||this.output.appendLine(`${this.timestamp} ${i??""}${this.toLoggableParams(!1,t)}`))}showOutputChannel(e){this.output?.show?.(e)}toLoggable(e,t){if("object"!=typeof e)return String(e);if(Array.isArray(e))return`[${e.map(e=>this.toLoggable(e,t)).join(", ")}]`;let i=this.provider.toLoggable?.(e);if(null!=i)return i;try{return JSON.stringify(e,(e,i)=>this.provider.sanitizeKeys.has(e)?`<${e}>`:(null!=t&&(i=t(e,i)),this.provider?.sanitizer!=null&&(i=this.provider.sanitizer(e,i)),i))}catch{return"<error>"}}toLoggableParams(e,t){if(0===t.length||e&&this.level<4&&!this.isDebugging)return"";let i=t.map(e=>this.toLoggable(e)).join(", ");return 0!==i.length?` \u2014 ${i}`:""}};let BufferedLogChannel=class BufferedLogChannel{constructor(e,t=500){this.channel=e,this.interval=t}buffer=[];bufferTimer;dispose(){clearInterval(this.bufferTimer),this.bufferTimer=void 0,this.flush(),this.channel.dispose()}get name(){return this.channel.name}appendLine(e){this.buffer.push(e),this.buffer.length>=100?this.flush():this.bufferTimer??=setInterval(()=>this.flush(),this.interval)}show(e){this.channel.show?.(e)}_emptyCounter=0;flush(){if(this.buffer.length){this._emptyCounter=0;let e=this.buffer.join(`
`);e+=`
`,this.buffer.length=0,this.channel.append(e)}else this._emptyCounter++,this._emptyCounter>10&&(clearInterval(this.bufferTimer),this.bufferTimer=void 0,this._emptyCounter=0)}};function l(e){switch(e){case"off":default:return 0;case"error":return 1;case"warn":return 2;case"info":return 3;case"debug":return 4}}function u(e){let t;if("function"==typeof e){if(e.prototype?.constructor==null)return e.name;t=e.prototype.constructor}else t=e.constructor;let i=t?.name??"",r=i.indexOf("_");return i=-1===r?i:i.substring(r+1),t?.[s.z1]!=null&&(i=t[s.z1](e,i)),i}let c={enabled:e=>a.enabled(e)||a.isDebugging,log:(e,t,i,...r)=>{switch(e){case"error":a.error(void 0,t,i,...r);break;case"warn":a.warn(t,i,...r);break;case"info":a.log(t,i,...r);break;default:a.debug(t,i,...r)}}}},5042:(e,t,i)=>{i.d(t,{GQ:()=>n,OM:()=>u,V8:()=>o,b4:()=>a,gz:()=>l});var r=i(9210),s=i(5962);function o(e){return{query:e.pattern,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function n(e){return{pattern:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex}}function a(e){return`${"query"in e?e.query:e.pattern}|${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}`}function l(e){return e.map(e=>`#:${"string"==typeof e?(0,s.pV)(e):e.name}`).join(" ")}function u(e){let t,i,o,n,a=new Map;do{if(n=r.dI.exec(e.query),n?.groups==null)break;if(t=r.xT.get(n.groups.op),{value:i,text:o}=n.groups,o&&!r.xT.has(o.trim())&&(t="@me"===o?"author:":(0,s.HH)(o)?"commit:":"message:",i=o),t&&i){let e=a.get(t);null==e&&(e=new Set,a.set(t,e)),e.add(i)}}while(null!=n)return a}},5119:(e,t,i)=>{let r;i.d(t,{E:()=>n});var s=i(4808);let o=/(^|\s):([-+_a-z0-9]+):($|\s)/g;function n(e){return null==r&&(r=JSON.parse((0,s.EO)(""))),e.replace(o,(e,t,i,s)=>r[i]?`${t}${r[i]}${s}`:e)}},5134:(e,t,i)=>{i.r(t),i.d(t,{AnthropicProvider:()=>AnthropicProvider});var r=i(1820),s=i(2320),o=i(8730);let n=[{id:"claude-3-7-sonnet-latest",name:"Claude 3.7 Sonnet",maxTokens:{input:204800,output:8192},provider:r.FH},{id:"claude-3-7-sonnet-20250219",name:"Claude 3.7 Sonnet",maxTokens:{input:204800,output:8192},provider:r.FH,hidden:!0},{id:"claude-3-5-sonnet-latest",name:"Claude 3.5 Sonnet",maxTokens:{input:204800,output:8192},provider:r.FH},{id:"claude-3-5-sonnet-20241022",name:"Claude 3.5 Sonnet",maxTokens:{input:204800,output:8192},provider:r.FH,hidden:!0},{id:"claude-3-5-sonnet-20240620",name:"Claude 3.5 Sonnet",maxTokens:{input:204800,output:8192},provider:r.FH,hidden:!0},{id:"claude-3-5-haiku-latest",name:"Claude 3.5 Haiku",maxTokens:{input:204800,output:8192},provider:r.FH,default:!0},{id:"claude-3-5-haiku-20241022",name:"Claude 3.5 Haiku",maxTokens:{input:204800,output:8192},provider:r.FH,hidden:!0},{id:"claude-3-opus-latest",name:"Claude 3 Opus",maxTokens:{input:204800,output:4096},provider:r.FH},{id:"claude-3-opus-20240229",name:"Claude 3 Opus",maxTokens:{input:204800,output:4096},provider:r.FH,hidden:!0},{id:"claude-3-sonnet-latest",name:"Claude 3 Sonnet",maxTokens:{input:204800,output:4096},provider:r.FH,hidden:!0},{id:"claude-3-sonnet-20240229",name:"Claude 3 Sonnet",maxTokens:{input:204800,output:4096},provider:r.FH,hidden:!0},{id:"claude-3-haiku-latest",name:"Claude 3 Haiku",maxTokens:{input:204800,output:4096},provider:r.FH},{id:"claude-3-haiku-20240307",name:"Claude 3 Haiku",maxTokens:{input:204800,output:4096},provider:r.FH,hidden:!0},{id:"claude-2.1",name:"Claude 2.1",maxTokens:{input:204800,output:4096},provider:r.FH,hidden:!0}];let AnthropicProvider=class AnthropicProvider extends o.G{id=r.FH.id;name=r.FH.name;descriptor=r.FH;config={keyUrl:"https://console.anthropic.com/account/keys",keyValidator:/(?:sk-)?[a-zA-Z0-9-_]{32,}/};getModels(){return Promise.resolve(n)}getUrl(e){return"https://api.anthropic.com/v1/messages"}getHeaders(e,t,i,r){return{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${t}`,"x-api-key":t,"anthropic-version":"2023-06-01"}}fetchCore(e,t,i,r,s){if("max_completion_tokens"in r){let{max_completion_tokens:e,...t}=r;r=e?{max_tokens:e,...t}:t}return super.fetchCore(e,t,i,r,s)}async handleFetchFailure(e,t,i,r,o){if(404!==e.status&&429!==e.status){let t;try{t=await e.json()}catch{}if(t?.error?.type==="invalid_request_error"&&t?.error?.message?.includes("prompt is too long")){if(r<2)return{retry:!0,maxInputTokens:o-200*(r||1)};throw new s.V9(s.zK.RequestTooLarge,Error(`(${this.name}) ${e.status}: ${t?.error?.message||e.statusText}`))}}return super.handleFetchFailure(e,t,i,r,o)}}},5198:(e,t,i)=>{function r(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}i.r(t),i.d(t,{GitHubApi:()=>GitHubApi});var s=`octokit-endpoint.js/0.0.0-development ${r()}`;function o(e){for(let t in e)void 0===e[t]&&delete e[t];return e}function n(e,t,i){var r;if("string"==typeof t){let[e,r]=t.split(" ");i=Object.assign(r?{method:e,url:r}:{url:e},i)}else i=Object.assign({},t);i.headers=(r=i.headers)?Object.keys(r).reduce((e,t)=>(e[t.toLowerCase()]=r[t],e),{}):{},o(i),o(i.headers);let s=function e(t,i){let r=Object.assign({},t);return Object.keys(i).forEach(s=>{(function(e){if("object"!=typeof e||null===e||"[object Object]"!==Object.prototype.toString.call(e))return!1;let t=Object.getPrototypeOf(e);if(null===t)return!0;let i=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof i&&i instanceof i&&Function.prototype.call(i)===Function.prototype.call(e)})(i[s])&&s in t?r[s]=e(t[s],i[s]):Object.assign(r,{[s]:i[s]})}),r}(e||{},i);return"/graphql"===i.url&&(e&&e.mediaType.previews?.length&&(s.mediaType.previews=e.mediaType.previews.filter(e=>!s.mediaType.previews.includes(e)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(e=>e.replace(/-preview/,""))),s}var a=/\{[^{}}]+\}/g;function l(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function u(e,t){let i={__proto__:null};for(let r of Object.keys(e))-1===t.indexOf(r)&&(i[r]=e[r]);return i}function c(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function h(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function d(e,t,i){return(t="+"===e||"#"===e?c(t):h(t),i)?h(i)+"="+t:t}function p(e){return null!=e}function g(e){return";"===e||"&"===e||"?"===e}function m(e,t){var i=["+","#",".","/",";","?","&"];return"/"===(e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,r,s){if(!r)return c(s);{let e="",s=[];if(-1!==i.indexOf(r.charAt(0))&&(e=r.charAt(0),r=r.substr(1)),r.split(/,/g).forEach(function(i){var r=/([^:\*]*)(?::(\d+)|(\*))?/.exec(i);s.push(function(e,t,i,r){var s=e[i],o=[];if(p(s)&&""!==s)if("string"==typeof s||"number"==typeof s||"boolean"==typeof s)s=s.toString(),r&&"*"!==r&&(s=s.substring(0,parseInt(r,10))),o.push(d(t,s,g(t)?i:""));else if("*"===r)Array.isArray(s)?s.filter(p).forEach(function(e){o.push(d(t,e,g(t)?i:""))}):Object.keys(s).forEach(function(e){p(s[e])&&o.push(d(t,s[e],e))});else{let e=[];Array.isArray(s)?s.filter(p).forEach(function(i){e.push(d(t,i))}):Object.keys(s).forEach(function(i){p(s[i])&&(e.push(h(i)),e.push(d(t,s[i].toString())))}),g(t)?o.push(h(i)+"="+e.join(",")):0!==e.length&&o.push(e.join(","))}else";"===t?p(s)&&o.push(h(i)):""===s&&("&"===t||"?"===t)?o.push(h(i)+"="):""===s&&o.push("");return o}(t,e,r[1],r[2]||r[3]))}),!e||"+"===e)return s.join(",");var o=",";return"?"===e?o="&":"#"!==e&&(o=e),(0!==s.length?e:"")+s.join(o)}}))?e:e.replace(/\/$/,"")}function f(e){let t,i=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},e.headers),o=u(e,["method","baseUrl","url","headers","request","mediaType"]),n=function(e){let t=e.match(a);return t?t.map(l).reduce((e,t)=>e.concat(t),[]):[]}(r);r=({expand:m.bind(null,r)}).expand(o),/^http/.test(r)||(r=e.baseUrl+r);let c=u(o,Object.keys(e).filter(e=>n.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(s.accept)&&(e.mediaType.format&&(s.accept=s.accept.split(/,/).map(t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),r.endsWith("/graphql")&&e.mediaType.previews?.length)){let t=s.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];s.accept=t.concat(e.mediaType.previews).map(t=>{let i=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${t}-preview${i}`}).join(",")}return["GET","HEAD"].includes(i)?r=function(e,t){let i=/\?/.test(e)?"&":"?",r=Object.keys(t);return 0===r.length?e:e+i+r.map(e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`).join("&")}(r,c):"data"in c?t=c.data:Object.keys(c).length&&(t=c),s["content-type"]||void 0===t||(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(i)&&void 0===t&&(t=""),Object.assign({method:i,url:r,headers:s},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}function w(e,t,i){return f(n(e,t,i))}var v=function e(t,i){let r=n(t,i);return Object.assign(w.bind(null,r),{DEFAULTS:r,defaults:e.bind(null,r),merge:n.bind(null,r),parse:f})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":s},mediaType:{format:""}}),y=i(7115);let RequestError=class RequestError extends Error{name;status;request;response;constructor(e,t,i){super(e),this.name="HttpError",this.status=Number.parseInt(t),Number.isNaN(this.status)&&(this.status=0),"response"in i&&(this.response=i.response);let r=Object.assign({},i.request);i.request.headers.authorization&&(r.headers=Object.assign({},i.request.headers,{authorization:i.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),r.url=r.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=r}};async function b(e){let t,i=e.request?.fetch||globalThis.fetch;if(!i)throw Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");let r=e.request?.log||console,s=e.request?.parseSuccessResponseBody!==!1,o=function(e){if("object"!=typeof e||null===e||"[object Object]"!==Object.prototype.toString.call(e))return!1;let t=Object.getPrototypeOf(e);if(null===t)return!0;let i=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof i&&i instanceof i&&Function.prototype.call(i)===Function.prototype.call(e)}(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,n=Object.fromEntries(Object.entries(e.headers).map(([e,t])=>[e,String(t)]));try{t=await i(e.url,{method:e.method,body:o,redirect:e.request?.redirect,headers:n,signal:e.request?.signal,...e.body&&{duplex:"half"}})}catch(r){let t="Unknown Error";if(r instanceof Error){if("AbortError"===r.name)throw r.status=500,r;t=r.message,"TypeError"===r.name&&"cause"in r&&(r.cause instanceof Error?t=r.cause.message:"string"==typeof r.cause&&(t=r.cause))}let i=new RequestError(t,500,{request:e});throw i.cause=r,i}let a=t.status,l=t.url,u={};for(let[e,i]of t.headers)u[e]=i;let c={url:l,status:a,headers:u,data:""};if("deprecation"in u){let t=u.link&&u.link.match(/<([^<>]+)>; rel="deprecation"/),i=t&&t.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${u.sunset}${i?`. See ${i}`:""}`)}if(204===a||205===a)return c;if("HEAD"===e.method){if(a<400)return c;throw new RequestError(t.statusText,a,{response:c,request:e})}if(304===a)throw c.data=await C(t),new RequestError("Not modified",a,{response:c,request:e});if(a>=400)throw c.data=await C(t),new RequestError(function(e){if("string"==typeof e)return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){let t="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(e=>JSON.stringify(e)).join(", ")}${t}`:`${e.message}${t}`}return`Unknown error: ${JSON.stringify(e)}`}(c.data),a,{response:c,request:e});return c.data=s?await C(t):t.body,c}async function C(e){var t;let i=e.headers.get("content-type");if(!i)return e.text().catch(()=>"");let r=(0,y.xL)(i);if("application/json"===(t=r).type||"application/scim+json"===t.type){let t="";try{return t=await e.text(),JSON.parse(t)}catch{return t}}return r.type.startsWith("text/")||r.parameters.charset?.toLowerCase()==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))}var R=function e(t,i){let r=t.defaults(i);return Object.assign(function(t,i){let s=r.merge(t,i);if(!s.request||!s.request.hook)return b(r.parse(s));let o=(e,t)=>b(r.parse(r.merge(e,t)));return Object.assign(o,{endpoint:r,defaults:e.bind(null,r)}),s.request.hook(o,s)},{endpoint:r,defaults:e.bind(null,r)})}(v,{headers:{"user-agent":`octokit-request.js/0.0.0-development ${r()}`}}),k=class extends Error{constructor(e,t,i){super(`Request failed due to following response errors:
`+i.errors.map(e=>` - ${e.message}`).join(`
`)),this.request=e,this.headers=t,this.response=i,this.errors=i.errors,this.data=i.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="GraphqlResponseError";errors;data},S=["method","baseUrl","url","headers","request","query","mediaType","operationName"],P=["query","method","url"],A=/\/api\/v3\/?$/,I=function e(t,i){let r=t.defaults(i);return Object.assign((e,t)=>(function(e,t,i){if(i){if("string"==typeof t&&"query"in i)return Promise.reject(Error('[@octokit/graphql] "query" cannot be used as variable name'));for(let e in i)if(P.includes(e))return Promise.reject(Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}let r="string"==typeof t?Object.assign({query:t},i):t,s=Object.keys(r).reduce((e,t)=>(S.includes(t)?e[t]=r[t]:(e.variables||(e.variables={}),e.variables[t]=r[t]),e),{}),o=r.baseUrl||e.endpoint.DEFAULTS.baseUrl;return A.test(o)&&(s.url=o.replace(A,"/api/graphql")),e(s).then(e=>{if(e.data.errors){let t={};for(let i of Object.keys(e.headers))t[i]=e.headers[i];throw new k(s,t,e.data)}return e.data.data})})(r,e,t),{defaults:e.bind(null,r),endpoint:r.endpoint})}(R,{headers:{"user-agent":`octokit-graphql.js/0.0.0-development ${r()}`},method:"POST",url:"/graphql"}),D=i(1398),_=i(2476),$=i(6741),T=i(2320),E=i(2356),x=i(5225),O=i(5962),F=i(7019),B=i(2870),L=i(6206),U=i(9091),q=i(4941),N=i(1003),M=i(8178),W=i(4808),G=i(6549),H=i(3213),V=Object.defineProperty,j=Object.getOwnPropertyDescriptor,z=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?j(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&V(t,i,o),o};let Q=Object.freeze({values:[]}),Y=Object.freeze({ranges:[]}),K=`
closed
closedAt
createdAt
id
number
state
title
updatedAt
url
`,Z=`
${K}
author {
	login
	avatarUrl(size: $avatarSize)
	url
}
baseRefName
baseRefOid
headRefName
headRefOid
headRepository {
	name
	owner {
		login
	}
	url
}
isCrossRepository
isDraft
mergedAt
permalink
repository {
	isFork
	name
	owner {
		login
	}
	url
	viewerPermission
}
`,J=`
${Z}
additions
assignees(first: 10) {
	nodes {
		login
		avatarUrl(size: $avatarSize)
		url
	}
}
checksUrl
deletions
mergeable
mergedBy {
	login
}
reviewDecision
latestReviews(first: 10) {
	nodes {
		author {
			login
			avatarUrl(size: $avatarSize)
			url
		}
		state
	}
}
reviewRequests(first: 10) {
	nodes {
		asCodeOwner
		id
		requestedReviewer {
			... on User {
				login
				avatarUrl(size: $avatarSize)
				url
			}
		}
	}
}
commits(last: 1) {
	nodes {
		commit {
			statusCheckRollup {
				state
			}
		}
	}
}
totalCommentsCount
viewerCanUpdate
`,X=`
${K}
assignees(first: 100) {
	nodes {
		login
		url
		avatarUrl(size: $avatarSize)
	}
}
author {
	login
	avatarUrl
	url
}
comments {
	totalCount
}
labels(first: 20) {
	nodes {
		color
		name
	}
}
reactions(content: THUMBS_UP) {
	totalCount
}
repository {
	name
	owner {
		login
	}
	viewerPermission
	url
}
`;let GitHubApi=class GitHubApi{_onDidReauthenticate=new D.EventEmitter;get onDidReauthenticate(){return this._onDidReauthenticate.event}_disposable;constructor(e){this._disposable=D.Disposable.from(this._onDidReauthenticate,B.H.onDidChangeAny(e=>{(B.H.changedCore(e,["http.proxy","http.proxyStrictSSL"])||B.H.changed(e,["outputLevel","proxy"]))&&this.resetCaches()}))}dispose(){this._disposable.dispose()}resetCaches(){this._proxyAgent=null,this._defaults.clear(),this._enterpriseVersions.clear()}_proxyAgent=null;get proxyAgent(){if(!$.HZ)return null===this._proxyAgent&&(this._proxyAgent=(0,_.cQ)()),this._proxyAgent}async getCurrentAccount(e,t,i){let r=(0,N.dQ)();try{let s=`query getCurrentAccount($avatarSize: Int) {
	viewer {
		name
		email
		login
		avatarUrl(size: $avatarSize)
	}
}`,o=await this.graphql(e,t,s,{...i},r);if(o?.viewer?.login==null)return;return{provider:e,id:o.viewer.login,name:o.viewer.name??void 0,email:o.viewer.email??void 0,avatarUrl:!o.viewer.avatarUrl||ee(i)?o.viewer.avatarUrl??void 0:o.viewer.email&&i?.baseUrl!=null?await this.createEnterpriseAvatarUrl(e,t,i.baseUrl,o.viewer.email,i.avatarSize):void 0,username:o.viewer.login??void 0}}catch(t){if(t instanceof T.LN)return;throw this.handleException(t,e,r)}}async getAccountForCommit(e,t,i,r,s,o){let n=(0,N.dQ)();try{let a=`query getAccountForCommit(
	$owner: String!
	$repo: String!
	$rev: GitObjectID!
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		object(oid: $rev) {
			... on Commit {
				author {
					name
					email
					avatarUrl(size: $avatarSize)
					user {
						login
					}
				}
			}
		}
	}
}`,l=await this.graphql(e,t,a,{...o,owner:i,repo:r,rev:s},n),u=l?.repository?.object?.author;if(null==u)return;return{provider:e,...u?.user?.login!=null?{id:u.user.login,username:u.user.login}:{id:void 0,username:void 0},name:u.name??void 0,email:u.email??void 0,avatarUrl:!u.avatarUrl||ee(o)?u.avatarUrl??void 0:u.email&&o?.baseUrl!=null?await this.createEnterpriseAvatarUrl(e,t,o.baseUrl,u.email,o.avatarSize):void 0}}catch(t){if(t instanceof T.LN)return;throw this.handleException(t,e,n)}}async getAccountForEmail(e,t,i,r,s,o){let n=(0,N.dQ)();try{let a=`query getAccountForEmail(
	$emailQuery: String!
	$avatarSize: Int
) {
	search(type: USER, query: $emailQuery, first: 1) {
		nodes {
			... on User {
				name
				email
				avatarUrl(size: $avatarSize)
				login
			}
		}
	}
}`,l=await this.graphql(e,t,a,{...o,owner:i,repo:r,emailQuery:`in:email ${s}`},n),u=l?.search?.nodes?.[0];if(u?.login==null)return;return{provider:e,id:u.login,name:u.name??void 0,email:u.email??void 0,avatarUrl:!u.avatarUrl||ee(o)?u.avatarUrl??void 0:u.email&&o?.baseUrl!=null?await this.createEnterpriseAvatarUrl(e,t,o.baseUrl,u.email,o.avatarSize):void 0,username:u.login??void 0}}catch(t){if(t instanceof T.LN)return;throw this.handleException(t,e,n)}}async getDefaultBranch(e,t,i,r,s){let o=(0,N.dQ)();try{let n=`query getDefaultBranch(
	$owner: String!
	$repo: String!
) {
	repository(name: $repo, owner: $owner) {
		defaultBranchRef {
			name
		}
	}
}`,a=await this.graphql(e,t,n,{...s,owner:i,repo:r},o),l=a?.repository?.defaultBranchRef?.name??void 0;if(null==l)return;return{provider:e,name:l}}catch(t){if(t instanceof T.LN)return;throw this.handleException(t,e,o)}}async getIssueOrPullRequest(e,t,i,r,s,o){let n=(0,N.dQ)();try{let a=`query getIssueOrPullRequest(
	$owner: String!
	$repo: String!
	$number: Int!
) {
	repository(name: $repo, owner: $owner) {
		issueOrPullRequest(number: $number) {
			__typename
			... on Issue {
				${K}
			}
			... on PullRequest {
				${K}
			}
		}
	}
}`,l=await this.graphql(e,t,a,{...o,owner:i,repo:r,number:s},n),u=l?.repository?.issueOrPullRequest;if(null==u)return;return{provider:e,type:"PullRequest"===u.__typename?"pullrequest":"issue",id:String(u.number),nodeId:u.id,createdDate:new Date(u.createdAt),updatedDate:new Date(u.updatedAt),title:u.title,closed:u.closed,closedDate:null==u.closedAt?void 0:new Date(u.closedAt),url:u.url,state:(0,H.fromGitHubIssueOrPullRequestState)(u.state)}}catch(t){if(t instanceof T.LN)return;throw this.handleException(t,e,n)}}async getIssue(e,t,i,r,s,o){let n=(0,N.dQ)();try{let a=`query getIssue(
			$owner: String!
			$repo: String!
			$number: Int!
			$avatarSize: Int
		) {
			repository(name: $repo, owner: $owner) {
				issue(number: $number) {
					${X}${o?.includeBody?`
						body
						`:""}
				}
			}
		}`,l=await this.graphql(e,t,a,{...o,owner:i,repo:r,number:s},n);if(l?.repository?.issue==null)return;return(0,H.fromGitHubIssue)(l.repository.issue,e)}catch(t){if(t instanceof T.LN)return;throw this.handleException(t,e,n)}}async getPullRequest(e,t,i,r,s,o){let n=(0,N.dQ)();try{let a=`query getPullRequest(
	$owner: String!
	$repo: String!
	$number: Int!
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		pullRequest(number: $number) {
			${J}
		}
	}
}`,l=await this.graphql(e,t,a,{...o,owner:i,repo:r,number:s},n);if(l?.repository?.pullRequest==null)return;return(0,H.fromGitHubPullRequestLite)(l.repository.pullRequest,e)}catch(t){if(t instanceof T.LN)return;throw this.handleException(t,e,n)}}async getPullRequestForBranch(e,t,i,r,s,o){let n=(0,N.dQ)();try{let a=`query getPullRequestForBranch(
	$owner: String!
	$repo: String!
	$branch: String!
	$limit: Int!
	$include: [PullRequestState!]
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		ref(qualifiedName: $branch) {
			associatedPullRequests(first: $limit, orderBy: {field: UPDATED_AT, direction: DESC}, states: $include) {
				nodes {
					${Z}
				}
			}
		}
	}
}`,l=await this.graphql(e,t,a,{...o,owner:i,repo:r,branch:`refs/heads/${s}`,limit:10},n),u=l?.repository?.ref?.associatedPullRequests?.nodes?.filter(e=>null!=e&&(!e.repository.isFork||e.repository.owner.login===i));if(null==u||0===u.length)return;return u.length>1&&u.sort((e,t)=>(e.repository.owner.login===i?-1:1)-(t.repository.owner.login===i?-1:1)||("OPEN"===e.state?-1:1)-("OPEN"===t.state?-1:1)||new Date(t.updatedAt).getTime()-new Date(e.updatedAt).getTime()),(0,H.fromGitHubPullRequestLite)(u[0],e)}catch(t){if(t instanceof T.LN)return;throw this.handleException(t,e,n)}}async getPullRequestForCommit(e,t,i,r,s,o,n){let a=(0,N.dQ)();try{let l=`query getPullRequestForCommit(
	$owner: String!
	$repo: String!
	$rev: GitObjectID!
	$avatarSize: Int
) {
	repository(name: $repo, owner: $owner) {
		object(oid: $rev) {
			... on Commit {
				associatedPullRequests(first: 2, orderBy: {field: UPDATED_AT, direction: DESC}) {
					nodes {
						${Z}
					}
				}
			}
		}
	}
}`,u=await this.graphql(e,t,l,{...o,owner:i,repo:r,rev:s},a,n),c=u?.repository?.object?.associatedPullRequests?.nodes?.filter(e=>null!=e&&(!e.repository.isFork||e.repository.owner.login===i));if(null==c||0===c.length)return;return c.length>1&&c.sort((e,t)=>(e.repository.owner.login===i?-1:1)-(t.repository.owner.login===i?-1:1)||("MERGED"===e.state?-1:1)-("MERGED"===t.state?-1:1)||new Date(t.updatedAt).getTime()-new Date(e.updatedAt).getTime()),(0,H.fromGitHubPullRequestLite)(c[0],e)}catch(t){if(t instanceof T.LN)return;throw this.handleException(t,e,a)}}async getRepositoryMetadata(e,t,i,r,s,o){let n=(0,N.dQ)();try{let a=`query getRepositoryMetadata(
	$owner: String!
	$repo: String!
) {
	repository(name: $repo, owner: $owner) {
		owner {
			login
		}
		name
		parent {
			owner {
				login
			}
			name
		}
	}
}`,l=await this.graphql(e,t,a,{...s,owner:i,repo:r},n,o),u=l?.repository??void 0;if(null==u)return;return{provider:e,owner:u.owner.login,name:u.name,isFork:null!=u.parent,parent:null!=u.parent?{owner:u.parent.owner.login,name:u.parent.name}:void 0}}catch(t){if(t instanceof T.LN)return;throw this.handleException(t,e,n)}}async getBlame(e,t,i,r,s){let o=(0,N.dQ)();try{let n=`query getBlameRanges(
	$owner: String!
	$repo: String!
	$ref: String!
	$path: String!
) {
	viewer { name }
	repository(owner: $owner, name: $repo) {
		object(expression: $ref) {
			...on Commit {
				blame(path: $path) {
					ranges {
						startingLine
						endingLine
						commit {
							oid
							parents(first: 3) { nodes { oid } }
							message
							additions
							changedFiles
							deletions
							author {
								avatarUrl
								date
								email
								name
							}
							committer {
								date
								email
								name
							}
						}
					}
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,n,{owner:t,repo:i,ref:r,path:s},o);if(null==a)return Y;let l=a.repository?.object?.blame?.ranges;if(null==l||0===l.length)return{ranges:[],viewer:a.viewer?.name};return{ranges:l,viewer:a.viewer?.name}}catch(e){if(e instanceof T.LN)return Y;throw this.handleException(e,void 0,o)}}async getBranches(e,t,i,r){let s=(0,N.dQ)();try{let o=`query getBranches(
	$owner: String!
	$repo: String!
	$branchQuery: String
	$cursor: String
	$limit: Int = 100
) {
	repository(owner: $owner, name: $repo) {
		refs(query: $branchQuery, refPrefix: "refs/heads/", first: $limit, after: $cursor) {
			pageInfo {
				endCursor
				hasNextPage
			}
			nodes {
				name
				target {
					oid
					...on Commit {
						authoredDate
						committedDate
					}
				}
			}
		}
	}
}`,n=await this.graphql(void 0,e,o,{owner:t,repo:i,branchQuery:r?.query,cursor:r?.cursor,limit:Math.min(100,r?.limit??100)},s);if(null==n)return Q;let a=n.repository?.refs;if(null==a)return Q;return{paging:{cursor:a.pageInfo.endCursor,more:a.pageInfo.hasNextPage},values:a.nodes}}catch(e){if(e instanceof T.LN)return Q;throw this.handleException(e,void 0,s)}}async getCommit(e,t,i,r){let s=(0,N.dQ)();try{let o=await this.request(void 0,e,"GET /repos/{owner}/{repo}/commits/{ref}",{owner:t,repo:i,ref:r},s),n=o?.data;if(null==n)return;let{commit:a}=n;return{oid:n.sha,parents:{nodes:n.parents.map(e=>({oid:e.sha}))},message:a.message,additions:n.stats?.additions,changedFiles:n.files?.length,deletions:n.stats?.deletions,author:{avatarUrl:n.author?.avatar_url??void 0,date:a.author?.date??new Date().toString(),email:a.author?.email??void 0,name:a.author?.name??""},committer:{date:a.committer?.date??new Date().toString(),email:a.committer?.email??void 0,name:a.committer?.name??""},files:n.files}}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,s)}}async getCommitForFile(e,t,i,r,s){if((0,O.HH)(r))return this.getCommit(e,t,i,r);let o=await this.getCommits(e,t,i,r,{limit:1,path:s});if(0!==o.values.length)return{...await this.getCommit(e,t,i,o.values[0].oid)??o.values[0],viewer:o.viewer}}async getBranchesWithCommits(e,t,i,r,s,o){let n=(0,N.dQ)();try{let a=`query getBranchesWithCommits(
	$owner: String!
	$repo: String!
	$since: GitTimestamp!
	$until: GitTimestamp!
) {
	repository(owner: $owner, name: $repo) {
		refs(first: 20, refPrefix: "refs/heads/") {
			nodes {
				name
				target {
					... on Commit {
						history(first: ${"contains"===s?10:1}, since: $since until: $until) {
							nodes { oid }
						}
					}
				}
			}
		}
	}
}`,l=await this.graphql(void 0,e,a,{owner:t,repo:i,since:o?.toISOString(),until:o?.toISOString()},n),u=l?.repository?.refs?.nodes;if(null==u)return[];let c=[];for(let e of u)for(let t of e.target.history.nodes)if(r.includes(t.oid)){c.push(e.name);break}return c}catch(e){if(e instanceof T.LN)return[];throw this.handleException(e,void 0,n)}}async getCommitCount(e,t,i,r){let s=(0,N.dQ)();try{let o=`query getCommitCount(
	$owner: String!
	$repo: String!
	$ref: String!
) {
	repository(owner: $owner, name: $repo) {
		ref(qualifiedName: $ref) {
			target {
				... on Commit {
					history(first: 1) {
						totalCount
					}
				}
			}
		}
	}
}`,n=await this.graphql(void 0,e,o,{owner:t,repo:i,ref:r},s);return n?.repository?.ref?.target.history.totalCount}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,s)}}async getBranchWithCommit(e,t,i,r,s,o,n){let a=(0,N.dQ)();try{let l=`query getBranchWithCommit(
	$owner: String!
	$repo: String!
	$ref: String!
	$since: GitTimestamp!
	$until: GitTimestamp!
) {
	repository(owner: $owner, name: $repo) {
		ref(qualifiedName: $ref) {
			target {
				... on Commit {
					history(first: ${"contains"===o?100:1}, since: $since until: $until) {
						nodes { oid }
					}
				}
			}
		}
	}
}`,u=await this.graphql(void 0,e,l,{owner:t,repo:i,ref:`refs/heads/${r}`,since:n?.toISOString(),until:n?.toISOString()},a),c=u?.repository?.ref.target.history.nodes;if(null==c)return[];let h=[];for(let e of c)if(s.includes(e.oid)){h.push(r);break}return h}catch(e){if(e instanceof T.LN)return[];throw this.handleException(e,void 0,a)}}async getCommits(e,t,i,r,s){let o=(0,N.dQ)();if(s?.limit===1&&s?.path==null)return this.getCommitsCoreSingle(e,t,i,r);if((0,O.p8)(r))return this.getCommitsCoreRange(e,t,i,r);try{let n,a=`query getCommits(
	$owner: String!
	$repo: String!
	$ref: String!
	$path: String
	$author: CommitAuthor
	$after: String
	$before: String
	$limit: Int = 100
	$since: GitTimestamp
	$until: GitTimestamp
) {
	viewer { name }
	repository(name: $repo, owner: $owner) {
		object(expression: $ref) {
			... on Commit {
				history(first: $limit, author: $author, path: $path, after: $after, before: $before, since: $since, until: $until) {
					pageInfo {
						startCursor
						endCursor
						hasNextPage
						hasPreviousPage
					}
					nodes {
						... on Commit {
							oid
							message
							parents(first: 3) { nodes { oid } }
							additions
							changedFiles
							deletions
							author {
								avatarUrl
								date
								email
								name
							}
							committer {
								 date
								 email
								 name
							 }
						}
					}
				}
			}
		}
	}
}`;if(s?.authors!=null)if(1===s.authors.length){let[e]=s.authors;n={id:e.id,emails:e.email?[e.email]:void 0}}else{let e=s.authors.filter(e=>e.email).map(e=>e.email);n=e.length?{emails:e}:void 0}let l=await this.graphql(void 0,e,a,{owner:t,repo:i,ref:r,after:s?.after,before:s?.before,path:s?.path,author:n,limit:Math.min(100,s?.limit??100),since:"string"==typeof s?.since?s?.since:s?.since?.toISOString(),until:"string"==typeof s?.until?s?.until:s?.until?.toISOString()},o),u=l?.repository?.object?.history;if(null==u)return Q;return{paging:null!=u.pageInfo.endCursor?{cursor:u.pageInfo.endCursor??void 0,more:u.pageInfo.hasNextPage}:void 0,values:u.nodes,viewer:l?.viewer.name}}catch(e){if(e instanceof T.LN)return Q;throw this.handleException(e,void 0,o)}}async getCommitsCoreRange(e,t,i,r){let s=(0,N.dQ)();try{let s=await this.getComparison(e,t,i,r);if(null==s)return Q;return{values:s.commits?.map(e=>({oid:e.sha,parents:{nodes:e.parents.map(e=>({oid:e.sha}))},message:e.commit.message,author:{avatarUrl:e.author?.avatar_url??void 0,date:e.commit.author?.date??e.commit.author?.date??new Date().toString(),email:e.author?.email??e.commit.author?.email??void 0,name:e.author?.name??e.commit.author?.name??""},committer:{date:e.commit.committer?.date??new Date().toString(),email:e.committer?.email??e.commit.committer?.email??void 0,name:e.committer?.name??e.commit.committer?.name??""}})).reverse()}}catch(e){if(e instanceof T.LN)return Q;throw this.handleException(e,void 0,s)}}async getCommitsCoreSingle(e,t,i,r){let s=(0,N.dQ)();try{let o=`query getCommit(
	$owner: String!
	$repo: String!
	$ref: String!
) {
	viewer { name }
	repository(name: $repo owner: $owner) {
		object(expression: $ref) {
			...on Commit {
				oid
				parents(first: 3) { nodes { oid } }
				message
				additions
				changedFiles
				deletions
				author {
					avatarUrl
					date
					email
					name
				}
				committer {
					date
					email
					name
				}
			}
		}
	}
}`,n=await this.graphql(void 0,e,o,{owner:t,repo:i,ref:r},s);if(null==n)return Q;let a=n.repository?.object;return null!=a?{values:[a],viewer:n.viewer.name}:Q}catch(e){if(e instanceof T.LN)return Q;throw this.handleException(e,void 0,s)}}async getCommitRefs(e,t,i,r,s){let o=(0,N.dQ)();try{let n=`query getCommitRefs(
	$owner: String!
	$repo: String!
	$ref: String!
	$after: String
	$before: String
	$first: Int
	$last: Int
	$path: String
	$since: GitTimestamp
	$until: GitTimestamp
) {
	repository(name: $repo, owner: $owner) {
		object(expression: $ref) {
			... on Commit {
				history(first: $first, last: $last, path: $path, since: $since, until: $until, after: $after, before: $before) {
					pageInfo { startCursor, endCursor, hasNextPage, hasPreviousPage }
					totalCount
					nodes { oid }
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,n,{owner:t,repo:i,ref:r,path:s?.path,first:s?.first,last:s?.last,after:s?.after,before:s?.before,since:s?.since,until:s?.until},o),l=a?.repository?.object?.history;if(null==l)return;return{pageInfo:l.pageInfo,totalCount:l.totalCount,values:l.nodes}}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,o)}}async getTagsWithCommit(e,t,i,r,s){let o=(0,N.dQ)();try{let n=`query getTagsWithCommit(
	$owner: String!
	$repo: String!
	$since: GitTimestamp!
	$until: GitTimestamp!
) {
	repository(owner: $owner, name: $repo) {
		refs(first: 20, refPrefix: "refs/tags/") {
			nodes {
				name
				target {
					... on Commit {
						history(first: 3, since: $since until: $until) {
							nodes { oid }
						}
					}
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,n,{owner:t,repo:i,since:s.toISOString(),until:s.toISOString()},o),l=a?.repository?.refs?.nodes;if(null==l)return[];let u=[];for(let e of l)for(let t of e.target.history.nodes)if(t.oid===r){u.push(e.name);break}return u}catch(e){if(e instanceof T.LN)return[];throw this.handleException(e,void 0,o)}}async getNextCommitRefs(e,t,i,r,s,o){let n,a=await this.getCommitDate(e,t,i,o);if(null==a)return[];let l=await this.getCommitRefs(e,t,i,r,{path:s,first:1,since:a});if(null==l)return[];let u=`${l.pageInfo.startCursor.split(" ",1)[0]} ${l.totalCount}`;if([,n]=u.split(" ",2),n=Math.min(parseInt(n,10),5),null==(l=await this.getCommitRefs(e,t,i,r,{path:s,last:n,before:u})))return[];let c=[];for(let{oid:e}of l.values){if(e===o)break;c.push(e)}return c.reverse()}async getCommitDate(e,t,i,r){let s=(0,N.dQ)();try{let o=`query getCommitDate(
	$owner: String!
	$repo: String!
	$sha: GitObjectID!
) {
	repository(name: $repo, owner: $owner) {
		object(oid: $sha) {
			... on Commit { committer { date } }
		}
	}
}`,n=await this.graphql(void 0,e,o,{owner:t,repo:i,sha:r},s);return n?.repository?.object?.committer.date}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,s)}}async getContributors(e,t,i){let r=(0,N.dQ)();try{let s=await this.request(void 0,e,"GET /repos/{owner}/{repo}/contributors",{owner:t,repo:i,per_page:100},r),o=s?.data;if(null==o)return[];return s.data}catch(e){if(e instanceof T.LN)return[];throw this.handleException(e,void 0,r)}}async getDefaultBranchName(e,t,i){let r=(0,N.dQ)();try{let s=`query getDefaultBranch(
	$owner: String!
	$repo: String!
) {
	repository(owner: $owner, name: $repo) {
		defaultBranchRef {
			name
		}
	}
}`,o=await this.graphql(void 0,e,s,{owner:t,repo:i},r);if(null==o)return;return o.repository?.defaultBranchRef?.name??void 0}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,r)}}async getCurrentUser(e,t,i){let r=(0,N.dQ)();try{let s=`query getCurrentUser(
	$owner: String!
	$repo: String!
) {
	viewer { name, email, login, id }
	repository(owner: $owner, name: $repo) { viewerPermission }
}`,o=await this.graphql(void 0,e,s,{owner:t,repo:i},r);if(null==o)return;return{name:o.viewer?.name,email:o.viewer?.email,username:o.viewer?.login,id:o.viewer?.id}}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,r)}}async getComparison(e,t,i,r){let s=(0,N.dQ)();if(!(0,O.p8)(r,"qualified-triple-dot")){let e=(0,O.jY)(r);r=(0,O.Xn)(e?.left||"HEAD",e?.right||"HEAD","...")}try{let o=await this.request(void 0,e,"GET /repos/{owner}/{repo}/compare/{basehead}",{owner:t,repo:i,basehead:r},s),n=o?.data;if(null==n)return;return n}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,s)}}async getRepositoryVisibility(e,t,i){let r=(0,N.dQ)();try{let s=`query getRepositoryVisibility(
	$owner: String!
	$repo: String!
) {
	repository(owner: $owner, name: $repo) {
		visibility
	}
}`,o=await this.graphql(void 0,e,s,{owner:t,repo:i},r);if(o?.repository?.visibility==null)return;return"PUBLIC"===o.repository.visibility?"public":"private"}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,r)}}async getTags(e,t,i,r){let s=(0,N.dQ)();try{let o=`query getTags(
	$owner: String!
	$repo: String!
	$tagQuery: String
	$cursor: String
	$limit: Int = 100
) {
	repository(owner: $owner, name: $repo) {
		refs(query: $tagQuery, refPrefix: "refs/tags/", first: $limit, after: $cursor, orderBy: { field: TAG_COMMIT_DATE, direction: DESC }) {
			pageInfo {
				endCursor
				hasNextPage
			}
			nodes {
				name
				target {
					oid
					...on Tag {
						message
						tagger { date }
						target {
					...on Commit {
								oid
						authoredDate
						committedDate
						message
					}
						}
					}
				}
			}
		}
	}
}`,n=await this.graphql(void 0,e,o,{owner:t,repo:i,tagQuery:r?.query,cursor:r?.cursor,limit:Math.min(100,r?.limit??100)},s);if(null==n)return Q;let a=n.repository?.refs;if(null==a)return Q;return{paging:{cursor:a.pageInfo.endCursor,more:a.pageInfo.hasNextPage},values:a.nodes}}catch(e){if(e instanceof T.LN)return Q;throw this.handleException(e,void 0,s)}}async resolveReference(e,t,i,r,s){let o=(0,N.dQ)();try{if(!s){let s=`query resolveReference(
	$owner: String!
	$repo: String!
	$ref: String!
) {
	repository(owner: $owner, name: $repo) {
		object(expression: $ref) {
			oid
		}
	}
}`,n=await this.graphql(void 0,e,s,{owner:t,repo:i,ref:r},o);return n?.repository?.object?.oid??void 0}let n=`query resolveReference(
	$owner: String!
	$repo: String!
	$ref: String!
	$path: String!
) {
	repository(owner: $owner, name: $repo) {
		object(expression: $ref) {
			... on Commit {
				history(first: 1, path: $path) {
					nodes { oid }
				}
			}
		}
	}
}`,a=await this.graphql(void 0,e,n,{owner:t,repo:i,ref:r,path:s},o);return a?.repository?.object?.history.nodes?.[0]?.oid??void 0}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,o)}}async searchCommits(e,t,i){let r,s,o,n=(0,N.dQ)(),a=Math.min(100,i?.limit??100);i?.cursor!=null?([r,s,o]=i.cursor.split(" ",3),r=parseInt(r,10),s=parseInt(s,10),o=parseInt(o,10)):(r=1,s=a,o=0);try{let a=await this.request(void 0,e,"GET /search/commits",{q:t,sort:i?.sort,order:i?.order,per_page:s,page:r},n),l=a?.data;if(null==l||0===l.items.length)return;let u=l.items.map(e=>({oid:e.sha,parents:{nodes:e.parents.map(e=>({oid:e.sha}))},message:e.commit.message,author:{avatarUrl:e.author?.avatar_url??void 0,date:e.commit.author?.date??e.commit.author?.date??new Date().toString(),email:e.author?.email??e.commit.author?.email??void 0,name:e.author?.name??e.commit.author?.name??""},committer:{date:e.commit.committer?.date??e.committer?.date??new Date().toString(),email:e.committer?.email??e.commit.committer?.email??void 0,name:e.committer?.name??e.commit.committer?.name??""}})),c=o+l.items.length,h=l.incomplete_results||l.total_count>c;return{pageInfo:{startCursor:`${r} ${s} ${o}`,endCursor:h?`${r+1} ${s} ${c}`:void 0,hasPreviousPage:l.total_count>0&&r>1,hasNextPage:h},totalCount:l.total_count,values:u}}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,n)}}async searchCommitShas(e,t,i){let r,s,o,n=(0,N.dQ)(),a=Math.min(100,i?.limit??100);i?.cursor!=null?([r,s,o]=i.cursor.split(" ",3),r=parseInt(r,10),s=parseInt(s,10),o=parseInt(o,10)):(r=1,s=a,o=0);try{let a=await this.request(void 0,e,"GET /search/commits",{q:t,sort:i?.sort,order:i?.order,per_page:s,page:r},n),l=a?.data;if(null==l||0===l.items.length)return;let u=o+l.items.length,c=l.incomplete_results||l.total_count>u;return{pageInfo:{startCursor:`${r} ${s} ${o}`,endCursor:c?`${r+1} ${s} ${u}`:void 0,hasPreviousPage:l.total_count>0&&r>1,hasNextPage:c},totalCount:l.total_count,values:l.items.map(e=>({sha:e.sha,authorDate:new Date(e.commit.author.date).getTime(),committerDate:new Date(e.commit.committer?.date??e.commit.author.date).getTime()}))}}catch(e){if(e instanceof T.LN)return;throw this.handleException(e,void 0,n)}}_enterpriseVersions=new Map;async getEnterpriseVersion(e,t,i){let r=this._enterpriseVersions.get(t);if(null!=r)return r;if(null===r)return;let s=(0,N.dQ)();try{let o=await this.request(e,t,"GET /meta",i,s),n=o?.data?.installed_version;r=n?(0,G.sH)(n):null}catch{r=null}return this._enterpriseVersions.set(t,r),r??void 0}async graphql(e,t,i,r,s,o){try{let s;if(null!=o){if(o.isCancellationRequested)throw new T.AL;s=new AbortController,o.onCancellationRequested(()=>s.abort()),r={...r,request:{...r?.request,signal:s.signal}}}return await (0,_.Ff)(e?.getIgnoreSSLErrors()??!1,()=>this.getDefaults(t,I)(i,r))}catch(i){if(i instanceof k){switch(i.errors?.[0]?.type){case"NOT_FOUND":throw new T.LN(i);case"FORBIDDEN":throw new T.v3("github",T.R.Forbidden,i);case"RATE_LIMITED":{let e,r=i.headers?.["x-ratelimit-reset"];throw null!=r&&Number.isNaN(e=parseInt(r,10))&&(e=void 0),new T.HG(i,t,e)}}q.Vy.isDebugging&&D.window.showErrorMessage(`GitHub request failed: ${i.errors?.[0]?.message??i.message}`)}else i instanceof RequestError||"AbortError"===i.name?this.handleRequestError(e,t,i,s):q.Vy.isDebugging&&D.window.showErrorMessage(`GitHub request failed: ${i.message}`);throw i}}async request(e,t,i,r,s,o){try{let s;if(null!=o){if(o.isCancellationRequested)throw new T.AL;s=new AbortController,o.onCancellationRequested(()=>s.abort()),r={...r,request:{...r?.request,signal:s.signal}}}return await (0,_.Ff)(e?.getIgnoreSSLErrors()??!1,()=>this.getDefaults(t,R)(i,r))}catch(i){throw i instanceof RequestError||"AbortError"===i.name?this.handleRequestError(e,t,i,s):q.Vy.isDebugging&&D.window.showErrorMessage(`GitHub request failed: ${i.message}`),i}}_defaults=new Map;getDefaults(e,t){let i=this._defaults.get(t);null==i&&(i=new Map,this._defaults.set(t,i));let r=i.get(e);return null==r&&(r=t.defaults({headers:{authorization:`token ${e}`},request:{agent:this.proxyAgent,fetch:$.HZ?(e,t)=>{if(null!=t.headers){let{"user-agent":e,...i}=t.headers;e&&(t.headers=i)}return(0,_.hd)(e,t)}:_.hd,hook:"debug"===q.Vy.logLevel||q.Vy.isDebugging?async(e,t)=>{let i=(0,M.u)(`[GITHUB] ${t.method} ${t.url}`,{log:!1});try{return await e(t)}finally{let e;try{if("string"==typeof t.query){let i=/(^[^({\n]+)/.exec(t.query);e=` ${i?.[1].trim()??t.query}`}}catch{}i?.stop({message:e})}}:void 0}}),i.set(e,r)),r}handleRequestError(e,t,i,r){if("AbortError"===i.name)throw new T.AL(i);switch(i.status){case 404:case 410:case 422:throw new T.LN(i);case 401:throw new T.v3("github",T.R.Unauthorized,i);case 403:if(i.message.includes("rate limit")){let e,r=i.response?.headers?.["x-ratelimit-reset"];throw null!=r&&Number.isNaN(e=parseInt(r,10))&&(e=void 0),new T.HG(i,t,e)}throw new T.v3("github",T.R.Forbidden,i);case 500:q.Vy.error(i,r),null!=i.response&&(e?.trackRequestException(),(0,F.wW)(`${e?.name??"GitHub"} failed to respond and might be experiencing issues.${null==e||"github"===e.id?" Please visit the [GitHub status page](https://githubstatus.com) for more information.":""}`));return;case 502:if(q.Vy.error(i,r),i.message.includes("timeout")){e?.trackRequestException(),(0,F.lW)(e?.name??"GitHub");return}break;case 503:q.Vy.error(i,r),e?.trackRequestException(),(0,F.wW)(`${e?.name??"GitHub"} failed to respond and might be experiencing issues.${null==e||"github"===e.id?" Please visit the [GitHub status page](https://githubstatus.com) for more information.":""}`);return;default:if(i.status>=400&&i.status<500)throw new T.tk(i)}q.Vy.error(i,r),q.Vy.isDebugging&&D.window.showErrorMessage(`GitHub request failed: ${i.response?.errors?.[0]?.message??i.message}`)}handleException(e,t,i,r){return q.Vy.error(e,i),e instanceof T.v3&&!r&&this.showAuthenticationErrorMessage(e,t),e}async showAuthenticationErrorMessage(e,t){if(e.reason===T.R.Unauthorized||e.reason===T.R.Forbidden){let i="Reauthenticate";await D.window.showErrorMessage(`${e.message}. Would you like to try reauthenticating${e.reason===T.R.Forbidden?" to provide additional access":""}?`,i)===i&&(await t?.reauthenticate(),this.resetCaches(),this._onDidReauthenticate.fire())}else D.window.showErrorMessage(e.message)}async createEnterpriseAvatarUrl(e,t,i,r,s){s=s??16;let o=await this.getEnterpriseVersion(e,t,{baseUrl:i});if((0,G.ib)(o,">= 3.0.0")){let o,n=(0,x.P)(r);null!=n&&D.Uri.parse(i).authority===n.authority&&(null!=n.userId?o=`${i}/enterprise/avatars/u/${encodeURIComponent(n.userId)}?s=${s}`:null!=n.login&&(o=`${i}/enterprise/avatars/${encodeURIComponent(n.login)}?s=${s}`)),null==o&&(o=`${i}/enterprise/avatars/u/e?email=${encodeURIComponent(r)}&s=${s}`);let a=await (0,_.Ff)(e?.getIgnoreSSLErrors()??!1,()=>(0,_.hd)(o,{method:"GET",headers:{Authorization:`Bearer ${t}`}}));if(a.ok){let e=(0,W.K3)(new Uint8Array(await a.arrayBuffer())),t=a.headers.get("content-type");return`data:${t};base64,${e}`}}return`https://avatars.githubusercontent.com/u/e?email=${encodeURIComponent(r)}&s=${s}`}async searchMyPullRequests(e,t,i,r){let s=(0,N.dQ)(),o=Math.min(100,B.H.get("launchpad.experimental.queryLimit")??100);try{let n=function(t){let i=[];return t.author.login===d&&i.push("authored"),t.assignees.nodes.some(e=>e.login===d)&&i.push("assigned"),t.reviewRequests.nodes.some(e=>e.requestedReviewer?.login===d)&&i.push("review-requested"),0===i.length&&i.push("mentioned"),(0,H.fromGitHubPullRequest)(t,e)},a=`query searchMyPullRequests(
	$search: String!
	$avatarSize: Int
) {
	search(first: ${o}, query: $search, type: ISSUE) {
		issueCount
		nodes {
			...on PullRequest {
				${J}
			}
		}
	}
	viewer {
		login
	}
}`,l=i?.search?.trim()??"";i?.user&&(l+=` user:${i.user}`),i?.repos?.length&&(l+=` repo:${i.repos.join(" repo:")}`);let u=B.H.get("launchpad.ignoredRepositories")??[];u.length&&(l+=` -repo:${u.join(" -repo:")}`);let c=B.H.get("launchpad.includedOrganizations")??[];if(c.length)l+=` org:${c.join(" org:")}`;else{let e=B.H.get("launchpad.ignoredOrganizations")??[];e.length&&(l+=` -org:${e.join(" -org:")}`)}let h=await this.graphql(e,t,a,{search:`is:open is:pr involves:@me archived:false ${l}`.trim(),baseUrl:i?.baseUrl,avatarSize:i?.avatarSize},s,r);if(null==h)return[];let d=h.viewer.login;return h.search.nodes.map(e=>n(e))}catch(t){throw this.handleException(t,e,s,i?.silent)}}async searchMyIssues(e,t,i,r){let s=(0,N.dQ)(),o=`${X}${i?.includeBody?`
			body
			`:""}`,n=`query searchMyIssues(
				$authored: String!
				$assigned: String!
				$mentioned: String!
				$avatarSize: Int
			) {
				authored: search(first: 100, query: $authored, type: ISSUE) {
					nodes {
						... on Issue {
							${o}
						}
					}
				}
				assigned: search(first: 100, query: $assigned, type: ISSUE) {
					nodes {
						... on Issue {
							${o}
						}
					}
				}
				mentioned: search(first: 100, query: $mentioned, type: ISSUE) {
					nodes {
						... on Issue {
							${o}
						}
					}
				}
			}`,a=i?.search?.trim()??"";if(i?.user&&(a+=` user:${i.user}`),i?.repos!=null&&i.repos.length>0){let e="  repo:";a+=`${e}${i.repos.join(e)}`}let l="type:issue is:open archived:false";try{let o=await this.graphql(e,t,n,{authored:`${a} ${l} author:@me`.trim(),assigned:`${a} ${l} assignee:@me`.trim(),mentioned:`${a} ${l} mentions:@me`.trim(),baseUrl:i?.baseUrl,avatarSize:i?.avatarSize},s,r);if(null==o)return[];return[...(0,U.pD)([...o.assigned.nodes,...o.mentioned.nodes,...o.authored.nodes].map(function(t){return(0,H.fromGitHubIssue)(t,e)}),e=>e.url,(e,t)=>e)]}catch(t){throw this.handleException(t,e,s)}}async searchPullRequests(e,t,i,r){let s=(0,N.dQ)();try{let o=`query searchPullRequests(
	$searchQuery: String!
	$avatarSize: Int
) {
	search(first: 10, query: $searchQuery, type: ISSUE) {
		nodes {
			...on PullRequest {
				${J}
			}
		}
	}
}`,n=i?.search?.trim()??"";if(i?.user&&(n+=` user:${i.user}`),i?.repos!=null&&i.repos.length>0){let e=" repo:";n+=`${e}${i.repos.join(e)}`}let a=await this.graphql(e,t,o,{searchQuery:`is:pr is:open archived:false ${n.trim()}`,baseUrl:i?.baseUrl,avatarSize:i?.avatarSize},s,r);if(null==a)return[];return a.search.nodes.map(t=>(0,H.fromGitHubPullRequest)(t,e))}catch(t){throw this.handleException(t,e,s)}}async mergePullRequest(e,t,i,r,s,o){let n,a=(0,N.dQ)();switch(s?.mergeMethod){case E.e0.Merge:n="MERGE";break;case E.e0.Rebase:n="REBASE";break;case E.e0.Squash:n="SQUASH"}try{let l=`mutation mergePullRequest(
	$id: ID!
	$expectedSourceSha: GitObjectID!
	$mergeMethod: PullRequestMergeMethod
) {
	mergePullRequest(input: { pullRequestId: $id, expectedHeadOid: $expectedSourceSha, mergeMethod: $mergeMethod }) {
		pullRequest {
			id
		}
	}
}`,u=await this.graphql(e,t,l,{id:i,expectedSourceSha:r,mergeMethod:n,baseUrl:s?.baseUrl},a,o);return u?.pullRequest?.id===i}catch(t){throw this.handleException(t,e,a)}}};function ee(e){return e?.baseUrl==null||"https://api.github.com"===e.baseUrl}z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getAccountForCommit",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getAccountForEmail",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getDefaultBranch",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getIssueOrPullRequest",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getIssue",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getPullRequest",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getPullRequestForBranch",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getPullRequestForCommit",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"getRepositoryMetadata",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getBlame",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getBranches",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommit",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitForFile",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getBranchesWithCommits",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitCount",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getBranchWithCommit",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommits",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCommitRefs",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getTagsWithCommit",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getNextCommitRefs",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getContributors",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getDefaultBranchName",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getCurrentUser",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getComparison",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getRepositoryVisibility",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"getTags",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"resolveReference",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"searchCommits",1),z([(0,L.Yz)({args:{0:"<token>"}})],GitHubApi.prototype,"searchCommitShas",1),z([(0,L.Yz)({args:{0:e=>e?.name,1:"<token>"}})],GitHubApi.prototype,"getEnterpriseVersion",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"searchMyPullRequests",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"searchMyIssues",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"searchPullRequests",1),z([(0,L.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitHubApi.prototype,"mergePullRequest",1)},5225:(e,t,i)=>{i.d(t,{K:()=>GitHubRemote,P:()=>b});var r=i(1398),s=i(1182),o=i(8845),n=i(1555),a=i(6732),l=i(4256),u=i(4808),c=i(8027),h=i(3282),d=i(5962),p=i(4241),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let f=/\b([^/\s]+\/[^/\s]+?)(?:\\)?#([0-9]+)\b(?!]\()/g,w=/^\/([^/]+)\/([^/]+?)\/blob(.+)$/i,v=/^L(\d+)(?:-L(\d+))?$/;let GitHubRemote=class GitHubRemote extends p.u{constructor(e,t,i,r,s,o=!1){super(t,i,r,s,o),this.container=e}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api/v3`:`https://api.${this.domain}`}get issueLinkPattern(){return`${this.baseUrl}/issues/<num>`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[...super.autolinks,{prefix:"#",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!1,title:`Open Issue or Pull Request #<num> on ${this.name}`,description:`${this.name} Issue or Pull Request #<num>`},{prefix:"gh-",url:this.issueLinkPattern,alphanumeric:!1,ignoreCase:!0,title:`Open Issue or Pull Request #<num> on ${this.name}`,description:`${this.name} Issue or Pull Request #<num>`},{tokenize:(e,t,i,r,n,u)=>"plaintext"===t?e:e.replace(f,(e,h,d)=>{let p,g=(0,a.W)(`${this.protocol}://${this.domain}/${(0,l.e8)(h)}/issues/${d}`),m=` "Open Issue or Pull Request #${d} from ${h} on ${this.name}"`,f=`\0${i.size}\0`;"markdown"===t?i.set(f,`[${e}](${g}${m})`):"html"===t&&i.set(f,`<a href="${g}" title=${m}>${e}</a>`);let w=r?.get(d)?.[0];if(w?.value!=null)if(w.paused)null==u||n?.has(d)||(p=u.size+1,u.set(p,`[${(0,c.xu)()} ${this.name} Issue or Pull Request ${h}#${d} $(loading~spin)](${g}${m}")`));else{let t=w.value,i=(0,l.FV)(t.title.trim());null==u||n?.has(d)||(p=u.size+1,u.set(p,`[${(0,c.xu)(t)} **${i}**](${g}${m})\\
${s.EO.Space.repeat(5)}${e} ${t.state} ${(0,o.PI)(t.closedDate??t.createdDate)}`))}else null==u||n?.has(d)||(p=u.size+1,u.set(p,`[${(0,c.xu)()} ${this.name} Issue or Pull Request ${h}#${d}](${g}${m})`));return f}),parse:(e,t)=>{let i,r,s;for(;null!=(s=f.exec(e));){[,i,r]=s;let[e,o]=i.split("/",2);t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/issues/${r}`,alphanumeric:!1,ignoreCase:!0,title:`Open Issue or Pull Request #<num> from ${i} on ${this.name}`,description:`${this.name} Issue or Pull Request ${i}#${r}`,descriptor:{key:this.remoteKey,owner:e,name:o}})}}}]),this._autolinks}get avatarUri(){let[e]=this.splitPath(this.path);return r.Uri.parse(`https://avatars.githubusercontent.com/${e}`)}get icon(){return"github"}get id(){return"github"}get gkProviderId(){var e;return(e=this.domain,(0,u.Q_)(e,"github.com"))?"github":"githubEnterprise"}get name(){return this.formatName("GitHub")}get repoDesc(){let[e,t]=this.splitPath(this.path);return{key:this.remoteKey,owner:e,name:t}}get supportedFeatures(){return{...super.supportedFeatures,createPullRequestWithDetails:!0}}async getLocalInfoFromRemoteUri(e,t){let i,r,s,o;if(t.authority!==this.domain||!t.path.startsWith(`/${this.path}/`))return;if(t.fragment){let e=v.exec(t.fragment);if(null!=e){let[,t,s]=e;t&&(i=parseInt(t,10),s&&(r=parseInt(s,10)))}}let n=w.exec(t.path);if(null==n)return;let[,,,a]=n,l=a.indexOf("/",1);if(-1!==l){let t=a.substring(1,l);if((0,d.HH)(t)){let s=await e.getAbsoluteOrBestRevisionUri(a.substring(l),t);if(null!=s)return{uri:s,repoPath:e.path,rev:t,startLine:i,endLine:r}}else if((0,d.HH)(t,!0)){let s=await e.getAbsoluteOrBestRevisionUri(a.substring(l),t);null!=s&&(o={uri:s,repoPath:e.path,rev:t,startLine:i,endLine:r})}}let u=new Map;l=a.length;do l=a.lastIndexOf("/",l-1),s=a.substring(1,l),u.set(s,a.substring(l));while(l>0)if(u.size){let{values:t}=await e.git.branches().getBranches({filter:e=>e.remote&&u.has(e.getNameWithoutRemote())});for(let s of t){let t=s.getNameWithoutRemote(),o=u.get(t);if(null==o)continue;let n=await e.getAbsoluteOrBestRevisionUri(o.substring(l),t);if(null!=n)return{uri:n,repoPath:e.path,rev:t,startLine:i,endLine:r}}}return o}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}${i}${t}`)}async getUrlForCreatePullRequest(e,t){let{base:i,head:r,details:s}=e;s?.describeWithAI&&(s=await (0,h.ub)(this.container,e.repoPath,e,t??{source:"ai"}));let o=new URLSearchParams({expand:"1"});if(s?.title&&o.set("title",s.title),s?.description&&o.set("body",s.description),i.remote.url===r.remote.url)return i.branch?`${this.encodeUrl(`${this.baseUrl}/compare/${i.branch}...${r.branch}`)}?${o.toString()}`:`${this.encodeUrl(`${this.baseUrl}/compare/${r.branch}`)}?${o.toString()}`;let[n]=r.remote.path.split("/",1);return`${this.encodeUrl(`${this.baseUrl}/compare/${i.branch??"HEAD"}...${n}:${r.branch}`)}?${o.toString()}`}getUrlForFile(e,t,i,r){let s;return(s=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i)?`${this.encodeUrl(`${this.baseUrl}/blob/${i}/${e}`)}${s}`:t?`${this.encodeUrl(`${this.baseUrl}/blob/${t}/${e}`)}${s}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${s}`}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o)})([(0,n.B)()],GitHubRemote.prototype,"repoDesc",1);let y=/^(?:(\d+)\+)?([a-zA-Z\d-]{1,39})@users\.noreply\.(.*)$/i;function b(e){let t=y.exec(e);if(null==t)return;let[,i,r,s]=t;return{userId:i,login:r,authority:s}}},5231:(e,t,i)=>{function r(e,t){return null==t?`command:${e}`:`command:${e}?${encodeURIComponent("string"==typeof t?t:JSON.stringify(t))}`}function s(e,t){return null==t?`command:${e}`:`command:${e}?${encodeURIComponent("string"==typeof t?t:JSON.stringify(t)).replace(/([()])/g,"\\$1")}`}i.d(t,{J:()=>s,U:()=>r})},5238:(e,t,i)=>{function r(e){return null!=e&&"webview"in e&&null!=e.webview}function s(e){return null!=e&&"webview"in e&&null!=e.webview&&"webviewItem"in e}function o(e){return null!=e&&"webview"in e&&null!=e.webview&&"webviewItemGroup"in e}function n(e){return JSON.stringify(e)}i.d(t,{C9:()=>n,PH:()=>o,RR:()=>r,sc:()=>s})},5248:(e,t,i)=>{i.r(t),i.d(t,{BitbucketServerIntegration:()=>BitbucketServerIntegration});var r=i(7808),s=i(1849),o=i(8832),n=i(4269);let a=n.Mt[s.PY.BitbucketServer],l=Object.freeze({id:a.id,scopes:a.scopes});let BitbucketServerIntegration=class BitbucketServerIntegration extends o.T5{constructor(e,t,i,r){super(e,t,i),this._domain=r}authProvider=l;id=s.PY.BitbucketServer;key=`${this.id}:${this.domain}`;name="Bitbucket Data Center";get domain(){return this._domain}get apiBaseUrl(){let e=this._session?.protocol??"https:";return`${e}//${this.domain}/rest/api/1.0`}async mergeProviderPullRequest({accessToken:e},t,i){return(await this.getProvidersApi()).mergePullRequest(this.id,t,{accessToken:e,mergeMethod:i?.mergeMethod,baseUrl:this.apiBaseUrl})}async getProviderAccountForCommit(e,t,i,r){return Promise.resolve(void 0)}async getProviderAccountForEmail(e,t,i,r){return Promise.resolve(void 0)}async getProviderDefaultBranch(e,t){return Promise.resolve(void 0)}async getProviderIssueOrPullRequest({accessToken:e},t,i,r){if("issue"===r)return;let s=await this.container.integrations.get(this.id);if(s)return(await this.container.bitbucket)?.getServerPullRequestById(this,e,t.owner,t.name,i,this.apiBaseUrl,s)}async getProviderIssue(e,t,i){return Promise.resolve(void 0)}async getProviderPullRequestForBranch({accessToken:e},t,i,r){let s=await this.container.integrations.get(this.id);if(s)return(await this.container.bitbucket)?.getServerPullRequestForBranch(this,e,t.owner,t.name,i,this.apiBaseUrl,s)}async getProviderPullRequestForCommit(e,t,i){return Promise.resolve(void 0)}async getRepoInfo(e){return(await this.getProvidersApi()).getRepo(this.id,e.owner,e.name,void 0,{accessToken:this._session?.accessToken,baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata(e,t,i){return Promise.resolve(void 0)}_accounts;async getProviderCurrentAccount({accessToken:e}){if(this._accounts??=new Map,null==this._accounts.get(e)){let t=await this.getProvidersApi(),i=await t.getCurrentUser(this.id,{accessToken:e,baseUrl:this.apiBaseUrl});this._accounts.set(e,i?{provider:this,id:i.id,name:i.name??void 0,email:i.email??void 0,avatarUrl:i.avatarUrl??void 0,username:i.username??void 0}:void 0)}return this._accounts.get(e)}async searchProviderMyPullRequests(e,t){if(null!=t)return;let i=await this.getProvidersApi(),r=await this.container.integrations.get(this.id);if(!i||!r)return;let s=await i.getBitbucketServerPullRequestsForCurrentUser(this.apiBaseUrl,{accessToken:e.accessToken});return s?.map(e=>(0,n.QF)(e,r))}async searchProviderMyIssues(e,t){return Promise.resolve(void 0)}storagePrefix="bitbucket-server";async providerOnConnect(){if(null==this._session)return;let e=(0,r.Fx)(this._session.accessToken),t=this.container.storage.get(`${this.storagePrefix}:${e}:account`),i=t?.data?{...t.data,provider:this}:void 0;null==t&&null!=(i=await this.getProviderCurrentAccount(this._session))&&(await this.container.storage.deleteWithPrefix(this.storagePrefix),await this.container.storage.store(`${this.storagePrefix}:${e}:account`,{v:1,timestamp:Date.now(),data:{id:i.id,name:i.name,email:i.email,avatarUrl:i.avatarUrl,username:i.username}})),this._accounts??=new Map,this._accounts.set(this._session.accessToken,i)}providerOnDisconnect(){this._accounts=void 0}}},5277:(e,t,i)=>{function r(e,t){return`${e}|tags/${t}`}i.d(t,{gt:()=>r,oq:()=>o});let s=/^(refs\/)?tags\//i;function o(e){return{name:e.replace(s,"")}}},5307:(e,t,i)=>{i.r(t),i.d(t,{AzureDevOpsApi:()=>AzureDevOpsApi});var r=i(1398),s=i(2476),o=i(6741),n=i(2320),a=i(7019),l=i(2870),u=i(6206),c=i(4941),h=i(1003),d=i(8178),p=i(7201),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};let AzureDevOpsApi=class AzureDevOpsApi{_disposable;_workItemStates=new WorkItemStates;constructor(e){this._disposable=l.H.onDidChangeAny(e=>{(l.H.changedCore(e,["http.proxy","http.proxyStrictSSL"])||l.H.changed(e,["outputLevel","proxy"]))&&this.resetCaches()})}dispose(){this._disposable.dispose()}_proxyAgent=null;get proxyAgent(){if(!o.HZ)return null===this._proxyAgent&&(this._proxyAgent=(0,s.cQ)()),this._proxyAgent}resetCaches(){this._proxyAgent=null,this._workItemStates.clear()}async getPullRequestForBranch(e,t,i,r,s,o){let n=(0,h.dQ)(),[a,l,u]=r.split("/");try{let r=await this.request(e,t,o?.baseUrl,`${i}/${a}/_apis/git/repositories/${u}/pullRequests`,{method:"GET"},n),l=r?.value.find(e=>e.sourceRefName.endsWith(s));if(null==l)return;return(0,p.Yv)(l,e,i)}catch(e){c.Vy.error(e,n);return}}async getIssueOrPullRequest(e,t,i,r,s,o){let n=(0,h.dQ)(),[a,l,u]=r.split("/");try{let r=await this.request(e,t,o?.baseUrl,`${i}/${a}/_apis/wit/workItems/${s}`,{method:"GET"},n);if(null!=r){let s=r.fields["System.WorkItemType"],n=r.fields["System.State"],l=await this.getWorkItemStateCategory(s,n,e,t,i,a,o);return{id:r.id.toString(),type:"issue",nodeId:r.id.toString(),provider:e,createdDate:new Date(r.fields["System.CreatedDate"]),updatedDate:new Date(r.fields["System.ChangedDate"]),state:(0,p.cc)(l),closed:(0,p.XM)(l),title:r.fields["System.Title"],url:r._links.html.href}}}catch(e){if(e.original?.status!==404)return void c.Vy.error(e,n)}try{let r=await this.request(e,t,o?.baseUrl,`${i}/${a}/_apis/git/repositories/${u}/pullRequests/${s}`,{method:"GET"},n);if(null!=r)return{id:r.pullRequestId.toString(),type:"pullrequest",nodeId:r.pullRequestId.toString(),provider:e,createdDate:new Date(r.creationDate),updatedDate:new Date(r.creationDate),state:(0,p.a0)(r.status),closed:(0,p.cg)(r.status),title:r.title,url:(0,p.DR)(r)};return}catch(e){c.Vy.error(e,n);return}}async getIssue(e,t,i,r,s){let o=(0,h.dQ)();try{let n=await this.request(e,t,s?.baseUrl,`${i.resourceName}/${i.name}/_apis/wit/workItems/${r}`,{method:"GET"},o);if(null!=n){let r=n.fields["System.WorkItemType"],o=n.fields["System.State"],a=await this.getWorkItemStateCategory(r,o,e,t,i.resourceName,i.name,s);return(0,p.oQ)(n,e,i,a)}}catch(e){if(e.original?.status!==404)return void c.Vy.error(e,o)}}async getWorkItemStateCategory(e,t,i,r,s,o,n){let a=`${s}/${o}`,l=this._workItemStates.getStateCategory(a,e,t);if(null!=l)return l;let u=await this.retrieveWorkItemTypeStates(e,i,r,s,o,n);return this._workItemStates.saveTypeStates(a,e,u),this._workItemStates.getStateCategory(a,e,t)}async retrieveWorkItemTypeStates(e,t,i,r,s,o){let n=(0,h.dQ)();try{let a=await this.request(t,i,o?.baseUrl,`${r}/${s}/_apis/wit/workItemTypes/${e}/states`,{method:"GET"},n);return a?.value??[]}catch(e){return c.Vy.error(e,n),[]}}async request(e,t,i,o,a,l,u){let h,p=`${i}/${o}`;try{let i=(0,d.u)(`[AZURE] ${a?.method??"GET"} ${p}`,{log:!1}),r=this.proxyAgent;try{let i;if(null!=u){if(u.isCancellationRequested)throw new n.AL;i=new AbortController,u.onCancellationRequested(()=>i.abort())}if((h=await (0,s.Ff)(e.getIgnoreSSLErrors(),()=>(0,s.hd)(p,{headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},agent:r,signal:i?.signal,...a}))).ok)return await h.json();throw new n.QI("AzureDevOps",h)}finally{i?.stop()}}catch(i){throw i instanceof n.QI||"AbortError"===i.name?this.handleRequestError(e,t,i,l):c.Vy.isDebugging&&r.window.showErrorMessage(`AzureDevOps request failed: ${i.message}`),i}}handleRequestError(e,t,i,s){if("AbortError"===i.name||!(i instanceof n.QI))throw new n.AL(i);switch(i.status){case 404:case 410:case 422:throw new n.LN(i);case 401:throw new n.v3("azureDevOps",n.R.Unauthorized,i);case 403:throw new n.v3("azure",n.R.Forbidden,i);case 500:c.Vy.error(i,s),null!=i.response&&(e?.trackRequestException(),(0,a.wW)(`${e?.name??"AzureDevOps"} failed to respond and might be experiencing issues.${null==e||"azure"===e.id?" Please visit the [AzureDevOps status page](https://status.dev.azure.com) for more information.":""}`));return;case 502:c.Vy.error(i,s);break;default:if(i.status>=400&&i.status<500)throw new n.tk(i)}c.Vy.error(i,s),c.Vy.isDebugging&&r.window.showErrorMessage(`AzureDevOps request failed: ${i.response?.errors?.[0]?.message??i.message}`)}};f([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],AzureDevOpsApi.prototype,"getPullRequestForBranch",1),f([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],AzureDevOpsApi.prototype,"getIssueOrPullRequest",1),f([(0,u.Yz)({args:{0:e=>e.name,1:"<token>"}})],AzureDevOpsApi.prototype,"getIssue",1);let WorkItemStates=class WorkItemStates{_categories=new Map;_types=new Map;getStateCategory(e,t,i){return this._categories.get(this.getStateKey(e,t,i))}clear(){this._categories.clear(),this._types.clear()}saveTypeStates(e,t,i){for(let r of(this.clearTypeStates(e,t),this._types.set(this.getTypeKey(e,t),i),i))this._categories.set(this.getStateKey(e,t,r.name),r.category)}hasTypeStates(e,t){return this._types.has(this.getTypeKey(e,t))}clearTypeStates(e,t){let i=this._types.get(this.getTypeKey(e,t));if(null!=i)for(let r of i)this._categories.delete(this.getStateKey(e,t,r.name))}getStateKey(e,t,i){return JSON.stringify([e,t,i])}getTypeKey(e,t){return JSON.stringify([e,t])}}},5404:(e,t,i)=>{i.d(t,{GutterBlameAnnotationProvider:()=>GutterBlameAnnotationProvider});var r=i(1398),s=i(1182),o=i(8103),n=i(2870),a=i(2812),l=i(6206),u=i(9091),c=i(1003),h=i(8178),d=i(4808),p=i(7984),g=i(1573),m=i(7500),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),y=e=>{throw TypeError(e)},b=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?w(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&f(t,i,o),o},C=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&y("Object expected"),i&&(r=t[v("asyncDispose")]),void 0===r&&(r=t[v("dispose")],i&&(s=r)),"function"!=typeof r&&y("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},R=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let k=0x40000000-1;let GutterBlameAnnotationProvider=class GutterBlameAnnotationProvider extends g.z{constructor(e,t,i,r){super(e,t,"blame",i,r)}async clear(){if(await super.clear(),null!=m.I.gutterBlameHighlight)try{this.editor.setDecorations(m.I.gutterBlameHighlight,[])}catch{}}async onProvideAnnotation(e,t){var i=[];try{let e,a,l,u,g,f,w=(0,c.dQ)(),v=await this.getBlame(t?.recompute);if(null==v)return!1;let y=C(i,(0,h.u)(w)),b=n.H.get("blame"),R=(0,d.Vx)(b.format).reduce((e,t)=>(e[t.key]=t.options,e),Object.create(null));o.c.has(b.format,"tips")&&(e=await this.container.git.getBranchesAndTagsTipsLookup(v.repoPath));let k={dateFormat:null===b.dateFormat?n.H.get("defaultDateFormat"):b.dateFormat,getBranchAndTagTips:e,tokenOptions:R},S={family:n.H.get("blame.fontFamily"),size:n.H.get("blame.fontSize"),style:n.H.get("blame.fontStyle"),weight:n.H.get("blame.fontWeight")},P=b.avatars,A=n.H.get("defaultGravatarsStyle"),I=b.separateLines,D=(0,p.kM)(I,b.heatmap,b.avatars,b.format,k,S),_=[],$=new Map,T=P?new Map:void 0,E=!1;for(let e of(b.heatmap.enabled&&(g=this.getComputedHeatmap(v)),v.lines)){let t=e.line-1;if(u===e.sha){if(null==l)continue;l={...l},b.compact&&!E&&(null==f&&(f=s.EO.Space.repeat((0,d.RG)(l.renderOptions.before.contentText))),l.renderOptions={before:{...l.renderOptions.before,contentText:f}},I&&(l.renderOptions.before.textDecoration=`none;box-sizing: border-box${P?";padding: 0 0 0 18px":""}${S.family?`;font-family: ${S.family}`:""}${S.size?`;font-size: ${S.size}px`:""}`),E=!0),l.range=new r.Range(t,0,t,0),_.push(l);continue}if(E=!1,u=e.sha,a=v.commits.get(e.sha),null!=a){if(l=$.get(e.sha),null!=l){l={...l,range:new r.Range(t,0,t,0)},_.push(l);continue}l=(0,p.w)(a,b.format,k,D),null!=g&&(0,p.nx)(l,a.date,g),l.range=new r.Range(t,0,t,0),_.push(l),P&&null!=a.author.email&&await this.applyAvatarDecoration(a,l,A,T),$.set(e.sha,l)}}return y?.restart({suffix:" to compute gutter blame annotations"}),_.length&&(this.setDecorations([{decorationType:m.I.gutterBlameAnnotation,rangesOrOptions:_}]),y?.stop({suffix:" to apply all gutter blame annotations"})),this.registerHoverProviders(n.H.get("hovers.annotations")),!0}catch(e){var a=e,l=!0}finally{R(i,a,l)}}async selection(e){let t;if(!1===e||null==m.I.gutterBlameHighlight)return;let i=await this.blame;if(!i?.lines.length)return;if(e?.sha!=null)t=e.sha;else if(e?.line!=null){if(e.line>=0){let r=i.lines[e.line];t=r?.sha}}else t=(0,u.$1)(i.commits.values())?.sha;if(!t)return void this.editor.setDecorations(m.I.gutterBlameHighlight,[]);let s=(0,a.x1)(i.lines,e=>e.sha===t?this.editor.document.validateRange(new r.Range(e.line-1,0,e.line-1,k)):void 0);this.editor.setDecorations(m.I.gutterBlameHighlight,s)}async applyAvatarDecoration(e,t,i,r){let s=r.get(e.author.email??"");if(null==s){let t=(await e.getAvatarUri({defaultStyle:i,size:16})).toString(!0);s={contentText:"",height:"16px",width:"16px",textDecoration:`none;position:absolute;top:1px;left:5px;background:url(${encodeURI(t)});background-size:16px 16px;margin-left: 0 !important`},r.set(e.author.email??"",s)}t.renderOptions.after=s}};b([(0,l.Rm)()],GutterBlameAnnotationProvider.prototype,"onProvideAnnotation",1),b([(0,l.Rm)({args:!1})],GutterBlameAnnotationProvider.prototype,"selection",1)},5408:(e,t,i)=>{i.r(t),i.d(t,{VSCodeAIProvider:()=>VSCodeAIProvider});var r=i(1398),s=i(1820),o=i(2320),n=i(4941),a=i(1003),l=i(4808),u=i(3151),c=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),h=e=>{throw TypeError(e)},d=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&h("Object expected"),i&&(r=t[c("asyncDispose")]),void 0===r&&(r=t[c("dispose")],i&&(s=r)),"function"!=typeof r&&h("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},p=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let g=s.jI;let VSCodeAIProvider=class VSCodeAIProvider{constructor(e,t){this.container=e,this.connection=t,this._disposable=r.Disposable.from(this._onDidChange,r.lm.onDidChangeChatModels(()=>this._onDidChange.fire()))}id=g.id;_name;get name(){return this._name??g.name}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_disposable;dispose(){this._disposable.dispose()}async configured(e){return 0!==(await this.getModels()).length}getApiKey(e){return Promise.resolve("<not applicable>")}async getModels(){return(await r.lm.selectChatModels()).map(m)}async getChatModel(e){let t=await r.lm.selectChatModels(e.selector);return t?.[0]}async sendRequest(e,t,i,s,l){var c=[];try{let i=d(c,(0,a.bP)(`${(0,n.zu)(this)}.sendRequest`,!1)),h=await this.getChatModel(t);if(null==h)return;let p=0,g=t.maxTokens.input;for(;;)try{let e=(await s(g,p)).map(e=>"assistant"===e.role?r.LanguageModelChatMessage.Assistant(e.content):r.LanguageModelChatMessage.User(e.content)),i=await h.sendRequest(e,{justification:"GitLens leverages Copilot for AI-powered features to improve your workflow and development experience.",modelOptions:{outputTokens:t.maxTokens.output?Math.min(l.modelOptions?.outputTokens??1/0,t.maxTokens.output):l.modelOptions?.outputTokens,temperature:(0,u.dj)(t.temperature)}},l.cancellation),o="";for await(let e of i.text)o+=e;return{content:o.trim(),model:t}}catch(s){if(s instanceof o.AL)throw n.Vy.error(s,i,`Cancelled request to ${(0,u.u5)(e)}: (${t.provider.name})`),s;let r=s instanceof Error?s.message:String(s);if(s instanceof Error&&"code"in s&&"NoPermissions"===s.code)throw n.Vy.error(s,i,`User denied access to ${t.provider.name}`),new o.V9(o.zK.DeniedByUser,s);if(s instanceof Error&&"cause"in s&&s.cause instanceof Error&&(r+=`
${s.cause.message}`,s.cause.message.includes("exceeds token limit"))){if(p++<2){g-=500*p;continue}throw n.Vy.error(s,i,`Unable to ${(0,u.u5)(e)}: (${t.provider.name})`),new o.V9(o.zK.RequestTooLarge,s)}if(n.Vy.error(s,i,`Unable to ${(0,u.u5)(e)}: (${t.provider.name})`),r.includes("Model is not supported for this request"))throw new o.V9(o.zK.ModelNotSupported,s);throw Error(`Unable to ${(0,u.u5)(e)}: (${t.provider.name}${s.code?`:${s.code}`:""}) ${r}`)}}catch(e){var h=e,g=!0}finally{p(c,h,g)}}};function m(e){return{id:`${e.vendor}:${e.family}`,name:"copilot"===e.vendor?e.name:`${(0,l.ZH)(e.vendor)} ${e.name}`,vendor:e.vendor,selector:{vendor:e.vendor,family:e.family},maxTokens:{input:e.maxInputTokens,output:void 0},provider:{id:g.id,name:(0,l.ZH)(e.vendor)}}}},5462:(e,t,i)=>{i.d(t,{oN:()=>CopyRemoteResourceCommandQuickPickItem,zB:()=>OpenRemoteResourceCommandQuickPickItem,ZM:()=>y});var r=i(1398),s=i(9679),o=i(1182),n=i(2099),a=i(2320),l=i(5853),u=i(4154),c=i(3631),h=i(9181);function d(e){switch(e.type){case l.J.Branch:return"Branch";case l.J.Branches:return"Branches";case l.J.Commit:return"Commit";case l.J.Comparison:return"Comparison";case l.J.CreatePullRequest:return"Create Pull Request";case l.J.File:return"File";case l.J.Repo:return"Repository";case l.J.Revision:return"File";default:return""}}var p=i(7687),g=i(4269),m=i(4692),f=i(7864),w=i(9207),v=i(4357);let ConfigureCustomRemoteProviderCommandQuickPickItem=class ConfigureCustomRemoteProviderCommandQuickPickItem extends w.Fj{constructor(){super({label:"See how to configure a custom remote provider..."})}async execute(){await r.env.openExternal(r.Uri.parse("https://help.gitkraken.com/gitlens/gitlens-settings/#remote-provider-integration-settings"))}};let CopyOrOpenRemoteCommandQuickPickItem=class CopyOrOpenRemoteCommandQuickPickItem extends w.Fj{constructor(e,t,i,r){super({label:`$(repo) ${e.provider.path}`,description:e.name,buttons:r}),this.remote=e,this.resources=t,this.clipboard=i}async execute(){let e=(await Promise.allSettled(this.resources.map(async e=>{if(e.type===l.J.Comparison)(0,c.Zq)(e.base)===this.remote.name&&(e={...e,base:(0,c.km)(e.base)}),(0,c.Zq)(e.head)===this.remote.name&&(e={...e,head:(0,c.km)(e.head)});else if(e.type===l.J.CreatePullRequest){let t=e.base.branch;if(null==t&&(t=await (0,u.Z5)(n.m.instance,this.remote.repoPath,this.remote.name))&&(t=(0,c.km)(t)),(e={...e,base:{branch:t,remote:{path:this.remote.path,url:this.remote.url,name:this.remote.name}}}).base.remote.url!==e.head.remote.url&&!await this.remote.provider.isReadyForForCrossForkPullRequestUrls()){let e=(0,p.p)(this.remote.provider.id);if(!(e&&await this.showIntegrationConnectionPicker(e,"view")))return}}else if(e.type===l.J.File&&null!=e.branchOrTag&&("bitbucket"===this.remote.provider.id||"bitbucket-server"===this.remote.provider.id)){let{branchOrTag:t}=e,[i,r]=await Promise.allSettled([n.m.instance.git.branches(this.remote.repoPath).getBranches({filter:e=>e.name===t||e.getNameWithoutRemote()===t}),n.m.instance.git.tags(this.remote.repoPath).getTags({filter:e=>e.name===t})]),s=(0,f.Ro)(i)?.values[0]?.sha??(0,f.Ro)(r)?.values[0]?.sha;s&&(e={...e,type:l.J.Revision,sha:s})}return e}))).map(e=>{if("fulfilled"===e.status)return e.value;if(e.reason instanceof a.DD)throw e.reason}).filter(e=>void 0!==e);await (this.clipboard?this.remote.provider.copy(e):this.remote.provider.open(e))}async showIntegrationConnectionPicker(e,t){let i=[],s=r.window.createQuickPick();try{let r=g.Mt[e].name,o=(0,w.Xt)({label:`Connect to ${r}...`,detail:`Connect an integration with ${r} to create cross-repository pull requests`,picked:!0},!0),a=(0,v.Du)(v.WL.Cancel,!1,{label:"Cancel"}),l=new Promise(e=>{i.push(s.onDidHide(()=>e(void 0)),s.onDidAccept(()=>{0!==s.activeItems.length&&e(s.activeItems[0])}))});if(s.ignoreFocusOut=(0,m.dW)(),s.title=`Connect ${r} Integration`,s.placeholder=`Requires an integration with ${r} to create cross-repository pull requests`,s.matchOnDetail=!0,s.items=[o,a],s.show(),await l===o)return await n.m.instance.integrations.connectCloudIntegrations({integrationIds:[e]},{source:t})}finally{s.dispose(),i.forEach(e=>void e.dispose())}return!1}setAsDefault(){return this.remote.setAsDefault(!0)}};let CopyRemoteResourceCommandQuickPickItem=class CopyRemoteResourceCommandQuickPickItem extends w.Fj{constructor(e,t){let i=(0,h.zF)(e);super(`Copy Link to ${d(t)} for ${i?.length?i[0].name:"Remote"}${i?.length===1?"":o.EO.Ellipsis}`,new r.ThemeIcon("copy"),"gitlens.openOnRemote",[{resource:t,remotes:e,clipboard:!0}])}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage("URL copied to the clipboard")}};let OpenRemoteResourceCommandQuickPickItem=class OpenRemoteResourceCommandQuickPickItem extends w.Fj{constructor(e,t){let i=(0,h.zF)(e);super(`Open ${d(t)} on ${i?.length===1?i[0].name:`${i?.length?i[0].name:"Remote"}${o.EO.Ellipsis}`}`,new r.ThemeIcon("link-external"),"gitlens.openOnRemote",[{resource:t,remotes:e,clipboard:!1}])}};async function y(e,t,i,o,n){let a,{autoPick:l,clipboard:u,setDefault:c}={autoPick:!1,clipboard:!1,setDefault:!0,...n};if(0===o.length)a=[new ConfigureCustomRemoteProviderCommandQuickPickItem],t="No auto-detected or configured remote providers found";else{if("default"===l&&o.length>1){let e=o.find(e=>e.default);null!=e&&(o=[e])}a=o.map(e=>new CopyOrOpenRemoteCommandQuickPickItem(e,i,u,c?[s.$o]:void 0))}if(l&&1===o.length)return a[0];let h=r.window.createQuickPick();h.ignoreFocusOut=(0,m.dW)();let d=[];try{let i=await new Promise(i=>{d.push(h.onDidHide(()=>i(void 0)),h.onDidAccept(()=>{0!==h.activeItems.length&&i(h.activeItems[0])}),h.onDidTriggerItemButton(async e=>{e.button===s.$o&&e.item instanceof CopyOrOpenRemoteCommandQuickPickItem&&(await e.item.setAsDefault(),i(e.item))})),h.title=e,h.placeholder=t,h.matchOnDetail=!0,h.items=a,h.show()});if(null==i)return;return i}finally{h.dispose(),d.forEach(e=>void e.dispose())}}},5485:(e,t,i)=>{i.d(t,{Nx:()=>s});var r=i(6209);function s(e,t){return t?.once&&(e=(0,r.Oo)(e)),{dispose:e,[Symbol.dispose]:e}}},5496:(e,t,i)=>{i.d(t,{C0:()=>a,CB:()=>l,Hk:()=>u,WI:()=>c});var r=i(1182),s=i(7062),o=i(745),n=i(4808);function a(e,t=!1,i){let s=(0,o.A3)(e.path,i);return t&&("R"===e.status||"C"===e.status)&&e.originalPath?`${s} ${(0,n.eV)(r.EO.ArrowLeft,1,1)} ${e.originalPath}`:s}function l(e,t={}){return(0,s.j)(e.path,t)}function u(e,t){return e.originalPath?(0,o.Uf)(e.originalPath,t)[0]:""}function c(e,t){return(0,o.Uf)(e.path,t)[0]}},5539:(e,t,i)=>{function r(e,t,i){let r,s,o,n,a,l,u,c,h,d,p=0;null!=i&&({edges:l,maxWait:u,signal:c,aggregator:h}=i);let g="leading"===(l??="trailing")||"both"===l,m="trailing"===l||"both"===l;function f(){if(null!=r){p=Date.now();let t=r,i=d;return d=void 0,r=void 0,o=e.apply(i,t)}}function w(){null!=n&&(clearTimeout(n),n=void 0)}function v(){null!=a&&(clearTimeout(a),a=void 0)}function y(){w(),v(),d=void 0,r=void 0,s=void 0,p=0}function b(...e){if(c?.aborted)return;let i=Date.now();null!=h&&null!=r?r=h(r,e):(d=this,r=e);let l=null==n&&null==a;s=i,w();let v=Date.now();if(s=v,n=setTimeout(()=>{n=void 0,function(e){let i=e-(s??0),r=e-p;return null==s||i>=t||i<0||null!=u&&r>=u}(Date.now())&&m&&f(),y()},t),null!=u&&!a){let e=u-(v-p);e>0?a=setTimeout(()=>{a=void 0,m&&null!=r&&f(),p=Date.now()},e):(m&&null!=r&&f(),y())}return g&&l?f():o}return b.cancel=y,b.flush=function(){return w(),v(),f()},b.pending=function(){return null!=n||null!=a},c?.addEventListener("abort",y,{once:!0}),b}i.d(t,{s:()=>r})},5567:(e,t,i)=>{i.d(t,{RG:()=>c,Ts:()=>u,_e:()=>l});var r=i(1398),s=i(2141),o=i(1705),n=i(8219),a=i(7660);async function l(e,t,i){try{if(e instanceof n.LN)return await e.git.status().abortPausedOperation?.(t);return await e.git.status(t).abortPausedOperation?.(i)}catch(e){r.window.showErrorMessage(e.message)}}async function u(e,t){return h(e,t)}async function c(e,t){return h(e,t,!0)}async function h(e,t,i=!1){try{if(e instanceof n.LN)return await e.git.status().continuePausedOperation?.(i?{skip:!0}:void 0);return await e.git.status(t).continuePausedOperation?.(i?{skip:!0}:void 0)}catch(i){if(i instanceof o.Vu&&i.reason===o.JW.EmptyCommit){let o;try{let i=e instanceof n.LN?e:e.git.getRepository(t);o=await i?.git.status().getPausedOperationStatus?.(),o??=await i?.waitForRepoChange(500).then(()=>i?.git.status().getPausedOperationStatus?.())}catch{}o??=i.operation;let l=(0,a.M4)(o.incoming,{icon:!1,label:!0,quoted:!0}),u={title:"Skip"};if(await r.window.showInformationMessage(`The ${o.type} operation cannot be continued because ${l} resulted in an empty commit.

Do you want to skip ${l}?`,{modal:!0},u,{title:"Cancel",isCloseAffordance:!0})===u)return void h(e,t,!0);(0,s.RS)("gitlens.showCommitsView");return}r.window.showErrorMessage(i.message)}}},5581:(e,t,i)=>{i.d(t,{TimelineWebviewProvider:()=>TimelineWebviewProvider});var r=i(1398),s=i(1182),o=i(2624),n=i(8219),a=i(1838),l=i(2141),u=i(2870),c=i(745),h=i(4283),d=i(8845),p=i(6206),g=i(5539),m=i(9091),f=i(9638),w=i(7864),v=i(1510),y=i(1673),b=i(486);let C="timeline",R=new b.Q2(C,"point/open"),k=new b.Q2(C,"period/update"),S=new b.C1(C,"didChange");var P=Object.defineProperty,A=Object.getOwnPropertyDescriptor,I=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?A(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&P(t,i,o),o};let TimelineWebviewProvider=class TimelineWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._context={uri:void 0,period:"3|M",etagRepositories:this.container.git.etag,etagRepository:0,etagSubscription:this.container.subscription.etag},this.host.isHost("editor")?this._disposable=r.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)):(this.host.description=s.lD,this._disposable=r.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),r.window.tabGroups.onDidChangeTabGroups(this.onTabsChanged,this),r.window.tabGroups.onDidChangeTabs(this.onTabsChanged,this),this.container.events.on("file:selected",(0,g.s)(this.onFileSelected,250),this)))}_context;_disposable;get activeTabUri(){return(0,h.ek)(r.window.tabGroups.activeTabGroup.activeTab)}dispose(){this._disposable.dispose()}onReloaded(){this.updateState(!0)}canReuseInstance(...e){let t,[i]=e;return null!=i?i instanceof r.Uri?t=i:(0,v.JB)(i)?t=i.uri:(0,y.c)(i)&&null!=i.state.uri&&(t=r.Uri.parse(i.state.uri)):t=this.activeTabUri,t?.toString()===this._context.uri?.toString()||void 0}getSplitArgs(){return null!=this._context.uri?[this._context.uri]:[]}getTelemetryContext(){return{...this.host.getTelemetryContext(),"context.period":this._context.period}}onShowing(e,t,...i){let s,[o]=i;null!=o&&(o instanceof r.Uri?s=o:(0,v.JB)(o)?s=o.uri:(0,y.c)(o)&&(this._context.period=o.state.period,this.host.isHost("editor")&&(s=null!=o.state.uri?r.Uri.parse(o.state.uri):void 0))),this.updateUri(s??this.activeTabUri,!0),e||this.updateState();let n=(0,f.Bq)(u.H.get("visualHistory"),"context.config",{joinArrays:!0});return[!0,{...this.getTelemetryContext(),...n,"context.period":this._context.period}]}includeBootstrap(){return this.getState(this._context)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,l.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0),this),(0,l.Lb)(`${this.host.id}.openInTab`,()=>{null!=this._context.uri&&((0,l.RS)("gitlens.showFileInTimeline",this._context.uri),this.container.telemetry.sendEvent("timeline/action/openInEditor",this.getTelemetryContext()))},this)),e}onVisibilityChanged(e){e&&this.host.isHost("view")&&this.updateUri(this.activeTabUri)}async onMessageReceived(e){switch(!0){case R.is(e):{if(null==e.params.data||!e.params.data.selected||null==this._context.uri)return;let t=this.container.git.getRepository(this._context.uri);if(null==t)return;let i=await t.git.commits().getCommit(e.params.data.id);if(null==i)return;this.container.events.fire("commit:selected",{commit:i,interaction:"active",preserveFocus:!0,preserveVisibility:!1},{source:this.host.id}),this.container.telemetry.sendEvent("timeline/commit/selected",this.getTelemetryContext()),this.container.views.commitDetails.ready||this.container.views.commitDetails.show({preserveFocus:!0},{commit:i,interaction:"active",preserveVisibility:!1});break}case k.is(e):if(this._context.period===e.params.period)return;this.container.telemetry.sendEvent("timeline/period/changed",{...this.getTelemetryContext(),"period.old":this._context.period,"period.new":e.params.period}),this._context.period=e.params.period,this.updateState(!0)}}onTabsChanged(){this.updateUri(this.activeTabUri)}onFileSelected(e){if(null==e.data)return;let t=e.data.uri;null==t||this.container.git.isTrackable(t)||(t=void 0),this.updateUri(this.activeTabUri)}onRepositoriesChanged(e){this._context.etagRepositories!==e.etag&&(this._context.etagRepositories=e.etag,this.updateState())}onRepositoryChanged(e){e.changed(n.Z_.Heads,n.Z_.Index,n.Ti.Any)&&this._context.etagRepository!==e.repository.etag&&(this._context.etagRepository=e.repository.etag,this.updateState())}onSubscriptionChanged(e){this._context.etagSubscription!==e.etag&&(this._context.etagSubscription=e.etag,this.updateState())}async getState(e){let t=u.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",i=u.H.get("defaultDateShortFormat")??"short",r=e.period??"3|M",n=null!=e.uri?await o.nk.fromUri(e.uri):void 0,a=n?.repoPath,l=null!=e.uri&&await (0,c.ZA)(e.uri);if(this.host.isHost("editor")){let e=l?"Visual Folder History":"Visual File History";this.host.title=null==n?e:`${e}: ${n.fileName}`}else this.host.description=n?.fileName??s.lD;let h=await this.container.git.access("timeline",a);return!1===h.allowed?{...this.host.baseWebviewState,dataset:Promise.resolve(function(){let e=[],t=["Eric Amodio","Justin Roberts","Keith Daulton","Ramin Tadayon","Ada Lovelace","Grace Hopper"];for(let i=0;i<10;i++){let r=new Date(new Date().getTime()-Math.floor(7776e6*Math.random()));e.push({commit:String(i),author:t[Math.floor(Math.random()*t.length)],date:r.toISOString(),message:"",additions:0===i?2:9===i?50:Math.floor(20*Math.random())+1,deletions:0===i?1:9===i?25:Math.floor(20*Math.random())+1,sort:r.getTime()})}return e.sort((e,t)=>t.sort-e.sort)}()),period:r,title:"src/app/index.ts",sha:void 0,uri:e.uri?.toString(),uriType:l?"folder":"file",dateFormat:t,shortDateFormat:i,access:h}:null==e.uri||null==n||null==a?{...this.host.baseWebviewState,period:r,title:n?.relativePath,sha:n?.shortSha,uri:e.uri?.toString(),uriType:l?"folder":"file",dateFormat:t,shortDateFormat:i,access:h}:{...this.host.baseWebviewState,dataset:this.getDataset(n,r),period:r,title:n.relativePath,sha:n.shortSha,uri:e.uri.toString(),uriType:l?"folder":"file",dateFormat:t,shortDateFormat:i,access:h}}async getDataset(e,t){let i=e.repoPath,[s,o]=await Promise.allSettled([this.container.git.config(i).getCurrentUser(),this.container.git.commits(i).getLogForPath(e.fsPath,e.sha,{limit:0,since:(function(e){let t;if("all"===e)return;let[i,r]=e.split("|");switch(r){case"D":t=(0,d.Tl)(new Date,{days:-parseInt(i,10)});break;case"M":t=(0,d.Tl)(new Date,{months:-parseInt(i,10)});break;case"Y":t=(0,d.Tl)(new Date,{years:-parseInt(i,10)});break;default:t=(0,d.Tl)(new Date,{months:-3})}return t.getHours()>=12&&t.setDate(t.getDate()+1),t.setHours(0,0,0,0),t})(t)?.toISOString()})]),n=(0,w.Ro)(o);if(null==n)return[];let l=(0,w.Ro)(s),c=[...(0,m.pb)(n.commits.values(),e=>e.file?.stats==null&&1!==(0,a.Zx)(e.stats?.files))];if(0!==c.length){let t=u.H.get("visualHistory.queryLimit")??20,i=this.container.git.getRepository(e),s=i?.provider.name;c.length>t&&(r.window.showWarningMessage(`Unable able to show more than the first ${t} commits for the specified time period because of ${s?`${s} `:""}rate limits.`),c=c.slice(0,20)),await Promise.allSettled(c.map(e=>e.ensureFullDetails()))}let h=l?.name?`${l.name} (you)`:"You",p=[];for(let e of n.commits.values()){let t=e.file?.stats??(1===(0,a.Zx)(e.stats?.files)?e.stats:void 0);p.push({author:"You"===e.author.name?h:e.author.name,additions:t?.additions,deletions:t?.deletions,commit:e.sha,date:e.date.toISOString(),message:e.message??e.summary,sort:e.date.getTime()})}return p.sort((e,t)=>t.sort-e.sort),p}updateUri(e,t){let i;if(null!=e){let t=this.container.git.getRepository(e);i=t?.etag??0}else i=0;if(this._context.etagRepository!==i||this._context.uri?.toString()!==e?.toString()){if(this._context.etagRepository=i,this._context.uri=e,t)return;this.container.telemetry.sendEvent("timeline/editor/changed",this.getTelemetryContext()),this.updateState()}}_notifyDidChangeStateDebounced=void 0;updateState(e=!1){if(e)return void this.notifyDidChangeState();this._notifyDidChangeStateDebounced??=(0,g.s)(this.notifyDidChangeState.bind(this),500),this._notifyDidChangeStateDebounced()}async notifyDidChangeState(){return this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(S,{state:await this.getState(this._context)})}};I([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onTabsChanged",1),I([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onFileSelected",1),I([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onRepositoriesChanged",1),I([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onRepositoryChanged",1),I([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"onSubscriptionChanged",1),I([(0,p.Yz)({args:!1})],TimelineWebviewProvider.prototype,"getState",1),I([(0,p.Yz)()],TimelineWebviewProvider.prototype,"updateState",1),I([(0,p.Yz)()],TimelineWebviewProvider.prototype,"notifyDidChangeState",1)},5615:(e,t,i)=>{var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==i.g)return i.g;throw Error("unable to locate global object")}();e.exports=t=r.fetch,r.fetch&&(t.default=r.fetch.bind(r)),t.Headers=r.Headers,t.Request=r.Request,t.Response=r.Response},5628:(e,t,i)=>{i.d(t,{h:()=>LocalWorkspace});let LocalWorkspace=class LocalWorkspace{constructor(e,t,i,r,s,o){this.container=e,this.id=t,this.name=i,this.repositoryDescriptors=r,this.current=s,this._localPath=o,this._disposable=this.container.git.onDidChangeRepositories(this.resetRepositoriesByName,this)}type="local";_localPath;_repositoriesByName;_disposable;dispose(){this._disposable.dispose()}get shared(){return!1}get localPath(){return this._localPath}resetRepositoriesByName(){this._repositoriesByName=void 0}async getRepositoriesByName(e){return(null==this._repositoriesByName||e?.force)&&(this._repositoriesByName=await this.container.workspaces.resolveWorkspaceRepositoriesByName(this.id,{resolveFromPath:!0,usePathMapping:!0})),this._repositoriesByName}getRepositoryDescriptors(){return Promise.resolve(this.repositoryDescriptors)}getRepositoryDescriptor(e){return Promise.resolve(this.repositoryDescriptors.find(t=>t.name===e))}setLocalPath(e){this._localPath=e}}},5700:(e,t,i)=>{i.r(t),i.d(t,{GitKrakenProvider:()=>GitKrakenProvider});var r=i(2476),s=i(1820),o=i(2320),n=i(6206),a=i(4941),l=i(1003),u=i(8730),c=i(3151),h=Object.defineProperty,d=Object.getOwnPropertyDescriptor;let GitKrakenProvider=class GitKrakenProvider extends u.G{id=s.jh.id;name=s.jh.name;descriptor=s.jh;config={};async getApiKey(e){let t=await this.container.subscription.getAuthenticationSession();return t?.accessToken?t.accessToken:e?void 0:await (0,c.G5)(this.container,e)?(t=await this.container.subscription.getAuthenticationSession(),t?.accessToken):void 0}async getModels(){let e=(0,l.dQ)();try{let e=this.container.urls.getGkAIApiUrl("providers/message-prompt"),t=await (0,r.hd)(e,{headers:await this.connection.getGkHeaders(void 0,void 0,{Accept:"application/json"})});if(!t.ok)throw Error(`Getting models (${e}) failed: ${t.status} (${t.statusText})`);let i=await t.json();if(null!=i.error)throw Error(`Getting models (${e}) failed: ${String(i.error)}`);return i.data.map(e=>({id:e.modelId,name:e.modelName,maxTokens:{input:e.maxInputTokens,output:e.maxOutputTokens},provider:s.jh,default:e.preferred,temperature:null}))}catch(t){t instanceof o.WT||a.Vy.error(t,e,"Unable to get models")}return[]}getUrl(e){return this.container.urls.getGkAIApiUrl("chat/completions")}getHeaders(e,t,i,r){return this.connection.getGkHeaders(t,void 0,{Accept:"application/json","GK-Action":e})}async handleFetchFailure(e,t,i,r,s){let n,a,l;try{n=await e.json()}catch{}let u=n?.error?.message||e.statusText;switch([a,l]=n?.error?.code?.split(".")??[],a=a?parseInt(a,10):e.status,l=l?parseInt(l,10):0,a){case 400:case 404:case 408:case 499:case 500:default:throw Error(`(${this.name}) ${a}.${l}: ${u}`);case 401:throw new o.WT;case 403:if(2===l){let e=n?.error?.data;throw null!=e?.entitlementId&&(u+=`; entitlement=${e.entitlementId} ${JSON.stringify(e)}`),new o.V9(e?.entitlementValue?o.zK.UserQuotaExceeded:o.zK.NoEntitlement,Error(`(${this.name}) ${a}.${l}: ${u}`))}if(3===l)throw new o.V9(o.zK.DeniedByOrganization,Error(`(${this.name}) ${a}.${l}: ${u}`));throw new o.V9(o.zK.Unauthorized,Error(`(${this.name}) ${a}.${l}: ${u}`));case 413:if(1===l){if(r<2)return{retry:!0,maxInputTokens:s-200*(r||1)};throw new o.V9(o.zK.RequestTooLarge,Error(`(${this.name}) ${a}.${l}: ${u}`))}throw Error(`(${this.name}) ${a}.${l}: ${u}`);case 429:if(1===l)throw new o.V9(o.zK.RateLimitExceeded,Error(`(${this.name}) ${a}.${l}: ${u}`));throw Error(`(${this.name}) ${a}.${l}: ${u}`);case 503:if(1===l&&"Agent Error: too many requests"===u)throw new o.V9(o.zK.ServiceCapacityExceeded,Error(`(${this.name}) ${a}.${l}: ${u}`));throw Error(`(${this.name}) ${a}.${l}: ${u}`)}}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?d(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&h(t,i,o)})([(0,n.Yz)()],GitKrakenProvider.prototype,"getModels",1)},5759:(e,t,i)=>{function r(e){return null!=e&&null!=s(e)}function s(e,t){let i,r,s=e.match(/([^/]+\/[^/]+)\/(?:pull)\/(\d+)/);return null!=s&&(i=s[1],r=s[2]),null==r&&null!=(s=e.match(/(?:\/|^)(?:pull)\/(\d+)/))&&(r=s[1]),null!=r?{ownerAndRepo:i,prNumber:r,provider:t}:void 0}i.d(t,{X:()=>r,h:()=>s})},5772:(e,t,i)=>{i.r(t),i.d(t,{DeepSeekProvider:()=>DeepSeekProvider});var r=i(1820),s=i(8730);let o=[{id:"deepseek-chat",name:"DeepSeek-V3",maxTokens:{input:65536,output:8192},provider:r.Fv,default:!0,temperature:0},{id:"deepseek-reasoner",name:"DeepSeek-R1",maxTokens:{input:65536,output:8192},provider:r.Fv,temperature:0}];let DeepSeekProvider=class DeepSeekProvider extends s.G{id=r.Fv.id;name=r.Fv.name;descriptor=r.Fv;config={keyUrl:"https://platform.deepseek.com/api_keys",keyValidator:/(?:sk-)?[a-zA-Z0-9]{32,}/};getModels(){return Promise.resolve(o)}getUrl(e){return"https://api.deepseek.com/v1/chat/completions"}}},5784:(e,t,i)=>{i.r(t),i.d(t,{GitLabIntegration:()=>GitLabIntegration,GitLabSelfHostedIntegration:()=>GitLabSelfHostedIntegration});var r=i(1398),s=i(1849),o=i(6206),n=i(9091),a=i(4793),l=i(8832),u=i(6239),c=i(4045),h=i(4269),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let g=h.Mt[s.Q7.GitLab],m=Object.freeze({id:g.id,scopes:g.scopes}),f=h.Mt[s.PY.GitLabSelfHosted],w=Object.freeze({id:f.id,scopes:f.scopes}),v=h.Mt[s.PY.CloudGitLabSelfHosted],y=Object.freeze({id:v.id,scopes:v.scopes});let GitLabIntegrationBase=class GitLabIntegrationBase extends l.T5{async getProviderAccountForCommit({accessToken:e},t,i,r){return(await this.container.gitlab)?.getAccountForCommit(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i,r){return(await this.container.gitlab)?.getAccountForEmail(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e},t){return(await this.container.gitlab)?.getDefaultBranch(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t,i){return(await this.container.gitlab)?.getIssueOrPullRequest(this,e,t.owner,t.name,Number(i),{baseUrl:this.apiBaseUrl})}async getProviderIssue({accessToken:e},t,i){let r=await this.container.gitlab,o=await this.getProvidersApi(),n=this.id===s.PY.GitLabSelfHosted||this.id===s.PY.CloudGitLabSelfHosted;if(!r||!t||!i||!await r.getProjectId(this,e,t.owner,t.name,this.apiBaseUrl,void 0))return;let a=await o.getIssue(this.id,{namespace:t.owner,name:t.name,number:i},{accessToken:e,isPAT:n,baseUrl:n?`https://${this.domain}`:void 0}),l=null!=a?(0,h.Y9)(a,this):void 0;return null!=l?{...l,type:"issue"}:void 0}async getProviderPullRequestForBranch({accessToken:e},t,r,s){let{include:o,...n}=s??{},a=(await Promise.resolve().then(i.bind(i,4045))).toGitLabMergeRequestState;return(await this.container.gitlab)?.getPullRequestForBranch(this,e,t.owner,t.name,r,{...n,include:o?.map(e=>a(e)),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t,i){return(await this.container.gitlab)?.getPullRequestForCommit(this,e,t.owner,t.name,i,{baseUrl:this.apiBaseUrl})}async getProviderPullRequest({accessToken:e},t,i){return(await this.container.gitlab)?.getPullRequest(this,e,t.owner,t.name,parseInt(i,10),{baseUrl:this.apiBaseUrl})}async getRepoInfo(e){return(await this.getProvidersApi()).getRepo(this.id,e.owner,e.name,void 0,{accessToken:this._session?.accessToken})}async getProviderRepositoryMetadata({accessToken:e},t,i){return(await this.container.gitlab)?.getRepositoryMetadata(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl},i)}async searchProviderMyPullRequests({accessToken:e},t){let i,r=await this.getProvidersApi(),o=this.id===s.PY.GitLabSelfHosted||this.id===s.PY.CloudGitLabSelfHosted,a=(await this.getCurrentAccount())?.username;if(!a)return Promise.resolve([]);let l=await r.getPullRequestsForUser(this.id,a,{accessToken:e,isPAT:o,baseUrl:o?`https://${this.domain}`:void 0});if(null==l)return Promise.resolve([]);if(null!=t){let e=new Map;for(let i of t)e.set(`${i.owner}/${i.name}`,i);i=l.values.filter(t=>null!=e.get(`${t.repository.owner.login}/${t.repository.name}`))}else i=l.values;return[...(0,n.pD)([...i.filter(e=>{let t=e.assignees?.some(e=>e.username===a),i=e.reviews?.some(e=>e.reviewer?.username===a||e.state===h.lE.ReviewRequested),r=e.author?.username===a;return t||i||r}).map(e=>(0,c.fromGitLabMergeRequestProvidersApi)(e,this))],e=>e.url,(e,t)=>e)]}async searchProviderMyIssues({accessToken:e},t){let i=await this.container.gitlab,r=await this.getProvidersApi(),o=this.id===s.PY.GitLabSelfHosted||this.id===s.PY.CloudGitLabSelfHosted;if(!i||!t)return;let n=(await Promise.allSettled(t.map(t=>i.getProjectId(this,e,t.owner,t.name,this.apiBaseUrl,void 0))??[])).map(e=>"fulfilled"===e.status?e.value:void 0).filter(e=>null!=e);return(await r.getIssuesForRepos(this.id,n,{accessToken:e,isPAT:o,baseUrl:o?`https://${this.domain}`:void 0})).values.map(e=>(0,h.Y9)(e,this)).filter(e=>null!=e)}async searchProviderPullRequests({accessToken:e},t,i,r){let s=await this.container.gitlab;if(s)return s.searchPullRequests(this,e,{search:t,repos:i?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl},r)}async mergeProviderPullRequest({accessToken:e},t,i){if(!this.isPullRequest(t))return!1;let r=await this.getProvidersApi(),o=this.id===s.PY.GitLabSelfHosted||this.id===s.PY.CloudGitLabSelfHosted;try{return await r.mergePullRequest(this.id,t,{...i,isPAT:o,baseUrl:o?`https://${this.domain}`:void 0,accessToken:e})}catch(e){return this.showMergeErrorMessage(e),!1}}async showMergeErrorMessage(e){let t="Reauthenticate";await r.window.showErrorMessage(`${e.message}. Would you like to try reauthenticating to provide additional access? Your token needs to have the 'api' scope to perform merge.`,t)===t&&await this.reauthenticate()}isPullRequest(e){return null!=e.refs}async getProviderCurrentAccount({accessToken:e}){let t=await this.getProvidersApi(),i=this.id===s.PY.GitLabSelfHosted||this.id===s.PY.CloudGitLabSelfHosted,r=await t.getCurrentUser(this.id,{accessToken:e,isPAT:i,baseUrl:i?`https://${this.domain}`:void 0});if(null!=r)return{provider:{id:this.id,name:this.name,domain:this.domain,icon:this.icon},id:r.id,name:r.name||void 0,email:r.email||void 0,avatarUrl:r.avatarUrl||void 0,username:r.username||void 0}}getProviderPullRequestIdentityFromMaybeUrl(e){return(0,u.f)(e,this.id)}};let GitLabIntegration=class GitLabIntegration extends GitLabIntegrationBase{authProvider=m;id=s.Q7.GitLab;key=this.id;name="GitLab";get domain(){return g.domain}get apiBaseUrl(){return"https://gitlab.com/api"}access(){return Promise.resolve(!0)}};let GitLabSelfHostedIntegration=class GitLabSelfHostedIntegration extends GitLabIntegrationBase{constructor(e,t,i,r,o){super(e,t,i),this._domain=r,this.id=o,this.key=`${this.id}:${this.domain}`,this.authProvider=this.id===s.PY.GitLabSelfHosted?w:y}authProvider=w;key;name="GitLab Self-Hosted";get domain(){return this._domain}get apiBaseUrl(){return`https://${this._domain}/api`}async connect(e){return!!await (0,a.KH)(this.container,`Rich integration with ${this.name} is a Pro feature.`,{source:"integrations",detail:{action:"connect",integration:this.id}})&&super.connect(e)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?p(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&d(t,i,o)})([(0,o.Rm)()],GitLabSelfHostedIntegration.prototype,"connect",1)},5818:(e,t,i)=>{i.d(t,{DQ:()=>m,K2:()=>y,Qj:()=>f,U0:()=>d,eu:()=>g,jZ:()=>w,pF:()=>p,sr:()=>v});var r,s=i(6606),o=i(9388),n=i(6206),a=i(6209),l=i(4941),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor,h=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o},d=((r=d||{}).ActiveFileHistory="gitlens:history:active:file",r.ActiveLineHistory="gitlens:history:active:line",r.AutolinkedItems="gitlens:autolinked:items",r.AutolinkedItem="gitlens:autolinked:item",r.Branch="gitlens:branch",r.Branches="gitlens:branches",r.BranchOrTagFolder="gitlens:pseudo:folder",r.BranchStatusAheadOfUpstream="gitlens:status-branch:upstream:ahead",r.BranchStatusBehindUpstream="gitlens:status-branch:upstream:behind",r.BranchStatusMissingUpstream="gitlens:status-branch:upstream:missing",r.BranchStatusNoUpstream="gitlens:status-branch:upstream:none",r.BranchStatusSameAsUpstream="gitlens:status-branch:upstream:same",r.BranchStatusFiles="gitlens:status-branch:files",r.CodeSuggestions="gitlens:drafts:code-suggestions",r.Commit="gitlens:commit",r.Commits="gitlens:commits",r.CommitsCurrentBranch="gitlens:commits:current-branch",r.Compare="gitlens:compare",r.CompareBranch="gitlens:compare:branch",r.ComparePicker="gitlens:compare:picker",r.ComparePickerWithRef="gitlens:compare:picker:ref",r.CompareResults="gitlens:compare:results",r.CompareResultsCommits="gitlens:compare:results:commits",r.Contributor="gitlens:contributor",r.Contributors="gitlens:contributors",r.DateMarker="gitlens:date-marker",r.Draft="gitlens:draft",r.File="gitlens:file",r.FileHistory="gitlens:history:file",r.Folder="gitlens:folder",r.Grouping="gitlens:grouping",r.LaunchpadItem="gitlens:launchpad:item",r.LineHistory="gitlens:history:line",r.MergeConflictCurrentChanges="gitlens:merge-conflict:current",r.MergeConflictIncomingChanges="gitlens:merge-conflict:incoming",r.Message="gitlens:message",r.MessageSignIn="gitlens:message:signin",r.Pager="gitlens:pager",r.PausedOperationCherryPick="gitlens:paused-operation:cherry-pick",r.PausedOperationMerge="gitlens:paused-operation:merge",r.PausedOperationRebase="gitlens:paused-operation:rebase",r.PausedOperationRevert="gitlens:paused-operation:revert",r.PullRequest="gitlens:pullrequest",r.Reflog="gitlens:reflog",r.ReflogRecord="gitlens:reflog-record",r.Remote="gitlens:remote",r.Remotes="gitlens:remotes",r.Repositories="gitlens:repositories",r.Repository="gitlens:repository",r.RepositoryFolder="gitlens:repo-folder",r.ResultsFile="gitlens:file:results",r.ResultsFiles="gitlens:results:files",r.SearchAndCompare="gitlens:searchAndCompare",r.SearchResults="gitlens:search:results",r.SearchResultsCommits="gitlens:search:results:commits",r.Stash="gitlens:stash",r.Stashes="gitlens:stashes",r.StatusFileCommits="gitlens:status:file:commits",r.StatusFiles="gitlens:status:files",r.StatusAheadOfUpstream="gitlens:status:upstream:ahead",r.StatusBehindUpstream="gitlens:status:upstream:behind",r.StatusMissingUpstream="gitlens:status:upstream:missing",r.StatusNoUpstream="gitlens:status:upstream:none",r.StatusSameAsUpstream="gitlens:status:upstream:same",r.Tag="gitlens:tag",r.Tags="gitlens:tags",r.UncommittedFiles="gitlens:uncommitted:files",r.Workspace="gitlens:workspace",r.WorkspaceMissingRepository="gitlens:workspaceMissingRepository",r.Workspaces="gitlens:workspaces",r.Worktree="gitlens:worktree",r.Worktrees="gitlens:worktrees",r);function p(e,t){let i="";return t.root&&(i+="/root"),null!=t.workspace&&(i+=`/ws/${t.workspace.id}`),null!=t.wsRepositoryDescriptor&&(i+=`/wsrepo/${t.wsRepositoryDescriptor.id}`),null!=t.repository&&(i+=`/repo/${t.repository.id}`),null!=t.worktree&&(i+=`/worktree/${t.worktree.uri.path}`),null!=t.remote&&(i+=`/remote/${t.remote.name}`),null!=t.tag&&(i+=`/tag/${t.tag.id}`),null!=t.branch&&(i+=`/branch/${t.branch.id}`),null!=t.branchStatus&&(i+=`/branch-status/${t.branchStatus.upstream?.name??"-"}`),null!=t.branchStatusUpstreamType&&(i+=`/branch-status-direction/${t.branchStatusUpstreamType}`),null!=t.launchpadGroup?(i+=`/lp/${t.launchpadGroup}`,null!=t.launchpadItem&&(i+=`/${t.launchpadItem.type}/${t.launchpadItem.uuid}`)):null!=t.launchpadItem&&(i+=`/lp/${s.Nm.get(s.P5.get(t.launchpadItem.suggestedActionCategory))}/${t.launchpadItem.type}/${t.launchpadItem.uuid}`),null!=t.pullRequest&&(i+=`/pr/${t.pullRequest.id}`),null!=t.pausedOperation&&(i+=`/paused-operation/${t.pausedOperation}`),null!=t.reflog&&(i+=`/reflog/${t.reflog.sha}+${t.reflog.selector}+${t.reflog.command}+${t.reflog.commandArgs??""}+${t.reflog.date.getTime()}`),null!=t.contributor&&(i+=`/contributor/${t.contributor.id??`${t.contributor.username}+${t.contributor.email}+${t.contributor.name}`}`),null!=t.autolinksId&&(i+=`/autolinks/${t.autolinksId}`),null!=t.comparisonId&&(i+=`/comparison/${t.comparisonId}`),null!=t.searchId&&(i+=`/search/${t.searchId}`),null!=t.commit&&(i+=`/commit/${t.commit.sha}`),null!=t.file&&(i+=`/file/${t.file.path}+${t.file.status}`),null!=t.draft&&(i+=`/draft/${t.draft.id}`),`gitlens://viewnode/${e}${i}`}let g=class{constructor(e,t,i,r){this.type=e,this.view=i,this.parent=r,this._uri=t}is(e){return this.type===e}isAny(...e){return e.includes(this.type)}_uniqueId;splatted=!1;_disposed=!1;dispose(){this._disposed=!0}get id(){return this._uniqueId}_context;get context(){return this._context??this.parent?.context??{}}updateContext(e,t=!1){this._context=this.getNewContext(e,t)}getNewContext(e,t=!1){return{...t?this.parent?.context:this.context,...e}}toString(){return(0,l.zu)(this)}_uri;get uri(){return this._uri}getParent(){return this.parent?.splatted?this.parent?.getParent():this.parent}getCommand(){}triggerChange(e=!1,t=!1,i){return this._disposed?Promise.resolve():this.splatted&&null!=this.parent&&this.parent!==i?this.parent.triggerChange(e,t):this.view.refreshNode(this,e,t)}deleteState(e){if(null==this.id)throw Error("Id is required to delete state");this.view.nodeState.deleteState(this.id,e)}getState(e){if(null==this.id)throw Error("Id is required to get state");return this.view.nodeState.getState(this.id,e)}storeState(e,t,i){if(null==this.id)throw Error("Id is required to store state");this.view.nodeState.storeState(this.id,e,t,i)}};function m(e){return(0,a.is)(e,"loadMore")}function f(e){return(0,a.is)(e,"onDidChangeAutoRefresh")}function w(e){return"function"==typeof e.edit}function v(e){return"function"==typeof e.dismissNode}function y(e){return null!=e&&"repoPath"in e&&"string"==typeof e.repoPath?e.repoPath:void 0}h([(0,o.G)(),(0,n.Yz)()],g.prototype,"triggerChange",1),g=h([(0,n.Is)((e,t)=>`${t}${null!=e.id?`(${e.id})`:""}`)],g)},5853:(e,t,i)=>{i.d(t,{J:()=>s});var r,s=((r=s||{}).Branch="branch",r.Branches="branches",r.Commit="commit",r.Comparison="comparison",r.CreatePullRequest="createPullRequest",r.File="file",r.Repo="repo",r.Revision="revision",r)},5962:(e,t,i)=>{i.d(t,{HH:()=>f,KH:()=>b,M3:()=>v,RK:()=>C,S4:()=>k,X$:()=>w,Xn:()=>P,_k:()=>y,jY:()=>A,p8:()=>I,pV:()=>S});var r=i(6770);let s=/^([\w\-/]+(?:\.[\w\-/]+)*)?(\.\.\.?)([\w\-/]+(?:\.[\w\-/]+)*)?$/,o=/^([\w\-/]+(?:\.[\w\-/]+)*)(\.\.\.?)([\w\-/]+(?:\.[\w\-/]+)*)$/,n=/^([\w\-/]+(?:\.[\w\-/]+)*)(\.\.)([\w\-/]+(?:\.[\w\-/]+)*)$/,a=/^([\w\-/]+(?:\.[\w\-/]+)*)(\.\.\.)([\w\-/]+(?:\.[\w\-/]+)*)$/,l=/(^[0-9a-f]{40}([\^@~:]\S*)?$)|(^[0]{40}(:|-)$)/,u=/(^[0-9a-f]{40}$)|(^[0]{40}(:|-)$)/,c=/(^[0-9a-f]{7,40}$)|(^[0]{40}(:|-)$)/,h=/(^[0-9a-f]{40})\^[0-3]?$/,d=/^(.*?)([\^@~:].*)?$/,p=/^[0]{40}(?:[\^@~:]\S*)?:?$/,g=/^[0]{40}([\^@~]\S*)?:$/;function m(e,t){return!!t&&e.test(t)}function f(e,t=!1){return m(t?c:u,e)}function w(e){return m(l,e)}function v(e){return m(h,e)}function y(e,t=!1){return e===r.SU||e===r.id||!t&&m(p,e)}function b(e,t=!1){return e===r.id||!t&&m(g,e)}function C(e){return e===`${r.SU}^`||e===`${r.id}^`}let R=7;function k(e){R=e}function S(e,t){if(e===r.nB)return"(deleted)";if(!e)return t?.strings?.working??"";if(y(e))return b(e)?t?.strings?.uncommittedStaged??"Index":t?.strings?.uncommitted??"Working Tree";if(I(e)||!w(e))return e;let i=Math.max(5,R),s=d.exec(e);if(null!=s){let[,e,t]=s;if(null!=t)return`${e.substring(0,i)}${t}`}return e.substring(0,i)}function P(e,t,i){return`${e??""}${i}${t??""}`}function A(e){let t=s.exec(e);if(null==t)return;let[,i,r,o]=t;return{left:i||void 0,right:o||void 0,notation:r}}function I(e,t="any"){if(null==e)return!1;switch(t){case"qualified":return o.test(e);case"qualified-double-dot":return n.test(e);case"qualified-triple-dot":return a.test(e);default:return s.test(e)}}},6005:(e,t,i)=>{i.d(t,{h:()=>n});var r=i(5818),s=i(1667);let o=[[0,"Less than a week ago"],[7,"Over a week ago"],[25,"Over a month ago"],[77,"Over 3 months ago"]];function*n(e,t,i,{show:a}={show:!0}){let l;if(!t.view.config.showRelativeDateMarkers||!a)return yield*e;let u=i??0,c=Date.now(),h=!0;for(let i of e){if(u<o.length){let[e,n]=o[u];if(void 0===l){let t=new Date(c);l=t.setDate(t.getDate()-e)}let a=new Date(i.commit.committer.date).setUTCHours(0,0,0,0);if(a<=l){for(;u<o.length-1;){[e]=o[u+1];let t=new Date(c);if(a>t.setDate(t.getDate()-e))break;u++,l=void 0,[,n]=o[u]}h||(yield new s.S2(t.view,t,"",n,void 0,void 0,r.U0.DateMarker)),u++,l=void 0}}h=!1,yield i}}},6045:(e,t,i)=>{i.d(t,{N:()=>s});let r=0x40000000-1;function s(){let e=0;return{get current(){return e},next:function(){return e===r&&(e=0),++e}}}},6121:(e,t,i)=>{i.d(t,{N:()=>v});var r=i(1398),s=i(3583),o=i(2624),n=i(8518),a=i(7660),l=i(7019),u=i(2141),c=i(5231),h=i(4941),d=i(9442),p=i(7193),g=i(7945),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o};let v=class extends d.dY{constructor(e){super("gitlens.showQuickCommitFileDetails"),this.container=e}static createMarkdownCommandLink(e){return(0,c.J)("gitlens.showQuickCommitFileDetails",e)}async preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),"viewItem"===e.type&&(t={...t,sha:e.node.uri.sha},(0,g.j7)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let a;if(null!=(t=(0,p.q)(t,e))){if(null!=(i={...i}).revisionUri?(a=o.nk.fromRevisionUri(r.Uri.parse(i.revisionUri,!0)),i.sha=a.sha):a=await o.nk.fromUri(t),null==i.sha){let t=i.line??e?.selection.active.line;if(null==t)return;try{let e=await this.container.git.getBlameForLine(a,t);if(null==e)return void(0,l.gD)("Unable to show commit file details");if(e.commit.isUncommitted)return void(0,l.CR)("Unable to show commit file details");i.sha=e.commit.sha,i.commit=e.commit}catch(e){h.Vy.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),(0,l.qQ)("Unable to show commit file details");return}}try{if(null==i.commit&&(null!=i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),null==i.commit&&(i.fileLog=void 0)),null==i.fileLog)){let e=i.commit?.repoPath??a.repoPath;if(i.commit=await this.container.git.commits(e).getCommitForFile(a,i.sha),null==i.commit)return void(0,l.pW)("Unable to show commit file details")}if(null==i.commit)return void(0,l.pW)("Unable to show commit file details");let e=i.commit?.file?.path??a.fsPath;(0,n.WM)(i.commit)&&(i.commit.fileset?.files==null||i.commit.fileset?.filtered)&&await i.commit.ensureFullDetails(),await (0,s.b)({command:"show",state:{repo:i.commit.repoPath,reference:i.commit,fileName:e}})}catch(e){h.Vy.error(e,"ShowQuickCommitFileDetailsCommand"),(0,l.qQ)("Unable to show commit file details")}}}};v=w([(0,u.G5)()],v);let y=class extends d.dY{constructor(e){super("gitlens.showQuickRevisionDetails"),this.container=e}async execute(e,t){if(null!=(t=(0,p.q)(t,e)))try{let e=await o.nk.fromUri(t);if(e?.sha==null)return;await (0,s.b)({command:"show",state:{repo:e.repoPath,reference:(0,a.kA)(e.sha,e.repoPath,{refType:"revision"}),fileName:e.fsPath}})}catch(e){h.Vy.error(e,"ShowQuickCommitRevisionCommand"),(0,l.qQ)("Unable to show commit details")}}};y=w([(0,u.G5)()],y)},6162:(e,t,i)=>{i.d(t,{A:()=>LaunchpadIndicator,a:()=>p});var r=i(1398),s=i(1182),o=i(2141),n=i(2870),a=i(3361),l=i(9091),u=i(7864),c=i(4808),h=i(4898),d=i(6606);let LaunchpadIndicator=class LaunchpadIndicator{constructor(e,t){this.container=e,this.provider=t,this._disposable=r.Disposable.from(r.window.onDidChangeWindowState(this.onWindowStateChanged,this),t.onDidChange(this.onLaunchpadChanged,this),t.onDidRefresh(this.onLaunchpadRefreshed,this),n.H.onDidChange(this.onConfigurationChanged,this),e.integrations.onDidChangeConnectionState(this.onConnectedIntegrationsChanged,this),(0,a.Oo)(e.onReady)(this.onReady,this),...this.registerCommands())}_disposable;_categorizedItems;_firstStateAfterStartup=!0;_hasRefreshed=!1;_lastDataUpdate;_lastRefreshPaused;_refreshTimer;_state;_statusBarLaunchpad;dispose(){this.clearRefreshTimer(),this._statusBarLaunchpad?.dispose(),this._disposable.dispose()}get pollingEnabled(){return n.H.get("launchpad.indicator.polling.enabled")&&n.H.get("launchpad.indicator.polling.interval")>0}get pollingInterval(){return 1e3*n.H.get("launchpad.indicator.polling.interval")*60}async onConnectedIntegrationsChanged(e){h.UZ.includes(e.key)&&await this.maybeLoadData(!0)}async onConfigurationChanged(e){if(!n.H.changed(e,"launchpad.indicator"))return;n.H.changed(e,"launchpad.indicator.label")&&this.updateStatusBarCommand();let t=!1;n.H.changed(e,"launchpad.indicator.polling")&&(n.H.changed(e,"launchpad.indicator.polling.enabled")?t=!0:n.H.changed(e,"launchpad.indicator.polling.interval")&&this.startRefreshTimer()),(t||=n.H.changed(e,"launchpad.indicator.useColors")||n.H.changed(e,"launchpad.indicator.icon")||n.H.changed(e,"launchpad.indicator.label")||n.H.changed(e,"launchpad.indicator.groups"))&&await this.maybeLoadData()}async maybeLoadData(e=!1){this.pollingEnabled?await this.provider.hasConnectedIntegration()?"load"!==this._state||null==this._categorizedItems||e?this.updateStatusBarState("loading"):this.updateStatusBarState("load",this._categorizedItems):this.updateStatusBarState("disconnected"):this.updateStatusBarState("idle")}onLaunchpadRefreshed(e){return(this._hasRefreshed=!0,this.pollingEnabled)?null!=e.error?void this.updateStatusBarState("failed"):void this.updateStatusBarState("load",e.items):void this.updateStatusBarState("idle")}async onLaunchpadChanged(){if(this._hasRefreshed=!1,!this.pollingEnabled)return void this.updateStatusBarState("idle");let e=await this.provider.getCategorizedItems();if(null!=e.error)return void this.updateStatusBarState("failed");this.updateStatusBarState("load",e.items)}async onReady(){this._statusBarLaunchpad=r.window.createStatusBarItem("gitlens.launchpad",r.StatusBarAlignment.Left,9997),this._statusBarLaunchpad.name="GitLens Launchpad",await this.maybeLoadData(),this.updateStatusBarCommand(),this._statusBarLaunchpad.show()}onWindowStateChanged(e){if("disconnected"===this._state||"idle"===this._state)return;if(!e.focused){this.clearRefreshTimer(),this._lastRefreshPaused=new Date;return}if(null==this._lastRefreshPaused)return;if("loading"===this._state)return void this.startRefreshTimer();let t=Date.now(),i=null!=this._lastDataUpdate?t-this._lastDataUpdate.getTime():void 0,r=t-this._lastRefreshPaused.getTime();this._lastRefreshPaused=void 0;let s=1e3*n.H.get("launchpad.indicator.polling.interval")*60,o=null!=i?s-i:s;o<0&&(o=0);let a=o-r;this.startRefreshTimer(a<0?0:a)}clearRefreshTimer(){null!=this._refreshTimer&&(clearInterval(this._refreshTimer),this._refreshTimer=void 0)}startRefreshTimer(e){let t=this._firstStateAfterStartup;if(t&&(this._firstStateAfterStartup=!1),this.clearRefreshTimer(),!this.pollingEnabled||"disconnected"===this._state){"idle"!==this._state&&"disconnected"!==this._state&&this.updateStatusBarState("idle");return}let i=()=>{this._refreshTimer=setInterval(()=>{this.provider.getCategorizedItems({force:!0})},this.pollingInterval)};null!=e?this._refreshTimer=setTimeout(()=>{i(),t?(0,u.uk)(5e3).then(()=>{this._hasRefreshed||this.provider.getCategorizedItems({force:!0})}):this.provider.getCategorizedItems({force:!0})},e):i()}updateStatusBarState(e,t){if("load"!==e&&e===this._state)return;this._state=e,this._categorizedItems=t;let i=new r.MarkdownString("",!0);switch(i.supportHtml=!0,i.isTrusted=!0,i.appendMarkdown(`GitLens Launchpad ${s.lD}\xa0\xA0\xa0\xA0&mdash;\xa0\xA0\xa0\xA0`),i.appendMarkdown('[$(question)](command:gitlens.launchpad.indicator.action?%22info%22 "What is this?")'),i.appendMarkdown(" "),i.appendMarkdown('[$(gear)](command:workbench.action.openSettings?%22gitlens.launchpad%22 "Settings")'),i.appendMarkdown("  |  "),i.appendMarkdown('[$(circle-slash) Hide](command:gitlens.launchpad.indicator.action?%22hide%22 "Hide")'),("idle"===e||"disconnected"===e||"loading"===e||"load"===e&&!this.hasInteracted())&&(i.appendMarkdown(`

---

`),i.appendMarkdown('[Launchpad](command:gitlens.launchpad.indicator.action?%22info%22 "Learn about Launchpad") organizes your pull requests into actionable groups to help you focus and keep your team unblocked.'),i.appendMarkdown(`

It's always accessible using the \`GitLens: Open Launchpad\` command from the Command Palette.`)),e){case"idle":this.clearRefreshTimer(),this._statusBarLaunchpad.text="$(rocket)",this._statusBarLaunchpad.tooltip=i,this._statusBarLaunchpad.color=void 0;break;case"disconnected":this.clearRefreshTimer(),i.appendMarkdown(`

---

[Connect an integration](command:gitlens.showLaunchpad?%7B%22source%22%3A%22launchpad-indicator%22%7D "Connect an integration") to get started.`),this._statusBarLaunchpad.text="$(rocket)$(gitlens-unplug) Launchpad",this._statusBarLaunchpad.tooltip=i,this._statusBarLaunchpad.color=void 0;break;case"loading":this.startRefreshTimer(0),i.appendMarkdown(`

---

$(loading~spin) Loading...`),this._statusBarLaunchpad.text="$(rocket)$(loading~spin)",this._statusBarLaunchpad.tooltip=i,this._statusBarLaunchpad.color=void 0;break;case"load":this.updateStatusBarWithItems(i,t);break;case"failed":this.clearRefreshTimer(),i.appendMarkdown(`

---

$(alert) Unable to load items`),this._statusBarLaunchpad.text="$(rocket)$(alert)",this._statusBarLaunchpad.tooltip=i,this._statusBarLaunchpad.color=void 0}this._firstStateAfterStartup=!1}updateStatusBarCommand(){let e=n.H.get("launchpad.indicator.label")??"item";this._statusBarLaunchpad.command=(0,o.gu)("gitlens.showLaunchpad","Open Launchpad",{source:"launchpad-indicator",state:{selectTopItem:"item"===e}})}updateStatusBarWithItems(e,t){let i,s,o,a;this.sendTelemetryFirstLoadEvent(),this._lastDataUpdate=new Date;let u=n.H.get("launchpad.indicator.useColors"),p=n.H.get("launchpad.indicator.groups")??[],g=n.H.get("launchpad.indicator.label")??"item",m=n.H.get("launchpad.indicator.icon")??"default",f=(0,h.Vy)(t),w=Array.from(f.values()).reduce((e,t)=>e+t.length,0),v=p.some(e=>f.get(e)?.length);if(0===w)e.appendMarkdown(`

---

`),e.appendMarkdown("You are all caught up!");else if(v)for(let t of p){let o=f.get(t);if(!o?.length)continue;e.value.length>0&&e.appendMarkdown(`

---

`);let n=d.lj.get(t);switch(t){case"mergeable":i??=n,a=new r.ThemeColor("gitlens.launchpadIndicatorMergeableColor"),s??={item:o[0],groupLabel:"can be merged"},e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorMergeableHoverColor);">${n}</span>$(blank) [${"item"===g&&null!=s?this.getPriorityItemLabel(s.item,o.length):(0,c.td)("pull request",o.length)} can be merged](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"mergeable",selectTopItem:!0}}))} "Open Ready to Merge in Launchpad")`);break;case"blocked":{let t,u=(0,l.Fi)(o,e=>"failed-checks"===e.actionableCategory||"conflicts"===e.actionableCategory||"unassigned-reviewers"===e.actionableCategory?e.actionableCategory:"blocked"),h=u.size>1,d="",p="(",m=u.get("unassigned-reviewers");if(m?.length&&(d=`${m.length>1?"need":"needs"} reviewers`,p+=`${m.length} ${d}`,t??=m[0]),m=u.get("failed-checks"),m?.length&&(d="failed CI checks",p+=`${h?", ":""}${m.length} ${d}`,t??=m[0]),m=u.get("conflicts"),m?.length&&(d=`${m.length>1?"have":"has"} conflicts`,p+=`${h?", ":""}${m.length} ${d}`,t??=m[0]),p+=")",i??=n,a??=new r.ThemeColor("gitlens.launchpadIndicatorBlockedColor"),e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorBlockedColor);">${n}</span>$(blank) [${"item"===g&&null!=t&&null==s?this.getPriorityItemLabel(t,o.length):(0,c.td)("pull request",o.length)} ${h?"are blocked":d}](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"blocked",selectTopItem:!0}}))} "Open Blocked in Launchpad")`),h&&e.appendMarkdown(`\\
$(blank)$(blank) ${p}`),null!=t){let e="is blocked";"unassigned-reviewers"===t.actionableCategory?e="needs reviewers":"failed-checks"===t.actionableCategory?e="failed CI checks":"conflicts"===t.actionableCategory&&(e="has conflicts"),s??={item:t,groupLabel:e}}break}case"follow-up":i??=n,a??=new r.ThemeColor("gitlens.launchpadIndicatorAttentionColor"),e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorAttentionHoverColor);">${n}</span>$(blank) [${"item"===g&&null==s&&o.length?this.getPriorityItemLabel(o[0],o.length):(0,c.td)("pull request",o.length)} ${o.length>1?"require":"requires"} follow-up](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"follow-up",selectTopItem:!0}}))} "Open Follow-Up in Launchpad")`),s??={item:o[0],groupLabel:"requires follow-up"};break;case"needs-review":i??=n,a??=new r.ThemeColor("gitlens.launchpadIndicatorAttentionColor"),e.appendMarkdown(`<span style="color:var(--vscode-gitlens-launchpadIndicatorAttentionHoverColor);">${n}</span>$(blank) [${"item"===g&&null==s&&o.length?this.getPriorityItemLabel(o[0],o.length):(0,c.td)("pull request",o.length)} ${o.length>1?"need":"needs"} your review](command:gitlens.showLaunchpad?${encodeURIComponent(JSON.stringify({source:"launchpad-indicator",state:{initialGroup:"needs-review",selectTopItem:!0}}))} "Open Needs Your Review in Launchpad")`),s??={item:o[0],groupLabel:"needs your review"}}}else e.appendMarkdown(`

---

`),e.appendMarkdown(`No pull requests need your attention\\
(${w} other pull requests)`);let y="group"===m&&null!=i?i:"$(rocket)";switch(g){case"item":o=null!=s?` ${this.getPriorityItemLabel(s.item)} ${s.groupLabel}`:"";break;case"counts":for(let e of(o="",p)){if(!d.fK.includes(e))continue;let t=f.get(e)?.length??0,i=d.lj.get(e);o+=o||y!==i?`\xa0\xA0${i} ${t}`:`\xa0${t}`}break;default:o=""}this._statusBarLaunchpad.text=`${y}${o}`,this._statusBarLaunchpad.tooltip=e,this._statusBarLaunchpad.color=u?a:void 0}registerCommands(){return[(0,o.Lb)("gitlens.launchpad.indicator.action",async e=>{switch(this.storeFirstInteractionIfNeeded(),e){case"info":(0,o.RS)("gitlens.openWalkthrough",{step:"accelerate-pr-reviews",source:{source:"launchpad-indicator",detail:"info"}});break;case"hide":{let e={title:"Hide Anyway"};await r.window.showInformationMessage(`GitLens Launchpad helps you focus and keep your team unblocked.

Are you sure you want hide the indicator?`,{modal:!0,detail:`
You can always access Launchpad using the "GitLens: Open Launchpad" command, and can re-enable the indicator with the "GitLens: Toggle Launchpad Indicator" command.`},e,{title:"Cancel",isCloseAffordance:!0})===e&&n.H.updateEffective("launchpad.indicator.enabled",!1)}}})]}getPriorityItemLabel(e,t){return`${null!=e.repository?`${e.repository.owner.login}/${e.repository.name}`:""}#${e.id}${null!=t&&t>1?` and ${(0,c.td)("pull request",t-1,{infix:" other "})}`:""}`}sendTelemetryFirstLoadEvent(){this.container.telemetry.enabled&&(this.container.storage.get("launchpad:indicator:hasLoaded")||(this.container.storage.store("launchpad:indicator:hasLoaded",!0).catch(),this.container.telemetry.sendEvent("launchpad/indicator/firstLoad")))}storeFirstInteractionIfNeeded(){null==this.container.storage.get("launchpad:indicator:hasInteracted")&&this.container.storage.store("launchpad:indicator:hasInteracted",new Date().toISOString())}hasInteracted(){return null!=this.container.storage.get("launchpad:indicator:hasInteracted")}};function p(e,t){let i=(0,h.Vy)(e),r=Array.from(i.values()).reduce((e,t)=>e+t.length,0),s=t.some(e=>i.get(e)?.length);if(0===r||!s)return{total:r,groups:t,hasGroupedItems:!1};let o={total:r,groups:t,hasGroupedItems:s};for(let e of t){let t=i.get(e);if(t?.length)switch(e){case"mergeable":o.mergeable={total:t.length};break;case"blocked":{let e=(0,l.Fi)(t,e=>"failed-checks"===e.actionableCategory||"conflicts"===e.actionableCategory||"unassigned-reviewers"===e.actionableCategory?e.actionableCategory:"blocked");o.blocked={total:t.length,blocked:e.get("blocked")?.length??0,conflicts:e.get("conflicts")?.length??0,failedChecks:e.get("failed-checks")?.length??0,unassignedReviewers:e.get("unassigned-reviewers")?.length??0};break}case"follow-up":o.followUp={total:t.length};break;case"needs-review":o.needsReview={total:t.length};break;case"snoozed":o.snoozed={items:t,total:t.length};break;case"pinned":o.pinned={items:t,total:t.length}}}return o}},6206:(e,t,i)=>{i.d(t,{z1:()=>u,Yz:()=>h,Rm:()=>d,Is:()=>c});var r=i(3881),s=i(6209),o=i(4941),n=i(1003),a=i(7864),l=i(4808);let u=Symbol("logInstanceNameFn");function c(e){return t=>{t[u]=e}}function h(e){return d(e,!0)}function d(e,t=!1){let i,u,c,h,p,g=0,m=!1,f=!1,w=!0;null!=e&&({args:i,if:u,enter:c,exit:h,prefix:p,logThreshold:g=0,scoped:m=!0,singleLine:f=!1,timed:w=!0}=e),g>0&&(f=!0,w=!0),w&&(m=!0);let v=o.Vy.isDebugging,y=t?o.Vy.debug:o.Vy.log,b=v?"debug":"info";return(e,t,d)=>{let C,R;if("function"==typeof d.value?(C=d.value,R="value"):"function"==typeof d.get&&(C=d.get,R="get"),null==C||null==R)throw Error("Not supported");let k=!1!==i?(0,s.bQ)(C):[];d[R]=function(...e){let s,d;if(!v&&!o.Vy.enabled(b)||null!=u&&!u.apply(this,e))return C.apply(this,e);let R=n.$e.current,S=n.$e.next(),P=this!=null?(0,o.zu)(this):void 0,A=P?m?`${(0,n.rL)(S,R)} ${P}.${t}`:`${P}.${t}`:t;null!=p&&(A=p({id:S,instance:this,instanceName:P??"",name:t,prefix:A},...e)),m&&(s=(0,n.DL)(S,{scopeId:S,prevScopeId:R,prefix:A}));let I=null!=c?c(...e):"";if(!1===i||0===e.length)d="",f||y.call(o.Vy,`${A}${I}`);else{let t,r,s,n;d="";let a=-1;for(n of e){if(r=k[++a],null!=(t=i?.[a])){if("boolean"==typeof t)continue;if(d.length>0&&(d+=", "),"string"==typeof t){d+=t;continue}s=String(t(n))}else d.length>0&&(d+=", "),s=o.Vy.toLoggable(n);d+=r?`${r}=${s}`:s}f||y.call(o.Vy,d?`${A}${I}(${d})`:`${A}${I}`)}if(f||w||null!=h){let t,i=w?(0,r.k)():void 0,u=e=>{let t=void 0!==i?` [${(0,l.$l)(i)}ms]`:"";f?o.Vy.error(e,d?`${A}${I}(${d})`:`${A}${I}`,s?.exitDetails?`failed${s.exitDetails}${t}`:`failed${t}`):o.Vy.error(e,A,s?.exitDetails?`failed${s.exitDetails}${t}`:`failed${t}`),m&&(0,n.aE)(S)};try{t=C.apply(this,e)}catch(e){throw u(e),e}let c=e=>{let t,r,a,u;if(null!=i?(t=(0,l.$l)(i))>500?(r=o.Vy.warn,a=` [*${t}ms] (slow)`):(r=y,a=` [${t}ms]`):(a="",r=y),null!=h)if("function"==typeof h)try{u=h(e)}catch(e){u=`@log.exit error: ${e}`}else!0===h&&(u=`returned ${o.Vy.toLoggable(e)}`);else s?.exitFailed?(u=s.exitFailed,r=(e,...t)=>o.Vy.error(null,e,...t)):u="completed";f?(0===g||t>g)&&r.call(o.Vy,d?`${A}${I}(${d}) ${u}${s?.exitDetails||""}${a}`:`${A}${I} ${u}${s?.exitDetails||""}${a}`):r.call(o.Vy,d?`${A}(${d}) ${u}${s?.exitDetails||""}${a}`:`${A} ${u}${s?.exitDetails||""}${a}`),m&&(0,n.aE)(S)};return null!=t&&(0,a.yL)(t)?t.then(c,u):c(t),t}return C.apply(this,e)}}}},6207:(e,t,i)=>{i.d(t,{l:()=>n});var r=i(1398),s=i(1182),o=i(4152);async function n(e){if(e.storage.get("confirm:draft:storage",!1))return!0;for(;;){let t={title:"Continue"},i={title:"Cancel",isCloseAffordance:!0},n={title:"Learn More"},a={title:"Security"},l=await r.window.showInformationMessage("Cloud Patches are securely stored by GitKraken and can be accessed by anyone with the link and a GitKraken account.",{modal:!0},t,n,a,i);if(l===t)return e.storage.store("confirm:draft:storage",!0).catch(),!0;if(l===a){(0,o.CZ)(s.DS.security);continue}if(l===n){(0,o.CZ)(s.DS.cloudPatches);continue}return!1}}},6209:(e,t,i)=>{i.d(t,{An:()=>h,CX:()=>c,L2:()=>d,Oo:()=>l,bQ:()=>n,gC:()=>u,is:()=>a});let r=/\(([\s\S]*)\)/,s=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,o=/\s?=.*$/;function n(e){if("function"!=typeof e)throw Error("Not supported");if(0===e.length)return[];let t=Function.prototype.toString.call(e),i=(t=(t=t.replace(s,"")||t).slice(0,t.indexOf("{"))).indexOf("("),n=t.indexOf(")");i=i>=0?i+1:0,n=n>0?n:t.indexOf("="),t=t.slice(i,n),t=`(${t})`;let a=r.exec(t);return null!=a?a[1].split(",").map(e=>e.trim().replace(o,"")):[]}function a(e,t,i){return null==t?null!=e:"function"==typeof t?t(e):void 0===i?void 0!==e[t]:e[t]===i}function l(e){let t,i=!1;return function(...r){return i||(i=!0,t=e.apply(this,r),e=void 0),t}}function u(e,t){let i;return i=setInterval(e,t),{dispose:()=>{null!=i&&(clearInterval(i),i=void 0)}}}async function c(e,t,i){for(let r of t)try{await e.apply(i,r)}catch{}}function h(e){let t;return function(...i){let r=async()=>await e(...i);return t=null==t?r():t.then(r,r)}}function d(e,t){return e>=t?e*e+e+t:e+t*t}},6230:(e,t,i)=>{i.d(t,{Xu:()=>PullRequestNode,k0:()=>b,_u:()=>C});var r=i(1398),s=i(2624),o=i(9779),n=i(2272),a=i(8027),l=i(3282),u=i(7125),c=i(5962),h=i(2141),d=i(4808),p=i(2278),g=i(3263),m=i(5818),f=i(1667),w=i(2363);let CodeSuggestionsNode=class CodeSuggestionsNode extends g.l{constructor(e,t,i,r){super("drafts-code-suggestions",s.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.pullRequest=r,this._uniqueId=(0,m.pF)(this.type,this.context)}get id(){return this._uniqueId}async getChildren(){if(null==this.children){let e,t=await this.getSuggestedChanges();t?.length&&(t.sort((e,t)=>t.updatedAt.getTime()-e.updatedAt.getTime()),e=t.map(e=>new w.e(this.uri,this.view,this,e))),e?.length||(e=[new f.S2(this.view,this,"No code suggestions")]),this.children=e}return this.children}getTreeItem(){let e=new r.TreeItem("Code Suggestions",r.TreeItemCollapsibleState.Collapsed);return e.contextValue=m.U0.CodeSuggestions,e}async getSuggestedChanges(){let e=this.view.container.git.getRepository(this.repoPath);return null==e?[]:await this.view.container.drafts.getCodeSuggestions(this.pullRequest,e)}};var v=i(260),y=i(9994);let PullRequestNode=class PullRequestNode extends g.l{constructor(e,t,i,r,n){let a,l;"string"==typeof r?l=r:(l=r.repoPath,a=r),super("pullrequest",s.nk.fromRepoPath(l),e,t),this.parent=t,this.pullRequest=i,this.options=n,null!=a&&(a instanceof o.Z?this.updateContext({branch:a}):this.updateContext({commit:a})),this.updateContext({pullRequest:i}),this._uniqueId=(0,m.pF)(this.type,this.context),this.repoPath=l}repoPath;get id(){return this._uniqueId}toClipboard(e){let t=this.getUrl();return"markdown"===e?`[${this.pullRequest.id}](${t}) ${this.pullRequest.title}`:t}getUrl(){return this.pullRequest.url}get baseRef(){if(this.pullRequest.refs?.base!=null)return{refType:"branch",repoPath:this.repoPath,ref:this.pullRequest.refs.base.sha,name:this.pullRequest.refs.base.branch,remote:!0}}get ref(){if(this.pullRequest.refs?.head!=null)return{refType:"branch",repoPath:this.repoPath,ref:this.pullRequest.refs.head.sha,name:this.pullRequest.refs.head.branch,remote:!0}}async getChildren(){if(null==this.children){let e=await b(this.view,this,this.pullRequest,this.repoPath);this.children=e}return this.children}getTreeItem(){let e=this.pullRequest.refs?.base!=null&&null!=this.pullRequest.refs.head,t=new r.TreeItem(`#${this.pullRequest.id}: ${this.pullRequest.title}`,e?this.options?.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed:r.TreeItemCollapsibleState.None);return t.id=this.id,t.contextValue=m.U0.PullRequest,this.pullRequest.refs?.base!=null&&null!=this.pullRequest.refs.head&&(t.contextValue+="+refs"),t.description=`${this.pullRequest.state}, ${this.pullRequest.formatDateFromNow()}`,t.iconPath=(0,a.pr)(this.pullRequest),t.tooltip=C(this.pullRequest,this.context),t}};async function b(e,t,i,s){let o;if(null==(o=null==s?await (0,l.sY)(e.container,i,{promptIfNeeded:!0}):"string"==typeof s?e.container.git.getRepository(s):s))return[new f.S2(e,t,`Unable to locate repository '${i.refs?.head.owner??i.repository.owner}/${i.refs?.head.repo??i.repository.repo}'.`)];let a=o.path,g=(0,u.tI)(a,i.refs),m=(0,u.Yv)(i);if(!await (0,l.Jp)(i,o,{silent:!0}))return[new f.RK(e,t,(0,h.gu)("gitlens.views.addPullRequestRemote","Add Pull Request Remote...",t,i,o),`Unable to find a remote for '${m.provider.repoDomain}'`,void 0,`Click to add a remote for '${m.provider.repoDomain}'`,new r.ThemeIcon("question",new r.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor")),void 0,(0,p.E)("remote",{state:"missing"}))];let w=await (0,l.td)(i,o,{promptMessage:`Unable to open details for PR #${i.id} because of a missing remote.`},g);if(!w?.right)return[new f.S2(e,t,"No commits could be found.")];let b={ref1:g.base.ref,ref2:g.head.ref,range:(0,c.Xn)(g.base.ref,g.head.ref,"..")};return[new v.V(e,t,a,"Commits",{query:(0,n.R6)(e.container,a,b.range),comparison:b},{autolinks:!1,expand:!1,description:(0,d.td)("commit",w?.right??0)}),new CodeSuggestionsNode(e,t,a,i),new y.o(e,t,a,b.ref1,b.ref2,()=>(0,n.Hn)(e.container,a,(0,c.Xn)(b.ref1,b.ref2,"..."),!1),void 0,{expand:!0,timeout:!1})]}function C(e,t){let i=new r.MarkdownString("",!0);i.supportHtml=!0,i.isTrusted=!0,t?.commit!=null&&i.appendMarkdown(`Commit \`$(git-commit) ${t.commit.shortSha}\` was introduced by $(git-pull-request) PR #${e.id}

`);let s=` "Open Pull Request \\#${e.id} on ${e.provider.name}"`;return i.appendMarkdown(`${(0,a.xu)(e)} [**${e.title.trim()}**](${e.url}${s}) \\
[${t?.idPrefix??""}#${e.id}](${e.url}${s}) by [@${e.author.name}](${e.author.url} "Open @${e.author.name} on ${e.provider.name}") was ${e.state.toLowerCase()} ${e.formatDateFromNow()}`),t?.codeSuggestionsCount!=null&&t.codeSuggestionsCount>0&&i.appendMarkdown(`

$(gitlens-code-suggestion) ${(0,d.td)("code suggestion",t.codeSuggestionsCount)}`),i}},6239:(e,t,i)=>{function r(e){return null!=s(e)}function s(e,t){let i,r,s=e.match(/([^/]+\/[^/]+)\/(?:-\/merge_requests)\/(\d+)/);return null!=s&&(i=s[1],r=s[2]),null==r&&null!=(s=e.match(/(?:\/|^)(?:-\/merge_requests)\/(\d+)/))&&(r=s[1]),null!=r?{ownerAndRepo:i,prNumber:r,provider:t}:void 0}i.d(t,{R:()=>r,f:()=>s})},6266:(e,t,i)=>{i.d(t,{Y:()=>SubscribeableViewNode});var r=i(1398),s=i(9388),o=i(6206),n=i(3361),a=i(3263),l=i(5818),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor,h=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o};let SubscribeableViewNode=class SubscribeableViewNode extends a.l{disposable;subscription;loaded=!1;constructor(e,t,i,s){super(e,t,i,s);let o=[(0,n.HC)(this.view.onDidChangeVisibility,this.onVisibilityChanged,this)];(0,l.Qj)(this.view)&&o.push((0,n.HC)(this.view.onDidChangeAutoRefresh,this.onAutoRefreshChanged,this));let a=this.getTreeItem;this.getTreeItem=function(){return this.loaded=!0,this.ensureSubscription(),a.apply(this)};let u=this.getChildren;this.getChildren=function(){return this.loaded=!0,this.ensureSubscription(),u.apply(this)},this.disposable=r.Disposable.from(...o)}dispose(){super.dispose(),this.unsubscribe(),this.disposable?.dispose()}async triggerChange(e=!1,t=!1){this.loaded&&!this._disposed&&(e&&!this.view.visible&&(this._pendingReset=e),await super.triggerChange(e,t))}_canSubscribe=!0;get canSubscribe(){return this._canSubscribe&&!this._disposed}set canSubscribe(e){this._canSubscribe!==e&&(this._canSubscribe=e,this.ensureSubscription(),e&&this.triggerChange())}_etag;_pendingReset=!1;get requiresResetOnVisible(){let e=this._pendingReset;this._pendingReset=!1;let t=this.etag();return t!==this._etag&&(this._etag=t,e=!0),e}async unsubscribe(){if(this._etag=this.etag(),null!=this.subscription){let e=this.subscription;this.subscription=void 0,(await e)?.dispose()}}onAutoRefreshChanged(){this.onVisibilityChanged({visible:this.view.visible})}onVisibilityChanged(e){this.ensureSubscription(),e.visible&&this.triggerChange(this.requiresResetOnVisible)}async ensureSubscription(){if(!this.canSubscribe||!this.view.visible||(0,l.Qj)(this.view)&&!this.view.autoRefresh)return void await this.unsubscribe();null==this.subscription&&(this.subscription=Promise.resolve(this.subscribe()),await this.subscription)}async resetSubscription(){await this.unsubscribe(),await this.ensureSubscription()}};h([(0,o.Yz)()],SubscribeableViewNode.prototype,"triggerChange",1),h([(0,o.Yz)()],SubscribeableViewNode.prototype,"unsubscribe",1),h([(0,o.Yz)()],SubscribeableViewNode.prototype,"onAutoRefreshChanged",1),h([(0,o.Yz)()],SubscribeableViewNode.prototype,"onVisibilityChanged",1),h([(0,s.G)(),(0,o.Yz)()],SubscribeableViewNode.prototype,"ensureSubscription",1),h([(0,s.G)(),(0,o.Yz)()],SubscribeableViewNode.prototype,"resetSubscription",1)},6325:(e,t,i)=>{i.d(t,{GraphWebviewProvider:()=>GraphWebviewProvider});var r=i(1398),s=i(3037),o=i(7945),n=i(1182),a=i(2320),l=i(3864),u=i(3583),c=i(8282),h=i(4123),d=i(8561),p=i(5567),g=i(3782),m=i(3621),f=i(2112),w=i(4931),v=i(1705),y=i(8103),b=i(8518),C=i(6458),R=i(5853),k=i(8219),S=i(6770),P=i(5042),A=i(875),I=i(4154),D=i(8027),_=i(4119),$=i(9271),T=i(3631),E=i(1838),x=i(421),O=i(7125),F=i(7660),B=i(5962),L=i(4898),U=i(1288),q=i(8397),N=i(2141),M=i(2870),W=i(9615),G=i(4692),H=i(4152),V=i(3677),j=i(9388),z=i(6206),Q=i(6209),Y=i(5539),K=i(9091),Z=i(9638),J=i(7864),X=i(8178),ee=i(5238),et=i(1017),ei=i(1383),er=i(1673),es=i(1849),eo=i(7687);async function en(e){return 0===e.length?Promise.resolve([]):(await Promise.allSettled(e.map(async e=>{let t=await e.git.remotes().getBestRemotesWithProviders(),i=t.find(e=>e.hasIntegration())??t[0];return{formattedName:e.formattedName,id:e.id,name:e.name,path:e.path,provider:i?.provider?{name:i.provider.name,integration:i.hasIntegration()?{id:(0,eo.p)(i.provider.id),connected:i.maybeIntegrationConnected??!1}:void 0,icon:"remote"===i.provider.icon?"cloud":i.provider.icon,url:await i.provider.url({type:R.J.Repo})}:void 0,isVirtual:e.provider.virtual}}))).map(e=>(0,J.Ro)(e)).filter(e=>null!=e)}function ea(e){return null!=e&&(0,ee.sc)(e)&&("gitlens.graph"===e.webview||"gitlens.views.graph"===e.webview)}function el(e,t){return null!=e&&ea(e)&&"object"==typeof e.webviewItemValue&&e.webviewItemValue.type===t}function eu(e,t){return null!=e&&ea(e)&&"object"==typeof e.webviewItemValue&&"ref"in e.webviewItemValue&&(null==t||e.webviewItemValue.ref.refType===t)}function ec(e){return null!=e&&"object"==typeof e&&"ref"in e&&(0,F.cf)(e.ref)}var eh=i(486);let ed="graph",ep=["upstream","pullRequest","issue"],eg=new eh.Q2(ed,"chooseRepository"),em=new eh.Q2(ed,"dblclick");new eh.Q2(ed,"dblclick");let ef=new eh.Q2(ed,"avatars/get"),ew=new eh.Q2(ed,"refs/metadata/get"),ev=new eh.Q2(ed,"rows/get"),ey=new eh.Q2(ed,"pullRequest/openDetails"),eb=new eh.Q2(ed,"search/openInView"),eC=new eh.Q2(ed,"columns/update"),eR=new eh.Q2(ed,"refs/update/visibility"),ek=new eh.Q2(ed,"filters/update/excludeTypes"),eS=new eh.Q2(ed,"configuration/update"),eP=new eh.Q2(ed,"search/update/mode"),eA=new eh.Q2(ed,"filters/update/includedRefs"),eI=new eh.Q2(ed,"selection/update"),eD=new eh.Oz(ed,"chooseRef"),e_=new eh.Oz(ed,"rows/ensure"),e$=new eh.Oz(ed,"counts"),eT=new eh.Oz(ed,"row/hover/get"),eE=new eh.Oz(ed,"search"),ex=new eh.C1(ed,"repositories/integration/didChange"),eO=new eh.C1(ed,"didChange",!0,!0),eF=new eh.C1(ed,"configuration/didChange"),eB=new eh.C1(ed,"subscription/didChange"),eL=new eh.C1(ed,"avatars/didChange"),eU=new eh.C1(ed,"branchState/didChange"),eq=new eh.C1(ed,"refs/didChangeMetadata"),eN=new eh.C1(ed,"columns/didChange"),eM=new eh.C1(ed,"scrollMarkers/didChange"),eW=new eh.C1(ed,"refs/didChangeVisibility"),eG=new eh.C1(ed,"rows/didChange",void 0,!0),eH=new eh.C1(ed,"rows/stats/didChange"),eV=new eh.C1(ed,"selection/didChange"),ej=new eh.C1(ed,"workingTree/didChange"),ez=new eh.C1(ed,"didSearch"),eQ=new eh.C1(ed,"didFetch"),eY=new eh.C1(ed,"featurePreview/didStart");var eK=Object.defineProperty,eZ=Object.getOwnPropertyDescriptor,eJ=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),eX=e=>{throw TypeError(e)},e0=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eZ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eK(t,i,o),o},e1=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&eX("Object expected"),i&&(r=t[eJ("asyncDispose")]),void 0===r&&(r=t[eJ("dispose")],i&&(s=r)),"function"!=typeof r&&eX("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},e2=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let e4={ref:{width:130,isHidden:!1,order:0},graph:{width:150,mode:void 0,isHidden:!1,order:1},message:{width:300,isHidden:!1,order:2},author:{width:130,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!1,order:5},sha:{width:130,isHidden:!1,order:6}},e5={ref:{width:32,isHidden:!1},graph:{width:150,mode:"compact",isHidden:!1},author:{width:32,isHidden:!1,order:2},message:{width:500,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!0,order:5},sha:{width:130,isHidden:!1,order:6}};let GraphWebviewProvider=class GraphWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._showDetailsView=M.H.get("graph.showDetailsView"),this._theme=r.window.activeColorTheme,this.ensureRepositorySubscriptions(),this._disposable=r.Disposable.from(M.H.onDidChange(this.onConfigurationChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.subscription.onDidChangeFeaturePreview(this.onFeaturePreviewChanged,this),this.container.git.onDidChangeRepositories(async()=>{this._etag!==this.container.git.etag&&(null==this._discovering||(this._etag=await this._discovering,this._etag!==this.container.git.etag))&&this.host.refresh(!0)}),r.window.onDidChangeActiveColorTheme(this.onThemeChanged,this),{dispose:()=>{null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0)}},this.container.integrations.onDidChangeConnectionState(this.onIntegrationConnectionChanged,this))}_repository;get repository(){return this._repository}set repository(e){if(this._repository===e)return void this.ensureRepositorySubscriptions();this._repository=e,this.resetRepositoryState(),this.ensureRepositorySubscriptions(!0),this.host.ready&&this.updateState()}_selection;get activeSelection(){return this._selection?.[0]}_cancellations=new Map;_discovering;_disposable;_etag;_etagSubscription;_etagRepository;_firstSelection=!0;_getBranchesAndTagsTips;_graph;_hoverCache=new Map;_ipcNotificationMap=new Map([[eN,this.notifyDidChangeColumns],[eF,this.notifyDidChangeConfiguration],[eO,this.notifyDidChangeState],[eW,this.notifyDidChangeRefsVisibility],[eM,this.notifyDidChangeScrollMarkers],[eV,this.notifyDidChangeSelection],[eB,this.notifyDidChangeSubscription],[ej,this.notifyDidChangeWorkingTree],[eQ,this.notifyDidFetch],[eY,this.notifyDidStartFeaturePreview]]);_refsMetadata;_search;_selectedId;_selectedRows;_showDetailsView;_theme;_repositoryEventsDisposable;_lastFetchedDisposable;isWindowFocused=!0;dispose(){this._disposable.dispose()}canReuseInstance(...e){let t;if(1===this.container.git.openRepositoryCount)return!0;let[i]=e;return(0,k.Z6)(i)?t=i:ec(i)?t=this.container.git.getRepository(i.ref.repoPath):(0,er.c)(i)&&null!=i.state.selectedRepository&&(t=this.container.git.getRepository(i.state.selectedRepository)),t?.uri.toString()===this.repository?.uri.toString()||void 0}getSplitArgs(){return null!=this.repository?[this.repository]:[]}getTelemetryContext(){return{...this.host.getTelemetryContext(),"context.repository.id":this.repository?.idHash,"context.repository.scheme":this.repository?.uri.scheme,"context.repository.closed":this.repository?.closed,"context.repository.folder.scheme":this.repository?.folder?.uri.scheme,"context.repository.provider.id":this.repository?.provider.id}}getShownTelemetryContext(){let e={},t=this.getColumns();if(null!=t)for(let[i,r]of Object.entries(t))r.isHidden||(e[`context.column.${i}.visible`]=!0),null!=r.mode&&(e[`context.column.${i}.mode`]=r.mode);let i=(0,Z.Bq)(M.H.get("graph"),"context.config",{joinArrays:!0});return{...this.getTelemetryContext(),...e,...i}}async onShowing(e,t,...i){this._firstSelection=!0,this._etag=this.container.git.etag,this.container.git.isDiscoveringRepositories&&(this._discovering=this.container.git.isDiscoveringRepositories.then(e=>(this._discovering=void 0,e)),this._etag=await this._discovering);let[r]=i;if((0,k.Z6)(r))this.repository=r;else if(ec(r)){this.repository=this.container.git.getRepository(r.ref.repoPath);let e=r.ref.ref;if((0,B.HH)(e)||(e=await this.container.git.refs(r.ref.repoPath).resolveReference(e,void 0,{force:!0})),this.setSelectedRows(e),null!=this._graph){if(this._graph?.ids.has(e))return this.notifyDidChangeSelection(),[!0,this.getShownTelemetryContext()];this.onGetMoreRows({id:e},!0)}}else if((0,er.c)(r)&&null!=r.state.selectedRepository&&(this.repository=this.container.git.getRepository(r.state.selectedRepository)),null==this.repository&&this.container.git.repositoryCount>1){let[t]=(0,o.qU)("gitlens.showGraph",void 0,...i);"scm"===t.type&&null!=t.scm.rootUri?this.repository=this.container.git.getRepository(t.scm.rootUri):"viewItem"===t.type&&t.node instanceof ei.P&&(this.repository=t.node.repo),null!=this.repository&&!e&&this.host.ready&&this.updateState()}return[!0,this.getShownTelemetryContext()]}onRefresh(e){e&&this.resetRepositoryState()}includeBootstrap(){return this.getState(!0)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,N.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0)),(0,N.Lb)(`${this.host.id}.openInTab`,()=>void(0,N.RS)("gitlens.showGraphPage",void 0,this.repository))),e.push(this.host.registerWebviewCommand("gitlens.graph.push",this.push),this.host.registerWebviewCommand("gitlens.graph.pull",this.pull),this.host.registerWebviewCommand("gitlens.graph.fetch",this.fetch),this.host.registerWebviewCommand("gitlens.graph.pushWithForce",this.forcePush),this.host.registerWebviewCommand("gitlens.graph.publishBranch",this.publishBranch),this.host.registerWebviewCommand("gitlens.graph.switchToAnotherBranch",this.switchToAnother),this.host.registerWebviewCommand("gitlens.graph.createBranch",this.createBranch),this.host.registerWebviewCommand("gitlens.graph.deleteBranch",this.deleteBranch),this.host.registerWebviewCommand("gitlens.graph.copyRemoteBranchUrl",e=>this.openBranchOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openBranchOnRemote",this.openBranchOnRemote),this.host.registerWebviewCommand("gitlens.graph.mergeBranchInto",this.mergeBranchInto),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoBranch",this.rebase),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoUpstream",this.rebaseToRemote),this.host.registerWebviewCommand("gitlens.graph.renameBranch",this.renameBranch),this.host.registerWebviewCommand("gitlens.graph.associateIssueWithBranch",this.associateIssueWithBranch),this.host.registerWebviewCommand("gitlens.graph.switchToBranch",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.hideLocalBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemoteBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemote",e=>this.hideRef(e,{remote:!0})),this.host.registerWebviewCommand("gitlens.graph.hideRefGroup",e=>this.hideRef(e,{group:!0})),this.host.registerWebviewCommand("gitlens.graph.hideTag",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.cherryPick",this.cherryPick),this.host.registerWebviewCommand("gitlens.graph.cherryPick.multi",this.cherryPick),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl.multi",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote.multi",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.commitViaSCM",this.commitViaSCM),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoCommit",this.rebase),this.host.registerWebviewCommand("gitlens.graph.resetCommit",this.resetCommit),this.host.registerWebviewCommand("gitlens.graph.resetToCommit",this.resetToCommit),this.host.registerWebviewCommand("gitlens.graph.resetToTip",this.resetToTip),this.host.registerWebviewCommand("gitlens.graph.revert",this.revertCommit),this.host.registerWebviewCommand("gitlens.graph.showInDetailsView",this.openInDetailsView),this.host.registerWebviewCommand("gitlens.graph.switchToCommit",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.undoCommit",this.undoCommit),this.host.registerWebviewCommand("gitlens.graph.stash.save",this.saveStash),this.host.registerWebviewCommand("gitlens.graph.stash.apply",this.applyStash),this.host.registerWebviewCommand("gitlens.graph.stash.delete",this.deleteStash),this.host.registerWebviewCommand("gitlens.graph.stash.rename",this.renameStash),this.host.registerWebviewCommand("gitlens.graph.createTag",this.createTag),this.host.registerWebviewCommand("gitlens.graph.deleteTag",this.deleteTag),this.host.registerWebviewCommand("gitlens.graph.switchToTag",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.resetToTag",this.resetToTag),this.host.registerWebviewCommand("gitlens.graph.createWorktree",this.createWorktree),this.host.registerWebviewCommand("gitlens.graph.createPullRequest",this.createPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequest",this.openPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequestChanges",this.openPullRequestChanges),this.host.registerWebviewCommand("gitlens.graph.openPullRequestComparison",this.openPullRequestComparison),this.host.registerWebviewCommand("gitlens.graph.openPullRequestOnRemote",this.openPullRequestOnRemote),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithMergeBase",this.openChangedFileDiffsWithMergeBase),this.host.registerWebviewCommand("gitlens.graph.compareWithUpstream",this.compareWithUpstream),this.host.registerWebviewCommand("gitlens.graph.compareWithHead",this.compareHeadWith),this.host.registerWebviewCommand("gitlens.graph.compareBranchWithHead",this.compareBranchWithHead),this.host.registerWebviewCommand("gitlens.graph.compareWithWorking",this.compareWorkingWith),this.host.registerWebviewCommand("gitlens.graph.compareWithMergeBase",this.compareWithMergeBase),this.host.registerWebviewCommand("gitlens.graph.compareAncestryWithWorking",this.compareAncestryWithWorking),this.host.registerWebviewCommand("gitlens.graph.copy",this.copy),this.host.registerWebviewCommand("gitlens.graph.copyMessage",this.copyMessage),this.host.registerWebviewCommand("gitlens.graph.copySha",this.copySha),this.host.registerWebviewCommand("gitlens.graph.addAuthor",this.addAuthor),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOn",()=>this.toggleColumn("author",!0)),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOff",()=>this.toggleColumn("author",!1)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOn",()=>this.toggleColumn("datetime",!0)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOff",()=>this.toggleColumn("datetime",!1)),this.host.registerWebviewCommand("gitlens.graph.columnShaOn",()=>this.toggleColumn("sha",!0)),this.host.registerWebviewCommand("gitlens.graph.columnShaOff",()=>this.toggleColumn("sha",!1)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOn",()=>this.toggleColumn("changes",!0)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOff",()=>this.toggleColumn("changes",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOn",()=>this.toggleColumn("graph",!0)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOff",()=>this.toggleColumn("graph",!1)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOn",()=>this.toggleColumn("message",!0)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOff",()=>this.toggleColumn("message",!1)),this.host.registerWebviewCommand("gitlens.graph.columnRefOn",()=>this.toggleColumn("ref",!0)),this.host.registerWebviewCommand("gitlens.graph.columnRefOff",()=>this.toggleColumn("ref",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphCompact",()=>this.setColumnMode("graph","compact")),this.host.registerWebviewCommand("gitlens.graph.columnGraphDefault",()=>this.setColumnMode("graph",void 0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOn",()=>this.toggleScrollMarker("localBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOff",()=>this.toggleScrollMarker("localBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOn",()=>this.toggleScrollMarker("remoteBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOff",()=>this.toggleScrollMarker("remoteBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOn",()=>this.toggleScrollMarker("stashes",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOff",()=>this.toggleScrollMarker("stashes",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOn",()=>this.toggleScrollMarker("tags",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOff",()=>this.toggleScrollMarker("tags",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerPullRequestOn",()=>this.toggleScrollMarker("pullRequests",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerPullRequestOff",()=>this.toggleScrollMarker("pullRequests",!1)),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToBranch",this.copyDeepLinkToBranch),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToCommit",this.copyDeepLinkToCommit),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToRepo",this.copyDeepLinkToRepo),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToTag",this.copyDeepLinkToTag),this.host.registerWebviewCommand("gitlens.graph.shareAsCloudPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.createPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.createCloudPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.openChangedFiles",this.openFiles),this.host.registerWebviewCommand("gitlens.graph.openOnlyChangedFiles",this.openOnlyChangedFiles),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffs",e=>this.openAllChanges(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorking",e=>this.openAllChangesWithWorking(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsIndividually",e=>this.openAllChanges(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorkingIndividually",e=>this.openAllChangesWithWorking(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileRevisions",this.openRevisions),this.host.registerWebviewCommand("gitlens.graph.resetColumnsDefault",()=>this.updateColumns(e4)),this.host.registerWebviewCommand("gitlens.graph.resetColumnsCompact",()=>this.updateColumns(e5)),this.host.registerWebviewCommand("gitlens.graph.openInWorktree",this.openInWorktree),this.host.registerWebviewCommand("gitlens.graph.openWorktree",this.openWorktree),this.host.registerWebviewCommand("gitlens.graph.openWorktreeInNewWindow",e=>this.openWorktree(e,{location:"newWindow"})),this.host.registerWebviewCommand("gitlens.graph.copyWorkingChangesToWorktree",this.copyWorkingChangesToWorktree),this.host.registerWebviewCommand("gitlens.graph.ai.generateCommitMessage",this.generateCommitMessage),this.host.registerWebviewCommand("gitlens.graph.compareSelectedCommits.multi",this.compareSelectedCommits),this.host.registerWebviewCommand("gitlens.graph.abortPausedOperation",this.abortPausedOperation),this.host.registerWebviewCommand("gitlens.graph.continuePausedOperation",this.continuePausedOperation),this.host.registerWebviewCommand("gitlens.graph.openRebaseEditor",this.openRebaseEditor),this.host.registerWebviewCommand("gitlens.graph.skipPausedOperation",this.skipPausedOperation),this.host.registerWebviewCommand("gitlens.graph.ai.generateChangelogFrom",this.generateChangelogFrom)),e}onWindowFocusChanged(e){this.isWindowFocused=e}onFocusChanged(e){this._showActiveSelectionDetailsDebounced?.cancel(),e&&null!=this.activeSelection&&this.container.views.commitDetails.visible&&this.showActiveSelectionDetails()}onVisibilityChanged(e){if(e||this._showActiveSelectionDetailsDebounced?.cancel(),e&&(null!=this.repository&&this.repository.etag!==this._etagRepository||this.container.subscription.etag!==this._etagSubscription))return void this.updateState(!0);if(e){this.host.sendPendingIpcNotifications();let{activeSelection:e}=this;if(null==e)return;this.showActiveSelectionDetails()}}onMessageReceived(e){switch(!0){case eg.is(e):this.onChooseRepository();break;case eD.is(e):this.onChooseRef(eD,e);break;case em.is(e):this.onDoubleClick(e.params);break;case e_.is(e):this.onEnsureRowRequest(e_,e);break;case e$.is(e):this.onGetCounts(e$,e);break;case ef.is(e):this.onGetMissingAvatars(e.params);break;case ew.is(e):this.onGetMissingRefMetadata(e.params);break;case ev.is(e):this.onGetMoreRows(e.params);break;case eT.is(e):this.onHoverRowRequest(eT,e);break;case ey.is(e):this.onOpenPullRequestDetails(e.params);break;case eE.is(e):this.onSearchRequest(eE,e);break;case eb.is(e):this.onSearchOpenInView(e.params);break;case eC.is(e):this.onColumnsChanged(e.params);break;case eS.is(e):this.updateGraphConfig(e.params);break;case eP.is(e):this.updateGraphSearchMode(e.params);break;case ek.is(e):this.updateExcludedTypes(this._graph?.repoPath,e.params);break;case eA.is(e):this.updateIncludeOnlyRefs(this._graph?.repoPath,e.params);break;case eR.is(e):this.onRefsVisibilityChanged(e.params);break;case eI.is(e):this.onSelectionChanged(e.params)}}async onGetCounts(e,t){let i;if(null!=this._graph){let e=await this.container.git.tags(this._graph.repoPath).getTags();i={branches:(0,K.U9)(this._graph.branches?.values(),e=>!e.remote),remotes:this._graph.remotes.size,stashes:this._graph.stashes?.size,worktrees:null!=this._graph.worktrees?this._graph.worktrees.length-1:void 0,tags:e.values.length}}else i=void 0;this.host.respond(e,t,i)}updateGraphConfig(e){let t,i=this.getComponentConfig();for(t in e.changes)if(i[t]!==e.changes[t])switch(t){case"minimap":M.H.updateEffective("graph.minimap.enabled",e.changes[t]);break;case"minimapDataType":M.H.updateEffective("graph.minimap.dataType",e.changes[t]);break;case"minimapMarkerTypes":{let i=[];for(let r of e.changes[t]??[])switch(r){case"localBranches":case"remoteBranches":case"stashes":case"tags":case"pullRequests":i.push(r)}M.H.updateEffective("graph.minimap.additionalTypes",i);break}case"dimMergeCommits":M.H.updateEffective("graph.dimMergeCommits",e.changes[t]);break;case"onlyFollowFirstParent":M.H.updateEffective("graph.onlyFollowFirstParent",e.changes[t])}}updateGraphSearchMode(e){this.container.storage.store("graph:searchMode",e.searchMode).catch()}_showActiveSelectionDetailsDebounced=void 0;showActiveSelectionDetails(){null==this._showActiveSelectionDetailsDebounced&&(this._showActiveSelectionDetailsDebounced=(0,Y.s)(this.showActiveSelectionDetailsCore.bind(this),250)),this._showActiveSelectionDetailsDebounced()}showActiveSelectionDetailsCore(){let{activeSelection:e}=this;null!=e&&this.host.active&&this.container.events.fire("commit:selected",{commit:e,interaction:"passive",preserveFocus:!0,preserveVisibility:!1===this._showDetailsView},{source:this.host.id})}onConfigurationChanged(e){if(M.H.changed(e,"graph.showDetailsView")&&(this._showDetailsView=M.H.get("graph.showDetailsView")),M.H.changed(e,"graph.commitOrdering"))return void this.updateState();(M.H.changed(e,"defaultDateFormat")||M.H.changed(e,"defaultDateStyle")||M.H.changed(e,"advanced.abbreviatedShaLength")||M.H.changed(e,"graph"))&&(this.notifyDidChangeConfiguration(),(M.H.changed(e,"graph.onlyFollowFirstParent")||(M.H.changed(e,"graph.minimap.enabled")||M.H.changed(e,"graph.minimap.dataType"))&&M.H.get("graph.minimap.enabled")&&"lines"===M.H.get("graph.minimap.dataType")&&!this._graph?.includes?.stats)&&this.updateState())}onFeaturePreviewChanged(e){"graph"===e.feature&&this.notifyDidStartFeaturePreview(e)}getFeaturePreview(){return this.container.subscription.getFeaturePreview("graph")}onRepositoryChanged(e){if(!e.changed(k.Z_.Config,k.Z_.Head,k.Z_.Heads,k.Z_.Remotes,k.Z_.Stash,k.Z_.PausedOperationStatus,k.Z_.Tags,k.Z_.Unknown,k.Ti.Any)){this._etagRepository=e.repository.etag;return}if(e.changed(k.Z_.Config,k.Ti.Any)&&null!=this._refsMetadata)for(let[,e]of this._refsMetadata)null!=e&&(e.issue=void 0);e.changed(k.Z_.Head,k.Ti.Any)&&this.setSelectedRows(void 0),this.updateState(!e.changed(k.Z_.Unknown,k.Ti.Exclusive))}onRepositoryFileSystemChanged(e){e.repository.id===this.repository?.id&&this.notifyDidChangeWorkingTree()}onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(this._etagSubscription=e.etag,this.notifyDidChangeSubscription())}onThemeChanged(e){null!=this._theme&&((0,G.g4)(e)&&(0,G.g4)(this._theme)||(0,G.kH)(e)&&(0,G.kH)(this._theme))||(this._theme=e,this.updateState())}onColumnsChanged(e){this.updateColumns(e.config);let t={...this.getTelemetryContext()};for(let[i,r]of Object.entries(e.config))for(let[e,s]of Object.entries(r))t[`column.${i}.${e}`]=s;this.container.telemetry.sendEvent("graph/columns/changed",t)}onRefsVisibilityChanged(e){this.updateExcludedRefs(this._graph?.repoPath,e.refs,e.visible)}onDoubleClick(e){if("ref"===e.type&&e.ref.context){let t=this.getGraphItemContext(e.ref.context);if(eu(t)){if(null!=e.metadata){if(t=this.getGraphItemContext(e.metadata.data.context),"upstream"===e.metadata.type&&el(t,"upstreamStatus")){let{ahead:e,behind:i,ref:r}=t.webviewItemValue;if(i>0)return void g.a$(r.repoPath,r);if(e>0)return void g.VC(r.repoPath,!1,r)}else if("pullRequest"===e.metadata.type&&el(t,"pullrequest"))return void this.openPullRequestOnRemote(t);else if("issue"===e.metadata.type&&el(t,"issue"))return void this.openIssueOnRemote(t);return}let{ref:i}=t.webviewItemValue;return"head"===e.ref.refType&&e.ref.isCurrentHead?g.S_(i.repoPath):g.S_(i.repoPath,i,!!M.H.isUnset("gitCommands.skipConfirmations")||void 0)}}else if("row"===e.type&&e.row){this._showActiveSelectionDetailsDebounced?.cancel();let t=this.getRevisionReference(this.repository?.path,e.row.id,e.row.type);if(null!=t){this.container.events.fire("commit:selected",{commit:t,interaction:"active",preserveFocus:e.preserveFocus,preserveVisibility:!1},{source:this.host.id});let i=this.host.isHost("editor")?this.container.views.commitDetails:this.container.views.graphDetails;i.ready||i.show({preserveFocus:e.preserveFocus},{commit:t,interaction:"active",preserveVisibility:!1})}}return Promise.resolve()}async onHoverRowRequest(e,t){let i={id:t.params.id,markdown:void 0};if(this.cancelOperation("hover"),null!=this._graph){let e=t.params.id,r=this._hoverCache.get(e);if(null==r){let i,s=this.createCancellation("hover"),o=!0;switch(t.params.type){case"work-dir-changes":o=!1,i=await this.container.git.commits(this._graph.repoPath).getCommit(S.SU);break;case"stash-node":{let e=await this.container.git.stash(this._graph.repoPath)?.getStash();i=e?.stashes.get(t.params.id);break}default:i=await this.container.git.commits(this._graph.repoPath).getCommit(t.params.id)}if(null!=i&&!s.token.isCancellationRequested){let t=this._graph.rowsStats?.get(i.sha);null!=t&&(i=i.with({stats:{...i.stats,additions:t.additions,deletions:t.deletions,files:i.stats?.files?i.stats.files:t.files}})),r=this.getCommitTooltip(i,s.token).catch(t=>{throw this._hoverCache.delete(e),t}),o&&this._hoverCache.set(e,r)}}if(null!=r)try{i.markdown={status:"fulfilled",value:await r}}catch(e){i.markdown={status:"rejected",reason:e}}}i.markdown??={status:"rejected",reason:new a.AL},this.host.respond(e,t,i)}async getCommitTooltip(e,t){let i,r,s,[o,n]=await Promise.allSettled([this.container.git.remotes(e.repoPath).getBestRemotesWithProviders(),e.ensureFullDetails({include:{stats:!0}})]);if(t.isCancellationRequested)throw new a.AL;let l=(0,J.Ro)(o,[]),[u]=l;if(u?.hasIntegration()){let[s,o]=await Promise.allSettled([(0,J.zu)(e.getEnrichedAutolinks(u),t),e.getAssociatedPullRequest(u)]);if(t.isCancellationRequested)throw new a.AL;let n=(0,J.Ro)(s);n?.paused||(i=n?.value),r=(0,J.Ro)(o)}return s=(0,b.kk)(e)?M.H.get("views.formats.stashes.tooltip"):M.H.get("views.formats.commits.tooltip"),this._getBranchesAndTagsTips??=await this.container.git.getBranchesAndTagsTipsLookup(e.repoPath),await y.c.fromTemplateAsync(s,e,{enrichedAutolinks:i,dateFormat:M.H.get("defaultDateFormat"),getBranchAndTagTips:this._getBranchesAndTagsTips,messageAutolinks:!0,messageIndent:4,pullRequest:r,outputFormat:"markdown",remotes:l})}async onEnsureRowRequest(e,t){let i,r;if(null==this._graph)return;let s=t.params,o=this._graph.remappedIds?.get(s.id)??s.id;this._graph.ids.has(o)?(i=s.id,r=s.id!==o?o:void 0):(await this.updateGraphWithMoreRows(this._graph,o,this._search),this.notifyDidChangeRows(),this._graph.ids.has(o)&&(i=s.id,r=s.id!==o?o:void 0)),this.host.respond(e,t,{id:i,remapped:r})}async onGetMissingAvatars(e){if(null==this._graph)return;let t=this._graph.repoPath;async function i(e,i){let r=await (0,s.m_)(e,{ref:i,repoPath:t});this._graph.avatars.set(e,r.toString(!0))}let r=[];for(let[t,s]of Object.entries(e.emails))this._graph.avatars.has(t)||r.push(i.call(this,t,s));r.length&&(await Promise.allSettled(r),this.updateAvatars())}async onGetMissingRefMetadata(e){if(null==this._graph||null===this._refsMetadata||!(0,W.SD)("gitlens:repos:withHostingIntegrationsConnected")?.includes(this._graph.repoPath))return;let t=this._graph.repoPath;async function i(e,i){null==this._refsMetadata&&(this._refsMetadata=new Map);let r=(await this.container.git.branches(t).getBranches({filter:t=>t.id===e}))?.values?.[0],s={...this._refsMetadata.get(e)};if(null==r){for(let t of i)s[t]=null,this._refsMetadata.set(e,s);return}for(let o of i){if(!ep.includes(o)){s[o]=null,this._refsMetadata.set(e,s);continue}if("pullRequest"===o){let i=await r?.getAssociatedPullRequest();if(null==i){(void 0===s.pullRequest||s.pullRequest?.length===0)&&(s.pullRequest=null),this._refsMetadata.set(e,s);continue}s.pullRequest=[{hostingServiceType:i.provider.id,id:Number.parseInt(i.id)||0,title:i.title,author:i.author.name,date:(i.mergedDate??i.closedDate??i.updatedDate)?.getTime(),state:i.state,url:i.url,context:(0,ee.C9)({webviewItem:`gitlens:pullrequest${i.refs?"+refs":""}`,webviewItemValue:{type:"pullrequest",id:i.id,url:i.url,repoPath:t,refs:i.refs,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain,icon:i.provider.icon}}})}],this._refsMetadata.set(e,s),r?.upstream?.missing&&this._refsMetadata.set((0,T.Yk)(t,!0,r.upstream.name),s);continue}if("upstream"===o){let t=r?.upstream;if(null==t||t.missing){s.upstream=null,this._refsMetadata.set(e,s);continue}s.upstream={name:(0,T.km)(t.name),owner:(0,T.Zq)(t.name),ahead:r.upstream?.state.ahead??0,behind:r.upstream?.state.behind??0,context:(0,ee.C9)({webviewItem:"gitlens:upstreamStatus",webviewItemValue:{type:"upstreamStatus",ref:(0,_.iw)(r),ahead:r.upstream?.state.ahead??0,behind:r.upstream?.state.behind??0}})},this._refsMetadata.set(e,s);continue}if("issue"===o){let t=await (0,A.GI)(this.container,r).then(e=>e.value);if((null==t||0===t.length)&&(null==(t=await r.getEnrichedAutolinks().then(async e=>{if(null!=e)return(await Promise.all([...e.values()].map(async([e])=>null!=e?await e:void 0))).filter(e=>null!=e&&e instanceof Object&&"type"in e&&"issue"===e.type)}))||0===t.length)){s.issue=null,this._refsMetadata.set(e,s);continue}let i=[];for(let e of t){let t=function(e){switch(e){case es.Q7.GitHub:return"github";case es.Q7.GitLab:return"gitlab";case es.tp.Jira:return"jiraCloud";case es.Q7.AzureDevOps:case"azure":case"azure-devops":return"azureDevops";case"bitbucket":return es.Q7.Bitbucket;default:return}}(e.provider.id);null!=t&&i.push({displayId:e.id,id:e.nodeId??e.id,title:`${e.title}
Double-click to open issue on ${e.provider.name}`,issueTrackerType:t,url:e.url,context:(0,ee.C9)({webviewItem:"gitlens:issue",webviewItemValue:{type:"issue",id:e.id,url:e.url,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon}}})})}s.issue=i,this._refsMetadata.set(e,s)}}}let r=[];for(let t of Object.keys(e.metadata))r.push(i.call(this,t,e.metadata[t]));r.length&&await Promise.allSettled(r),this.updateRefsMetadata()}async onGetMoreRows(e,t=!1){var i=[];try{if(this._graph?.paging==null)return;if(this._graph?.more==null||this.repository?.etag!==this._etagRepository)return void this.updateState(!0);let r=e1(i,new X.e(`GraohWebviewProvider.onGetMoreRows(${this.host.id})`));await this.updateGraphWithMoreRows(this._graph,e.id,this._search),this.container.telemetry.sendEvent("graph/rows/loaded",{...this.getTelemetryContext(),duration:r.elapsed(),rows:this._graph.rows.length??0}),this.notifyDidChangeRows(t)}catch(e){var r=e,s=!0}finally{e2(i,r,s)}}async onOpenPullRequestDetails(e){let t=this.repository;if(null==t)return;let i=await t.git.branches().getBranch();if(null==i)return;let r=await i.getAssociatedPullRequest();if(null!=r)return this.container.views.pullRequest.showPullRequest(r,i)}async onSearchRequest(e,t){try{var i=[];try{let r=e1(i,new X.e(`GraphWebviewProvider.onSearchRequest(${this.host.id})`)),s=await this.getSearchResults(t.params),o=t.params.search?(0,P.OM)(t.params.search):void 0,n=new Set;if(null!=o)for(let[e,t]of o)t.forEach(e=>n.add(e));this.container.telemetry.sendEvent("graph/searched",{...this.getTelemetryContext(),types:[...n].join(","),duration:r.elapsed(),matches:s.results?.count??0}),this.host.respond(e,t,s)}catch(e){var r=e,s=!0}finally{e2(i,r,s)}}catch(i){this.host.respond(e,t,{results:i instanceof a.AL?void 0:{error:i instanceof v.Do?"Invalid search pattern":"Unexpected error"}})}}async getSearchResults(e){if(null==e.search)return this.resetSearchState(),{results:void 0};let t=this._search;if(e.more&&t?.more!=null&&t.comparisonKey===(0,P.b4)(e.search))return null!=(t=await t.more(e.limit??M.H.get("graph.searchItemLimit")??100))?(this._search=t,await this.ensureSearchStartsInRange(this._graph,t),{results:t.results.size>0?{ids:Object.fromEntries((0,K.Tj)(t.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:t.results.size,paging:{hasMore:t.paging?.hasMore??!1}}:void 0}):{results:void 0};if(null==t||t.comparisonKey!==(0,P.b4)(e.search)){if(null==this.repository)return{results:{error:"No repository"}};this.repository.etag!==this._etagRepository&&this.updateState(!0);let i=this.createCancellation("search");try{t=await this.repository.git.graph().searchGraph(e.search,{limit:M.H.get("graph.searchItemLimit")??100,ordering:M.H.get("graph.commitOrdering"),cancellation:i.token})}catch(e){throw this._search=void 0,e}if(i.token.isCancellationRequested)throw new a.AL;this._search=t}else t=this._search;let i=await this.ensureSearchStartsInRange(this._graph,t),r=!1;return null!=i&&(r=!0,this.setSelectedRows(i)),{results:0===t.results.size?{count:0}:{ids:Object.fromEntries((0,K.Tj)(t.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:t.results.size,paging:{hasMore:t.paging?.hasMore??!1}},selectedRows:r?this._selectedRows:void 0}}onSearchOpenInView(e){null!=this.repository&&this.container.views.searchAndCompare.search(this.repository.path,e.search,{label:{label:`for ${e.search.query}`},reveal:{select:!0,focus:!1,expand:!0}})}async onChooseRepository(){let e=this.container.git.openRepositories.sort((e,t)=>(e===this.repository?1:-1)-(t===this.repository?1:-1)||(e.starred?-1:1)-(t.starred?-1:1)||e.index-t.index),t=await (0,q.oe)(`Switch Repository ${n.EO.Dot} ${this.repository?.name}`,"Choose a repository to switch to",e);null!=t&&(this.repository=t,this.container.telemetry.sendEvent("graph/repository/changed",{...this.getTelemetryContext(),"repository.id":this.repository?.idHash,"repository.scheme":this.repository?.uri.scheme,"repository.closed":this.repository?.closed,"repository.folder.scheme":this.repository?.folder?.uri.scheme,"repository.provider.id":this.repository?.provider.id}))}async onChooseRef(e,t){let i;if(null==this.repository)return this.host.respond(e,t,void 0);if(t.params.alt)i=await (0,U.NZ)(this.repository.path,`Jump to Reference ${n.EO.Dot} ${this.repository?.name}`,"Choose a reference to jump to",{include:U.m7.BranchesAndTags});else{let e=(0,K.I6)(this._graph.branches.values(),e=>e.current);null==e&&(e=await this.repository.git.branches().getBranch()),null!=e&&(i=e)}return this.host.respond(e,t,i?.sha!=null?{name:i.name,sha:i.sha}:void 0)}_fireSelectionChangedDebounced=void 0;onSelectionChanged(e){this._showActiveSelectionDetailsDebounced?.cancel();let t=e.selection[0];this.setSelectedRows(t?.id),null==this._fireSelectionChangedDebounced&&(this._fireSelectionChangedDebounced=(0,Y.s)(this.fireSelectionChanged.bind(this),50)),this._fireSelectionChangedDebounced(t?.id,t?.type)}fireSelectionChanged(e,t){if(null==this.repository)return;let i=this.getRevisionReference(this.repository.path,e,t),r=null!=i?[i]:void 0;this._selection=r,null!=r&&(!(!this._firstSelection&&this.host.isHost("editor"))||this.host.active)&&(this.container.events.fire("commit:selected",{commit:r[0],interaction:"passive",preserveFocus:!0,preserveVisibility:this._firstSelection?!1===this._showDetailsView:"selection"!==this._showDetailsView},{source:this.host.id}),this._firstSelection=!1)}_notifyDidChangeStateDebounced=void 0;getRevisionReference(e,t,i){if(null!=e&&null!=t)switch(i){case"stash-node":return(0,F.kA)(t,e,{refType:"stash",name:t,number:void 0});case"work-dir-changes":return(0,F.kA)(S.SU,e,{refType:"revision"});default:return(0,F.kA)(t,e,{refType:"revision"})}}updateState(e=!1){if(this.host.clearPendingIpcNotifications(),e)return void this.notifyDidChangeState();null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,Y.s)(this.notifyDidChangeState.bind(this),250)),this._notifyDidChangeStateDebounced()}_notifyDidChangeAvatarsDebounced=void 0;updateAvatars(e=!1){if(e)return void this.notifyDidChangeAvatars();null==this._notifyDidChangeAvatarsDebounced&&(this._notifyDidChangeAvatarsDebounced=(0,Y.s)(this.notifyDidChangeAvatars.bind(this),100)),this._notifyDidChangeAvatarsDebounced()}async notifyDidChangeAvatars(){if(null==this._graph)return;let e=this._graph;return this.host.notify(eL,{avatars:Object.fromEntries(e.avatars)})}async notifyDidChangeBranchState(e){return this.host.notify(eU,{branchState:e})}_notifyDidChangeRefsMetadataDebounced=void 0;updateRefsMetadata(e=!1){if(e)return void this.notifyDidChangeRefsMetadata();null==this._notifyDidChangeRefsMetadataDebounced&&(this._notifyDidChangeRefsMetadataDebounced=(0,Y.s)(this.notifyDidChangeRefsMetadata.bind(this),100)),this._notifyDidChangeRefsMetadataDebounced()}async notifyDidChangeRefsMetadata(){return this.host.notify(eq,{metadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata})}async notifyDidChangeColumns(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eN,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(eN,{columns:t,context:this.getColumnHeaderContext(t),settingsContext:this.getGraphSettingsIconContext(t)})}async notifyDidChangeScrollMarkers(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eM,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(eM,{context:this.getGraphSettingsIconContext(t)})}async notifyDidChangeRefsVisibility(e){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eW,this._ipcNotificationMap,this),!1;if(null==e){let t=this.getFiltersByRepo(this._graph?.repoPath);if(e={branchesVisibility:this.getBranchesVisibility(t),excludeRefs:this.getExcludedRefs(t,this._graph)??{},excludeTypes:this.getExcludedTypes(t)??{},includeOnlyRefs:void 0},e?.includeOnlyRefs==null){let i=await this.getIncludedRefs(t,this._graph,{timeout:100});e.includeOnlyRefs=i.refs,i.continuation?.then(t=>{null!=t&&this.notifyDidChangeRefsVisibility({...e,includeOnlyRefs:t})})}}return this.host.notify(eW,e)}async notifyDidChangeConfiguration(){return this.host.ready&&this.host.visible?this.host.notify(eF,{config:this.getComponentConfig()}):(this.host.addPendingIpcNotification(eF,this._ipcNotificationMap,this),!1)}async notifyDidFetch(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eQ,this._ipcNotificationMap,this),!1;let e=await this.repository.getLastFetched();return this.host.notify(eQ,{lastFetched:new Date(e)})}async notifyDidChangeRows(e=!1,t){if(null==this._graph)return;let i=this._graph;return this.host.notify(eG,{rows:i.rows,avatars:Object.fromEntries(i.avatars),downstreams:Object.fromEntries(i.downstreams),refsMetadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata,rowsStats:i.rowsStats?.size?Object.fromEntries(i.rowsStats):void 0,rowsStatsLoading:i.rowsStatsDeferred?.isLoaded!=null&&!i.rowsStatsDeferred.isLoaded(),selectedRows:e?this._selectedRows:void 0,paging:{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}},t)}async notifyDidChangeRowsStats(e){if(null!=e.rowsStats)return this.host.notify(eH,{rowsStats:Object.fromEntries(e.rowsStats),rowsStatsLoading:e.rowsStatsDeferred?.isLoaded!=null&&!e.rowsStatsDeferred.isLoaded()})}async notifyDidStartFeaturePreview(e){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eY,this._ipcNotificationMap,this),!1;e??=this.getFeaturePreview();let[t]=await this.getGraphAccess();return this.host.notify(eY,{featurePreview:e,allowed:this.isGraphAccessAllowed(t,e)})}async notifyDidChangeWorkingTree(){return this.host.ready&&this.host.visible?this.host.notify(ej,{stats:await this.getWorkingTreeStats()??{added:0,deleted:0,modified:0}}):(this.host.addPendingIpcNotification(ej,this._ipcNotificationMap,this),!1)}async notifyDidChangeSelection(){return this.host.ready&&this.host.visible?this.host.notify(eV,{selection:this._selectedRows??{}}):(this.host.addPendingIpcNotification(eV,this._ipcNotificationMap,this),!1)}async notifyDidChangeSubscription(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eB,this._ipcNotificationMap,this),!1;let[e]=await this.getGraphAccess();return this.host.notify(eB,{subscription:e.subscription.current,allowed:this.isGraphAccessAllowed(e,this.getFeaturePreview())})}async notifyDidChangeState(){return this.host.ready&&this.host.visible?(this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(eO,{state:await this.getState()})):(this.host.addPendingIpcNotification(eO,this._ipcNotificationMap,this),!1)}ensureRepositorySubscriptions(e){if(this.ensureLastFetchedSubscription(e),!e&&null!=this._repositoryEventsDisposable)return;null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0);let t=this.repository;null!=t&&(this._repositoryEventsDisposable=r.Disposable.from(t.onDidChange(this.onRepositoryChanged,this),t.watchFileSystem(1e3),t.onDidChangeFileSystem(this.onRepositoryFileSystemChanged,this),(0,W.wt)(e=>{"gitlens:repos:withHostingIntegrationsConnected"===e&&(this.resetRefsMetadata(),this.updateRefsMetadata())})))}onIntegrationConnectionChanged(e){this.notifyDidChangeRepoConnection()}async notifyDidChangeRepoConnection(){this.host.notify(ex,{repositories:await this.getRepositoriesState()})}async getRepositoriesState(){return en(this.container.git.openRepositories)}async ensureLastFetchedSubscription(e){if(!e&&null!=this._lastFetchedDisposable)return;null!=this._lastFetchedDisposable&&(this._lastFetchedDisposable.dispose(),this._lastFetchedDisposable=void 0);let t=this.repository;if(null==t)return;let i=await t.getLastFetched()??0,r=(0,x.u)(i);0!==i&&r>0&&(this._lastFetchedDisposable=(0,Q.gC)(()=>{let e=(0,x.u)(i);r!==(0,x.u)(i)&&(r=e),this.notifyDidFetch()},r))}async ensureSearchStartsInRange(e,t){let i;if(0!==t.results.size){for(let r of t.results.keys()){let t=e.remappedIds?.get(r)??r;if(e.ids.has(t))return t;i=t;break}if(null!=i)return await this.updateGraphWithMoreRows(e,i),this.notifyDidChangeRows(),e.ids.has(i)?i:void 0}}getColumns(){return this.container.storage.getWorkspace("graph:columns")}getExcludedTypes(e){return e?.excludeTypes}getExcludedRefs(e,t){if(null==t)return;let i=e?.excludeRefs;if(null==i||0===Object.keys(i).length)return;let r=e=>this.host.asWebviewUri(e),s=M.H.get("graph.avatars",void 0,!0),o={};for(let e in i){let n={...i[e]};if("remote"===n.type&&n.owner){let e=t.remotes.get(n.owner);null!=e&&(n.avatarUrl=((s?e.provider?.avatarUri:void 0)??(0,D.Wf)(this.container,e,r))?.toString(!0))}o[e]=n}return o}async getIncludedRefs(e,t,i){let r,s;if(this.cancelOperation("computeIncludedRefs"),null==t)return{refs:{}};switch(this.getBranchesVisibility(e)){case"smart":{let e,o=(0,K.I6)(t.branches.values(),e=>e.current);if(null==o)return{refs:{}};let n=this.createCancellation("computeIncludedRefs"),[a,l,u]=await Promise.allSettled([this.container.git.branches(o.repoPath).getBaseBranchName?.(o.name),(0,I.Z5)(this.container,o.repoPath,o.getRemoteName()),(0,I.b3)(this.container,o,{cancellation:n.token,timeout:i?.timeout})]),c=(0,J.Ro)(a),h=(0,J.Ro)(l),d=(0,J.Ro)(u);d?.paused?s=d.value.then(async e=>{if(!(null==e||n?.token.isCancellationRequested))return Object.fromEntries(await this.getVisibleRefs(t,o,{baseOrTargetBranchName:e,defaultBranchName:h}))}):e=d?.value,r=await this.getVisibleRefs(t,o,{baseOrTargetBranchName:e??c,defaultBranchName:h});break}case"current":{let e=(0,K.I6)(t.branches.values(),e=>e.current);if(null==e)return{refs:{}};r=await this.getVisibleRefs(t,e);break}default:r=new Map}return{refs:Object.fromEntries(r),continuation:s}}getFiltersByRepo(e){if(null==e)return;let t=this.container.storage.getWorkspace("graph:filtersByRepo");return t?.[e]}getColumnSettings(e){let t={...e4};if(null!=e)for(let[i,r]of Object.entries(e))t[i]={...e4[i],...r};return t}getColumnHeaderContext(e){return(0,ee.C9)({webviewItem:"gitlens:graph:columns",webviewItemValue:this.getColumnContextItems(e).join(",")})}getGraphSettingsIconContext(e){return(0,ee.C9)({webviewItem:"gitlens:graph:settings",webviewItemValue:this.getSettingsIconContextItems(e).join(",")})}getColumnContextItems(e){let t=[],i=["author","changes","datetime","graph","message","ref","sha"],r=0;for(let[s,o]of Object.entries(e))i.includes(s)&&(!o.isHidden&&r++,t.push(`column:${s}:${o.isHidden?"hidden":"visible"}${o.mode?`+${o.mode}`:""}`));return r>1&&t.push("columns:canHide"),t}getSettingsIconContextItems(e){let t=null!=e?this.getColumnContextItems(e):[];if(M.H.get("graph.scrollMarkers.enabled")){let e=M.H.get("graph.scrollMarkers.additionalTypes");for(let i of["localBranches","remoteBranches","stashes","tags","pullRequests"])t.push(`scrollMarker:${i}:${e.includes(i)?"enabled":"disabled"}`)}return t}getBranchesVisibility(e){let t;return this.repository?.virtual?"current":null==e?M.H.get("graph.branchesVisibility"):(null!=e&&null==e.branchesVisibility&&null!=e.includeOnlyRefs&&1===Object.keys(e.includeOnlyRefs).length&&"HEAD"===Object.values(e.includeOnlyRefs)[0].name?(t="current",null!=this.repository&&this.updateFiltersByRepo(this.repository.path,{branchesVisibility:t,includeOnlyRefs:void 0})):t=e?.branchesVisibility??M.H.get("graph.branchesVisibility"),t)}getComponentConfig(){return{avatars:M.H.get("graph.avatars"),dateFormat:M.H.get("graph.dateFormat")??M.H.get("defaultDateFormat")??"short+short",dateStyle:M.H.get("graph.dateStyle")??M.H.get("defaultDateStyle"),enabledRefMetadataTypes:this.getEnabledRefMetadataTypes(),dimMergeCommits:M.H.get("graph.dimMergeCommits"),enableMultiSelection:M.H.get("graph.multiselect"),highlightRowsOnRefHover:M.H.get("graph.highlightRowsOnRefHover"),idLength:M.H.get("advanced.abbreviatedShaLength"),minimap:M.H.get("graph.minimap.enabled"),minimapDataType:M.H.get("graph.minimap.dataType"),minimapMarkerTypes:this.getMinimapMarkerTypes(),onlyFollowFirstParent:M.H.get("graph.onlyFollowFirstParent"),scrollRowPadding:M.H.get("graph.scrollRowPadding"),scrollMarkerTypes:this.getScrollMarkerTypes(),showGhostRefsOnRowHover:M.H.get("graph.showGhostRefsOnRowHover"),showRemoteNamesOnRefs:M.H.get("graph.showRemoteNames"),sidebar:M.H.get("graph.sidebar.enabled")??!0}}getScrollMarkerTypes(){return M.H.get("graph.scrollMarkers.enabled")?["selection","highlights","head","upstream",...M.H.get("graph.scrollMarkers.additionalTypes")]:[]}getMinimapMarkerTypes(){return M.H.get("graph.minimap.enabled")?["selection","highlights","head","upstream",...M.H.get("graph.minimap.additionalTypes")]:[]}getEnabledRefMetadataTypes(){let e=[];return M.H.get("graph.issues.enabled")&&e.push("issue"),M.H.get("graph.pullRequests.enabled")&&e.push("pullRequest"),M.H.get("graph.showUpstreamStatus")&&e.push("upstream"),e}async getGraphAccess(){let e=await this.container.git.access("graph",this.repository?.path);this._etagSubscription=this.container.subscription.etag,!1===e.allowed&&null==e.subscription.current.previewTrial&&(e=await this.container.git.access("graph",this.repository?.path));let t=e?.visibility;return null==t&&null!=this.repository&&(t=await this.container.git.visibility(this.repository?.path)),[e,t]}isGraphAccessAllowed(e,t){return(e?.allowed??!1)!==!1||"active"===(0,l.Zd)(t)}getGraphItemContext(e){let t="string"==typeof e?JSON.parse(e):e;return null==t||"webview"in t||(t.webview=this.host.id),t}async getWorkingTreeStats(){if(null==this.repository||0===this.container.git.repositoryCount)return;let e=this.container.git.status(this.repository.path),t=await e.getStatus(),i=t?.getDiffStatus(),r=await e.getPausedOperationStatus?.();return{added:i?.added??0,deleted:i?.deleted??0,modified:i?.changed??0,hasConflicts:t?.hasConflicts,pausedOpStatus:r,context:(0,ee.C9)({webviewItem:"gitlens:wip",webviewItemValue:{type:"commit",ref:this.getRevisionReference(this.repository.path,S.SU,"work-dir-changes")}})}}async getState(e){let t,i;if(0===this.container.git.repositoryCount||null==this.repository&&(this.repository=this.container.git.getBestRepositoryOrFirst(),null==this.repository))return{...this.host.baseWebviewState,allowed:!0,repositories:[]};this._etagRepository=this.repository?.etag,this.host.title=`${this.host.originalTitle}: ${this.repository.formattedName}`;let{defaultItemLimit:r}=M.H.get("graph"),s=Math.max(r,this._graph?.ids.size??r),o=this._selectedId,n=null==o||o===S.SU?"HEAD":o,a=this.getColumns(),l=this.getColumnSettings(a),u=this.repository.git.graph().getGraph(n,e=>this.host.asWebviewUri(e),{include:{stats:M.H.get("graph.minimap.enabled")&&"lines"===M.H.get("graph.minimap.dataType")||!l.changes.isHidden},limit:s}),c=Promise.allSettled([this.getGraphAccess(),this.getWorkingTreeStats(),this.repository.git.branches().getBranch(),this.repository.getLastFetched()]);e?queueMicrotask(async()=>{let e=await u;this.setGraph(e),o!==S.SU&&this.setSelectedRows(e.id),this.notifyDidChangeRefsVisibility(),this.notifyDidChangeRows(!0)}):(t=await u,this.setGraph(t),o!==S.SU&&this.setSelectedRows(t.id));let[h,d,p,g]=await c,[m,f]=(0,J.Ro)(h)??[],w=(0,J.Ro)(p);if(null!=w){i={...w.upstream?.state??{ahead:0,behind:0}};let e=t?.worktreesByBranch??await (0,$.Ao)(this.repository);if(i.worktree=e?.has(w.id)??!1,null!=w.upstream){i.upstream=w.upstream.name;let e=this.createCancellation("state"),[t,r]=await Promise.allSettled([w.getRemote(),(0,J.wW)(w.getAssociatedPullRequest(),e.token,100)]),s=(0,J.Ro)(t);s?.provider!=null&&(i.provider={name:s.provider.name,icon:"remote"===s.provider.icon?"cloud":s.provider.icon,url:await s.provider.url({type:R.J.Repo})});let o=(0,J.Ro)(r);if(o?.paused){let t={...i};o.value.then(i=>{e?.token.isCancellationRequested||null!=i&&(t.pr=(0,O.pf)(i),this.notifyDidChangeBranchState(t))})}else{let e=o?.value;null!=e&&(i.pr=(0,O.pf)(e))}}}let v=this.getFiltersByRepo(this.repository.path),y={branchesVisibility:this.getBranchesVisibility(v),excludeRefs:this.getExcludedRefs(v,t)??{},excludeTypes:this.getExcludedTypes(v)??{},includeOnlyRefs:void 0};if(null!=t){let e=await this.getIncludedRefs(v,t,{timeout:100});y.includeOnlyRefs=e.refs,e.continuation?.then(e=>{null!=e&&this.notifyDidChangeRefsVisibility({...y,includeOnlyRefs:e})})}let b=this.container.storage.get("graph:searchMode")??"normal",C=this.getFeaturePreview();return{...this.host.baseWebviewState,webroot:this.host.getWebRoot(),windowFocused:this.isWindowFocused,repositories:await en(this.container.git.openRepositories),selectedRepository:this.repository.path,selectedRepositoryVisibility:f,branchesVisibility:y.branchesVisibility,branch:w&&{name:w.name,ref:w.ref,refType:w.refType,remote:w.remote,repoPath:w.repoPath,sha:w.sha,id:w.id,upstream:w.upstream},branchState:i,lastFetched:new Date((0,J.Ro)(g)),selectedRows:this._selectedRows,subscription:m?.subscription.current,allowed:this.isGraphAccessAllowed(m,C),avatars:null!=t?Object.fromEntries(t.avatars):void 0,refsMetadata:null===this.resetRefsMetadata()?null:{},loading:e,rowsStatsLoading:t?.rowsStatsDeferred?.isLoaded!=null&&!t.rowsStatsDeferred.isLoaded(),rows:t?.rows,downstreams:null!=t?Object.fromEntries(t.downstreams):void 0,paging:null!=t?{startingCursor:t.paging?.startingCursor,hasMore:t.paging?.hasMore??!1}:void 0,columns:l,config:this.getComponentConfig(),context:{header:this.getColumnHeaderContext(l),settings:this.getGraphSettingsIconContext(l)},excludeRefs:y.excludeRefs,excludeTypes:y.excludeTypes,includeOnlyRefs:y.includeOnlyRefs,nonce:this.host.cspNonce,workingTreeStats:(0,J.Ro)(d)??{added:0,deleted:0,modified:0},defaultSearchMode:b,featurePreview:C}}updateColumns(e){let t=this.container.storage.getWorkspace("graph:columns");for(let[i,r]of Object.entries(e))t=(0,Z.Y8)(t,i,r);this.container.storage.storeWorkspace("graph:columns",t).catch(),this.notifyDidChangeColumns()}updateExcludedRefs(e,t,i){if(null==e||!t?.length)return;let r=this.getFiltersByRepo(e)?.excludeRefs??{};for(let e of t)r=(0,Z.Y8)(r,e.id,i?void 0:{id:e.id,type:e.type,name:e.name,owner:e.owner});this.updateFiltersByRepo(e,{excludeRefs:r}),this.notifyDidChangeRefsVisibility()}updateFiltersByRepo(e,t){if(null==e)return;let i=this.container.storage.getWorkspace("graph:filtersByRepo");return this.container.storage.storeWorkspace("graph:filtersByRepo",(0,Z.Y8)(i,e,{...i?.[e],...t}))}async getSmartRefs(e,{refs:t,currentBranch:i,defaultBranchName:r,associatedPullRequest:s}){let o=!0;if(s?.refs!=null){let i,r=(0,K.I6)(e.remotes.values(),e=>e.matches(s.refs.base.url));null!=r&&(i=e.branches.get(`${r.name}/${s.refs.base.branch}`)),null!=i&&(t.push({id:i.id,name:i.name,type:"remote"}),o=!1)}if(o&&null!=r&&r!==i?.name){let i=e.branches.get(r);if(null!=i)if(i.remote){t.push({id:i.id,name:i.name,type:"remote"});let s=await (0,T.kY)(r,e.branches);null!=s&&t.push({id:s.id,name:s.name,type:"head"})}else t.push({id:i.id,name:i.name,type:"head"}),null==i.upstream||i.upstream.missing||t.push({id:(0,T.Yk)(e.repoPath,!0,i.upstream.name),name:i.upstream.name,type:"remote"})}return t}async getVisibleRefs(e,t,i){let r=new Map([t.remote?[t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()}]:[t.id,{id:t.id,type:"head",name:t.name}]]);if(null!=t.upstream&&!t.upstream.missing){let i=(0,T.Yk)(e.repoPath,!0,t.upstream.name);r.has(i)||r.set(i,{id:i,type:"remote",name:(0,T.km)(t.upstream.name),owner:t.getRemoteName()})}let s=!0,o=i?.baseOrTargetBranchName;if(null!=o&&o!==t?.name){let t=e.branches.get(o);if(null!=t){if(s=!1,t.remote)r.has(t.id)||r.set(t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()});else if(null!=t.upstream&&!t.upstream.missing){let i=(0,T.Yk)(e.repoPath,!0,t.upstream.name);r.has(t.id)||r.set(i,{id:i,type:"remote",name:(0,T.km)(t.upstream.name),owner:t.getRemoteName()})}}}let n=i?.associatedPullRequest;if(n?.refs!=null){let t,i=(0,K.I6)(e.remotes.values(),e=>e.matches(n.refs.base.url));null!=i&&(t=e.branches.get(`${i.name}/${n.refs.base.branch}`)),null!=t&&(s=!1,r.has(t.id)||r.set(t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()}))}if(s){let s=i?.defaultBranchName;if(null!=s&&s!==t?.name){let t=e.branches.get(s);if(null!=t){if(t.remote){r.has(t.id)||r.set(t.id,{id:t.id,type:"remote",name:t.getNameWithoutRemote(),owner:t.getRemoteName()});let i=await (0,T.kY)(s,e.branches);null==i||r.has(i.id)||r.set(i.id,{id:i.id,type:"head",name:i.name})}else if(r.has(t.id)||r.set(t.id,{id:t.id,type:"head",name:t.name}),null!=t.upstream&&!t.upstream.missing){let i=(0,T.Yk)(e.repoPath,!0,t.upstream.name);r.has(t.id)||r.set(i,{id:i,type:"remote",name:(0,T.km)(t.upstream.name),owner:t.getRemoteName()})}}}}return r}updateIncludeOnlyRefs(e,{branchesVisibility:t,refs:i}){let r;if(null!=e){if(i?.length)for(let e of(r={},i))r[e.id]={id:e.id,type:e.type,name:e.name,owner:e.owner};else r=void 0;if(null!=t){let i=this.getBranchesVisibility(this.getFiltersByRepo(e));this.container.telemetry.sendEvent("graph/branchesVisibility/changed",{...this.getTelemetryContext(),"branchesVisibility.old":i,"branchesVisibility.new":t})}this.updateFiltersByRepo(e,{branchesVisibility:t,includeOnlyRefs:r}),this.notifyDidChangeRefsVisibility()}}updateExcludedTypes(e,{key:t,value:i}){if(null==e)return;let r=this.getFiltersByRepo(e)?.excludeTypes;(null!=r&&Object.keys(r).length||!1!==i)&&(r=(0,Z.Y8)(r,t,i),this.container.telemetry.sendEvent("graph/filters/changed",{...this.getTelemetryContext(),key:t,value:i}),this.updateFiltersByRepo(e,{excludeTypes:r}),this.notifyDidChangeRefsVisibility())}resetHoverCache(){this._hoverCache.clear(),this.cancelOperation("hover")}resetRefsMetadata(){return this._refsMetadata=(0,W.SD)("gitlens:repos:withHostingIntegrationsConnected")?void 0:null,this._refsMetadata}resetRepositoryState(){this._getBranchesAndTagsTips=void 0,this.setGraph(void 0),this.setSelectedRows(void 0)}resetSearchState(){this._search=void 0,this.cancelOperation("search")}setSelectedRows(e){this._selectedId!==e&&(this._selectedId=e,e===S.SU&&(e="work-dir-changes"),this._selectedRows=null!=e?{[e]:!0}:void 0)}setGraph(e){this._graph=e,null==e?(this.resetHoverCache(),this.resetRefsMetadata(),this.resetSearchState(),this.cancelOperation("computeIncludedRefs")):e.rowsStatsDeferred?.promise.then(()=>void this.notifyDidChangeRowsStats(e))}async updateGraphWithMoreRows(e,t,i){let{defaultItemLimit:r,pageItemLimit:s}=M.H.get("graph"),o=await e.more?.(s??r,t);if(null!=o){if(this.setGraph(o),!i?.paging?.hasMore)return;let e=(0,K.HV)(i.results)?.[0];if(null==e)return;let t=o.remappedIds?.get(e)??e;o.ids.has(t)&&queueMicrotask(async()=>{try{let e=await this.getSearchResults({search:i.query,more:!0});this.host.notify(ez,e)}catch(e){if(e instanceof a.AL)return;this.host.notify(ez,{results:{error:e instanceof v.Do?"Invalid search pattern":"Unexpected error"}})}})}}fetch(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;g.hd(this.repository,t)}forcePush(e){this.push(e,!0)}pull(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;g.a$(this.repository,t)}push(e,t){let i=null!=e?this.getGraphItemRef(e):void 0;g.VC(this.repository,t,i)}createBranch(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():c.vt(t.repoPath,t)}deleteBranch(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue;return c.TF(t.repoPath,t)}return Promise.resolve()}mergeBranchInto(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue;return g.h1(t.repoPath,t)}return Promise.resolve()}openBranchOnRemote(e,t){if(eu(e,"branch")){let i,{ref:r}=e.webviewItemValue;return r.remote?i=(0,T.Zq)(r.name):null!=r.upstream&&(i=(0,T.Zq)(r.upstream.name)),(0,N.RS)("gitlens.openOnRemote",{repoPath:r.repoPath,resource:{type:R.J.Branch,branch:r.name},remote:i,clipboard:t})}return Promise.resolve()}publishBranch(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue;return g.VC(t.repoPath,void 0,t)}return Promise.resolve()}rebase(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():g.RU(t.repoPath,t)}rebaseToRemote(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return g.RU(t.repoPath,(0,F.kA)(t.upstream.name,t.repoPath,{refType:"branch",name:t.upstream.name,remote:!0}))}return Promise.resolve()}renameBranch(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue;return c.$w(t.repoPath,t)}return Promise.resolve()}associateIssueWithBranch(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue;return(0,N.RS)("gitlens.associateIssueWithBranch",{command:"associateIssueWithBranch",branch:t,source:"graph"})}return Promise.resolve()}cherryPick(e){let{selection:t}=this.getGraphItemRefs(e,"revision");return null==t?Promise.resolve():g.$T(t[0].repoPath,t)}async copy(e){let t,{selection:i}=this.getGraphItemRefs(e);if(i.length)t=i.map(e=>"revision"===e.refType&&e.message?`${e.name}: ${e.message.trim()}`:e.name).join(`
`);else if(el(e,"contributor")){let{name:i,email:r}=e.webviewItemValue;t=`${i}${r?` <${r}>`:""}`}else if(el(e,"pullrequest")){let{url:i}=e.webviewItemValue;t=i}null!=t&&await r.env.clipboard.writeText(t)}copyMessage(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():(0,N.RS)("gitlens.copyMessageToClipboard",{repoPath:t.repoPath,sha:t.ref,message:"message"in t?t.message:void 0})}async copySha(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=t.ref;return(0,B.HH)(i)||(i=await this.container.git.refs(t.repoPath).resolveReference(i,void 0,{force:!0})),(0,N.RS)("gitlens.copyShaToClipboard",{sha:i})}openInDetailsView(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():this.host.isHost("view")?void(0,h.tl)(t,{preserveFocus:!0,preserveVisibility:!1}):(0,N.RS)("gitlens.showInDetailsView",{ref:t})}async commitViaSCM(e){let t=this.getGraphItemRef(e,"revision");if(await (0,N.S4)("workbench.view.scm"),null!=t){let e=await this.container.git.getScmRepository(t.repoPath);if(null==e)return;e.inputBox.value=e.inputBox.value}}openCommitOnRemote(e,t){let{selection:i}=this.getGraphItemRefs(e,"revision");return null==i?Promise.resolve():(0,N.RS)("gitlens.openOnRemote",{repoPath:i[0].repoPath,resource:i.map(e=>({type:R.J.Commit,sha:e.ref})),clipboard:t})}async compareSelectedCommits(e){let{selection:t}=this.getGraphItemRefs(e,"revision");if(null==t||2!==t.length)return Promise.resolve();let[i,r]=t,[s,o]=await (0,h.Di)(this.container,i.repoPath,i.ref,r.ref);return this.container.views.searchAndCompare.compare(i.repoPath,s,o)}async abortPausedOperation(e){null!=this.repository&&await (0,p._e)(this.repository)}async continuePausedOperation(e){if(null==this.repository)return;let t=await this.repository.git.status().getPausedOperationStatus?.();null!=t&&"revert"!==t.type&&await (0,p.Ts)(this.repository)}async openRebaseEditor(e){if(null==this.repository)return;let t=await this.repository.git.status().getPausedOperationStatus?.();if(null==t||"rebase"!==t.type)return;let i=await this.repository.git.config().getGitDir?.();if(null==i)return;let s=r.Uri.joinPath(i.uri,"rebase-merge","git-rebase-todo");(0,N.S4)("vscode.openWith",s,"gitlens.rebase",{preview:!1})}async skipPausedOperation(e){null!=this.repository&&await (0,p.RG)(this.repository)}copyDeepLinkToBranch(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue;return(0,N.RS)("gitlens.copyDeepLinkToBranch",{refOrRepoPath:t})}return Promise.resolve()}copyDeepLinkToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():(0,N.RS)("gitlens.copyDeepLinkToCommit",{refOrRepoPath:t})}copyDeepLinkToRepo(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue;return t.remote?(0,N.RS)("gitlens.copyDeepLinkToRepo",{refOrRepoPath:t.repoPath,remote:(0,T.Zq)(t.name)}):Promise.resolve()}return Promise.resolve()}copyDeepLinkToTag(e){if(eu(e,"tag")){let{ref:t}=e.webviewItemValue;return(0,N.RS)("gitlens.copyDeepLinkToTag",{refOrRepoPath:t})}return Promise.resolve()}async shareAsCloudPatch(e){let t=this.getGraphItemRef(e,"revision")??this.getGraphItemRef(e,"stash");if(null==t)return Promise.resolve();let{summary:i,body:r}=(0,E.TH)(t.message);return(0,N.RS)("gitlens.createCloudPatch",{to:t.ref,repoPath:t.repoPath,title:i,description:r})}resetCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():g.cL(t.repoPath,(0,F.kA)(`${t.ref}^`,t.repoPath,{refType:"revision",name:`${t.name}^`,message:t.message}))}resetToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():g.cL(t.repoPath,t)}resetToTip(e){let t=this.getGraphItemRef(e,"branch");return null==t?Promise.resolve():g.cL(t.repoPath,(0,F.kA)(t.ref,t.repoPath,{refType:"revision",name:t.name}))}revertCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():g.ru(t.repoPath,t)}switchTo(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():g.S_(t.repoPath,t)}resetToTag(e){let t=this.getGraphItemRef(e,"tag");return null==t?Promise.resolve():g.cL(t.repoPath,t)}hideRef(e,t){let i;if(t?.group&&function(e){return null!=e&&null!=e&&(0,ee.PH)(e)&&("gitlens.graph"===e.webview||"gitlens.views.graph"===e.webview)&&"object"==typeof e.webviewItemGroupValue&&"refGroup"===e.webviewItemGroupValue.type}(e))({refs:i}=e.webviewItemGroupValue);else if(!t?.group&&eu(e)){let{ref:t}=e.webviewItemValue;null!=t.id&&(i=[t])}return null!=i&&this.updateExcludedRefs(this._graph?.repoPath,i.map(e=>{let i="branch"===e.refType&&e.remote;return{id:e.id,name:i?t?.remote?"*":(0,T.km)(e.name):e.name,owner:i?(0,T.Zq)(e.name):void 0,type:"branch"===e.refType?e.remote?"remote":"head":"tag"}}),!1),Promise.resolve()}switchToAnother(e){let t=this.getGraphItemRef(e);return null==t?g.S_(this.repository?.path):g.S_(t.repoPath)}async undoCommit(e){let t=this.getGraphItemRef(e,"revision");if(null==t)return Promise.resolve();await (0,h.MQ)(this.container,t)}saveStash(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():m.VC(t.repoPath)}applyStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():m.Bb(t.repoPath,t)}deleteStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():m.gv(t.repoPath,[t])}renameStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():m.$w(t.repoPath,t)}async createTag(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():f.vt(t.repoPath,t)}deleteTag(e){if(eu(e,"tag")){let{ref:t}=e.webviewItemValue;return f.TF(t.repoPath,t)}return Promise.resolve()}async createWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():w.vt(t.repoPath,void 0,t)}async createPullRequest(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue,i=this.container.git.getRepository(t.repoPath),r=await i?.git.branches().getBranch(t.name),s=await r?.getRemote();return(0,N.ph)("createPullRequest",{repoPath:t.repoPath,remote:null!=s?{name:s.name,provider:null!=s.provider?{id:s.provider.id,name:s.provider.name,domain:s.provider.domain}:void 0,url:s.url}:void 0,branch:{name:t.name,upstream:t.upstream?.name,isRemote:t.remote}})}return Promise.resolve()}openPullRequest(e){if(el(e,"pullrequest")){let t=e.webviewItemValue;return(0,N.ph)("openPullRequest",{repoPath:t.repoPath,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain},pullRequest:{id:t.id,url:t.url}})}return Promise.resolve()}openPullRequestChanges(e){if(el(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head){let e=(0,O.tI)(t.repoPath,t.refs);return(0,h.$5)(this.container,{repoPath:e.repoPath,lhs:e.base.ref,rhs:e.head.ref},{title:`Changes in Pull Request #${t.id}`})}}return Promise.resolve()}openPullRequestComparison(e){if(el(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head){let e=(0,O.tI)(t.repoPath,t.refs);return this.container.views.searchAndCompare.compare(e.repoPath,e.head,e.base)}}return Promise.resolve()}openPullRequestOnRemote(e,t){if(el(e,"pullrequest")){let{url:i}=e.webviewItemValue;return(0,N.RS)("gitlens.openPullRequestOnRemote",{pr:{url:i},clipboard:t})}return Promise.resolve()}openIssueOnRemote(e){if(el(e,"issue")){let{url:t}=e.webviewItemValue;(0,H.CZ)(t)}return Promise.resolve()}async compareAncestryWithWorking(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.branches(t.repoPath).getBranch();if(null==i)return;let r=await this.container.git.refs(t.repoPath).getMergeBase(i.ref,t.ref);if(null!=r)return this.container.views.searchAndCompare.compare(t.repoPath,"",{ref:r,label:`${i.ref} (${(0,B.pV)(r)})`})}async compareHeadWith(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let[i,r]=await (0,h.Di)(this.container,t.repoPath,"HEAD",t.ref);return this.container.views.searchAndCompare.compare(t.repoPath,i,r)}compareBranchWithHead(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.views.searchAndCompare.compare(t.repoPath,t.ref,"HEAD")}async compareWithMergeBase(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.branches(t.repoPath).getBranch();if(null==i)return;let r=await this.container.git.refs(t.repoPath).getMergeBase(i.ref,t.ref);if(null!=r)return this.container.views.searchAndCompare.compare(t.repoPath,t.ref,{ref:r,label:`${i.ref} (${(0,B.pV)(r)})`})}async openChangedFileDiffsWithMergeBase(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.branches(t.repoPath).getBranch();if(null==i)return;let r=await this.container.git.refs(t.repoPath).getMergeBase(i.ref,t.ref);if(null!=r)return(0,h.$5)(this.container,{repoPath:t.repoPath,lhs:r,rhs:t.ref},{title:`Changes between ${i.ref} (${(0,B.pV)(r)}) ${n.EO.ArrowLeftRightLong} ${(0,B.pV)(t.ref,{strings:{working:"Working Tree"}})}`})}compareWithUpstream(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return this.container.views.searchAndCompare.compare(t.repoPath,t.ref,t.upstream.name)}return Promise.resolve()}compareWorkingWith(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.views.searchAndCompare.compare(t.repoPath,"",t.ref)}copyWorkingChangesToWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():w.PB("working-tree",t.repoPath)}generateCommitMessage(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():(0,N.RS)("gitlens.graph.ai.generateCommitMessage",{repoPath:t.repoPath,source:"graph"})}async openFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,h.Km)(t)}async openAllChanges(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return(0,h.P3)(this.container,i,t)}async openAllChangesWithWorking(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return(0,h.Qv)(this.container,i,t)}async openRevisions(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,h.m)(t)}async openOnlyChangedFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,h.E9)(this.container,t)}async openInWorktree(e){if(eu(e,"branch")){let{ref:t}=e.webviewItemValue,i=this.container.git.getRepository(t.repoPath),r=await i?.git.branches().getBranch(t.name),s=await r?.getAssociatedPullRequest();if(null!=r&&null!=i&&null!=s){let e=(await r.getRemote())?.url??(0,O.Yv)(s).remote.url;if(null!=e){let t=(0,L.pX)(this.container,s,r.getNameWithoutRemote(),e,et.zB.SwitchToPullRequestWorktree);return this.container.deepLinks.processDeepLinkUri(t,!1,i)}}await (0,u.b)({command:"switch",state:{repos:t.repoPath,reference:t,worktreeDefaultOpen:"new"}})}}async openWorktree(e,t){if(eu(e,"branch")){let i,{ref:r}=e.webviewItemValue;if(null==r.id)return;if(r.repoPath===this._graph?.repoPath)i=this._graph?.worktreesByBranch;else{let e=this.container.git.getRepository(r.repoPath);if(null==e)return;i=await (0,$.Ao)(e)}let s=i?.get(r.id);null!=s&&(0,V.OH)(s.uri,t)}}addAuthor(e){if(el(e,"contributor")){let{repoPath:t,name:i,email:r,current:s}=e.webviewItemValue;return d.s(t,new C.s(t,i,r,s??!1,0))}return Promise.resolve()}async toggleColumn(e,t){let i=this.container.storage.getWorkspace("graph:columns"),r=i?.[e];null!=r?r.isHidden=!t:r={isHidden:!t},i=(0,Z.Y8)(i,e,r),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns(),"changes"!==e||r.isHidden||this._graph?.includes?.stats||this.updateState()}async toggleScrollMarker(e,t){let i=M.H.get("graph.scrollMarkers.additionalTypes"),r=!1;t&&!i.includes(e)?(i=i.concat(e),r=!0):!t&&i.includes(e)&&(i=i.filter(t=>t!==e),r=!0),r&&(await M.H.updateEffective("graph.scrollMarkers.additionalTypes",i),this.notifyDidChangeScrollMarkers())}async setColumnMode(e,t){let i=this.container.storage.getWorkspace("graph:columns"),r=i?.[e];null!=r?r.mode=t:r={mode:t},i=(0,Z.Y8)(i,e,r),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns()}async generateChangelogFrom(e){if(eu(e,"branch")||eu(e,"tag")){let{ref:t}=e.webviewItemValue;await (0,N.RS)("gitlens.ai.generateChangelog",{repoPath:t.repoPath,head:t,source:{source:"graph",detail:eu(e,"branch")?"branch":"tag"}})}return Promise.resolve()}getCommitFromGraphItemRef(e){let t=this.getGraphItemRef(e,"revision");return null!=t||null!=(t=this.getGraphItemRef(e,"stash"))?this.container.git.commits(t.repoPath).getCommit(t.ref):Promise.resolve(void 0)}getGraphItemRef(e,t){if(null==e){let e=this.activeSelection;return null!=e&&(null==t||t===e.refType)?e:void 0}switch(t){case"branch":return eu(e,"branch")||el(e,"upstreamStatus")?e.webviewItemValue.ref:void 0;case"revision":return eu(e,"revision")?e.webviewItemValue.ref:void 0;case"stash":return eu(e,"stash")?e.webviewItemValue.ref:void 0;case"tag":return eu(e,"tag")?e.webviewItemValue.ref:void 0;default:return eu(e)?e.webviewItemValue.ref:void 0}}getGraphItemRefs(e,t){if(null==e)return{active:void 0,selection:[]};switch(t){case"branch":if(!eu(e,"branch")&&!el(e,"upstreamStatus"))return{active:void 0,selection:[]};break;case"revision":if(!eu(e,"revision"))return{active:void 0,selection:[]};break;case"stash":if(!eu(e,"stash"))return{active:void 0,selection:[]};break;case"tag":if(!eu(e,"tag"))return{active:void 0,selection:[]};break;default:if(!eu(e))return{active:void 0,selection:[]}}let i=e.webviewItemsValues?.map(e=>e.webviewItemValue.ref)??[];return i.length||i.push(e.webviewItemValue.ref),{active:e.webviewItemValue.ref,selection:i}}createCancellation(e){this.cancelOperation(e);let t=new r.CancellationTokenSource;return this._cancellations.set(e,t),t}cancelOperation(e){this._cancellations.get(e)?.cancel(),this._cancellations.delete(e)}};e0([(0,z.Yz)({args:!1})],GraphWebviewProvider.prototype,"onFeaturePreviewChanged",1),e0([(0,z.Yz)({args:{0:e=>e.toString()}})],GraphWebviewProvider.prototype,"onRepositoryChanged",1),e0([(0,z.Yz)({args:!1})],GraphWebviewProvider.prototype,"onRepositoryFileSystemChanged",1),e0([(0,z.Yz)({args:!1})],GraphWebviewProvider.prototype,"onSubscriptionChanged",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"onEnsureRowRequest",1),e0([(0,j.G)(),(0,z.Yz)()],GraphWebviewProvider.prototype,"onGetMoreRows",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"onOpenPullRequestDetails",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"onSearchRequest",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"updateState",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"updateAvatars",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeAvatars",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeBranchState",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"updateRefsMetadata",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsMetadata",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeColumns",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeScrollMarkers",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsVisibility",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeConfiguration",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidFetch",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRows",1),e0([(0,z.Yz)({args:!1})],GraphWebviewProvider.prototype,"notifyDidChangeRowsStats",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidStartFeaturePreview",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeWorkingTree",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeSelection",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeSubscription",1),e0([(0,z.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeState",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"fetch",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"forcePush",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"pull",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"push",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"createBranch",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"deleteBranch",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"mergeBranchInto",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openBranchOnRemote",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"publishBranch",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"rebase",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"rebaseToRemote",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"renameBranch",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"associateIssueWithBranch",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"cherryPick",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"copy",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"copyMessage",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"copySha",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openInDetailsView",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"commitViaSCM",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openCommitOnRemote",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"compareSelectedCommits",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"abortPausedOperation",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"continuePausedOperation",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openRebaseEditor",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"skipPausedOperation",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToBranch",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToCommit",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToRepo",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToTag",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"shareAsCloudPatch",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"resetCommit",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"resetToCommit",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"resetToTip",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"revertCommit",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"switchTo",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"resetToTag",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"hideRef",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"switchToAnother",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"undoCommit",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"saveStash",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"applyStash",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"deleteStash",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"renameStash",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"createTag",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"deleteTag",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"createWorktree",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"createPullRequest",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openPullRequest",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openPullRequestChanges",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openPullRequestComparison",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openPullRequestOnRemote",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openIssueOnRemote",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"compareAncestryWithWorking",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"compareHeadWith",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"compareBranchWithHead",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"compareWithMergeBase",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openChangedFileDiffsWithMergeBase",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"compareWithUpstream",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"compareWorkingWith",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"copyWorkingChangesToWorktree",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"generateCommitMessage",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openFiles",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openAllChanges",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openAllChangesWithWorking",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openRevisions",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openOnlyChangedFiles",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openInWorktree",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"openWorktree",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"addAuthor",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"toggleColumn",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"toggleScrollMarker",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"setColumnMode",1),e0([(0,z.Rm)()],GraphWebviewProvider.prototype,"generateChangelogFrom",1)},6339:(e,t,i)=>{i.d(t,{m:()=>StashNode});var r=i(1398),s=i(8103),o=i(2870),n=i(2812),a=i(9686),l=i(7864),u=i(4808),c=i(5818),h=i(7273),d=i(8902),p=i(4401);let StashFileNode=class StashFileNode extends p.p{constructor(e,t,i,r){super("stash-file",e,t,i,r)}get contextValue(){return`${c.U0.File}+stashed`}};let StashNode=class StashNode extends h.t{constructor(e,t,i,r){super("stash",i.getGitUri(),e,t),this.parent=t,this.commit=i,this.options=r,this.updateContext({commit:i}),this._uniqueId=(0,c.pF)(this.type,this.context)}get id(){return this._uniqueId}toClipboard(){return this.commit.stashName}get ref(){return this.commit}async getChildren(){let e=(await this.commit.getCommitsForFiles({include:{stats:!0}})).map(e=>new StashFileNode(this.view,this,e.file,e));if("list"!==this.view.config.files.layout){let t=(0,n.Ay)(e,e=>e.uri.relativePath.split("/"),(...e)=>(0,a.Fd)((0,a.HS)(...e)),this.view.config.files.compact);e=new d.x(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort((e,t)=>(0,u.wN)(e.label,t.label));return e}getTreeItem(){let e=new r.TreeItem(s.c.fromTemplate(this.view.config.formats.stashes.label,this.commit,{messageTruncateAtNewLine:!0,dateFormat:o.H.get("defaultDateFormat")}),r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=s.c.fromTemplate(this.view.config.formats.stashes.description,this.commit,{messageTruncateAtNewLine:!0,dateFormat:o.H.get("defaultDateFormat")}),e.contextValue=c.U0.Stash,this.options?.icon&&(e.iconPath=new r.ThemeIcon("archive")),e}async resolveTreeItem(e,t){return null==e.tooltip&&(e.tooltip=await this.getTooltip(t)),e}async getTooltip(e){let t,[i,n]=await Promise.allSettled([this.view.container.git.remotes(this.commit.repoPath).getBestRemotesWithProviders(e),this.commit.ensureFullDetails({include:{stats:!0}})]);if(e.isCancellationRequested)return;let a=(0,l.Ro)(i,[]),[u]=a;if(u?.hasIntegration()){let[i]=await Promise.allSettled([(0,l.zu)(this.commit.getEnrichedAutolinks(u),e)]);if(e.isCancellationRequested)return;let r=(0,l.Ro)(i);r?.paused||(t=r?.value)}let c=await s.c.fromTemplateAsync(o.H.get("views.formats.stashes.tooltip"),this.commit,{enrichedAutolinks:t,dateFormat:o.H.get("defaultDateFormat"),messageAutolinks:!0,messageIndent:4,outputFormat:"markdown",remotes:a}),h=new r.MarkdownString(c,!0);return h.supportHtml=!0,h.isTrusted=!0,h}}},6366:(e,t,i)=>{i.d(t,{$I:()=>CommitRestoreFileChangesCommandQuickPickItem,$t:()=>CommitCopyIdQuickPickItem,EG:()=>CommitOpenChangesWithDiffToolCommandQuickPickItem,IJ:()=>CommitOpenRevisionsCommandQuickPickItem,Kw:()=>CommitOpenFileCommandQuickPickItem,MO:()=>CommitOpenAllChangesCommandQuickPickItem,NH:()=>CommitOpenChangesCommandQuickPickItem,Ol:()=>OpenOnlyChangedFilesCommandQuickPickItem,S5:()=>CommitOpenChangesWithWorkingCommandQuickPickItem,Tw:()=>CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem,Wq:()=>CommitCompareWithWorkingCommandQuickPickItem,X8:()=>CommitOpenAllChangesWithDiffToolCommandQuickPickItem,Xx:()=>CommitCopyMessageQuickPickItem,Y7:()=>CommitOpenDirectoryCompareCommandQuickPickItem,Zq:()=>CommitApplyFileChangesCommandQuickPickItem,_w:()=>CommitOpenDetailsCommandQuickPickItem,aY:()=>OpenChangedFilesCommandQuickPickItem,bO:()=>CommitOpenInGraphCommandQuickPickItem,bi:()=>CommitOpenRevisionCommandQuickPickItem,ln:()=>CommitCompareWithHEADCommandQuickPickItem,o3:()=>CommitFilesQuickPickItem,p1:()=>CommitFileQuickPickItem,ps:()=>CommitOpenAllChangesWithWorkingCommandQuickPickItem,qB:()=>CommitBrowseRepositoryFromHereCommandQuickPickItem,zR:()=>CommitOpenFilesCommandQuickPickItem});var r=i(1398),s=i(9679),o=i(1182),n=i(2099),a=i(3583),l=i(4123),u=i(8103),c=i(5496),h=i(8027),d=i(9686),p=i(4808),g=i(9207);let CommitFilesQuickPickItem=class CommitFilesQuickPickItem extends g.Fj{constructor(e,t){super({label:e.summary,description:`${u.c.fromTemplate("${author}, ${ago}  $(git-commit)  ${id}",e)}${t?.unpublished?"  (unpublished)":""}`,detail:`${t?.file!=null?`$(file) ${(0,d.P8)(t.file.path)}${t.file.formatStats("expanded",{separator:", ",prefix:` ${o.EO.Dot} `})}`:`$(files) ${e.formatStats("expanded",{separator:", ",empty:"No files changed"})}`}${t?.hint!=null?`${(0,p.eV)(o.EO.Dash,4,2,o.EO.Space)}${t.hint}`:""}`,alwaysShow:!0,picked:t?.picked??!0,buttons:[s.kk,s.yi]},void 0,void 0,void 0,{suppressKeyPress:!0}),this.commit=e}get sha(){return this.commit.sha}};let CommitFileQuickPickItem=class CommitFileQuickPickItem extends g.Fj{constructor(e,t,i){super({label:(0,d.P8)(t.path),description:(0,c.C0)(t,!0),picked:i,iconPath:(0,h.b_)(t.status)}),this.commit=e,this.file=t}get sha(){return this.commit.sha}execute(e){return l.eX(this.file,this.commit,e)}};let CommitBrowseRepositoryFromHereCommandQuickPickItem=class CommitBrowseRepositoryFromHereCommandQuickPickItem extends g.Fj{constructor(e,t){super(`Browse Repository from${t?.before?" Before":""} Here${t?.openInNewWindow?" in New Window":""}`),this.commit=e,this.executeOptions=t,this.iconPath=new r.ThemeIcon("folder-opened")}execute(e){return(0,a.V)(this.commit.getGitUri(),{before:this.executeOptions?.before,openInNewWindow:this.executeOptions?.openInNewWindow})}};let CommitCompareWithHEADCommandQuickPickItem=class CommitCompareWithHEADCommandQuickPickItem extends g.Fj{constructor(e){super("Compare with HEAD"),this.commit=e,this.iconPath=new r.ThemeIcon("compare-changes")}execute(e){return n.m.instance.views.searchAndCompare.compare(this.commit.repoPath,this.commit.ref,"HEAD")}};let CommitCompareWithWorkingCommandQuickPickItem=class CommitCompareWithWorkingCommandQuickPickItem extends g.Fj{constructor(e){super("Compare with Working Tree",new r.ThemeIcon("compare-changes")),this.commit=e}execute(e){return n.m.instance.views.searchAndCompare.compare(this.commit.repoPath,this.commit.ref,"")}};let CommitCopyIdQuickPickItem=class CommitCopyIdQuickPickItem extends g.Fj{constructor(e){super("Copy SHA",new r.ThemeIcon("copy")),this.commit=e}execute(){return l.uT(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage("Commit SHA copied to the clipboard")}};let CommitCopyMessageQuickPickItem=class CommitCopyMessageQuickPickItem extends g.Fj{constructor(e){super("Copy Message",new r.ThemeIcon("copy")),this.commit=e}execute(){return l.eU(this.commit)}async onDidPressKey(e){await super.onDidPressKey(e),r.window.showInformationMessage(`${this.commit.stashName?"Stash":"Commit"} Message copied to the clipboard`)}};let CommitOpenAllChangesCommandQuickPickItem=class CommitOpenAllChangesCommandQuickPickItem extends g.Fj{constructor(e){super("Open All Changes",new r.ThemeIcon("git-compare")),this.commit=e}execute(e){return l.P3(n.m.instance,this.commit,void 0,e)}};let CommitOpenAllChangesWithDiffToolCommandQuickPickItem=class CommitOpenAllChangesWithDiffToolCommandQuickPickItem extends g.Fj{constructor(e){super("Open All Changes (difftool)",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.$s(this.commit)}};let CommitOpenAllChangesWithWorkingCommandQuickPickItem=class CommitOpenAllChangesWithWorkingCommandQuickPickItem extends g.Fj{constructor(e){super("Open All Changes with Working Tree",new r.ThemeIcon("git-compare")),this.commit=e}execute(e){return l.Qv(n.m.instance,this.commit,void 0,e)}};let CommitOpenChangesCommandQuickPickItem=class CommitOpenChangesCommandQuickPickItem extends g.Fj{constructor(e,t){super("Open Changes",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(e){return l.eX(this.file,this.commit,e)}};let CommitOpenChangesWithDiffToolCommandQuickPickItem=class CommitOpenChangesWithDiffToolCommandQuickPickItem extends g.Fj{constructor(e,t){super("Open Changes (difftool)",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(){return l.Ux(this.file,this.commit)}};let CommitOpenChangesWithWorkingCommandQuickPickItem=class CommitOpenChangesWithWorkingCommandQuickPickItem extends g.Fj{constructor(e,t){super("Open Changes with Working File",new r.ThemeIcon("git-compare")),this.commit=e,this.file=t}execute(e){return l.DD(this.file,this.commit,e)}};let CommitOpenDirectoryCompareCommandQuickPickItem=class CommitOpenDirectoryCompareCommandQuickPickItem extends g.Fj{constructor(e){super("Open Directory Compare",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.YS(this.commit)}};let CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem=class CommitOpenDirectoryCompareWithWorkingCommandQuickPickItem extends g.Fj{constructor(e){super("Open Directory Compare with Working Tree",new r.ThemeIcon("git-compare")),this.commit=e}execute(){return l.cs(this.commit)}};let CommitOpenDetailsCommandQuickPickItem=class CommitOpenDetailsCommandQuickPickItem extends g.Fj{constructor(e){super("Inspect Commit Details",new r.ThemeIcon("eye")),this.commit=e}execute(e){return l.JX(this.commit,{preserveFocus:e?.preserveFocus})}};let CommitOpenInGraphCommandQuickPickItem=class CommitOpenInGraphCommandQuickPickItem extends g.Fj{constructor(e){super("Open in Commit Graph",new r.ThemeIcon("gitlens-graph")),this.commit=e}execute(e){return l.wq(this.commit,{preserveFocus:e?.preserveFocus})}};let CommitOpenFilesCommandQuickPickItem=class CommitOpenFilesCommandQuickPickItem extends g.Fj{constructor(e){super("Open Files",new r.ThemeIcon("files")),this.commit=e}execute(e){return l.Km(this.commit)}};let CommitOpenFileCommandQuickPickItem=class CommitOpenFileCommandQuickPickItem extends g.Fj{constructor(e,t){super("Open File",new r.ThemeIcon("file")),this.commit=e,this.file=t}execute(e){return l.Tq(this.file,this.commit,e)}};let CommitOpenRevisionsCommandQuickPickItem=class CommitOpenRevisionsCommandQuickPickItem extends g.Fj{constructor(e){super("Open Files at Revision",new r.ThemeIcon("files")),this.commit=e}execute(e){return l.m(this.commit)}};let CommitOpenRevisionCommandQuickPickItem=class CommitOpenRevisionCommandQuickPickItem extends g.Fj{constructor(e,t){super("Open File at Revision",new r.ThemeIcon("file")),this.commit=e,this.file=t}execute(e){return l.vM(this.file,this.commit,e)}};let CommitApplyFileChangesCommandQuickPickItem=class CommitApplyFileChangesCommandQuickPickItem extends g.Fj{constructor(e,t){super("Apply Changes"),this.commit=e,this.file=t}async execute(){return l.YF(this.file,this.commit)}};let CommitRestoreFileChangesCommandQuickPickItem=class CommitRestoreFileChangesCommandQuickPickItem extends g.Fj{constructor(e,t){super({label:"Restore",description:"aka checkout"}),this.commit=e,this.file=t}execute(){return l.VX(this.file,this.commit)}};let OpenChangedFilesCommandQuickPickItem=class OpenChangedFilesCommandQuickPickItem extends g.Fj{constructor(e,t){super(t??"Open All Changed Files",new r.ThemeIcon("files"),"gitlens.openChangedFiles",[{uris:e.map(e=>e.uri)}])}};let OpenOnlyChangedFilesCommandQuickPickItem=class OpenOnlyChangedFilesCommandQuickPickItem extends g.Fj{constructor(e,t){super(t??"Open Changed & Close Unchanged Files",new r.ThemeIcon("files"),"gitlens.openOnlyChangedFiles",[{uris:e.map(e=>e.uri)}])}}},6458:(e,t,i)=>{i.d(t,{c:()=>u,s:()=>GitContributor});var r=i(1398),s=i(3037),o=i(8845),n=i(1555),a=Object.defineProperty,l=Object.getOwnPropertyDescriptor;function u(e){return e instanceof GitContributor}let GitContributor=class GitContributor{constructor(e,t,i,r,s,o,n,a,l,u,c){this.repoPath=e,this.name=t,this.email=i,this.current=r,this.commits=s,this.latestCommitDate=o,this.firstCommitDate=n,this.stats=a,this.username=l,this.avatarUrl=u,this.id=c}get label(){return this.name??this.username}formatDate(e){return null!=this.latestCommitDate?(0,o.Yq)(this.latestCommitDate,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(e){return null!=this.latestCommitDate?(0,o.PI)(this.latestCommitDate,e):""}getAvatarUri(e){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.m_)(this.email,void 0,e)}getCoauthor(){return`${this.name}${this.email?` <${this.email}>`:""}`}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?l(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&a(t,i,o)})([(0,n.B)(e=>e??"MMMM Do, YYYY h:mma")],GitContributor.prototype,"formatDate",1)},6503:(e,t,i)=>{i.d(t,{KZ:()=>l,NO:()=>a,Vk:()=>n});var r,s,o,n=((r=n||{}).AddedByBoth="AA",r.AddedByUs="AU",r.AddedByThem="UA",r.DeletedByBoth="DD",r.DeletedByUs="DU",r.DeletedByThem="UD",r.ModifiedByBoth="UU",r),a=((s=a||{}).Modified="M",s.Added="A",s.Deleted="D",s.Renamed="R",s.Copied="C",s.Unchanged=".",s.Untracked="?",s.Ignored="!",s.UpdatedButUnmerged="U",s),l=((o=l||{}).Modified="M",o.Added="A",o.Deleted="D",o.Untracked="?",o.Ignored="!",o)},6527:(e,t,i)=>{i.d(t,{Kb:()=>m,dF:()=>f,dV:()=>EnrichmentService,pn:()=>g,u7:()=>w});var r=i(1849),s=i(2320),o=i(6206),n=i(4941),a=i(1003),l=i(711),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor,h=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o};let EnrichmentService=class EnrichmentService{constructor(e,t){this.container=e,this.connection=t}dispose(){}async delete(e,t){let i=(0,a.dQ)();try{let i=await this.connection.fetchGkApi(`v1/enrich-items/${e}`,{method:"DELETE"});if(!i.ok)throw Error(`Unable to ${t} item '${e}':  (${i.status}) ${i.statusText}`)}catch(e){throw n.Vy.error(e,i),e}}async get(e,t){let i=(0,a.dQ)();try{let i=await this.connection.fetchGkApi("v1/enrich-items",{method:"GET"});if(t?.isCancellationRequested)throw new s.AL;let r=await i.json();if(t?.isCancellationRequested)throw new s.AL;return null==e?r.data:r.data.filter(t=>t.type===e)}catch(e){if(e instanceof s.WT)return[];throw n.Vy.error(e,i),e}}getPins(e){return this.get("pin",e)}getSnoozed(e){return this.get("snooze",e)}async pinItem(e){let t=(0,a.dQ)();try{if(!await (0,l.G5)(this.container,"Pinning is a Preview feature and requires an account.",{source:"launchpad",detail:"pin"}))throw Error("Unable to pin item: account required");let t={provider:e.provider,entityType:e.type,entityId:e.id,entityUrl:e.url},i=await this.connection.fetchGkApi("v1/enrich-items/pin",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw Error(`Unable to pin item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw n.Vy.error(e,t),e}}unpinItem(e){return this.delete(e,"unpin")}async snoozeItem(e){let t=(0,a.dQ)();try{if(!await (0,l.G5)(this.container,"Snoozing is a Preview feature and requires an acccount.",{source:"launchpad",detail:"snooze"}))throw Error("Unable to snooze item: subscription required");let t={provider:e.provider,entityType:e.type,entityId:e.id,entityUrl:e.url};null!=e.expiresAt&&(t.expiresAt=e.expiresAt);let i=await this.connection.fetchGkApi("v1/enrich-items/snooze",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw Error(`Unable to snooze item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw n.Vy.error(e,t),e}}unsnoozeItem(e){return this.delete(e,"unsnooze")}};h([(0,o.Rm)()],EnrichmentService.prototype,"get",1),h([(0,o.Rm)()],EnrichmentService.prototype,"getPins",1),h([(0,o.Rm)()],EnrichmentService.prototype,"getSnoozed",1),h([(0,o.Rm)({args:{0:e=>`${e.id} (${e.provider} ${e.type})`}})],EnrichmentService.prototype,"pinItem",1),h([(0,o.Rm)()],EnrichmentService.prototype,"unpinItem",1),h([(0,o.Rm)({args:{0:e=>`${e.id} (${e.provider} ${e.type})`}})],EnrichmentService.prototype,"snoozeItem",1),h([(0,o.Rm)()],EnrichmentService.prototype,"unsnoozeItem",1);let d={"azure-devops":"azure",bitbucket:"bitbucket","bitbucket-server":"bitbucket",custom:void 0,gerrit:void 0,gitea:void 0,github:"github","cloud-github-enterprise":"github","cloud-gitlab-self-hosted":"gitlab",gitlab:"gitlab","google-source":void 0},p={[r.Q7.AzureDevOps]:"azure",[r.Q7.GitLab]:"gitlab",[r.Q7.GitHub]:"github",[r.Q7.Bitbucket]:"bitbucket",[r.PY.CloudGitHubEnterprise]:"github",[r.PY.GitHubEnterprise]:"github",[r.PY.CloudGitLabSelfHosted]:"gitlab",[r.PY.GitLabSelfHosted]:"gitlab",[r.PY.BitbucketServer]:"bitbucket",[r.tp.Jira]:"jira",[r.tp.Trello]:"trello"};function g(e){let t=d[e];if(null==t)throw Error(`Unknown remote provider '${e}'`);return t}function m(e){return null!=d[e]}function f(e){return null!=p[e]}function w(e){let t=p[e];if(null==t)throw Error(`Unknown integration id '${e}'`);return t}},6529:(e,t,i)=>{i.d(t,{Wn:()=>o,ZD:()=>s,md:()=>r});let r=["collapseWorktreesWhenPossible","defaultItemLimit","formats","openChangesInMultiDiffEditor","pageItemLimit","showComparisonContributors","showContributorsStatistics","showCurrentBranchOnTop","showRelativeDateMarkers"],s=["branches","commits","commitDetails","contributors","drafts","fileHistory","lineHistory","patchDetails","pullRequest","remotes","repositories","searchAndCompare","stashes","tags","worktrees","workspaces"];function o(e){switch(e){case"silent":return"off";case"errors":return"error";case"verbose":return"info";default:return e}}},6549:(e,t,i)=>{i.d(t,{UD:()=>s,ib:()=>n,sH:()=>o});var r=i(4808);function s(e,t){return("string"==typeof e&&(e=o(e)),"string"==typeof t&&(t=o(t)),e.major>t.major)?1:e.major<t.major?-1:e.minor>t.minor?1:e.minor<t.minor?-1:e.patch>t.patch?1:e.patch<t.patch?-1:void 0===e.pre&&void 0!==t.pre?1:void 0!==e.pre&&void 0===t.pre?-1:void 0!==e.pre&&void 0!==t.pre?(0,r.W1)(e.pre,t.pre):0}function o(e){let[t,i]=e.split("-"),[r,s,o]=t.split(".");return{major:"string"==typeof r?parseInt(r,10):r,minor:"string"==typeof s?parseInt(s,10):s,patch:null==o?0:"string"==typeof o?parseInt(o,10):o,pre:i}}function n(e,t){if(null==e)return!1;let[i,r]=t.split(" ");if("="===i)return 0===s(e,r);if(">"===i)return s(e,r)>0;if(">="===i)return s(e,r)>=0;if("<"===i)return 0>s(e,r);if("<="===i)return 0>=s(e,r);throw Error(`Unknown operator: ${i}`)}},6572:(e,t,i)=>{i.d(t,{h:()=>a,o1:()=>n,u$:()=>ViewFileNode});var r=i(1398),s=i(534),o=i(5818);let ViewFileNode=class ViewFileNode extends o.eu{constructor(e,t,i,r,s){super(e,t,i,r),this.parent=r,this.file=s}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${this.file.path}`}};function n(e,t,i){return s.Z.fromTemplate(`\${status${t?`' ${t}'`:""}} $(file) \${filePath}\${  \u2190  originalPath}\${'\\
'changesDetail}`,e,{outputFormat:i??"markdown"})}function a(e,t){let i=new r.MarkdownString(n(e,t,"markdown"),!0);return i.supportHtml=!0,i.isTrusted=!0,i}},6606:(e,t,i)=>{i.d(t,{Nm:()=>l,P5:()=>u,Rp:()=>s,aL:()=>a,eS:()=>c,fK:()=>o,lj:()=>n,oJ:()=>h,t6:()=>r});let r=["mergeable","unassigned-reviewers","failed-checks","conflicts","needs-my-review","code-suggestions","changes-requested","reviewer-commented","waiting-for-review","draft","other"],s=["current-branch","pinned","mergeable","blocked","follow-up","needs-review","waiting-for-review","draft","other","snoozed"],o=["mergeable","blocked","follow-up","needs-review"],n=new Map([["current-branch","$(git-branch)"],["pinned","$(pinned)"],["mergeable","$(rocket)"],["blocked","$(error)"],["follow-up","$(report)"],["needs-review","$(comment-unresolved)"],["waiting-for-review","$(gitlens-clock)"],["draft","$(git-pull-request-draft)"],["other","$(ellipsis)"],["snoozed","$(bell-slash)"]]),a=new Map([["current-branch","Current Branch"],["pinned","Pinned"],["mergeable","Ready to Merge"],["blocked","Blocked"],["follow-up","Requires Follow-up"],["needs-review","Needs Your Review"],["waiting-for-review","Waiting for Review"],["draft","Draft"],["other","Other"],["snoozed","Snoozed"]]),l=new Map([["mergeable","mergeable"],["conflicts","blocked"],["failed-checks","blocked"],["unassigned-reviewers","blocked"],["needs-my-review","needs-review"],["code-suggestions","follow-up"],["changes-requested","follow-up"],["reviewer-commented","follow-up"],["waiting-for-review","waiting-for-review"],["draft","draft"],["other","other"]]),u=new Map([["readyToMerge","mergeable"],["unassignedReviewers","unassigned-reviewers"],["failingCI","failed-checks"],["conflicts","conflicts"],["needsMyReview","needs-my-review"],["changesRequested","changes-requested"],["reviewerCommented","reviewer-commented"],["waitingForReview","waiting-for-review"],["draft","draft"],["other","other"]]),c=new Map([["mergeable",["merge"]],["unassigned-reviewers",["open"]],["failed-checks",["open"]],["conflicts",["open"]],["needs-my-review",["open"]],["code-suggestions",["open"]],["changes-requested",["open"]],["reviewer-commented",["open"]],["waiting-for-review",["open"]],["draft",["open"]],["other",[]]]),h=new Map([["mergeable",["Ready to Merge","Ready to merge"]],["unassigned-reviewers",["Unassigned Reviewers","You need to assign reviewers"]],["failed-checks",["Failed Checks","You need to resolve the failing checks"]],["conflicts",["Resolve Conflicts","You need to resolve merge conflicts"]],["needs-my-review",["Needs Your Review","${author} requested your review"]],["code-suggestions",["Code Suggestions","Code suggestions have been made on this pull request"]],["changes-requested",["Changes Requested","Reviewers requested changes before this can be merged"]],["reviewer-commented",["Reviewers Commented","Reviewers have commented on this pull request"]],["waiting-for-review",["Waiting for Review","Waiting for reviewers to approve this pull request"]],["draft",["Draft","Continue working on your draft"]],["other",["Other","Opened by ${author} ${createdDateRelative}"]]])},6732:(e,t,i)=>{function r(e){if(null!=e)return encodeURI(e.replace(/%20/g," "))}i.d(t,{W:()=>r})},6741:(e,t,i)=>{i.d(t,{HZ:()=>r,ZR:()=>c,j9:()=>n,uF:()=>l,uo:()=>u});let r=!0,s=navigator?.userAgentData?.platform,o=navigator.userAgent,n="Linux"===s||o.includes("Linux"),a="macOS"===s||o.includes("Macintosh"),l="Windows"===s||o.includes("Windows");function u(){return l?"web-windows":a?"web-macOS":n?"web-linux":"web"}function c(e){return e}},6770:(e,t,i)=>{i.d(t,{SU:()=>s,id:()=>o,nB:()=>r});let r="0000000000000000000000000000000000000000-",s="0000000000000000000000000000000000000000",o="0000000000000000000000000000000000000000:"},6821:(e,t,i)=>{i.d(t,{H:()=>u,l:()=>GitFileChange});var r=i(1555),s=i(4808),o=i(6503),n=Object.defineProperty,a=Object.getOwnPropertyDescriptor,l=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?a(t,i):t,l=e.length-1;l>=0;l--)(s=e[l])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n(t,i,o),o};function u(e){return e instanceof GitFileChange}let GitFileChange=class GitFileChange{constructor(e,t,i,r,s,o,n,a){this.container=e,this.repoPath=t,this.path=i,this.status=r,this.originalPath=s,this.previousSha=o,this.stats=n,this.staged=a}get hasConflicts(){switch(this.status){case o.Vk.AddedByThem:case o.Vk.AddedByUs:case o.Vk.AddedByBoth:case o.Vk.DeletedByThem:case o.Vk.DeletedByUs:case o.Vk.DeletedByBoth:case o.Vk.ModifiedByBoth:return!0;default:return!1}}get uri(){return this.container.git.getAbsoluteUri(this.path,this.repoPath)}get originalUri(){return this.originalPath?this.container.git.getAbsoluteUri(this.originalPath,this.repoPath):void 0}getWorkingUri(){return this.container.git.getWorkingUri(this.repoPath,this.uri)}formatStats(e,t){let{stats:i}=this;if(null==i)return t?.empty??"";let{additions:r,deletions:o}=i;if(r<0&&o<0)return t?.empty??"";let n=t?.separator??" ",a=[];if(r){let i="expanded"===e?`${(0,s.td)("line",r)} added`:`+${r}`;t?.color&&"short"!==e?a.push(`<span style="color:var(--vscode-gitDecoration-addedResourceForeground);">${i}</span>`):a.push(i)}else"stats"===e&&(t?.color?a.push('<span style="color:var(--vscode-gitDecoration-addedResourceForeground);">+0</span>'):a.push("+0"));if(o){let i="expanded"===e?`${(0,s.td)("line",o)} deleted`:`-${o}`;t?.color&&"short"!==e?a.push(`<span style="color:var(--vscode-gitDecoration-deletedResourceForeground);">${i}</span>`):a.push(i)}else"stats"===e&&(t?.color?a.push('<span style="color:var(--vscode-gitDecoration-deletedResourceForeground);">-0</span>'):a.push("-0"));let l=a.join(n);return"stats"===e&&t?.color&&(l=`<span style="background-color:var(--vscode-textCodeBlock-background);border-radius:3px;">&nbsp;${l}&nbsp;&nbsp;</span>`),`${t?.prefix??""}${l}`}};l([(0,r.B)()],GitFileChange.prototype,"uri",1),l([(0,r.B)()],GitFileChange.prototype,"originalUri",1),l([(0,r.B)()],GitFileChange.prototype,"getWorkingUri",1)},6882:(e,t,i)=>{i.d(t,{G:()=>f});var r=i(4123),s=i(2624),o=i(4119),n=i(7660),a=i(7019),l=i(2141),u=i(5231),c=i(4941),h=i(9442),d=i(7193),p=i(7945),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let f=class extends h.Zr{constructor(e){super(["gitlens.showCommitInView","gitlens.showInDetailsView","gitlens.showLineCommitInView"]),this.container=e}static createMarkdownCommandLink(e,t){let i="string"==typeof e?{ref:(0,n.kA)(e,t,{refType:"revision"}),repoPath:t}:e;return(0,u.J)("gitlens.showCommitInView",i)}preExecute(e,t){return"viewItem"===e.type&&(t={...t},(0,p.j7)(e)&&(t.ref=(0,o.rd)(e.node.commit))),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(i={...i}).ref){if(null==(t=(0,d.q)(t,e)))return;let r=await s.nk.fromUri(t),o=e?.selection.active.line;if(null==o)return;try{let e=await this.container.git.getBlameForLine(r,o);if(null==e)return void(0,a.gD)("Unable to inspect commit details");if(e.commit.isUncommitted)return void(0,a.CR)("Unable to inspect commit details");i.ref=e.commit}catch(e){c.Vy.error(e,"InspectCommand",`getBlameForLine(${o})`),(0,a.qQ)("Unable to inspect commit details");return}}return(0,r.JX)(i.ref)}};f=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o})([(0,l.G5)()],f)},6931:(e,t,i)=>{i.r(t),i.d(t,{OpenTelemetryProvider:()=>OpenTelemetryProvider}),(D=_||(_={}))[D.INTERNAL=0]="INTERNAL",D[D.SERVER=1]="SERVER",D[D.CLIENT=2]="CLIENT",D[D.PRODUCER=3]="PRODUCER",D[D.CONSUMER=4]="CONSUMER";let OTLPExporterBase=class OTLPExporterBase{_delegate;constructor(e){this._delegate=e}export(e,t){this._delegate.export(e,t)}forceFlush(){return this._delegate.forceFlush()}shutdown(){return this._delegate.shutdown()}};function r(e){return Object.keys(e).map(t=>(function e(t,i){return{key:t,value:function t(i){let r=typeof i;return"string"===r?{stringValue:i}:"number"===r?Number.isInteger(i)?{intValue:i}:{doubleValue:i}:"boolean"===r?{boolValue:i}:i instanceof Uint8Array?{bytesValue:i}:Array.isArray(i)?{arrayValue:{values:i.map(t)}}:"object"===r&&null!=i?{kvlistValue:{values:Object.entries(i).map(([t,i])=>e(t,i))}}:{}}(i)}})(t,e[t]))}let s=performance;function o(e){return[Math.trunc(e/1e3),Math.round(e%1e3*1e6)]}function n(){let e=s.timeOrigin;return"number"!=typeof e&&(e=s.timing&&s.timing.fetchStart),e}function a(e){return Array.isArray(e)&&2===e.length&&"number"==typeof e[0]&&"number"==typeof e[1]}function l(e){return a(e)||"number"==typeof e||e instanceof Date}function u(e,t){let i=[e[0]+t[0],e[1]+t[1]];return i[1]>=1e9&&(i[1]-=1e9,i[0]+=1),i}function c(e){return e>=48&&e<=57?e-48:e>=97&&e<=102?e-87:e-55}function h(e){let t=new Uint8Array(e.length/2),i=0;for(let r=0;r<e.length;r+=2){let s=c(e.charCodeAt(r)),o=c(e.charCodeAt(r+1));t[i++]=s<<4|o}return t}function d(e){let t=BigInt(1e9);return BigInt(e[0])*t+BigInt(e[1])}function p(e){var t=d(e);return{low:Number(BigInt.asUintN(32,t)),high:Number(BigInt.asUintN(32,t>>BigInt(32)))}}let g="undefined"!=typeof BigInt?function(e){return d(e).toString()}:function(e){return 1e9*e[0]+e[1]};function m(e){return e}function f(e){if(void 0!==e)return h(e)}let w={encodeHrTime:p,encodeSpanContext:h,encodeOptionalSpanContext:f},v={serializeRequest:e=>{let t={resourceSpans:function(e,t){let i=function(e){let t=new Map;for(let i of e){let e=t.get(i.resource);e||(e=new Map,t.set(i.resource,e));let r=`${i.instrumentationScope.name}@${i.instrumentationScope.version||""}:${i.instrumentationScope.schemaUrl||""}`,s=e.get(r);s||(s=[],e.set(r,s)),s.push(i)}return t}(e),s=[],o=i.entries(),n=o.next();for(;!n.done;){let[e,i]=n.value,l=[],u=i.values(),c=u.next();for(;!c.done;){let e=c.value;if(e.length>0){var a;let i=e.map(e=>(function(e,t){let i=e.spanContext(),s=e.status,o=e.parentSpanContext?.spanId?t.encodeSpanContext(e.parentSpanContext?.spanId):void 0;return{traceId:t.encodeSpanContext(i.traceId),spanId:t.encodeSpanContext(i.spanId),parentSpanId:o,traceState:i.traceState?.serialize(),name:e.name,kind:null==e.kind?0:e.kind+1,startTimeUnixNano:t.encodeHrTime(e.startTime),endTimeUnixNano:t.encodeHrTime(e.endTime),attributes:r(e.attributes),droppedAttributesCount:e.droppedAttributesCount,events:e.events.map(e=>{var i,s;return i=e,s=t,{attributes:i.attributes?r(i.attributes):[],name:i.name,timeUnixNano:s.encodeHrTime(i.time),droppedAttributesCount:i.droppedAttributesCount||0}}),droppedEventsCount:e.droppedEventsCount,status:{code:s.code,message:s.message},links:e.links.map(e=>{var i,s;return i=e,s=t,{attributes:i.attributes?r(i.attributes):[],spanId:s.encodeSpanContext(i.context.spanId),traceId:s.encodeSpanContext(i.context.traceId),traceState:i.context.traceState?.serialize(),droppedAttributesCount:i.droppedAttributesCount||0}}),droppedLinksCount:e.droppedLinksCount}})(e,t));l.push({scope:{name:(a=e[0].instrumentationScope).name,version:a.version},spans:i,schemaUrl:e[0].instrumentationScope.schemaUrl})}c=u.next()}let h={resource:{attributes:r(e.attributes),droppedAttributesCount:0},scopeSpans:l,schemaUrl:void 0};s.push(h),n=o.next()}return s}(e,function(e){if(void 0===e)return w;let t=e.useLongBits??!0,i=e.useHex??!1;return{encodeHrTime:t?p:g,encodeSpanContext:i?m:h,encodeOptionalSpanContext:i?m:f}}({useHex:!0,useLongBits:!1}))};return new TextEncoder().encode(JSON.stringify(t))},deserializeResponse:e=>JSON.parse(new TextDecoder().decode(e))};let RetryingTransport=class RetryingTransport{_transport;constructor(e){this._transport=e}retry(e,t,i){return new Promise((r,s)=>{setTimeout(()=>{this._transport.send(e,t).then(r,s)},i)})}async send(e,t){let i=Date.now()+t,r=await this._transport.send(e,t),s=5,o=1e3;for(;"retryable"===r.status&&s>0;){s--;let t=Math.max(Math.min(o,5e3)+(.4*Math.random()-.2),0);o*=1.5;let n=r.retryInMillis??t,a=i-Date.now();if(n>a)break;r=await this.retry(e,a,n)}return r}shutdown(){return this._transport.shutdown()}};function y(e){return new RetryingTransport(e.transport)}var b,C,R,k,S,P,A,I,D,_,$,T,E,x,O,F,B,L="object"==typeof globalThis?globalThis:"object"==typeof self?self:"object"==typeof window?window:"object"==typeof i.g?i.g:{},U="1.9.0",q=/^(\d+)\.(\d+)\.(\d+)(-(.+))?$/,N=function(e){var t=new Set([e]),i=new Set,r=e.match(q);if(!r)return function(){return!1};var s={major:+r[1],minor:+r[2],patch:+r[3],prerelease:r[4]};if(null!=s.prerelease)return function(t){return t===e};function o(e){return i.add(e),!1}return function(e){if(t.has(e))return!0;if(i.has(e))return!1;var r=e.match(q);if(!r)return o(e);var n={major:+r[1],minor:+r[2],patch:+r[3],prerelease:r[4]};if(null!=n.prerelease||s.major!==n.major)return o(e);if(0===s.major)return s.minor===n.minor&&s.patch<=n.patch?(t.add(e),!0):o(e);return s.minor<=n.minor?(t.add(e),!0):o(e)}}(U),M=Symbol.for("opentelemetry.js.api."+U.split(".")[0]);function W(e,t,i,r){void 0===r&&(r=!1);var s,o=L[M]=null!=(s=L[M])?s:{version:U};if(!r&&o[e]){var n=Error("@opentelemetry/api: Attempted duplicate registration of API: "+e);return i.error(n.stack||n.message),!1}if(o.version!==U){var n=Error("@opentelemetry/api: Registration of version v"+o.version+" for "+e+" does not match previously registered API v"+U);return i.error(n.stack||n.message),!1}return o[e]=t,i.debug("@opentelemetry/api: Registered a global for "+e+" v"+U+"."),!0}function G(e){var t,i,r=null==(t=L[M])?void 0:t.version;if(r&&N(r))return null==(i=L[M])?void 0:i[e]}function H(e,t){t.debug("@opentelemetry/api: Unregistering a global for "+e+" v"+U+".");var i=L[M];i&&delete i[e]}var V=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,o=i.call(e),n=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)n.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=o.return)&&i.call(o)}finally{if(s)throw s.error}}return n},j=function(e,t,i){if(i||2==arguments.length)for(var r,s=0,o=t.length;s<o;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))},z=function(){function e(e){this._namespace=e.namespace||"DiagComponentLogger"}return e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Q("debug",this._namespace,e)},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Q("error",this._namespace,e)},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Q("info",this._namespace,e)},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Q("warn",this._namespace,e)},e.prototype.verbose=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Q("verbose",this._namespace,e)},e}();function Q(e,t,i){var r=G("diag");if(r)return i.unshift(t),r[e].apply(r,j([],V(i),!1))}(b=$||($={}))[b.NONE=0]="NONE",b[b.ERROR=30]="ERROR",b[b.WARN=50]="WARN",b[b.INFO=60]="INFO",b[b.DEBUG=70]="DEBUG",b[b.VERBOSE=80]="VERBOSE",b[b.ALL=9999]="ALL";var Y=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,o=i.call(e),n=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)n.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=o.return)&&i.call(o)}finally{if(s)throw s.error}}return n},K=function(e,t,i){if(i||2==arguments.length)for(var r,s=0,o=t.length;s<o;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))},Z=function(){function e(){function e(e){return function(){for(var t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];var r=G("diag");if(r)return r[e].apply(r,K([],Y(t),!1))}}var t=this;t.setLogger=function(e,i){if(void 0===i&&(i={logLevel:$.INFO}),e===t){var r,s,o,n=Error("Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation");return t.error(null!=(r=n.stack)?r:n.message),!1}"number"==typeof i&&(i={logLevel:i});var a=G("diag"),l=function(e,t){function i(i,r){var s=t[i];return"function"==typeof s&&e>=r?s.bind(t):function(){}}return e<$.NONE?e=$.NONE:e>$.ALL&&(e=$.ALL),t=t||{},{error:i("error",$.ERROR),warn:i("warn",$.WARN),info:i("info",$.INFO),debug:i("debug",$.DEBUG),verbose:i("verbose",$.VERBOSE)}}(null!=(s=i.logLevel)?s:$.INFO,e);if(a&&!i.suppressOverrideMessage){var u=null!=(o=Error().stack)?o:"<failed to generate stacktrace>";a.warn("Current logger will be overwritten from "+u),l.warn("Current logger will overwrite one already registered from "+u)}return W("diag",l,t,!0)},t.disable=function(){H("diag",t)},t.createComponentLogger=function(e){return new z(e)},t.verbose=e("verbose"),t.debug=e("debug"),t.info=e("info"),t.warn=e("warn"),t.error=e("error")}return e.instance=function(){return this._instance||(this._instance=new e),this._instance},e}(),J=Z.instance();let XhrTransport=class XhrTransport{_parameters;constructor(e){this._parameters=e}send(e,t){return new Promise(i=>{let r=new XMLHttpRequest;r.timeout=t,r.open("POST",this._parameters.url),Object.entries(this._parameters.headers()).forEach(([e,t])=>{r.setRequestHeader(e,t)}),r.ontimeout=e=>{i({status:"failure",error:Error("XHR request timed out")})},r.onreadystatechange=()=>{r.status>=200&&r.status<=299?(J.debug("XHR success"),i({status:"success"})):r.status&&[429,502,503,504].includes(r.status)?i({status:"retryable",retryInMillis:function(e){if(null==e)return;let t=Number.parseInt(e,10);if(Number.isInteger(t))return t>0?1e3*t:-1;let i=new Date(e).getTime()-Date.now();return i>=0?i:0}(r.getResponseHeader("Retry-After"))}):0!==r.status&&i({status:"failure",error:Error("XHR request failed with non-retryable status")})},r.onabort=()=>{i({status:"failure",error:Error("XHR request aborted")})},r.onerror=()=>{i({status:"failure",error:Error("XHR request errored")})},r.send(e)})}shutdown(){}};let SendBeaconTransport=class SendBeaconTransport{_params;constructor(e){this._params=e}send(e){return new Promise(t=>{navigator.sendBeacon(this._params.url,new Blob([e],{type:this._params.blobType}))?(J.debug("SendBeacon success"),t({status:"success"})):t({status:"failure",error:Error("SendBeacon failed")})})}shutdown(){}};let BoundedQueueExportPromiseHandler=class BoundedQueueExportPromiseHandler{_concurrencyLimit;_sendingPromises=[];constructor(e){this._concurrencyLimit=e}pushPromise(e){if(this.hasReachedLimit())throw Error("Concurrency Limit reached");this._sendingPromises.push(e);let t=()=>{let t=this._sendingPromises.indexOf(e);this._sendingPromises.splice(t,1)};e.then(t,t)}hasReachedLimit(){return this._sendingPromises.length>=this._concurrencyLimit}async awaitAll(){await Promise.all(this._sendingPromises)}};(C=T||(T={}))[C.SUCCESS=0]="SUCCESS",C[C.FAILED=1]="FAILED";let OTLPExporterError=class OTLPExporterError extends Error{code;name="OTLPExporterError";data;constructor(e,t,i){super(e),this.data=i,this.code=t}};let OTLPExportDelegate=class OTLPExportDelegate{_transport;_serializer;_responseHandler;_promiseQueue;_timeout;_diagLogger;constructor(e,t,i,r,s){this._transport=e,this._serializer=t,this._responseHandler=i,this._promiseQueue=r,this._timeout=s,this._diagLogger=J.createComponentLogger({namespace:"OTLPExportDelegate"})}export(e,t){if(this._diagLogger.debug("items to be sent",e),this._promiseQueue.hasReachedLimit())return void t({code:T.FAILED,error:Error("Concurrent export limit reached")});let i=this._serializer.serializeRequest(e);if(null==i)return void t({code:T.FAILED,error:Error("Nothing to send")});this._promiseQueue.pushPromise(this._transport.send(i,this._timeout).then(e=>{if("success"===e.status){if(null!=e.data)try{this._responseHandler.handleResponse(this._serializer.deserializeResponse(e.data))}catch(t){this._diagLogger.warn("Export succeeded but could not deserialize response - is the response specification compliant?",t,e.data)}t({code:T.SUCCESS});return}if("failure"===e.status&&e.error)return void t({code:T.FAILED,error:e.error});"retryable"===e.status?t({code:T.FAILED,error:new OTLPExporterError("Export failed with retryable status")}):t({code:T.FAILED,error:new OTLPExporterError("Export failed with unknown error")})},e=>t({code:T.FAILED,error:e})))}forceFlush(){return this._promiseQueue.awaitAll()}async shutdown(){this._diagLogger.debug("shutdown started"),await this.forceFlush(),this._transport.shutdown()}};function X(e,t,i){var r,s;return r={transport:i,serializer:t,promiseHandler:new BoundedQueueExportPromiseHandler(e.concurrencyLimit)},s={timeout:e.timeoutMillis},new OTLPExportDelegate(r.transport,r.serializer,{handleResponse(e){null!=e&&Object.prototype.hasOwnProperty.call(e,"partialSuccess")&&null!=e.partialSuccess&&0!==Object.keys(e.partialSuccess).length&&J.warn("Received Partial Success response:",JSON.stringify(e.partialSuccess))}},r.promiseHandler,s.timeout)}let OTLPTraceExporter=class OTLPTraceExporter extends OTLPExporterBase{constructor(e={}){super(function(e,t,i,r){let s=!!e.headers||"function"!=typeof navigator.sendBeacon,o=(n={url:e.url,timeoutMillis:e.timeoutMillis,headers:function(e){if(null!=e)return()=>e}(e.headers),concurrencyLimit:e.concurrencyLimit},{...(a={},l={timeoutMillis:1e4,concurrencyLimit:30,compression:"none",headers:()=>r,url:"http://localhost:4318/"+i,agentOptions:{keepAlive:!0}},{timeoutMillis:function(e){if(Number.isFinite(e)&&e>0)return e;throw Error(`Configuration: timeoutMillis is invalid, expected number greater than 0 (actual: '${e}')`)}(n.timeoutMillis??a.timeoutMillis??l.timeoutMillis),concurrencyLimit:n.concurrencyLimit??a.concurrencyLimit??l.concurrencyLimit,compression:n.compression??a.compression??l.compression}),headers:function(e,t,i){let r={...i()},s={};return()=>(null!=t&&Object.assign(s,t()),null!=e&&Object.assign(s,e()),Object.assign(s,r))}((u=n.headers,()=>{let e={};return Object.entries(u?.()??{}).forEach(([t,i])=>{void 0!==i?e[t]=String(i):J.warn(`Header "${t}" has invalid value (${i}) and will be ignored`)}),e}),a.headers,l.headers),url:function(e){if(null!=e)try{return new URL(e),e}catch{throw Error(`Configuration: Could not parse user-provided export URL: '${e}'`)}}(n.url)??a.url??l.url,agentOptions:n.agentOptions??a.agentOptions??l.agentOptions});if(s){var n,a,l,u;return X(o,t,y({transport:new XhrTransport(o)}))}return X(o,t,y({transport:new SendBeaconTransport({url:o.url,blobType:o.headers()["Content-Type"]})}))}(e,v,"v1/traces",{"Content-Type":"application/json"}))}};let ee={"telemetry.sdk.name":"opentelemetry","process.runtime.name":"browser","telemetry.sdk.language":"webjs","telemetry.sdk.version":"2.0.0"},et="service.name",ei="telemetry.sdk.language",er="telemetry.sdk.name",es="telemetry.sdk.version",eo=e=>null!==e&&"object"==typeof e&&"function"==typeof e.then;let ResourceImpl=class ResourceImpl{_rawAttributes;_asyncAttributesPending=!1;_memoizedAttributes;static FromAttributeList(e){let t=new ResourceImpl({});return t._rawAttributes=e,t._asyncAttributesPending=e.filter(([e,t])=>eo(t)).length>0,t}constructor(e){let t=e.attributes??{};this._rawAttributes=Object.entries(t).map(([e,t])=>(eo(t)&&(this._asyncAttributesPending=!0),[e,t]))}get asyncAttributesPending(){return this._asyncAttributesPending}async waitForAsyncAttributes(){if(this.asyncAttributesPending){for(let e=0;e<this._rawAttributes.length;e++){let[t,i]=this._rawAttributes[e];try{this._rawAttributes[e]=[t,eo(i)?await i:i]}catch(i){J.debug("a resource's async attributes promise rejected: %s",i),this._rawAttributes[e]=[t,void 0]}}this._asyncAttributesPending=!1}}get attributes(){if(this.asyncAttributesPending&&J.error("Accessing resource attributes before async attributes settled"),this._memoizedAttributes)return this._memoizedAttributes;let e={};for(let[t,i]of this._rawAttributes){if(eo(i)){J.debug(`Unsettled resource attribute ${t} skipped`);continue}null!=i&&(e[t]??=i)}return this._asyncAttributesPending||(this._memoizedAttributes=e),e}getRawAttributes(){return this._rawAttributes}merge(e){return null==e?this:ResourceImpl.FromAttributeList([...e.getRawAttributes(),...this.getRawAttributes()])}};function en(e){return ResourceImpl.FromAttributeList(Object.entries(e))}(R=E||(E={}))[R.NONE=0]="NONE",R[R.SAMPLED=1]="SAMPLED";let Deferred=class Deferred{_promise;_resolve;_reject;constructor(){this._promise=new Promise((e,t)=>{this._resolve=e,this._reject=t})}get promise(){return this._promise}resolve(e){this._resolve(e)}reject(e){this._reject(e)}};let BindOnceFuture=class BindOnceFuture{_callback;_that;_isCalled=!1;_deferred=new Deferred;constructor(e,t){this._callback=e,this._that=t}get isCalled(){return this._isCalled}get promise(){return this._deferred.promise}call(...e){if(!this._isCalled){this._isCalled=!0;try{Promise.resolve(this._callback.call(this._that,...e)).then(e=>this._deferred.resolve(e),e=>this._deferred.reject(e))}catch(e){this._deferred.reject(e)}}return this._deferred.promise}};let ea=e=>{var t;J.error("string"==typeof(t=e)?t:JSON.stringify(function(e){let t={},i=e;for(;null!==i;)Object.getOwnPropertyNames(i).forEach(e=>{if(t[e])return;let r=i[e];r&&(t[e]=String(r))}),i=Object.getPrototypeOf(i);return t}(t)))};function el(e){try{ea(e)}catch{}}function eu(e){return Symbol.for(e)}var ec=new function e(t){var i=this;i._currentContext=t?new Map(t):new Map,i.getValue=function(e){return i._currentContext.get(e)},i.setValue=function(t,r){var s=new e(i._currentContext);return s._currentContext.set(t,r),s},i.deleteValue=function(t){var r=new e(i._currentContext);return r._currentContext.delete(t),r}},eh=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,o=i.call(e),n=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)n.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=o.return)&&i.call(o)}finally{if(s)throw s.error}}return n},ed=function(e,t,i){if(i||2==arguments.length)for(var r,s=0,o=t.length;s<o;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))},ep=function(){function e(){}return e.prototype.active=function(){return ec},e.prototype.with=function(e,t,i){for(var r=[],s=3;s<arguments.length;s++)r[s-3]=arguments[s];return t.call.apply(t,ed([i],eh(r),!1))},e.prototype.bind=function(e,t){return t},e.prototype.enable=function(){return this},e.prototype.disable=function(){return this},e}(),eg=function(e,t){var i="function"==typeof Symbol&&e[Symbol.iterator];if(!i)return e;var r,s,o=i.call(e),n=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)n.push(r.value)}catch(e){s={error:e}}finally{try{r&&!r.done&&(i=o.return)&&i.call(o)}finally{if(s)throw s.error}}return n},em=function(e,t,i){if(i||2==arguments.length)for(var r,s=0,o=t.length;s<o;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))},ef="context",ew=new ep,ev=function(){function e(){}return e.getInstance=function(){return this._instance||(this._instance=new e),this._instance},e.prototype.setGlobalContextManager=function(e){return W(ef,e,Z.instance())},e.prototype.active=function(){return this._getContextManager().active()},e.prototype.with=function(e,t,i){for(var r,s=[],o=3;o<arguments.length;o++)s[o-3]=arguments[o];return(r=this._getContextManager()).with.apply(r,em([e,t,i],eg(s),!1))},e.prototype.bind=function(e,t){return this._getContextManager().bind(e,t)},e.prototype._getContextManager=function(){return G(ef)||ew},e.prototype.disable=function(){this._getContextManager().disable(),H(ef,Z.instance())},e}(),ey=ev.getInstance();let eb=eu("OpenTelemetry SDK Context Key SUPPRESS_TRACING");function eC(e){return e.setValue(eb,!0)}let SimpleSpanProcessor=class SimpleSpanProcessor{_exporter;_shutdownOnce;_pendingExports;constructor(e){this._exporter=e,this._shutdownOnce=new BindOnceFuture(this._shutdown,this),this._pendingExports=new Set}async forceFlush(){await Promise.all(Array.from(this._pendingExports)),this._exporter.forceFlush&&await this._exporter.forceFlush()}onStart(e,t){}onEnd(e){if(this._shutdownOnce.isCalled||(e.spanContext().traceFlags&E.SAMPLED)==0)return;let t=this._doExport(e).catch(e=>el(e));this._pendingExports.add(t),t.finally(()=>this._pendingExports.delete(t))}async _doExport(e){var t,i;e.resource.asyncAttributesPending&&await e.resource.waitForAsyncAttributes?.();let r=await (t=this._exporter,i=[e],new Promise(e=>{ey.with(eC(ey.active()),()=>{t.export(i,t=>{e(t)})})}));if(r.code!==T.SUCCESS)throw r.error??Error(`SimpleSpanProcessor: span export failed (status ${r})`)}shutdown(){return this._shutdownOnce.call()}_shutdown(){return this._exporter.shutdown()}};function eR(e){}let BatchSpanProcessorBase=class BatchSpanProcessorBase{_exporter;_maxExportBatchSize;_maxQueueSize;_scheduledDelayMillis;_exportTimeoutMillis;_isExporting=!1;_finishedSpans=[];_timer;_shutdownOnce;_droppedSpansCount=0;constructor(e,t){this._exporter=e,this._maxExportBatchSize="number"==typeof t?.maxExportBatchSize?t.maxExportBatchSize:eR("OTEL_BSP_MAX_EXPORT_BATCH_SIZE")??512,this._maxQueueSize="number"==typeof t?.maxQueueSize?t.maxQueueSize:eR("OTEL_BSP_MAX_QUEUE_SIZE")??2048,this._scheduledDelayMillis="number"==typeof t?.scheduledDelayMillis?t.scheduledDelayMillis:eR("OTEL_BSP_SCHEDULE_DELAY")??5e3,this._exportTimeoutMillis="number"==typeof t?.exportTimeoutMillis?t.exportTimeoutMillis:eR("OTEL_BSP_EXPORT_TIMEOUT")??3e4,this._shutdownOnce=new BindOnceFuture(this._shutdown,this),this._maxExportBatchSize>this._maxQueueSize&&(J.warn("BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize"),this._maxExportBatchSize=this._maxQueueSize)}forceFlush(){return this._shutdownOnce.isCalled?this._shutdownOnce.promise:this._flushAll()}onStart(e,t){}onEnd(e){this._shutdownOnce.isCalled||(e.spanContext().traceFlags&E.SAMPLED)!=0&&this._addToBuffer(e)}shutdown(){return this._shutdownOnce.call()}_shutdown(){return Promise.resolve().then(()=>this.onShutdown()).then(()=>this._flushAll()).then(()=>this._exporter.shutdown())}_addToBuffer(e){if(this._finishedSpans.length>=this._maxQueueSize){0===this._droppedSpansCount&&J.debug("maxQueueSize reached, dropping spans"),this._droppedSpansCount++;return}this._droppedSpansCount>0&&(J.warn(`Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`),this._droppedSpansCount=0),this._finishedSpans.push(e),this._maybeStartTimer()}_flushAll(){return new Promise((e,t)=>{let i=[],r=Math.ceil(this._finishedSpans.length/this._maxExportBatchSize);for(let e=0;e<r;e++)i.push(this._flushOneBatch());Promise.all(i).then(()=>{e()}).catch(t)})}_flushOneBatch(){return(this._clearTimer(),0===this._finishedSpans.length)?Promise.resolve():new Promise((e,t)=>{let i=setTimeout(()=>{t(Error("Timeout"))},this._exportTimeoutMillis);ey.with(eC(ey.active()),()=>{let r;this._finishedSpans.length<=this._maxExportBatchSize?(r=this._finishedSpans,this._finishedSpans=[]):r=this._finishedSpans.splice(0,this._maxExportBatchSize);let s=()=>this._exporter.export(r,r=>{clearTimeout(i),r.code===T.SUCCESS?e():t(r.error??Error("BatchSpanProcessor: span export failed"))}),o=null;for(let e=0,t=r.length;e<t;e++){let t=r[e];t.resource.asyncAttributesPending&&t.resource.waitForAsyncAttributes&&(o??=[]).push(t.resource.waitForAsyncAttributes())}null===o?s():Promise.all(o).then(s,e=>{el(e),t(e)})})})}_maybeStartTimer(){if(this._isExporting)return;let e=()=>{this._isExporting=!0,this._flushOneBatch().finally(()=>{this._isExporting=!1,this._finishedSpans.length>0&&(this._clearTimer(),this._maybeStartTimer())}).catch(e=>{this._isExporting=!1,el(e)})};if(this._finishedSpans.length>=this._maxExportBatchSize)return e();if(void 0===this._timer){var t;this._timer=setTimeout(()=>e(),this._scheduledDelayMillis),this._timer}}_clearTimer(){void 0!==this._timer&&(clearTimeout(this._timer),this._timer=void 0)}};let BatchSpanProcessor=class BatchSpanProcessor extends BatchSpanProcessorBase{_visibilityChangeListener;_pageHideListener;constructor(e,t){super(e,t),this.onInit(t)}onInit(e){e?.disableAutoFlushOnDocumentHide!==!0&&"undefined"!=typeof document&&(this._visibilityChangeListener=()=>{"hidden"===document.visibilityState&&this.forceFlush().catch(e=>{el(e)})},this._pageHideListener=()=>{this.forceFlush().catch(e=>{el(e)})},document.addEventListener("visibilitychange",this._visibilityChangeListener),document.addEventListener("pagehide",this._pageHideListener))}onShutdown(){"undefined"!=typeof document&&(this._visibilityChangeListener&&document.removeEventListener("visibilitychange",this._visibilityChangeListener),this._pageHideListener&&document.removeEventListener("pagehide",this._pageHideListener))}};let ek=Function.prototype.toString,eS=ek.call(Object),eP=Object.getPrototypeOf,eA=Object.prototype,eI=eA.hasOwnProperty,eD=Symbol?Symbol.toStringTag:void 0,e_=eA.toString;function e$(e){var t,i,r;if(null==(t=e)||"object"!=typeof t||"[object Object]"!==(null==(i=e)?void 0===i?"[object Undefined]":"[object Null]":eD&&eD in Object(i)?function(e){let t=eI.call(e,eD),i=e[eD],r=!1;try{e[eD]=void 0,r=!0}catch{}let s=e_.call(e);return r&&(t?e[eD]=i:delete e[eD]),s}(i):(r=i,e_.call(r))))return!1;let s=eP(e);if(null===s)return!0;let o=eI.call(s,"constructor")&&s.constructor;return"function"==typeof o&&o instanceof o&&ek.call(o)===eS}function eT(e){return ex(e)?e.slice():e}function eE(e,t,i){let r=i.get(e[t])||[];for(let i=0,s=r.length;i<s;i++){let s=r[i];if(s.key===t&&s.obj===e)return!0}return!1}function ex(e){return Array.isArray(e)}function eO(e){return"function"==typeof e}function eF(e){return!eB(e)&&!ex(e)&&!eO(e)&&"object"==typeof e}function eB(e){return"string"==typeof e||"number"==typeof e||"boolean"==typeof e||void 0===e||e instanceof Date||e instanceof RegExp||null===e}var eL="0000000000000000",eU="00000000000000000000000000000000",eq={traceId:eU,spanId:eL,traceFlags:E.NONE},eN=function(){function e(e){void 0===e&&(e=eq),this._spanContext=e}return e.prototype.spanContext=function(){return this._spanContext},e.prototype.setAttribute=function(e,t){return this},e.prototype.setAttributes=function(e){return this},e.prototype.addEvent=function(e,t){return this},e.prototype.addLink=function(e){return this},e.prototype.addLinks=function(e){return this},e.prototype.setStatus=function(e){return this},e.prototype.updateName=function(e){return this},e.prototype.end=function(e){},e.prototype.isRecording=function(){return!1},e.prototype.recordException=function(e,t){},e}(),eM=eu("OpenTelemetry Context Key SPAN");function eW(e){return e.getValue(eM)||void 0}function eG(){return eW(ev.getInstance().active())}function eH(e,t){return e.setValue(eM,t)}function eV(e){return e.deleteValue(eM)}function ej(e,t){return eH(e,new eN(t))}function ez(e){var t;return null==(t=eW(e))?void 0:t.spanContext()}var eQ=/^([0-9a-f]{32})$/i,eY=/^[0-9a-f]{16}$/i;function eK(e){return eQ.test(e)&&e!==eU}function eZ(e){var t;return eK(e.traceId)&&(t=e.spanId,eY.test(t)&&t!==eL)}function eJ(e){return new eN(e)}var eX=ev.getInstance(),e0=function(){function e(){}return e.prototype.startSpan=function(e,t,i){if(void 0===i&&(i=eX.active()),null==t?void 0:t.root)return new eN;var r,s=i&&ez(i);return"object"==typeof(r=s)&&"string"==typeof r.spanId&&"string"==typeof r.traceId&&"number"==typeof r.traceFlags&&eZ(s)?new eN(s):new eN},e.prototype.startActiveSpan=function(e,t,i,r){if(!(arguments.length<2)){2==arguments.length?n=t:3==arguments.length?(s=t,n=i):(s=t,o=i,n=r);var s,o,n,a=null!=o?o:eX.active(),l=this.startSpan(e,s,a),u=eH(a,l);return eX.with(u,n,void 0,l)}},e}(),e1=new e0,e2=function(){function e(e,t,i,r){this._provider=e,this.name=t,this.version=i,this.options=r}return e.prototype.startSpan=function(e,t,i){return this._getTracer().startSpan(e,t,i)},e.prototype.startActiveSpan=function(e,t,i,r){var s=this._getTracer();return Reflect.apply(s.startActiveSpan,s,arguments)},e.prototype._getTracer=function(){if(this._delegate)return this._delegate;var e=this._provider.getDelegateTracer(this.name,this.version,this.options);return e?(this._delegate=e,this._delegate):e1},e}(),e4=new(function(){function e(){}return e.prototype.getTracer=function(e,t,i){return new e0},e}()),e5=function(){function e(){}return e.prototype.getTracer=function(e,t,i){var r;return null!=(r=this.getDelegateTracer(e,t,i))?r:new e2(this,e,t,i)},e.prototype.getDelegate=function(){var e;return null!=(e=this._delegate)?e:e4},e.prototype.setDelegate=function(e){this._delegate=e},e.prototype.getDelegateTracer=function(e,t,i){var r;return null==(r=this._delegate)?void 0:r.getTracer(e,t,i)},e}(),e7="trace",e8=(function(){function e(){this._proxyTracerProvider=new e5,this.wrapSpanContext=eJ,this.isSpanContextValid=eZ,this.deleteSpan=eV,this.getSpan=eW,this.getActiveSpan=eG,this.getSpanContext=ez,this.setSpan=eH,this.setSpanContext=ej}return e.getInstance=function(){return this._instance||(this._instance=new e),this._instance},e.prototype.setGlobalTracerProvider=function(e){var t=W(e7,this._proxyTracerProvider,Z.instance());return t&&this._proxyTracerProvider.setDelegate(e),t},e.prototype.getTracerProvider=function(){return G(e7)||this._proxyTracerProvider},e.prototype.getTracer=function(e,t){return this.getTracerProvider().getTracer(e,t)},e.prototype.disable=function(){H(e7,Z.instance()),this._proxyTracerProvider=new e5},e})().getInstance();function e6(e){let t={};if("object"!=typeof e||null==e)return t;for(let[r,s]of Object.entries(e)){var i;if(!("string"==typeof(i=r)&&i.length>0)){J.warn(`Invalid attribute key: ${r}`);continue}if(!e3(s)){J.warn(`Invalid attribute value set for key: ${r}`);continue}Array.isArray(s)?t[r]=s.slice():t[r]=s}return t}function e3(e){return null==e||(Array.isArray(e)?function(e){let t;for(let i of e)if(null!=i){if(!t){if(e9(i)){t=typeof i;continue}return!1}if(typeof i!==t)return!1}return!0}(e):e9(e))}function e9(e){switch(typeof e){case"number":case"boolean":case"string":return!0}return!1}(k=x||(x={}))[k.NOT_RECORD=0]="NOT_RECORD",k[k.RECORD=1]="RECORD",k[k.RECORD_AND_SAMPLED=2]="RECORD_AND_SAMPLED",(S=O||(O={}))[S.UNSET=0]="UNSET",S[S.OK=1]="OK",S[S.ERROR=2]="ERROR";let te="exception.type",tt="exception.message";let SpanImpl=class SpanImpl{_spanContext;kind;parentSpanContext;attributes={};links=[];events=[];startTime;resource;instrumentationScope;_droppedAttributesCount=0;_droppedEventsCount=0;_droppedLinksCount=0;name;status={code:O.UNSET};endTime=[0,0];_ended=!1;_duration=[-1,-1];_spanProcessor;_spanLimits;_attributeValueLengthLimit;_performanceStartTime;_performanceOffset;_startTimeProvided;constructor(e){let t=Date.now();this._spanContext=e.spanContext,this._performanceStartTime=s.now(),this._performanceOffset=t-(this._performanceStartTime+n()),this._startTimeProvided=null!=e.startTime,this._spanLimits=e.spanLimits,this._attributeValueLengthLimit=this._spanLimits.attributeValueLengthLimit||0,this._spanProcessor=e.spanProcessor,this.name=e.name,this.parentSpanContext=e.parentSpanContext,this.kind=e.kind,this.links=e.links||[],this.startTime=this._getTime(e.startTime??t),this.resource=e.resource,this.instrumentationScope=e.scope,null!=e.attributes&&this.setAttributes(e.attributes),this._spanProcessor.onStart(this,e.context)}spanContext(){return this._spanContext}setAttribute(e,t){if(null==t||this._isSpanEnded())return this;if(0===e.length)return J.warn(`Invalid attribute key: ${e}`),this;if(!e3(t))return J.warn(`Invalid attribute value set for key: ${e}`),this;let{attributeCountLimit:i}=this._spanLimits;return void 0!==i&&Object.keys(this.attributes).length>=i&&!Object.prototype.hasOwnProperty.call(this.attributes,e)?this._droppedAttributesCount++:this.attributes[e]=this._truncateToSize(t),this}setAttributes(e){for(let[t,i]of Object.entries(e))this.setAttribute(t,i);return this}addEvent(e,t,i){if(this._isSpanEnded())return this;let{eventCountLimit:r}=this._spanLimits;if(0===r)return J.warn("No events allowed."),this._droppedEventsCount++,this;void 0!==r&&this.events.length>=r&&(0===this._droppedEventsCount&&J.debug("Dropping extra events."),this.events.shift(),this._droppedEventsCount++),l(t)&&(l(i)||(i=t),t=void 0);let s=e6(t);return this.events.push({name:e,attributes:s,time:this._getTime(i),droppedAttributesCount:0}),this}addLink(e){return this.links.push(e),this}addLinks(e){return this.links.push(...e),this}setStatus(e){return this._isSpanEnded()||(this.status={...e},null!=this.status.message&&"string"!=typeof e.message&&(J.warn(`Dropping invalid status.message of type '${typeof e.message}', expected 'string'`),delete this.status.message)),this}updateName(e){return this._isSpanEnded()||(this.name=e),this}end(e){var t,i;let r,s;if(this._isSpanEnded())return void J.error(`${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`);this._ended=!0,this.endTime=this._getTime(e),this._duration=(t=this.startTime,r=(i=this.endTime)[0]-t[0],(s=i[1]-t[1])<0&&(r-=1,s+=1e9),[r,s]),this._duration[0]<0&&(J.warn("Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.",this.startTime,this.endTime),this.endTime=this.startTime.slice(),this._duration=[0,0]),this._droppedEventsCount>0&&J.warn(`Dropped ${this._droppedEventsCount} events because eventCountLimit reached`),this._spanProcessor.onEnd(this)}_getTime(e){if("number"==typeof e&&e<=s.now()){var t=e+this._performanceOffset;return u(o(n()),o("number"==typeof t?t:s.now()))}if("number"==typeof e)return o(e);if(e instanceof Date)return o(e.getTime());if(a(e))return e;if(this._startTimeProvided)return o(Date.now());let i=s.now()-this._performanceStartTime;return u(this.startTime,o(i))}isRecording(){return!1===this._ended}recordException(e,t){let i={};"string"==typeof e?i[tt]=e:e&&(e.code?i[te]=e.code.toString():e.name&&(i[te]=e.name),e.message&&(i[tt]=e.message),e.stack&&(i["exception.stacktrace"]=e.stack)),i[te]||i[tt]?this.addEvent("exception",i,t):J.warn(`Failed to record an exception ${e}`)}get duration(){return this._duration}get ended(){return this._ended}get droppedAttributesCount(){return this._droppedAttributesCount}get droppedEventsCount(){return this._droppedEventsCount}get droppedLinksCount(){return this._droppedLinksCount}_isSpanEnded(){if(this._ended){let e=Error(`Operation attempted on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`);J.warn(`Cannot execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`,e)}return this._ended}_truncateToLimitUtil(e,t){return e.length<=t?e:e.substring(0,t)}_truncateToSize(e){let t=this._attributeValueLengthLimit;return t<=0?(J.warn(`Attribute value limit must be positive, got ${t}`),e):"string"==typeof e?this._truncateToLimitUtil(e,t):Array.isArray(e)?e.map(e=>"string"==typeof e?this._truncateToLimitUtil(e,t):e):e}};(P=F||(F={}))[P.NOT_RECORD=0]="NOT_RECORD",P[P.RECORD=1]="RECORD",P[P.RECORD_AND_SAMPLED=2]="RECORD_AND_SAMPLED";let AlwaysOffSampler=class AlwaysOffSampler{shouldSample(){return{decision:F.NOT_RECORD}}toString(){return"AlwaysOffSampler"}};let AlwaysOnSampler=class AlwaysOnSampler{shouldSample(){return{decision:F.RECORD_AND_SAMPLED}}toString(){return"AlwaysOnSampler"}};let ParentBasedSampler=class ParentBasedSampler{_root;_remoteParentSampled;_remoteParentNotSampled;_localParentSampled;_localParentNotSampled;constructor(e){this._root=e.root,this._root||(el(Error("ParentBasedSampler must have a root sampler configured")),this._root=new AlwaysOnSampler),this._remoteParentSampled=e.remoteParentSampled??new AlwaysOnSampler,this._remoteParentNotSampled=e.remoteParentNotSampled??new AlwaysOffSampler,this._localParentSampled=e.localParentSampled??new AlwaysOnSampler,this._localParentNotSampled=e.localParentNotSampled??new AlwaysOffSampler}shouldSample(e,t,i,r,s,o){let n=e8.getSpanContext(e);return n&&eZ(n)?n.isRemote?n.traceFlags&E.SAMPLED?this._remoteParentSampled.shouldSample(e,t,i,r,s,o):this._remoteParentNotSampled.shouldSample(e,t,i,r,s,o):n.traceFlags&E.SAMPLED?this._localParentSampled.shouldSample(e,t,i,r,s,o):this._localParentNotSampled.shouldSample(e,t,i,r,s,o):this._root.shouldSample(e,t,i,r,s,o)}toString(){return`ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`}};let TraceIdRatioBasedSampler=class TraceIdRatioBasedSampler{_ratio;_upperBound;constructor(e=0){this._ratio=e,this._ratio=this._normalize(e),this._upperBound=Math.floor(0xffffffff*this._ratio)}shouldSample(e,t){return{decision:eK(t)&&this._accumulate(t)<this._upperBound?F.RECORD_AND_SAMPLED:F.NOT_RECORD}}toString(){return`TraceIdRatioBased{${this._ratio}}`}_normalize(e){return"number"!=typeof e||isNaN(e)?0:e>=1?1:e<=0?0:e}_accumulate(e){let t=0;for(let i=0;i<e.length/8;i++){let r=8*i;t=(t^parseInt(e.slice(r,r+8),16))>>>0}return t}};function ti(){return{sampler:tr(),forceFlushTimeoutMillis:3e4,generalLimits:{attributeValueLengthLimit:eR("OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT")??1/0,attributeCountLimit:eR("OTEL_ATTRIBUTE_COUNT_LIMIT")??128},spanLimits:{attributeValueLengthLimit:eR("OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT")??1/0,attributeCountLimit:eR("OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT")??128,linkCountLimit:eR("OTEL_SPAN_LINK_COUNT_LIMIT")??128,eventCountLimit:eR("OTEL_SPAN_EVENT_COUNT_LIMIT")??128,attributePerEventCountLimit:eR("OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT")??128,attributePerLinkCountLimit:eR("OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT")??128}}}function tr(){let e=(void 0)??"parentbased_always_on";switch(e){case"always_on":return new AlwaysOnSampler;case"always_off":return new AlwaysOffSampler;case"parentbased_always_on":return new ParentBasedSampler({root:new AlwaysOnSampler});case"parentbased_always_off":return new ParentBasedSampler({root:new AlwaysOffSampler});case"traceidratio":return new TraceIdRatioBasedSampler(ts());case"parentbased_traceidratio":return new ParentBasedSampler({root:new TraceIdRatioBasedSampler(ts())});default:return J.error(`OTEL_TRACES_SAMPLER value "${e}" invalid, defaulting to "parentbased_always_on".`),new ParentBasedSampler({root:new AlwaysOnSampler})}}function ts(){let e=eR("OTEL_TRACES_SAMPLER_ARG");return null==e?(J.error("OTEL_TRACES_SAMPLER_ARG is blank, defaulting to 1."),1):e<0||e>1?(J.error(`OTEL_TRACES_SAMPLER_ARG=${e} was given, but it is out of range ([0..1]), defaulting to 1.`),1):e}let to=1/0;let RandomIdGenerator=class RandomIdGenerator{generateTraceId=ta(16);generateSpanId=ta(8)};let tn=Array(32);function ta(e){return function(){for(let t=0;t<2*e;t++)tn[t]=Math.floor(16*Math.random())+48,tn[t]>=58&&(tn[t]+=39);return String.fromCharCode.apply(null,tn.slice(0,2*e))}}let Tracer=class Tracer{_sampler;_generalLimits;_spanLimits;_idGenerator;instrumentationScope;_resource;_spanProcessor;constructor(e,t,i,r){let s=function(e){let t={sampler:tr()},i=ti(),r=Object.assign({},i,t,e);return r.generalLimits=Object.assign({},i.generalLimits,e.generalLimits||{}),r.spanLimits=Object.assign({},i.spanLimits,e.spanLimits||{}),r}(t);this._sampler=s.sampler,this._generalLimits=s.generalLimits,this._spanLimits=s.spanLimits,this._idGenerator=t.idGenerator||new RandomIdGenerator,this._resource=i,this._spanProcessor=r,this.instrumentationScope=e}startSpan(e,t={},i=ey.active()){let r,s,o;t.root&&(i=e8.deleteSpan(i));let n=e8.getSpan(i);if(!0===i.getValue(eb))return J.debug("Instrumentation suppressed, returning Noop Span"),e8.wrapSpanContext(eq);let a=n?.spanContext(),l=this._idGenerator.generateSpanId();a&&e8.isSpanContextValid(a)?(s=a.traceId,o=a.traceState,r=a):s=this._idGenerator.generateTraceId();let u=t.kind??_.INTERNAL,c=(t.links??[]).map(e=>({context:e.context,attributes:e6(e.attributes)})),h=e6(t.attributes),d=this._sampler.shouldSample(i,s,e,u,h,c);o=d.traceState??o;let p={traceId:s,spanId:l,traceFlags:d.decision===x.RECORD_AND_SAMPLED?E.SAMPLED:E.NONE,traceState:o};if(d.decision===x.NOT_RECORD)return J.debug("Recording is off, propagating context in a non-recording span"),e8.wrapSpanContext(p);let g=e6(Object.assign(h,d.attributes));return new SpanImpl({resource:this._resource,scope:this.instrumentationScope,context:i,spanContext:p,name:e,kind:u,links:c,parentSpanContext:r,attributes:g,startTime:t.startTime,spanProcessor:this._spanProcessor,spanLimits:this._spanLimits})}startActiveSpan(e,t,i,r){let s,o,n;if(arguments.length<2)return;2==arguments.length?n=t:3==arguments.length?(s=t,n=i):(s=t,o=i,n=r);let a=o??ey.active(),l=this.startSpan(e,s,a),u=e8.setSpan(a,l);return ey.with(u,n,void 0,l)}getGeneralLimits(){return this._generalLimits}getSpanLimits(){return this._spanLimits}};let MultiSpanProcessor=class MultiSpanProcessor{_spanProcessors;constructor(e){this._spanProcessors=e}forceFlush(){let e=[];for(let t of this._spanProcessors)e.push(t.forceFlush());return new Promise(t=>{Promise.all(e).then(()=>{t()}).catch(e=>{el(e||Error("MultiSpanProcessor: forceFlush failed")),t()})})}onStart(e,t){for(let i of this._spanProcessors)i.onStart(e,t)}onEnd(e){for(let t of this._spanProcessors)t.onEnd(e)}shutdown(){let e=[];for(let t of this._spanProcessors)e.push(t.shutdown());return new Promise((t,i)=>{Promise.all(e).then(()=>{t()},i)})}};(A=B||(B={}))[A.resolved=0]="resolved",A[A.timeout=1]="timeout",A[A.error=2]="error",A[A.unresolved=3]="unresolved";let BasicTracerProvider=class BasicTracerProvider{_config;_tracers=new Map;_resource;_activeSpanProcessor;constructor(e={}){let t=function(...e){let t=e.shift(),i=new WeakMap;for(;e.length>0;)t=function e(t,i,r=0,s){let o;if(!(r>20)){if(r++,eB(t)||eB(i)||eO(i))o=eT(i);else if(ex(t)){if(o=t.slice(),ex(i))for(let e=0,t=i.length;e<t;e++)o.push(eT(i[e]));else if(eF(i)){let e=Object.keys(i);for(let t=0,r=e.length;t<r;t++){let r=e[t];o[r]=eT(i[r])}}}else if(eF(t))if(eF(i)){var n,a;if(n=t,a=i,!(e$(n)&&e$(a)))return i;o=Object.assign({},t);let l=Object.keys(i);for(let n=0,a=l.length;n<a;n++){let a=l[n],u=i[a];if(eB(u))void 0===u?delete o[a]:o[a]=u;else{let n=o[a];if(eE(t,a,s)||eE(i,a,s))delete o[a];else{if(eF(n)&&eF(u)){let e=s.get(n)||[],r=s.get(u)||[];e.push({obj:t,key:a}),r.push({obj:i,key:a}),s.set(n,e),s.set(u,r)}o[a]=e(o[a],u,r,s)}}}}else o=i;return o}}(t,e.shift(),0,i);return t}({},ti(),function(e){let t=Object.assign({},e.spanLimits);return t.attributeCountLimit=e.spanLimits?.attributeCountLimit??e.generalLimits?.attributeCountLimit??eR("OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT")??eR("OTEL_ATTRIBUTE_COUNT_LIMIT")??128,t.attributeValueLengthLimit=e.spanLimits?.attributeValueLengthLimit??e.generalLimits?.attributeValueLengthLimit??eR("OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT")??eR("OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT")??to,Object.assign({},e,{spanLimits:t})}(e));this._resource=t.resource??en({[et]:"unknown_service",[ei]:ee[ei],[er]:ee[er],[es]:ee[es]}),this._config=Object.assign({},t,{resource:this._resource});let i=[];e.spanProcessors?.length&&i.push(...e.spanProcessors),this._activeSpanProcessor=new MultiSpanProcessor(i)}getTracer(e,t,i){let r=`${e}@${t||""}:${i?.schemaUrl||""}`;return this._tracers.has(r)||this._tracers.set(r,new Tracer({name:e,version:t,schemaUrl:i?.schemaUrl},this._config,this._resource,this._activeSpanProcessor)),this._tracers.get(r)}forceFlush(){let e=this._config.forceFlushTimeoutMillis,t=this._activeSpanProcessor._spanProcessors.map(t=>new Promise(i=>{let r,s=setTimeout(()=>{i(Error(`Span processor did not completed within timeout period of ${e} ms`)),r=B.timeout},e);t.forceFlush().then(()=>{clearTimeout(s),r!==B.timeout&&i(r=B.resolved)}).catch(e=>{clearTimeout(s),r=B.error,i(e)})}));return new Promise((e,i)=>{Promise.all(t).then(t=>{let r=t.filter(e=>e!==B.resolved);r.length>0?i(r):e()}).catch(e=>i([e]))})}shutdown(){return this._activeSpanProcessor.shutdown()}};var tl=((I=tl||{}).NONE="none",I.GZIP="gzip",I);let OpenTelemetryProvider=class OpenTelemetryProvider{_globalAttributes={};provider;tracer;constructor(e,t,i){let r=new OTLPTraceExporter({url:i?"https://otel-dev.gitkraken.com/v1/traces":"https://otel.gitkraken.com/v1/traces",compression:"gzip",httpAgentOptions:t?.options}),s=[];i?s.push(new SimpleSpanProcessor(r)):s.push(new BatchSpanProcessor(r)),this.provider=new BasicTracerProvider({resource:en({[et]:"gitlens","service.version":e.extensionVersion,"deployment.environment":e.env,"deployment.environment.name":e.env,"device.id":e.machineId,"os.type":e.platform,"extension.id":e.extensionId,"session.id":e.sessionId,language:e.language,"vscode.edition":e.vscodeEdition,"vscode.version":e.vscodeVersion,"vscode.host":e.vscodeHost,"vscode.remoteName":e.vscodeRemoteName,"vscode.shell":e.vscodeShell,"vscode.uiKind":e.vscodeUIKind}),spanProcessors:s}),this.tracer=this.provider.getTracer(e.extensionId)}dispose(){this.provider.shutdown()}sendEvent(e,t,i,r){let s=this.tracer.startSpan(e,{attributes:this._globalAttributes,kind:_.INTERNAL,startTime:i??Date.now()});null!=t&&s.setAttributes(t),s.end(r)}startEvent(e,t,i){let r=this.tracer.startSpan(e,{attributes:this._globalAttributes,kind:_.INTERNAL,startTime:i??Date.now()});return null!=t&&r.setAttributes(t),r}setGlobalAttributes(e){this._globalAttributes=Object.fromEntries(e)}}},6989:(e,t,i)=>{i.d(t,{E:()=>n,K:()=>o});let{fromCharCode:r}=String,s=new TextEncoder;function o(e){let t="string"==typeof e?s.encode(e):e,i="";for(let e=0,{length:s}=t;e<s;e++)i+=r(t[e]);return globalThis.btoa(i)}function n(e){let t=globalThis.atob(e),i=t.length,r=new Uint8Array(i);for(let e=0;e<i;e++)r[e]=t.charCodeAt(e);return r}},6990:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isWide=t.isFullWidth=t.isAmbiguous=void 0,t.isAmbiguous=e=>161===e||164===e||167===e||168===e||170===e||173===e||174===e||e>=176&&e<=180||e>=182&&e<=186||e>=188&&e<=191||198===e||208===e||215===e||216===e||e>=222&&e<=225||230===e||e>=232&&e<=234||236===e||237===e||240===e||242===e||243===e||e>=247&&e<=250||252===e||254===e||257===e||273===e||275===e||283===e||294===e||295===e||299===e||e>=305&&e<=307||312===e||e>=319&&e<=322||324===e||e>=328&&e<=331||333===e||338===e||339===e||358===e||359===e||363===e||462===e||464===e||466===e||468===e||470===e||472===e||474===e||476===e||593===e||609===e||708===e||711===e||e>=713&&e<=715||717===e||720===e||e>=728&&e<=731||733===e||735===e||e>=768&&e<=879||e>=913&&e<=929||e>=931&&e<=937||e>=945&&e<=961||e>=963&&e<=969||1025===e||e>=1040&&e<=1103||1105===e||8208===e||e>=8211&&e<=8214||8216===e||8217===e||8220===e||8221===e||e>=8224&&e<=8226||e>=8228&&e<=8231||8240===e||8242===e||8243===e||8245===e||8251===e||8254===e||8308===e||8319===e||e>=8321&&e<=8324||8364===e||8451===e||8453===e||8457===e||8467===e||8470===e||8481===e||8482===e||8486===e||8491===e||8531===e||8532===e||e>=8539&&e<=8542||e>=8544&&e<=8555||e>=8560&&e<=8569||8585===e||e>=8592&&e<=8601||8632===e||8633===e||8658===e||8660===e||8679===e||8704===e||8706===e||8707===e||8711===e||8712===e||8715===e||8719===e||8721===e||8725===e||8730===e||e>=8733&&e<=8736||8739===e||8741===e||e>=8743&&e<=8748||8750===e||e>=8756&&e<=8759||8764===e||8765===e||8776===e||8780===e||8786===e||8800===e||8801===e||e>=8804&&e<=8807||8810===e||8811===e||8814===e||8815===e||8834===e||8835===e||8838===e||8839===e||8853===e||8857===e||8869===e||8895===e||8978===e||e>=9312&&e<=9449||e>=9451&&e<=9547||e>=9552&&e<=9587||e>=9600&&e<=9615||e>=9618&&e<=9621||9632===e||9633===e||e>=9635&&e<=9641||9650===e||9651===e||9654===e||9655===e||9660===e||9661===e||9664===e||9665===e||e>=9670&&e<=9672||9675===e||e>=9678&&e<=9681||e>=9698&&e<=9701||9711===e||9733===e||9734===e||9737===e||9742===e||9743===e||9756===e||9758===e||9792===e||9794===e||9824===e||9825===e||e>=9827&&e<=9829||e>=9831&&e<=9834||9836===e||9837===e||9839===e||9886===e||9887===e||9919===e||e>=9926&&e<=9933||e>=9935&&e<=9939||e>=9941&&e<=9953||9955===e||9960===e||9961===e||e>=9963&&e<=9969||9972===e||e>=9974&&e<=9977||9979===e||9980===e||9982===e||9983===e||10045===e||e>=10102&&e<=10111||e>=11094&&e<=11097||e>=12872&&e<=12879||e>=57344&&e<=63743||e>=65024&&e<=65039||65533===e||e>=127232&&e<=127242||e>=127248&&e<=127277||e>=127280&&e<=127337||e>=127344&&e<=127373||127375===e||127376===e||e>=127387&&e<=127404||e>=917760&&e<=917999||e>=983040&&e<=1048573||e>=1048576&&e<=1114109,t.isFullWidth=e=>12288===e||e>=65281&&e<=65376||e>=65504&&e<=65510,t.isWide=e=>e>=4352&&e<=4447||8986===e||8987===e||9001===e||9002===e||e>=9193&&e<=9196||9200===e||9203===e||9725===e||9726===e||9748===e||9749===e||e>=9800&&e<=9811||9855===e||9875===e||9889===e||9898===e||9899===e||9917===e||9918===e||9924===e||9925===e||9934===e||9940===e||9962===e||9970===e||9971===e||9973===e||9978===e||9981===e||9989===e||9994===e||9995===e||10024===e||10060===e||10062===e||e>=10067&&e<=10069||10071===e||e>=10133&&e<=10135||10160===e||10175===e||11035===e||11036===e||11088===e||11093===e||e>=11904&&e<=11929||e>=11931&&e<=12019||e>=12032&&e<=12245||e>=12272&&e<=12287||e>=12289&&e<=12350||e>=12353&&e<=12438||e>=12441&&e<=12543||e>=12549&&e<=12591||e>=12593&&e<=12686||e>=12688&&e<=12771||e>=12783&&e<=12830||e>=12832&&e<=12871||e>=12880&&e<=19903||e>=19968&&e<=42124||e>=42128&&e<=42182||e>=43360&&e<=43388||e>=44032&&e<=55203||e>=63744&&e<=64255||e>=65040&&e<=65049||e>=65072&&e<=65106||e>=65108&&e<=65126||e>=65128&&e<=65131||e>=94176&&e<=94180||94192===e||94193===e||e>=94208&&e<=100343||e>=100352&&e<=101589||e>=101632&&e<=101640||e>=110576&&e<=110579||e>=110581&&e<=110587||110589===e||110590===e||e>=110592&&e<=110882||110898===e||e>=110928&&e<=110930||110933===e||e>=110948&&e<=110951||e>=110960&&e<=111355||126980===e||127183===e||127374===e||e>=127377&&e<=127386||e>=127488&&e<=127490||e>=127504&&e<=127547||e>=127552&&e<=127560||127568===e||127569===e||e>=127584&&e<=127589||e>=127744&&e<=127776||e>=127789&&e<=127797||e>=127799&&e<=127868||e>=127870&&e<=127891||e>=127904&&e<=127946||e>=127951&&e<=127955||e>=127968&&e<=127984||127988===e||e>=127992&&e<=128062||128064===e||e>=128066&&e<=128252||e>=128255&&e<=128317||e>=128331&&e<=128334||e>=128336&&e<=128359||128378===e||128405===e||128406===e||128420===e||e>=128507&&e<=128591||e>=128640&&e<=128709||128716===e||e>=128720&&e<=128722||e>=128725&&e<=128727||e>=128732&&e<=128735||128747===e||128748===e||e>=128756&&e<=128764||e>=128992&&e<=129003||129008===e||e>=129292&&e<=129338||e>=129340&&e<=129349||e>=129351&&e<=129535||e>=129648&&e<=129660||e>=129664&&e<=129672||e>=129680&&e<=129725||e>=129727&&e<=129733||e>=129742&&e<=129755||e>=129760&&e<=129768||e>=129776&&e<=129784||e>=131072&&e<=196605||e>=196608&&e<=262141},7019:(e,t,i)=>{i.d(t,{A5:()=>w,AO:()=>m,AQ:()=>b,CR:()=>f,Ng:()=>C,U_:()=>P,c8:()=>R,gD:()=>g,hU:()=>v,iJ:()=>y,ky:()=>h,lW:()=>S,pR:()=>u,pW:()=>c,pn:()=>d,qQ:()=>p,wW:()=>k});var r=i(1398),s=i(1182);i(1705);var o=i(2141),n=i(2870),a=i(4152),l=i(4941);function u(e){return null==e?A("info","There is no previous commit.","suppressCommitHasNoPreviousCommitWarning"):A("info",`Commit ${e.shortSha} (${e.author.name}, ${e.formattedDate}) has no previous commit.`,"suppressCommitHasNoPreviousCommitWarning")}function c(e){return A("warn",`${e}. The commit could not be found.`,"suppressCommitNotFoundWarning")}async function h(e){let t={title:"Create Pull Request..."};return await A("info",`Would you like to create a Pull Request for branch '${e}'?`,"suppressCreatePullRequestPrompt",{title:"Don't Show Again"},t)===t}async function d(){let e={title:"Disable Debug Logging"};return await A("warn","GitLens debug logging is currently enabled. Unless you are reporting an issue, it is recommended to be disabled. Would you like to disable it?","suppressDebugLoggingWarning",{title:"Don't Show Again"},e)===e}async function p(e){l.Vy.enabled("error")?null!=await A("error",`${e}. See output channel for more details.`,void 0,null,{title:"Open Output Channel"})&&l.Vy.showOutputChannel():null!=await A("error",`${e}. If the error persists, please enable debug logging and try again.`,void 0,null,{title:"Enable Debug Logging"})&&(0,o.RS)("gitlens.enableDebugLogging")}function g(e){return A("warn",`${e}. The file is probably not under source control.`,"suppressFileNotUnderSourceControlWarning")}async function m(e){let t={title:"Upgrade"},i=await A("error",`This pre-release version (${e}) of GitLens has expired. Please upgrade to a more recent pre-release, or switch to the release version.`,void 0,null,t);i===t?(0,o.S4)("workbench.extensions.installExtension","eamodio.gitlens",{installPreReleaseVersion:!0}):i==={title:"Switch to Release Version"}&&(0,o.S4)("workbench.extensions.action.switchToRelease","eamodio.gitlens")}function f(e){return A("warn",`${e}. The line has uncommitted changes.`,"suppressLineUncommittedWarning")}function w(e){return A("warn",`${e}. No repository could be found.`,"suppressNoRepositoryWarning")}function v(){return A("warn","Closing either the git-rebase-todo file or the Rebase Editor will start the rebase.","suppressRebaseSwitchToTextWarning")}function y(){return A("error","Requests to GitKraken have stopped being sent for this session, because of too many failed requests.","suppressGkDisconnectedTooManyFailedRequestsWarningMessage",void 0,{title:"OK"})}function b(e){return A("error",e,"suppressGkRequestFailed500Warning",void 0,{title:"OK"})}function C(){return A("error","GitKraken request timed out.","suppressGkRequestTimedOutWarning",void 0,{title:"OK"})}function R(e){return A("error",`Rich integration with ${e} has been disconnected for this session, because of too many failed requests.`,"suppressIntegrationDisconnectedTooManyFailedRequestsWarning",void 0,{title:"OK"})}function k(e){return A("error",e,"suppressIntegrationRequestFailed500Warning",void 0,{title:"OK"})}function S(e){return A("error",`${e} request timed out.`,"suppressIntegrationRequestTimedOutWarning",void 0,{title:"OK"})}async function P(e){let t={title:"View Release Notes"};await A("info",`Upgraded to GitLens ${e}${"17"===e?" with all new [GitKraken AI](https://gitkraken.com/solutions/gitkraken-ai?source=gitlens&product=gitlens&utm_source=gitlens-extension&utm_medium=in-app-links) access included in GitLens Pro, AI changelog and pull request creation, and Bitbucket integration.":" — see what's new."}`,void 0,null,t,{title:"OK",isCloseAffordance:!0})===t&&(0,a.CZ)(s.DS.releaseNotes)}async function A(e,t,i,s={title:"Don't Show Again"},...o){let a;if(l.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)})`),null!=i&&n.H.get(`advanced.messages.${i}`))return void l.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) skipped`);switch(null!=i&&null!==s&&o.push(s),e){case"info":a=await r.window.showInformationMessage(t,...o);break;case"warn":a=await r.window.showWarningMessage(t,...o);break;case"error":a=await r.window.showErrorMessage(t,...o)}if(null==i||null!==s&&a!==s||(l.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) don't show again requested`),await function(e){let t={...n.H.get("advanced.messages")};for(let[i,r]of(t[e]=!0,Object.entries(t)))!0!==r&&delete t[i];return n.H.update("advanced.messages",t,r.ConfigurationTarget.Global)}(i),a!==s))return l.Vy.log(`ShowMessage(${e}, '${t}', ${i}, ${JSON.stringify(s)}) returned ${null!=a?a.title:a}`),a}},7062:(e,t,i)=>{i.d(t,{j:()=>n});var r=i(9686),s=i(4808),o=i(745);function n(e,t){let i=(0,o.Sp)(e),n=(0,r.P8)(i);if(t?.truncateTo!=null&&n.length>=t.truncateTo)return(0,s.kU)(n,t.truncateTo);if(t?.suffix){if(null!=t.truncateTo&&n.length+t.suffix.length>=t.truncateTo)return`${(0,s.kU)(n,t.truncateTo-t.suffix.length)}${t.suffix}`;n+=t.suffix}if(t?.fileOnly)return n;let a=(0,o.A3)(i,t?.relativeTo);return a?(n=`/${n}`,t?.truncateTo!=null&&n.length+a.length>=t.truncateTo)?`${(0,s.Es)(a,t.truncateTo-n.length)}${n}`:`${a}${n}`:n}},7114:(e,t,i)=>{i.d(t,{HomeWebviewProvider:()=>HomeWebviewProvider});var r=i(1398),s=i(8577),o=i(3037),n=i(1182),a=i(1849),l=i(3583),u=i(4123),c=i(5567),h=i(3782),d=i(5853),p=i(8219),g=i(6770),m=i(875),f=i(4154),w=i(4119),v=i(9013),y=i(9271),b=i(3631),C=i(7125),R=i(5962),k=i(1902),S=i(9975),P=i(4269),A=i(4898),I=i(2870),D=i(6162);async function _(e){let t=await e.launchpad.getCategorizedItems();if(null!=t.error)return{error:t.error};let i=I.H.get("launchpad.indicator.groups")??[];return(0,D.a)(t.items,i)}var $=i(8397),T=i(2141),E=i(9615),x=i(4152),O=i(3677),F=i(6206),B=i(5539),L=i(9091),U=i(7864);let SubscriptionManager=class SubscriptionManager{constructor(e,t){this.source=e,this.subscribe=t}_status="stopped";get status(){return this._status}_subscription;dispose(){this.stop()}start(){(null==this._subscription||"started"!==this._status)&&(this._subscription=this.subscribe(this.source),this._status="started")}pause(){this.stop("paused")}resume(){this.start()}stop(e){this._subscription?.dispose(),this._subscription=void 0,this._status=e??"stopped"}};var q=i(1017),N=i(486);let M="home",W=new N.Oz(M,"launchpad/summary"),G=new N.Oz(M,"overview/active"),H=new N.Oz(M,"overview/inactive"),V=new N.Oz(M,"overviewFilter"),j=new N.Q2(M,"overview/repository/change"),z=new N.C1(M,"overview/repository/didChange"),Q=new N.Q2(M,"previewEnabled/toggle"),Y=new N.Q2(M,"section/collapse"),K=new N.Q2(M,"walkthrough/dismiss"),Z=new N.Q2(M,"overview/filter/set"),J=new N.Q2(M,"openInGraph"),X=new N.C1(M,"repositories/didCompleteDiscovering"),ee=new N.C1(M,"previewEnabled/didChange"),et=new N.C1(M,"repository/wip/didChange"),ei=new N.C1(M,"repositories/didChange"),er=new N.C1(M,"walkthroughProgress/didChange"),es=new N.C1(M,"integrations/didChange"),eo=new N.C1(M,"launchpad/didChange"),en=new N.C1(M,"subscription/didChange"),ea=new N.C1(M,"org/settings/didChange"),el=new N.C1(M,"home/ownerFilter/didChange"),eu=new N.C1(M,"account/didFocus");var ec=Object.defineProperty,eh=Object.getOwnPropertyDescriptor,ed=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eh(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ec(t,i,o),o};let ep=Object.freeze({dispose:()=>{}}),eg={OneDay:864e5,OneWeek:6048e5,OneMonth:2592e6,OneYear:31536e6};let HomeWebviewProvider=class HomeWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._disposable=r.Disposable.from(this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),r.workspace.isTrusted?ep:r.workspace.onDidGrantWorkspaceTrust(()=>this.notifyDidChangeRepositories(),this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),(0,E.wt)(this.onContextChanged,this),this.container.integrations.onDidChangeConfiguredIntegrations(this.onIntegrationsChanged,this),this.container.walkthrough.onProgressChanged(this.onWalkthroughChanged,this),I.H.onDidChange(this.onDidChangeConfig,this),this.container.launchpad.onDidChange(this.onDidLaunchpadChange,this),this.container.ai.onDidChangeModel(this.onAIModelChanged,this))}_disposable;_discovering;_etag;_etagFileSystem;_etagRepository;_etagSubscription;_pendingFocusAccount=!1;dispose(){this._disposable.dispose()}getTelemetryContext(){return{...this.host.getTelemetryContext(),"context.preview":this.getPreviewEnabled()?"v16":void 0}}_overviewBranchFilter={recent:{threshold:"OneWeek"},stale:{threshold:"OneYear",show:!1,limit:9}};onShowing(e,t,...i){this._etag=this.container.git.etag,this.ensureRepoDiscovery();let[r]=i;if(r?.focusAccount===!0){if(!e&&this.host.ready&&this.host.visible)return queueMicrotask(()=>void this.host.notify(eu,void 0)),[!0,void 0];this._pendingFocusAccount=!0}return[!0,void 0]}async ensureRepoDiscovery(){this.container.git.isDiscoveringRepositories&&(this._discovering=this.container.git.isDiscoveringRepositories,this._discovering.finally(()=>this._discovering=void 0),this._etag=await this._discovering,this.notifyDidCompleteDiscoveringRepositories())}onAIModelChanged(e){this.notifyDidChangeIntegrations()}onIntegrationsChanged(e){this.notifyDidChangeIntegrations()}async onChooseRepository(){let e=this.getSelectedRepository(),t=this.container.git.openRepositories.sort((t,i)=>(t===e?1:-1)-(i===e?1:-1)||(t.starred?-1:1)-(i.starred?-1:1)||t.index-i.index),i=await (0,$.oe)(`Switch Repository ${n.EO.Dot} ${e?.name}`,"Choose a repository to switch to",t);if(null!=i&&i!==e)return this.selectRepository(i.path)}onRepositoriesChanged(){null==this._discovering&&this._etag!==this.container.git.etag&&this.notifyDidChangeRepositories()}onWalkthroughChanged(){this.notifyDidChangeProgress()}onDidChangeConfig(e){I.H.changed(e,"home.preview.enabled")&&this.notifyDidChangeConfig()}onDidLaunchpadChange(){this.notifyDidChangeLaunchpad()}async push(e=!1){let t=this.getSelectedRepository();return t?(0,l.b)({command:"push",state:{repos:[t],flags:e?["--force"]:void 0}}):Promise.resolve()}async publishBranch(e){let{repo:t,branch:i}=await this.getRepoInfoFromRef(e);if(null!=i)return h.VC(t,void 0,(0,w.iw)(i))}async pull(){let e=this.getSelectedRepository();return e?(0,l.b)({command:"pull",state:{repos:[e]}}):Promise.resolve()}registerCommands(){return[(0,T.Lb)(`${this.host.id}.pull`,this.pull,this),(0,T.Lb)(`${this.host.id}.push`,e=>{this.push(e.force)},this),(0,T.Lb)(`${this.host.id}.publishBranch`,this.publishBranch,this),(0,T.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0),this),(0,T.Lb)(`${this.host.id}.disablePreview`,()=>this.onTogglePreviewEnabled(!1),this),(0,T.Lb)(`${this.host.id}.enablePreview`,()=>this.onTogglePreviewEnabled(!0),this),(0,T.Lb)(`${this.host.id}.previewFeedback`,()=>(0,x.CZ)("https://github.com/gitkraken/vscode-gitlens/discussions/3721"),this),(0,T.Lb)(`${this.host.id}.whatsNew`,()=>(0,x.CZ)(n.DS.releaseNotes),this),(0,T.Lb)(`${this.host.id}.help`,()=>(0,x.CZ)(n.DS.helpCenter),this),(0,T.Lb)(`${this.host.id}.issues`,()=>(0,x.CZ)(n.DS.githubIssues),this),(0,T.Lb)(`${this.host.id}.info`,()=>(0,x.CZ)(n.DS.helpCenterHome),this),(0,T.Lb)(`${this.host.id}.discussions`,()=>(0,x.CZ)(n.DS.githubDiscussions),this),(0,T.Lb)(`${this.host.id}.account.resync`,e=>this.container.subscription.validate({force:!0},e),this),(0,T.Lb)("gitlens.home.deleteBranchOrWorktree",this.deleteBranchOrWorktree,this),(0,T.Lb)("gitlens.home.pushBranch",this.pushBranch,this),(0,T.Lb)("gitlens.home.openMergeTargetComparison",this.mergeTargetCompare,this),(0,T.Lb)("gitlens.home.openPullRequestChanges",this.pullRequestChanges,this),(0,T.Lb)("gitlens.home.openPullRequestComparison",this.pullRequestCompare,this),(0,T.Lb)("gitlens.home.openPullRequestOnRemote",this.pullRequestViewOnRemote,this),(0,T.Lb)("gitlens.home.openPullRequestDetails",this.pullRequestDetails,this),(0,T.Lb)("gitlens.home.createPullRequest",this.pullRequestCreate,this),(0,T.Lb)("gitlens.home.openWorktree",this.worktreeOpen,this),(0,T.Lb)("gitlens.home.switchToBranch",this.switchToBranch,this),(0,T.Lb)("gitlens.home.fetch",this.fetch,this),(0,T.Lb)("gitlens.home.openInGraph",this.openInGraph,this),(0,T.Lb)("gitlens.home.createBranch",this.createBranch,this),(0,T.Lb)("gitlens.home.mergeIntoCurrent",this.mergeIntoCurrent,this),(0,T.Lb)("gitlens.home.rebaseCurrentOnto",this.rebaseCurrentOnto,this),(0,T.Lb)("gitlens.home.startWork",this.startWork,this),(0,T.Lb)("gitlens.home.createCloudPatch",this.createCloudPatch,this),(0,T.Lb)("gitlens.home.skipPausedOperation",this.skipPausedOperation,this),(0,T.Lb)("gitlens.home.continuePausedOperation",this.continuePausedOperation,this),(0,T.Lb)("gitlens.home.abortPausedOperation",this.abortPausedOperation,this),(0,T.Lb)("gitlens.home.openRebaseEditor",this.openRebaseEditor,this)]}setOverviewFilter(e){this._overviewBranchFilter=e,this.host.notify(el,{filter:this._overviewBranchFilter})}async onMessageReceived(e){switch(!0){case Y.is(e):this.onCollapseSection(e.params);break;case K.is(e):this.dismissWalkthrough();break;case Z.is(e):this.setOverviewFilter(e.params);break;case W.is(e):this.host.respond(W,e,await _(this.container));break;case V.is(e):this.host.respond(V,e,this._overviewBranchFilter);break;case j.is(e):if(await this.onChooseRepository()==null)return;this.host.notify(z,void 0);break;case Q.is(e):this.onTogglePreviewEnabled();break;case J.is(e):this.openInGraph(e.params);break;case G.is(e):this.host.respond(G,e,await this.getActiveBranchOverview());break;case H.is(e):this.host.respond(H,e,await this.getInactiveBranchOverview())}}includeBootstrap(){return this.getState()}onRefresh(){this.resetBranchOverview(),this.notifyDidChangeRepositories()}onReloaded(){this.onRefresh(),this.notifyDidChangeProgress()}onReady(){!0===this._pendingFocusAccount&&(this._pendingFocusAccount=!1,this.host.notify(eu,void 0))}hasRepositoryChanged(){if(this._repositorySubscription?.source!=null){if(this._repositorySubscription.source.etag!==this._etagRepository||this._repositorySubscription.source.etagFileSystem!==this._etagFileSystem)return!0}else if(this._etag!==this.container.git.etag)return!0;return!1}onVisibilityChanged(e){if(!e)return void this._repositorySubscription?.pause();this._repositorySubscription?.resume(),null==this._discovering&&(this.container.subscription.etag!==this._etagSubscription||this.hasRepositoryChanged())&&this.notifyDidChangeRepositories(!0)}openInGraph(e){let t=null!=e?this._repositoryBranches.get(e.repoPath):void 0;if(null==t)return void(0,T.RS)("gitlens.showGraph",this.getSelectedRepository());if("branch"===e.type){let i=t.branches.find(t=>t.id===e.branchId);if(null!=i)return void(0,T.RS)("gitlens.showInCommitGraph",{ref:(0,w.iw)(i)})}(0,T.RS)("gitlens.showGraph",t.repo)}createBranch(){this.container.telemetry.sendEvent("home/createBranch"),(0,T.RS)("gitlens.gitCommands",{command:"branch",state:{subcommand:"create",repo:this.getSelectedRepository(),suggestNameOnly:!0,suggestRepoOnly:!0,confirmOptions:["--switch","--worktree"]}})}async mergeIntoCurrent(e){let{repo:t,branch:i}=await this.getRepoInfoFromRef(e);null!=i&&h.h1(t,(0,w.iw)(i))}async rebaseCurrentOnto(e){let{repo:t,branch:i}=await this.getRepoInfoFromRef(e);null!=i&&h.RU(t,(0,w.iw)(i))}startWork(){this.container.telemetry.sendEvent("home/startWork"),(0,T.RS)("gitlens.startWork",{command:"startWork",source:"home"})}async abortPausedOperation(e){await (0,c._e)(this.container,e.repoPath)}async continuePausedOperation(e){"revert"!==e.type&&await (0,c.Ts)(this.container,e.repoPath)}async skipPausedOperation(e){await (0,c.RG)(this.container,e.repoPath)}async openRebaseEditor(e){if("rebase"!==e.type)return;let t=await this.container.git.config(e.repoPath).getGitDir?.();if(null==t)return;let i=r.Uri.joinPath(t.uri,"rebase-merge","git-rebase-todo");(0,T.S4)("vscode.openWith",i,"gitlens.rebase",{preview:!1})}async createCloudPatch(e){let{repo:t}=await this.getRepoInfoFromRef(e);if(null==t)return;let i=await t.git.status().getStatus();if(null==i)return void r.window.showErrorMessage("Unable to create cloud patch");let s=[];for(let e of i.files){let t={repoPath:e.repoPath,path:e.path,status:e.status,originalPath:e.originalPath,staged:e.staged};s.push(t),e.staged&&e.wip&&s.push({...t,staged:!1})}let o={type:"wip",repository:{name:t.name,path:t.path,uri:t.uri.toString()},files:s,revision:{to:g.SU,from:"HEAD"}};(0,k.X)({mode:"create",create:{changes:[o]}})}onTogglePreviewEnabled(e){void 0===e&&(e=!this.getPreviewEnabled()),this.getPreviewCollapsed()||this.onCollapseSection({section:"newHomePreview",collapsed:!0}),this.container.telemetry.sendEvent("home/preview/toggled",{enabled:e,version:"v16"}),I.H.updateEffective("home.preview.enabled",e)}onCollapseSection(e){let t=this.container.storage.get("home:sections:collapsed");if(null==t){!0===e.collapsed&&this.container.storage.store("home:sections:collapsed",[e.section]).catch();return}let i=t.indexOf(e.section);if(!0===e.collapsed){-1===i&&this.container.storage.store("home:sections:collapsed",[...t,e.section]).catch();return}-1!==i&&(t.splice(i,1),this.container.storage.store("home:sections:collapsed",t).catch())}dismissWalkthrough(){this.container.storage.get("home:walkthrough:dismissed")||(this.container.storage.store("home:walkthrough:dismissed",!0).catch(),this.container.usage.track("home:walkthrough:dismissed").catch())}getWalkthroughDismissed(){return this.container.storage.get("home:walkthrough:dismissed")??!1}getPreviewCollapsed(){return this.container.storage.get("home:sections:collapsed")?.includes("newHomePreview")??!1}getAmaBannerCollapsed(){return Date.now()>=new Date("2025-02-13T13:00:00-05:00").getTime()||(this.container.storage.get("home:sections:collapsed")?.includes("feb2025AmaBanner")??!1)}getIntegrationBannerCollapsed(){return this.container.storage.get("home:sections:collapsed")?.includes("integrationBanner")??!1}getOrgSettings(){return{drafts:(0,E.SD)("gitlens:gk:organization:drafts:enabled",!1),ai:(0,E.SD)("gitlens:gk:organization:ai:enabled",!0)}}onContextChanged(e){"gitlens:gk:organization:drafts:enabled"===e&&this.notifyDidChangeOrgSettings()}async onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(await this.notifyDidChangeSubscription(e.current),(0,S.k0)(e.current.state)!==(0,S.k0)(e.previous.state)&&this.onOverviewRepoChanged())}async getState(e){let[t,i,r]=await Promise.allSettled([this.getSubscriptionState(e),this.getIntegrationStates(!0),this.container.ai.getModel({silent:!0},{source:"home"})]);if("rejected"===t.status)throw t.reason;let s=(0,U.Ro)(i)??[],o=s.some(e=>e.connected),n={model:(0,U.Ro)(r)};return{...this.host.baseWebviewState,discovering:null!=this._discovering,repositories:this.getRepositoriesState(),webroot:this.host.getWebRoot(),subscription:t.value.subscription,avatar:t.value.avatar,organizationsCount:t.value.organizationsCount,orgSettings:this.getOrgSettings(),previewCollapsed:this.getPreviewCollapsed(),integrationBannerCollapsed:this.getIntegrationBannerCollapsed(),integrations:s,ai:n,hasAnyIntegrationConnected:o,walkthroughProgress:this.getWalkthroughDismissed()?void 0:{allCount:this.container.walkthrough.walkthroughSize,doneCount:this.container.walkthrough.doneCount,progress:this.container.walkthrough.progress},previewEnabled:this.getPreviewEnabled(),newInstall:(0,E.SD)("gitlens:install:new",!1),amaBannerCollapsed:this.getAmaBannerCollapsed()}}getPreviewEnabled(){return I.H.get("home.preview.enabled")}getRepositoriesState(){return{count:this.container.git.repositoryCount,openCount:this.container.git.openRepositoryCount,hasUnsafe:this.container.git.hasUnsafeRepositories(),trusted:r.workspace.isTrusted}}async getActiveBranchOverview(){null!=this._discovering&&await this._discovering;let e=this.getSelectedRepository();if(null==e)return;let t="repo"===this._invalidateOverview,i="wip"===this._invalidateOverview,[r,s,o]=await Promise.allSettled([this.getBranchesData(e,t),this.isSubscriptionPro(),this.formatRepository(e)]),{branches:n,worktreesByBranch:a}=(0,U.Ro)(r),l=n.find(e=>"active"===this.getBranchOverviewType(e,a)),u=(0,U.Ro)(s),[c]=em(this.container,[l],a,u,{isActive:!0,forceStatus:!!t||!!i||void 0});return i&&(this._invalidateOverview=void 0),this._etagFileSystem=e.etagFileSystem,{repository:(0,U.Ro)(o),active:c}}async getInactiveBranchOverview(){let e;null!=this._discovering&&await this._discovering;let t=this.getSelectedRepository();if(null==t)return;let i="repo"===this._invalidateOverview,[r,s,o]=await Promise.allSettled([this.getBranchesData(t,i),this.isSubscriptionPro(),this.formatRepository(t)]),{branches:n,worktreesByBranch:a}=(0,U.Ro)(r),l=n.filter(e=>"recent"===this.getBranchOverviewType(e,a)),u=(0,U.Ro)(s);if(this._overviewBranchFilter.stale.show)for(let t of((0,v.Xn)(n,{missingUpstream:!0,orderBy:"date:asc"}),n)){if(null!=e&&e.length>this._overviewBranchFilter.stale.limit)break;l.some(e=>e.id===t.id)||"stale"===this.getBranchOverviewType(t,a)&&(e??=[]).push(t)}let c=em(this.container,l,a,u),h=null==e?void 0:em(this.container,e,a,u);return i||(this._invalidateOverview=void 0),{repository:(0,U.Ro)(o),recent:c,stale:h}}async formatRepository(e){let t=await e.git.remotes().getBestRemotesWithProviders(),i=t.find(e=>e.hasIntegration())??t[0];return{name:e.commonRepositoryName??e.name,path:e.path,provider:i?.provider?{name:i.provider.name,supportedFeatures:i.provider.supportedFeatures,icon:"remote"===i.provider.icon?"cloud":i.provider.icon,url:await i.provider.url({type:d.J.Repo})}:void 0}}_repositorySubscription;selectRepository(e){let t;return null!=e?t=this.container.git.getRepository(e):null==(t=this.container.git.highlander)&&(t=this.container.git.getBestRepositoryOrFirst()),this._repositorySubscription?.dispose(),this._repositorySubscription=void 0,null!=t&&(this._repositorySubscription=new SubscriptionManager(t,e=>this.subscribeToRepository(e)),this.host.visible&&this._repositorySubscription.start()),t}resetBranchOverview(){if(this._repositoryBranches.clear(),!this.host.visible)return void this._repositorySubscription?.pause();this._repositorySubscription?.resume()}subscribeToRepository(e){return r.Disposable.from(e.watchFileSystem(1e3),e.onDidChangeFileSystem(t=>this.onOverviewWipChanged(t,e)),e.onDidChange(t=>{t.changed(p.Z_.Config,p.Z_.Head,p.Z_.Heads,p.Z_.Remotes,p.Z_.PausedOperationStatus,p.Z_.Unknown,p.Ti.Any)&&this.onOverviewRepoChanged(e)}))}onOverviewWipChanged(e,t){e.repository.id===t.id&&this._etagFileSystem!==t.etagFileSystem&&("repo"!==this._invalidateOverview&&(this._invalidateOverview="wip"),this.host.visible&&this.host.notify(et,void 0))}onOverviewRepoChanged(e){if(null!=e){if(this._etagRepository===e.etag)return}else if(this._etag===this.container.git.etag)return;this._invalidateOverview="repo",this.host.visible&&this.notifyDidChangeRepositories()}getSelectedRepository(){return null==this._repositorySubscription&&this.selectRepository(),this._repositorySubscription?.source}_invalidateOverview;_repositoryBranches=new Map;async getBranchesData(e,t=!1){if(t||!this._repositoryBranches.has(e.path)||e.etag!==this._etagRepository){let t=await e.git.worktrees()?.getWorktrees()??[],i=(0,y.PU)(t,{includeDefault:!0}),[r]=await Promise.allSettled([e.git.branches().getBranches({filter:e=>!e.remote,sort:{current:!0,openedWorktreesByBranch:(0,y.vJ)(i)}})]),s=(0,U.Ro)(r)?.values??[];this._etagRepository=e.etag,this._repositoryBranches.set(e.path,{repo:e,branches:s,worktreesByBranch:i})}return this._repositoryBranches.get(e.path)}_integrationStates;_defaultSupportedCloudIntegrations;async getIntegrationStates(e=!1){if(e||null==this._integrationStates){let e=(0,L.x1)(await this.container.integrations.getConfigured(),e=>{if(!(0,a.LT)(e.integrationId))return;let t=a.U4.find(t=>t.id===e.integrationId);return{id:e.integrationId,name:P.Mt[e.integrationId].name,icon:`gl-provider-${P.Mt[e.integrationId].iconKey}`,connected:!0,supports:t?.supports!=null?t.supports:"hosting"===P.Mt[e.integrationId].type?["prs","issues"]:"issues"===P.Mt[e.integrationId].type?["issues"]:[],requiresPro:t?.requiresPro??!1}}),t=await Promise.allSettled(e),i=[...(0,L.x1)(t,e=>(0,U.Ro)(e))];this._defaultSupportedCloudIntegrations??=a.U4.map(e=>({...e,connected:!1})),this._defaultSupportedCloudIntegrations.forEach(e=>{let t=i.find(t=>t.id===e.id);null==t?i.push(e):t.icon!==e.icon&&(t.icon=e.icon)}),i.sort((e,t)=>a.rK.indexOf(e.id)-a.rK.indexOf(t.id)),this._integrationStates=i}return this._integrationStates}_subscription;async getSubscription(e){return null!=e?this._subscription=e:null!=this._subscription?e=this._subscription:this._subscription=e=await this.container.subscription.getSubscription(!0),this._subscription}async isSubscriptionPro(){let e=await this.getSubscription();return null!=e&&(0,S.k0)(e.state)}async getSubscriptionState(e){let t;return e=await this.getSubscription(e),this._etagSubscription=this.container.subscription.etag,t=e.account?.email?(0,o.ML)(e.account.email,34).toString():`${this.host.getWebRoot()??""}/media/gitlens-logo.webp`,{subscription:e,avatar:t,organizationsCount:null!=e?(await this.container.organizations.getOrganizations()??[]).length:0}}notifyDidCompleteDiscoveringRepositories(){this.host.notify(X,{discovering:null!=this._discovering,repositories:this.getRepositoriesState()})}notifyDidChangeRepositoriesCore(){this.host.notify(ei,this.getRepositoriesState())}_notifyDidChangeRepositoriesDebounced=void 0;notifyDidChangeRepositories(e=!1){if(null==this._discovering){if(e)return void this.notifyDidChangeRepositoriesCore();null==this._notifyDidChangeRepositoriesDebounced&&(this._notifyDidChangeRepositoriesDebounced=(0,B.s)(this.notifyDidChangeRepositoriesCore.bind(this),500)),this._notifyDidChangeRepositoriesDebounced()}}notifyDidChangeProgress(){this.host.notify(er,{allCount:this.container.walkthrough.walkthroughSize,doneCount:this.container.walkthrough.doneCount,progress:this.container.walkthrough.progress})}notifyDidChangeConfig(){this.host.notify(ee,{previewEnabled:this.getPreviewEnabled(),previewCollapsed:this.getPreviewCollapsed()})}notifyDidChangeLaunchpad(){this.host.notify(eo,void 0)}async notifyDidChangeIntegrations(){let[e,t]=await Promise.allSettled([this.getIntegrationStates(!0),this.container.ai.getModel({silent:!0},{source:"home"})]),i=(0,U.Ro)(e)??[],r=i.some(e=>e.connected),s={model:(0,U.Ro)(t)};r&&this.onCollapseSection({section:"integrationBanner",collapsed:!0}),this.host.notify(es,{hasAnyIntegrationConnected:r,integrations:i,ai:s})}async notifyDidChangeSubscription(e){let t=await this.getSubscriptionState(e);this.host.notify(en,{subscription:t.subscription,avatar:t.avatar,organizationsCount:t.organizationsCount})}notifyDidChangeOrgSettings(){this.host.notify(ea,{orgSettings:this.getOrgSettings()})}async deleteBranchOrWorktree(e,t){let{repo:i,branch:s}=await this.getRepoInfoFromRef(e);if(null==s)return;let o=!1===s.worktree?void 0:s.worktree??await s.getWorktree();if(s.current&&null!=t&&(!o||o.isDefault)){let i=(0,b.km)(t.branchName),o=await r.window.showWarningMessage(`Before deleting the current branch '${s.name}', you will be switched to '${i}'.`,{modal:!0},{title:"Continue"});if(null==o||"Continue"!==o.title)return;await this.container.git.checkout(e.repoPath,i),(0,l.b)({command:"branch",state:{subcommand:"delete",repo:e.repoPath,references:s}})}else if(null!=i&&null!=o&&!o.isDefault){let e=await i.getCommonRepository(),t=await i.git.worktrees?.()?.getWorktree(e=>e.isDefault);if(null==t||null==e)return;let o=await r.window.showWarningMessage(`Before deleting the worktree for '${s.name}', you will be switched to the default worktree.`,{modal:!0},{title:"Continue"});if(null==o||"Continue"!==o.title)return;let n=I.H.get("deepLinks.schemeOverride"),a="string"==typeof n?n:r.env.uriScheme,u={url:`${a}://${this.container.context.extension.id}/link/${q.vk.Repository}/-/${q.vk.Branch}/${encodeURIComponent(s.name)}?path=${encodeURIComponent(e.path)}&action=delete-branch`,repoPath:e.path,useProgress:!1,state:q.rq.GoToTarget};(0,l.b)({command:"worktree",state:{subcommand:"open",repo:t.repoPath,worktree:t,onWorkspaceChanging:async e=>this.container.storage.store("deepLinks:pending",u),worktreeDefaultOpen:"current"}})}}pushBranch(e){this.container.git.push(e.repoPath,{reference:{name:e.branchName,ref:e.branchId,refType:"branch",remote:!1,repoPath:e.repoPath,upstream:e.branchUpstreamName?{name:e.branchUpstreamName,missing:!1}:void 0}})}mergeTargetCompare(e){return this.container.views.searchAndCompare.compare(e.repoPath,e.branchName,e.mergeTargetName)}async pullRequestCompare(e){let t=await this.getPullRequestFromRef(e);if(t?.refs?.base==null||null==t.refs.head)return void r.window.showErrorMessage("Unable to find pull request to compare");let i=(0,C.tI)(e.repoPath,t.refs);return this.container.views.searchAndCompare.compare(i.repoPath,i.head,i.base)}async pullRequestChanges(e){let t=await this.getPullRequestFromRef(e);if(t?.refs?.base==null||null==t.refs.head)return void r.window.showErrorMessage("Unable to find pull request to open changes");let i=(0,C.tI)(e.repoPath,t.refs);return(0,u.$5)(this.container,{repoPath:i.repoPath,lhs:i.base.ref,rhs:i.head.ref},{title:`Changes in Pull Request #${t.id}`})}async pullRequestViewOnRemote(e,t){let i=await this.getPullRequestFromRef(e);if(null==i)return void r.window.showErrorMessage("Unable to find pull request to open on remote");(0,T.RS)("gitlens.openPullRequestOnRemote",{pr:{url:i.url},clipboard:t})}async pullRequestDetails(e){let t=await this.getPullRequestFromRef(e);if(null==t)return void r.window.showErrorMessage("Unable to find pull request to open details");this.container.views.pullRequest.showPullRequest(t,e.repoPath)}async pullRequestCreate({ref:e,describeWithAI:t,source:i}){let{branch:r}=await this.getRepoInfoFromRef(e);if(null==r)return;let o=await r.getRemote(),n=t?this.container.actionRunners.get("createPullRequest")?.find(e=>e.type===s.do.BuiltIn)?.id:void 0;(0,T.ph)("createPullRequest",{repoPath:e.repoPath,remote:null!=o?{name:o.name,provider:null!=o.provider?{id:o.provider.id,name:o.provider.name,domain:o.provider.domain}:void 0,url:o.url}:void 0,branch:{name:r.name,upstream:r.upstream?.name,isRemote:r.remote},describeWithAI:t,source:i},n)}async worktreeOpen(e){let{branch:t}=await this.getRepoInfoFromRef(e),i=await t?.getWorktree();null!=i&&(0,O.OH)(i.uri)}async switchToBranch(e){let{repo:t,branch:i}=await this.getRepoInfoFromRef(e);null!=i&&h.S_(t,(0,w.iw)(i))}async fetch(e){if(null==e){let e=this.getSelectedRepository();h.hd(e);return}let{repo:t,branch:i}=await this.getRepoInfoFromRef(e);null!=i&&h.hd(t,(0,w.iw)(i))}getBranchOverviewType(e,t){if(e.current||t.get(e.id)?.opened)return"active";let i=e.date?.getTime();if(null!=i){let e=Date.now();if(i>e-eg[this._overviewBranchFilter.recent.threshold])return"recent";if(i<e-eg[this._overviewBranchFilter.stale.threshold])return"stale"}if(e.upstream?.missing)return"stale"}async getPullRequestFromRef(e){let{branch:t}=await this.getRepoInfoFromRef(e);return t?.getAssociatedPullRequest()}async getRepoInfoFromRef(e){let t=this.container.git.getRepository(e.repoPath);if(null==t)return{repo:void 0,branch:void 0};let i=await t.git.branches().getBranch(e.branchName);return{repo:t,branch:i}}};function em(e,t,i,r,s){let o,n;if(0===t.length)return[];let a=s?.isActive??!1,l=s?.forceStatus?{force:!0}:void 0,u=new Map,c=new Map,h=new Map,p=new Map,g=new Map,f=new Map,v=new Map,y=[];for(let s of t){s.upstream?.missing===!1&&u.set(s.id,s.getRemote());let t=i.get(s.id),d=s.date?.getTime();!0===r&&(c.set(s.id,eb(e,s,o)),h.set(s.id,s.getEnrichedAutolinks()),p.set(s.id,(0,m.GI)(e,s).then(e=>e.value)),f.set(s.id,e.git.branches(s.repoPath).getBranchContributionsOverview(s.ref)),s.current&&v.set(s.id,ev(e,s))),null!=t?g.set(s.id,t.getStatus(l)):!0===a&&(void 0===n&&(n=e.git.status(s.repoPath).getStatus()),g.set(s.id,n)),y.push({reference:(0,w.iw)(s),repoPath:s.repoPath,id:s.id,name:s.name,opened:a,timestamp:d,status:s.status,upstream:s.upstream,worktree:t?{name:t.name,uri:t.uri.toString(),isDefault:t.isDefault}:void 0})}return y.length>0&&function(e,t,i,r,s,o,n,a,l,u){for(let c of t){c.remote=r.get(c.id)?.then(async e=>{if(null!=e)return{name:e.name,provider:e.provider?{name:e.provider.name,icon:"remote"===e.provider.icon?"cloud":e.provider.icon,url:await e.provider.url({type:d.J.Repo}),supportedFeatures:e.provider.supportedFeatures}:void 0}}),c.pr=s.get(c.id);let t=o.get(c.id);c.autolinks=t?.then(e=>ef(e));let h=n.get(c.id);c.issues=h?.then(e=>e?.map(e=>({id:e.id,title:e.title,state:e.state,url:e.url}))??[]),c.wip=eC(e,c,a.get(c.id),i);let p=l.get(c.id);c.contributors=ew(e,p),c.mergeTarget=u.get(c.id)}}(e,y,a,u,c,h,p,g,f,v),y}async function ef(e){return null==e?[]:(await Promise.allSettled((0,L.x1)([...e.values()],async e=>{let t=e?.[0];if(null==t)return;let i=await t;if(null!=i)return{id:i.id,title:i.title,url:i.url,state:i.state}}))).map(e=>"fulfilled"===e.status?e.value:void 0).filter(e=>null!=e)}async function ew(e,t){if(null==t)return[];let i=await t;return i?.contributors==null?[]:(await Promise.allSettled(i.contributors.map(async e=>({name:e.name??"",email:e.email??"",current:e.current,timestamp:e.latestCommitDate?.getTime(),count:e.commits,stats:e.stats,avatarUrl:(await e.getAvatarUri())?.toString()})))).map(e=>"fulfilled"===e.status?e.value:void 0).filter(e=>null!=e)}async function ev(e,t){let i,r=await (0,f.y1)(e,t,{associatedPullRequest:t.getAssociatedPullRequest()});!r.targetBranch.paused&&r.targetBranch.value&&(i=r.targetBranch.value);let s=i??r.baseBranch??r.defaultBranch;if(null==s)return;let o=e.git.branches(t.repoPath),n=await o.getBranch(s);if(null==n)return;let[a,l,u]=await Promise.allSettled([e.git.commits(t.repoPath).getLeftRightCommitCount((0,R.Xn)(n.name,t.ref,"..."),{excludeMerges:!0}),o.getPotentialMergeOrRebaseConflict?.(t.name,n.name),o.getBranchMergedStatus?.(t,n)]),c=(0,U.Ro)(a),h=null!=c?{ahead:c.right,behind:c.left}:void 0,d=(0,U.Ro)(u);return{repoPath:t.repoPath,id:n.id,name:n.name,status:h,mergedStatus:d,potentialConflicts:(0,U.Ro)(l),targetBranch:n.name,baseBranch:r.baseBranch,defaultBranch:r.defaultBranch}}async function ey(e,t,i){i??=e.launchpad.getCategorizedItems();let r=await i;if(null!=r.error)return;let s=r.items.find(e=>e.url===t.url);if(null==s){if(null!=(r=await e.launchpad.getCategorizedItems({search:[t]})).error)return;s=r.items.find(e=>e.url===t.url)}if(null!=s)return{uuid:s.uuid,category:s.actionableCategory,groups:(0,A._v)(s),suggestedActions:s.suggestedActions,failingCI:s.failingCI,hasConflicts:s.hasConflicts,review:{decision:s.reviewDecision,reviews:s.reviews??[],counts:{approval:s.approvalReviewCount,changeRequest:s.changeRequestReviewCount,comment:s.commentReviewCount,codeSuggest:s.codeSuggestionsCount}},author:s.author,createdDate:s.createdDate,viewer:{...s.viewer,enrichedItems:void 0}}}async function eb(e,t,i){let r=await t.getAssociatedPullRequest({avatarSize:64});if(null!=r)return{id:r.id,url:r.url,state:r.state,title:r.title,draft:r.isDraft,launchpad:ey(e,r,i)}}async function eC(e,t,i,r){if(null==i)return;let[s,o]=await Promise.allSettled([i,r?e.git.status(t.repoPath).getPausedOperationStatus?.():void 0]),n=(0,U.Ro)(s),a=(0,U.Ro)(o);return{workingTreeState:n?.getDiffStatus(),hasConflicts:n?.hasConflicts,conflictsCount:n?.conflicts.length,pausedOpStatus:a}}ed([(0,F.Rm)({args:{0:e=>`${e?.type}, repoPath=${e?.repoPath}, branchId=${e?.branchId}`}})],HomeWebviewProvider.prototype,"openInGraph",1),ed([(0,F.Rm)()],HomeWebviewProvider.prototype,"createBranch",1),ed([(0,F.Rm)({args:{0:e=>e.branchId}})],HomeWebviewProvider.prototype,"mergeIntoCurrent",1),ed([(0,F.Rm)({args:{0:e=>e.branchId}})],HomeWebviewProvider.prototype,"rebaseCurrentOnto",1),ed([(0,F.Rm)()],HomeWebviewProvider.prototype,"startWork",1),ed([(0,F.Rm)({args:{0:e=>e.type}})],HomeWebviewProvider.prototype,"abortPausedOperation",1),ed([(0,F.Rm)({args:{0:e=>e.type}})],HomeWebviewProvider.prototype,"continuePausedOperation",1),ed([(0,F.Rm)({args:{0:e=>e.type}})],HomeWebviewProvider.prototype,"skipPausedOperation",1),ed([(0,F.Rm)({args:{0:e=>e.type}})],HomeWebviewProvider.prototype,"openRebaseEditor",1),ed([(0,F.Rm)({args:{0:e=>e.branchId}})],HomeWebviewProvider.prototype,"createCloudPatch",1),ed([(0,F.Rm)()],HomeWebviewProvider.prototype,"dismissWalkthrough",1),ed([(0,F.Yz)({args:!1})],HomeWebviewProvider.prototype,"onSubscriptionChanged",1),ed([(0,F.Yz)({args:{0:!1}})],HomeWebviewProvider.prototype,"onOverviewWipChanged",1),ed([(0,F.Yz)()],HomeWebviewProvider.prototype,"onOverviewRepoChanged",1),ed([(0,F.Rm)({args:{0:e=>`${e.branchId}, upstream: ${e.branchUpstreamName}`,1:e=>e?.branchId}})],HomeWebviewProvider.prototype,"deleteBranchOrWorktree",1),ed([(0,F.Rm)({args:{0:e=>`${e.branchId}, upstream: ${e.branchUpstreamName}`}})],HomeWebviewProvider.prototype,"pushBranch",1),ed([(0,F.Rm)({args:{0:e=>`${e.branchId}, upstream: ${e.branchUpstreamName}, mergeTargetId: ${e.mergeTargetId}`}})],HomeWebviewProvider.prototype,"mergeTargetCompare",1),ed([(0,F.Rm)({args:{0:e=>`${e.branchId}, upstream: ${e.branchUpstreamName}`}})],HomeWebviewProvider.prototype,"pullRequestCompare",1),ed([(0,F.Rm)({args:{0:e=>`${e.branchId}, upstream: ${e.branchUpstreamName}`}})],HomeWebviewProvider.prototype,"pullRequestChanges",1),ed([(0,F.Rm)({args:{0:e=>`${e.branchId}, upstream: ${e.branchUpstreamName}`}})],HomeWebviewProvider.prototype,"pullRequestViewOnRemote",1),ed([(0,F.Rm)({args:{0:e=>`${e.branchId}, upstream: ${e.branchUpstreamName}`}})],HomeWebviewProvider.prototype,"pullRequestDetails",1),ed([(0,F.Rm)({args:{0:e=>`${e.ref.branchId}, upstream: ${e.ref.branchUpstreamName}`}})],HomeWebviewProvider.prototype,"pullRequestCreate",1),ed([(0,F.Rm)({args:{0:e=>`${e.branchId}, worktree: ${e.worktree?.name}`}})],HomeWebviewProvider.prototype,"worktreeOpen",1),ed([(0,F.Rm)({args:{0:e=>e.branchId}})],HomeWebviewProvider.prototype,"switchToBranch",1),ed([(0,F.Rm)({args:{0:e=>e?.branchId}})],HomeWebviewProvider.prototype,"fetch",1)},7115:e=>{let t=function(){};t.prototype=Object.create(null);let i=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,r=/\\([\v\u0020-\u00ff])/gu,s=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,o={type:"",parameters:new t};Object.freeze(o.parameters),Object.freeze(o),e.exports.xL=function(e){let n,a,l;if("string"!=typeof e)return o;let u=e.indexOf(";"),c=-1!==u?e.slice(0,u).trim():e.trim();if(!1===s.test(c))return o;let h={type:c.toLowerCase(),parameters:new t};if(-1===u)return h;for(i.lastIndex=u;a=i.exec(e);){if(a.index!==u)return o;u+=a[0].length,n=a[1].toLowerCase(),'"'===(l=a[2])[0]&&(l=l.slice(1,l.length-1),r.test(l)&&(l=l.replace(r,"$1"))),h.parameters[n]=l}return u!==e.length?o:h}},7125:(e,t,i)=>{i.d(t,{Gv:()=>o,Yv:()=>n,pf:()=>l,tI:()=>s,z2:()=>a});var r=i(5962);function s(e,t){return{repoPath:e,base:{ref:t.base.sha,label:`${t.base.branch} (${(0,r.pV)(t.base.sha)})`},head:{ref:t.head.sha,label:t.head.branch}}}function o(e){let t,i=e.match(/(?:\/)(\d+)/);return null!=i&&(t=i[1]),null==t&&null!=(i=e.match(/^#?(\d+)$/))&&(t=i[1]),null==t?void 0:{ownerAndRepo:void 0,prNumber:t,provider:void 0}}function n(e,t=!0){return t?{remote:{url:e.refs?.head?.url,domain:e.provider.domain},name:`${e.refs?.head?.owner??e.repository.owner}/${e.refs?.head?.repo??e.repository.repo}`,provider:{id:e.provider.id,domain:e.provider.domain,repoDomain:e.refs?.head?.owner??e.repository.owner,repoName:e.refs?.head?.repo??e.repository.repo}}:{remote:{url:e.refs?.base?.url??e.url,domain:e.provider.domain},name:`${e.refs?.base?.owner??e.repository.owner}/${e.refs?.base?.repo??e.repository.repo}`,provider:{id:e.provider.id,domain:e.provider.domain,repoDomain:e.refs?.base?.owner??e.repository.owner,repoName:e.refs?.base?.repo??e.repository.repo,repoOwnerDomain:e.refs?.base?.owner??e.repository.owner}}}function a(e){return null!=o(e)}function l(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate,closed:e.closed,author:{id:e.author.id,name:e.author.name,avatarUrl:e.author.avatarUrl,url:e.author.url},state:e.state,mergedDate:e.mergedDate,mergeableState:e.mergeableState,refs:e.refs?{head:{exists:e.refs.head.exists,owner:e.refs.head.owner,repo:e.refs.head.repo,sha:e.refs.head.sha,branch:e.refs.head.branch,url:e.refs.head.url},base:{exists:e.refs.base.exists,owner:e.refs.base.owner,repo:e.refs.base.repo,sha:e.refs.base.sha,branch:e.refs.base.branch,url:e.refs.base.url},isCrossRepository:e.refs.isCrossRepository}:void 0,isDraft:e.isDraft,additions:e.additions,deletions:e.deletions,commentsCount:e.commentsCount,thumbsUpCount:e.thumbsUpCount,reviewDecision:e.reviewDecision,reviewRequests:e.reviewRequests,assignees:e.assignees,project:e.project?{id:e.project.id,name:e.project.name,resourceId:e.project.resourceId,resourceName:e.project.resourceName}:void 0}}},7153:(e,t,i)=>{i.d(t,{GitCodeLensProvider:()=>GitCodeLensProvider});var r=i(1398),s=i(1182),o=i(5853),n=i(2141),a=i(2870),l=i(4152),u=i(6209),c=i(9091),h=i(4941),d=i(1003),p=i(4808),g=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),m=e=>{throw TypeError(e)},f=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&m("Object expected"),i&&(r=t[g("asyncDispose")]),void 0===r&&(r=t[g("dispose")],i&&(s=r)),"function"!=typeof r&&m("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},w=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let GitRecentChangeCodeLens=class GitRecentChangeCodeLens extends r.CodeLens{constructor(e,t,i,r,s,o,n,a,l,u){super(a,u),this.languageId=e,this.symbol=t,this.uri=i,this.dateFormat=r,this.blame=s,this.blameRange=o,this.isFullRange=n,this.desiredCommand=l}getBlame(){return this.blame?.()}};let GitAuthorsCodeLens=class GitAuthorsCodeLens extends r.CodeLens{constructor(e,t,i,r,s,o,n,a){super(n),this.languageId=e,this.symbol=t,this.uri=i,this.blame=r,this.blameRange=s,this.isFullRange=o,this.desiredCommand=a}getBlame(){return this.blame()}};let GitCodeLensProvider=class GitCodeLensProvider{constructor(e){this.container=e}static selector=[...(0,c.Tj)(s.MV,e=>({scheme:e}))];_onDidChangeCodeLenses=new r.EventEmitter;get onDidChangeCodeLenses(){return this._onDidChangeCodeLenses.event}dispose(){this._onDidChangeCodeLenses.dispose()}reset(){this._onDidChangeCodeLenses.fire()}async provideCodeLenses(e,t){var i=[];try{let s,o;if(e.isDirty&&(0,l.QK)(e.uri))return[];let c=f(i,(0,d.bP)(`${(0,h.zu)(this)}.provideCodeLenses(${h.Vy.toLoggable(e)})`,!1)),p=await this.container.documentTracker.getOrAdd(e),g=await p.getStatus();if(!g.blameable)return[];let m=!1;e.isDirty&&!g.dirtyIdle&&(m=!0);let w=a.H.get("codeLens",e),v={...w.scopesByLanguage?.find(t=>t.language?.toLowerCase()===e.languageId)};null==v&&(v={language:e.languageId}),null==v.scopes&&(v.scopes=w.scopes),null==v.symbolScopes&&(v.symbolScopes=w.symbolScopes),v.symbolScopes=null!=v.symbolScopes?v.symbolScopes=v.symbolScopes.map(e=>e.toLowerCase()):[];let y=[],b=p.uri;if(m){if(1!==v.scopes.length||!v.scopes.includes("document")){let t;if([t,o]=await Promise.all([this.container.git.isTracked(b),(0,n.S4)("vscode.executeDocumentSymbolProvider",e.uri)]),!t)return y}}else if(t.isCancellationRequested||(1===v.scopes.length&&v.scopes.includes("document")?s=await this.container.git.getBlame(b,e):[s,o]=await Promise.all([this.container.git.getBlame(b,e),(0,n.S4)("vscode.executeDocumentSymbolProvider",e.uri)]),null==s||s?.lines.length===0))return y;if(t.isCancellationRequested)return y;let C=(0,u.Oo)(()=>e.validateRange(new r.Range(0,0,1e6,1e6))),R=m?{command:void 0,title:this.getDirtyTitle(w)}:void 0;if(void 0!==o)for(let t of(h.Vy.log(c,`${o.length} symbol(s) found`),o))this.provideCodeLens(y,e,t,v,C,s,b,w,m,R);if((v.scopes.includes("document")||v.symbolScopes.includes("file"))&&!v.symbolScopes.includes("!file")&&null==y.find(e=>0===e.range.start.line&&0===e.range.end.line)){let t,i=C();if(m||w.recentChange.enabled){m||(t=(0,u.Oo)(()=>this.container.git.getBlameRange(s,b,i)));let o=new r.SymbolInformation(b.fileName,r.SymbolKind.File,"",new r.Location(b.documentUri(),new r.Range(0,0,0,i.start.character)));y.push(new GitRecentChangeCodeLens(e.languageId,o,b,w.dateFormat,t,i,!0,T(o),w.recentChange.command,R))}if(!m&&w.authors.enabled){void 0===t&&(t=(0,u.Oo)(()=>this.container.git.getBlameRange(s,b,i)));let o=new r.SymbolInformation(b.fileName,r.SymbolKind.File,"",new r.Location(b.documentUri(),new r.Range(0,1,0,i.start.character)));y.push(new GitAuthorsCodeLens(e.languageId,o,b,t,i,!0,T(o),w.authors.command))}}return y}catch(e){var s=e,o=!0}finally{w(i,s,o)}}getValidateSymbolRange(e,t,i,s){let o,n=!1,a=r.SymbolKind[e.kind].toLowerCase();switch(e.kind){case r.SymbolKind.File:(t.scopes.includes("containers")||t.symbolScopes.includes(a))&&(n=!t.symbolScopes.includes(`!${a}`)),n&&(o=i());break;case r.SymbolKind.Package:(t.scopes.includes("containers")||t.symbolScopes.includes(a))&&(n=!t.symbolScopes.includes(`!${a}`)),n&&0===(o=T(e)).start.line&&0===o.end.line&&(o=i());break;case r.SymbolKind.Class:case r.SymbolKind.Interface:case r.SymbolKind.Module:case r.SymbolKind.Namespace:case r.SymbolKind.Struct:(t.scopes.includes("containers")||t.symbolScopes.includes(a))&&(o=T(e),n=!t.symbolScopes.includes(`!${a}`)&&(s||!o.isSingleLine));break;case r.SymbolKind.Constructor:case r.SymbolKind.Enum:case r.SymbolKind.Function:case r.SymbolKind.Method:case r.SymbolKind.Property:(t.scopes.includes("blocks")||t.symbolScopes.includes(a))&&(o=T(e),n=!t.symbolScopes.includes(`!${a}`)&&(s||!o.isSingleLine));break;case r.SymbolKind.String:(t.symbolScopes.includes(a)||"markdown"===t.language&&t.scopes.includes("containers"))&&(o=T(e),n=!t.symbolScopes.includes(`!${a}`)&&(s||!o.isSingleLine));break;default:t.symbolScopes.includes(a)&&(o=T(e),n=!t.symbolScopes.includes(`!${a}`)&&(s||!o.isSingleLine))}return n?o??T(e):void 0}provideCodeLens(e,t,i,s,o,n,a,l,c,h){try{let d,p=this.getValidateSymbolRange(i,s,o,l.includeSingleLineSymbols);if(void 0===p)return;let g=t.lineAt(T(i).start);if(e.length&&e[e.length-1].range.start.line===g.lineNumber)return;let m=0;if((c||l.recentChange.enabled)&&(c||(d=(0,u.Oo)(()=>this.container.git.getBlameRange(n,a,p))),e.push(new GitRecentChangeCodeLens(t.languageId,i,a,l.dateFormat,d,p,!1,g.range.with(new r.Position(g.range.start.line,m)),l.recentChange.command,h)),m++),l.authors.enabled){let s=!p.isSingleLine;if(!s&&"csharp"===t.languageId)switch(i.kind){case r.SymbolKind.File:break;case r.SymbolKind.Package:case r.SymbolKind.Module:case r.SymbolKind.Namespace:case r.SymbolKind.Class:case r.SymbolKind.Interface:case r.SymbolKind.Constructor:case r.SymbolKind.Method:case r.SymbolKind.Function:case r.SymbolKind.Enum:s=!0}s&&!c&&(void 0===d&&(d=(0,u.Oo)(()=>this.container.git.getBlameRange(n,a,p))),e.push(new GitAuthorsCodeLens(t.languageId,i,a,d,p,!1,g.range.with(new r.Position(g.range.start.line,m)),l.authors.command)))}}finally{if(E(i))for(let r of i.children)this.provideCodeLens(e,t,r,s,o,n,a,l,c,h)}}resolveCodeLens(e,t){return e instanceof GitRecentChangeCodeLens?this.resolveGitRecentChangeCodeLens(e,t):e instanceof GitAuthorsCodeLens?this.resolveGitAuthorsCodeLens(e,t):Promise.reject(void 0)}resolveGitRecentChangeCodeLens(e,t){let i=e.getBlame();if(null==i)return $("Unknown, (Blame failed)",e);let s=(0,c.$1)(i.commits.values());if(null==s)return $("Unknown, (Blame failed)",e);let o=`${s.author.name}, ${null==e.dateFormat?s.formattedDate:s.formatDate(e.dateFormat)}`;if(a.H.get("debug")&&(o+=` [${e.languageId}: ${r.SymbolKind[e.symbol.kind]}(${e.range.start.character}-${e.range.end.character}${e.symbol.containerName?`|${e.symbol.containerName}`:""}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Commit (${s.shortSha})]`),!1===e.desiredCommand)return $(o,e);switch(e.desiredCommand){case"gitlens.copyRemoteCommitUrl":return y(o,e,s,!0);case"gitlens.copyRemoteFileUrl":return b(o,e,s,!0);case"gitlens.diffWithPrevious":return v(o,e,s);case"gitlens.openCommitOnRemote":return y(o,e,s);case"gitlens.openFileOnRemote":return b(o,e,s);case"gitlens.revealCommitInView":return C(o,e,s);case"gitlens.showCommitsInView":return R(o,e,i,s);case"gitlens.showQuickCommitDetails":return k(o,e,s);case"gitlens.showQuickCommitFileDetails":return S(o,e,s);case"gitlens.showQuickRepoHistory":return P(o,e);case"gitlens.showQuickFileHistory":return A(o,e);case"gitlens.toggleFileBlame":return I(o,e);case"gitlens.toggleFileChanges":return D(o,e,s);case"gitlens.toggleFileChangesOnly":return D(o,e,s,!0);case"gitlens.toggleFileHeatmap":return _(o,e);default:return e}}resolveGitAuthorsCodeLens(e,t){let i=e.getBlame();if(null==i)return $("? authors (Blame failed)",e);let s=i.authors.size,o=(0,c.$1)(i.authors.values())?.name??"Unknown",n=s>1?` and ${(0,p.td)("one other",s-1,{only:!0,plural:"others"})}`:"",l=`${(0,p.td)("author",s,{zero:"?"})} (${o}${n})`;if(a.H.get("debug")&&(l+=` [${e.languageId}: ${r.SymbolKind[e.symbol.kind]}(${e.range.start.character}-${e.range.end.character}${e.symbol.containerName?`|${e.symbol.containerName}`:""}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Authors (${(0,c.fj)((0,c.Tj)(i.authors.values(),e=>e.name),", ")})]`),!1===e.desiredCommand)return $(l,e);let u=(0,c.I6)(i.commits.values(),e=>e.author.name===o)??(0,c.$1)(i.commits.values());if(null==u)return $(l,e);switch(e.desiredCommand){case"gitlens.copyRemoteCommitUrl":return y(l,e,u,!0);case"gitlens.copyRemoteFileUrl":return b(l,e,u,!0);case"gitlens.diffWithPrevious":return v(l,e,u);case"gitlens.openCommitOnRemote":return y(l,e,u);case"gitlens.openFileOnRemote":return b(l,e,u);case"gitlens.revealCommitInView":return C(l,e,u);case"gitlens.showCommitsInView":return R(l,e,i);case"gitlens.showQuickCommitDetails":return k(l,e,u);case"gitlens.showQuickCommitFileDetails":return S(l,e,u);case"gitlens.showQuickRepoHistory":return P(l,e);case"gitlens.showQuickFileHistory":return A(l,e);case"gitlens.toggleFileBlame":return I(l,e);case"gitlens.toggleFileChanges":return D(l,e,u);case"gitlens.toggleFileChangesOnly":return D(l,e,u,!0);case"gitlens.toggleFileHeatmap":return _(l,e);default:return e}}getDirtyTitle(e){return e.recentChange.enabled&&e.authors.enabled?a.H.get("strings.codeLens.unsavedChanges.recentChangeAndAuthors"):e.recentChange.enabled?a.H.get("strings.codeLens.unsavedChanges.recentChangeOnly"):a.H.get("strings.codeLens.unsavedChanges.authorsOnly")}};function v(e,t,i){return t.command=(0,n.gu)("gitlens.diffWithPrevious",e,void 0,{commit:i,uri:t.uri.toFileUri()}),t}function y(e,t,i,r=!1){return t.command=(0,n.gu)("gitlens.openOnRemote",e,{resource:{type:o.J.Commit,sha:i.sha},repoPath:i.repoPath,clipboard:r}),t}function b(e,t,i,r=!1){return t.command=(0,n.gu)("gitlens.openOnRemote",e,{resource:{type:o.J.Revision,fileName:i.file?.path??"",sha:i.sha},repoPath:i.repoPath,clipboard:r}),t}function C(e,t,i){return t.command=(0,n.gu)(i?.isUncommitted?"":"gitlens.revealCommitInView",e,t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}),t}function R(e,t,i,r){let s;return s=void 0===r?[...(0,c.x1)(i.commits.values(),e=>e.isUncommitted?void 0:e.ref)]:[r.ref],t.command=(0,n.gu)(0===s.length?"":"gitlens.showCommitsInView",e,{repoPath:i.repoPath,refs:s}),t}function k(e,t,i){return t.command=(0,n.gu)(i?.isUncommitted?"":"gitlens.showQuickCommitDetails",e,t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}),t}function S(e,t,i){return t.command=(0,n.gu)(i?.isUncommitted?"":"gitlens.showQuickCommitFileDetails",e,t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}),t}function P(e,t){return t.command=(0,n.gu)("gitlens.showQuickRepoHistory",e,t.uri.toFileUri()),t}function A(e,t){return t.command=(0,n.gu)("gitlens.showQuickFileHistory",e,t.uri.toFileUri(),{range:t.isFullRange?void 0:t.blameRange}),t}function I(e,t){return t.command=(0,n.gu)("gitlens.toggleFileBlame",e,t.uri.toFileUri()),t}function D(e,t,i,r){return t.command=(0,n.gu)("gitlens.toggleFileChanges",e,t.uri.toFileUri(),{type:"changes",context:{sha:i.sha,only:r,selection:!1}}),t}function _(e,t){return t.command=(0,n.gu)("gitlens.toggleFileHeatmap",e,t.uri.toFileUri()),t}function $(e,t){return t.command={title:e,command:""},t}function T(e){return E(e)?e.range:e.location.range}function E(e){return(0,u.is)(e,"children")}},7193:(e,t,i)=>{function r(e,t){return t?.document?.uri??e}i.d(t,{q:()=>r})},7201:(e,t,i)=>{i.d(t,{DR:()=>f,Lr:()=>m,XM:()=>n,Yv:()=>C,a0:()=>l,cc:()=>a,cg:()=>u,oQ:()=>R});var r=i(600),s=i(2356);let o=/\.visualstudio\.com$/;function n(e){return"Completed"===e||"Resolved"===e||"Removed"===e}function a(e){switch(e){case"Resolved":case"Completed":case"Removed":return"closed";default:return"opened"}}function l(e){switch(e){case"abandoned":return"closed";case"completed":return"merged";default:return"opened"}}function u(e){return"opened"!==l(e)}function c(e){return e.hostname.split(".")[0]}function h(e){return e.pathname.split("/")[1]}function d(e){return o.test(e.hostname)?c(e):h(e)}let p=/([^/]+)\/_git\/([^/]+)/,g=/([^/]+)\/([^/]+)\/_git\/([^/]+)/;function m(e){let t="string"==typeof e?new URL(e):e;if(o.test(t.hostname)){let e=c(t),i=p.exec(t.pathname);if(null==i)throw Error(`Invalid VSTS URL: ${t.toString()}`);let[,r,s]=i;return[e,r,s]}let i=g.exec(t.pathname);if(null==i)throw Error(`Invalid Azure URL: ${t.toString()}`);let[,r,s,n]=i;return[r,s,n]}function f(e){let t=new URL(e.url),i=new URL(t.origin).toString(),r=`${e.repository.project.name}/_git/${e.repository.name}`;if(o.test(t.hostname))return`${i}/${r}/pullrequest/${e.pullRequestId}`;let s=h(t);return`${i}/${s}/${r}/pullrequest/${e.pullRequestId}`}function w(e){switch(e){case 10:case 5:return s.c7.Approved;case 0:default:return s.c7.ReviewRequested;case -5:case -10:return s.c7.ChangesRequested}}function v(e){return{isCodeOwner:void 0,reviewer:{avatarUrl:e.imageUrl,id:e.id,name:e.displayName,url:e.url},state:w(e.vote??0)}}function y(e){return e.startsWith("refs/heads/")?e.replace("refs/heads/",""):e}function b(e,t){return{avatarUrl:e.imageUrl,id:e.id,name:e.displayName,url:e.url}}function C(e,t,i){let o=new URL(e.url);return new s.B9(t,b(e.createdBy,"pullRequest"),e.pullRequestId.toString(),e.pullRequestId.toString(),e.title,f(e),{owner:d(o),repo:e.repository.name,id:e.repository.id,accessLevel:r.LI.Write},l(e.status),new Date(e.creationDate),new Date(e.closedDate||e.creationDate),e.closedDate?new Date(e.closedDate):void 0,e.closedDate&&"completed"===e.status?new Date(e.closedDate):void 0,function(e){switch(e){case"conflicts":return s.Q6.Conflicting;case"failure":return s.Q6.FailingChecks;case"rejectedByPolicy":return s.Q6.BlockedByPolicy;case"succeeded":return s.Q6.Mergeable;default:return s.Q6.Unknown}}(e.mergeStatus??"notSet"),void 0,{base:{branch:e.targetRefName?y(e.targetRefName):"",sha:e.lastMergeTargetCommit?.commitId??"",repo:e.repository.name,owner:d(o),exists:null!=e.targetRefName,url:e.repository.webUrl},head:{branch:e.sourceRefName?y(e.sourceRefName):"",sha:e.lastMergeSourceCommit?.commitId??"",repo:e.forkSource?.repository!=null?e.forkSource.repository.name:e.repository.name,owner:d(o),exists:null!=e.sourceRefName,url:e.forkSource?.repository!=null?e.forkSource.repository.webUrl:e.repository.webUrl},isCrossRepository:null!=e.forkSource},e.isDraft,void 0,void 0,void 0,void 0,function(e){let t=e.map(e=>w(e));return t.includes(s.c7.ChangesRequested)?s.dq.ChangesRequested:t.includes(s.c7.ReviewRequested)?s.dq.ReviewRequired:t.includes(s.c7.Approved)?s.dq.Approved:void 0}(e.reviewers?.filter(e=>e.isRequired).map(e=>e.vote??0)??[]),e.reviewers.filter(e=>null==e.vote||0===e.vote).map(e=>v(e)),e.reviewers.filter(e=>null!=e.vote&&0!==e.vote).map(e=>v(e)),e.reviewers.map(e=>({avatarUrl:e.imageUrl,id:e.id,name:e.displayName,url:e.url})),void 0,{id:e.repository?.project?.id,name:e.repository.project.name,resourceId:"",resourceName:i})}function R(e,t,i,s){return new r.m2(t,e.id.toString(),e.id.toString(),e.fields["System.Title"],e._links.html.href,new Date(e.fields["System.CreatedDate"]),new Date(e.fields["System.ChangedDate"]),n(s),a(s),b(e.fields["System.CreatedBy"],"issue"),null!=e.fields["System.AssignedTo"]?[b(e.fields["System.AssignedTo"],"issue")]:[],void 0,e.fields["Microsoft.VSTS.Common.ClosedDate"]?new Date(e.fields["Microsoft.VSTS.Common.ClosedDate"]):void 0,void 0,e.fields["System.CommentCount"],void 0,e.fields["System.Description"],i)}},7273:(e,t,i)=>{i.d(t,{p:()=>ViewRefFileNode,t:()=>ViewRefNode});var r=i(7660),s=i(6572),o=i(5818);let ViewRefNode=class ViewRefNode extends o.eu{constructor(e,t,i,r){super(e,t,i,r),this.parent=r}get repoPath(){return this.uri.repoPath}toString(){return`${super.toString()}:${(0,r.M4)(this.ref,!1)}`}};let ViewRefFileNode=class ViewRefFileNode extends s.u${toString(){return`${super.toString()}:${this.file.path}`}}},7279:(e,t,i)=>{let r,s,o;var n=Object.create,a=Object.defineProperty,l=Object.getOwnPropertyDescriptor,u=Object.getOwnPropertyNames,c=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty,d=(e,t)=>{for(var i in t)a(e,i,{get:t[i],enumerable:!0})},p=(e,t,i,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let s of u(t))h.call(e,s)||s===i||a(e,s,{get:()=>t[s],enumerable:!(r=l(t,s))||r.enumerable});return e},g={};d(g,{AzureDevopsUtils:()=>m,BitbucketServerUtils:()=>y,BitbucketUtils:()=>w,GitHubUtils:()=>ey,GitLabUtils:()=>eC,GitProviderUtils:()=>D,JiraUtils:()=>ek,TrelloUtils:()=>eP,Utils:()=>eI}),e.exports=p(a({},"__esModule",{value:!0}),g);var m={};d(m,{default:()=>f});var f={},w={};d(w,{default:()=>v});var v={},y={};d(y,{restApiPullRequestToCommonPullRequest:()=>I});var b={APPROVED:0,COMMENTED:1,REVIEW_REQUESTED:2,CHANGES_REQUESTED:3},C=e=>e&&0!==e.length?e.reduce((e,t)=>b[t.state]>b[e]?t.state:e,"APPROVED"):null,R=(e,t)=>e.name||e.username||e.email||t,k=e=>{let t=Object.values(e).map(e=>e.name).sort((e,t)=>e.localeCompare(t));return Object.values(e).forEach(e=>{-1!==e.priority&&(e.priority=t.indexOf(e.name))}),e},S=(o=null!=(r=i(5615))?n(c(r)):{},p(!s&&r&&r.__esModule?o:a(o,"default",{value:r,enumerable:!0}),r));globalThis.fetch||S.default;var P=e=>({name:e.displayName,email:e.emailAddress,avatarUrl:e.avatarUrl??null,id:e.id.toString(),username:e.name,url:e.links.self[0].href}),A=e=>{var t,i,r,s,o,n;let a={UNAPPROVED:"REVIEW_REQUESTED",NEEDS_WORK:"CHANGES_REQUESTED",APPROVED:"APPROVED"},l=e.reviewers.map(e=>({reviewer:P(e.user),state:a[e.status]})),u=(null==(t=e.toRef.repository.links.clone.find(e=>"ssh"===e.name))?void 0:t.href)??null,c=(null==(i=e.toRef.repository.links.clone.find(e=>"https"===e.name))?void 0:i.href)??null;c||(c=(null==(r=e.toRef.repository.links.clone.find(e=>"http"===e.name))?void 0:r.href)??null);let h=(null==(s=e.fromRef.repository.links.clone.find(e=>"ssh"===e.name))?void 0:s.href)??null,d=(null==(o=e.fromRef.repository.links.clone.find(e=>"https"===e.name))?void 0:o.href)??null;return d||(d=(null==(n=e.fromRef.repository.links.clone.find(e=>"http"===e.name))?void 0:n.href)??null),{id:e.id.toString(),number:e.id,title:e.title,url:e.links.self[0].href,state:({OPEN:"OPEN",MERGED:"MERGED",DECLINED:"CLOSED"})[e.state],isDraft:!1,createdDate:new Date(e.createdDate),updatedDate:new Date(e.updatedDate),closedDate:e.closedDate?new Date(e.closedDate):null,mergedDate:"MERGED"==e.state&&e.closedDate?new Date(e.closedDate):null,baseRef:{name:e.toRef.displayId,oid:e.toRef.latestCommit},headRef:{name:e.fromRef.displayId,oid:e.fromRef.latestCommit},commentCount:e.properties.commentCount,upvoteCount:null,commitCount:null,fileCount:null,additions:null,deletions:null,author:P(e.author.user),assignees:null,reviews:l,reviewDecision:C(l),repository:{id:e.toRef.repository.id.toString(),name:e.toRef.repository.name,owner:{login:e.toRef.repository.project.key},remoteInfo:c&&u?{cloneUrlHTTPS:c,cloneUrlSSH:u}:null},headRepository:{id:e.fromRef.repository.id.toString(),name:e.fromRef.repository.name,owner:{login:e.fromRef.repository.project.key},remoteInfo:d&&h?{cloneUrlHTTPS:d,cloneUrlSSH:h}:null},headCommit:null,mergeableState:"UNKNOWN",permissions:null,version:e.version}},I=e=>A(e),D={};d(D,{CHANGES_REQUESTED_ACTION_CATEGORY:()=>eo,CHANGES_REQUESTED_BUCKET_ID:()=>Q,CONFLICTS_ACTION_CATEGORY:()=>er,CONFLICTS_BUCKET_ID:()=>j,DRAFT_ACTION_CATEGORY:()=>el,DRAFT_BUCKET_ID:()=>Z,FAILING_CI_ACTION_CATEGORY:()=>ei,FAILING_CI_BUCKET_ID:()=>V,NEEDS_MY_REVIEW_ACTION_CATEGORY:()=>es,NEEDS_MY_REVIEW_BUCKET_ID:()=>z,OTHER_ACTION_CATEGORY:()=>eu,OTHER_BUCKET_ID:()=>J,PINNED_BUCKET_ID:()=>W,READY_TO_MERGE_ACTION_CATEGORY:()=>ee,READY_TO_MERGE_BUCKET_ID:()=>G,REVIEWER_COMMENTED_ACTION_CATEGORY:()=>en,REVIEWER_COMMENTED_BUCKET_ID:()=>Y,SNOOZED_BUCKET_ID:()=>X,UNASSIGNED_REVIEWERS_ACTION_CATEGORY:()=>et,UNASSIGNED_REVIEWERS_BUCKET_ID:()=>H,WAITING_FOR_REVIEW_ACTION_CATEGORY:()=>ea,WAITING_FOR_REVIEW_BUCKET_ID:()=>K,getActionablePullRequests:()=>ec,groupPullRequestsByAssignee:()=>ep,groupPullRequestsByAuthor:()=>eg,groupPullRequestsByGitKrakenTeam:()=>ev,groupPullRequestsByRepo:()=>ed,groupPullRequestsByReviewer:()=>em,groupPullRequestsByWorkspace:()=>ew,groupPullRequestsIntoBuckets:()=>eh});var _=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.entityId)throw Error("Missing required fields for Azure DevOps issue uniqueId");let t=[];return t.push("azure"),t.push("issue"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Azure DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:null,entityId:e[6]}}},$=class{constructor(){}validate(e){if(!e.organizationName)throw Error("organizationName is required");if(!e.projectId)throw Error("projectId is required");if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.organizationName||!e.projectId||!e.repoId||!e.entityId)throw Error("Missing required fields for Azure DevOps pull request uniqueId");let t=[];return t.push("azure"),t.push("pr"),t.push("1"),t.push(e.domain||""),t.push(e.organizationName),t.push(e.projectId),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<8)throw Error("Invalid Azure DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:e[4],projectId:e[5],repoId:e[6],entityId:e[7]}}},T=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("issueId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},E=class{constructor(){}validate(e){if(!e.repoId)throw Error("repoId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.repoId||!e.entityId)throw Error("Missing required fields for Bitbucket DevOps pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"bitbucketServer"===e.provider?t.push(e.domain):t.push(""),t.push(e.repoId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<6)throw Error("Invalid Bitbucket DevOps pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:e[4],entityId:e[5]}}},x=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},O=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Github pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"githubEnterprise"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Github pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},F=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},B=class{constructor(){}validate(e){if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.entityId)throw Error("Missing required fields for Gitlab pull request uniqueId");let t=[];return t.push(e.provider),t.push("pr"),t.push("1"),"gitlabSelfHosted"===e.provider?t.push(e.domain):t.push(""),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<5)throw Error("Invalid Gitlab pull request uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:null,organizationName:null,projectId:null,repoId:null,entityId:e[4]}}},L=class{constructor(){}validate(e){if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.projectId||!e.entityId)throw Error("Missing required fields for Jira issue uniqueId");let t=[];return t.push(e.provider),t.push("issue"),t.push("1"),"jira"==e.provider?(t.push(""),t.push(e.resourceId)):(t.push(e.domain),t.push("")),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Jira issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:""==e[4]?null:e[4],accountOrOrgId:null,organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},U=class{constructor(){}validate(e){if(!e.accountOrOrgId)throw Error("accountOrOrgId is required");if(!e.projectId)throw Error("projectId is required");if(!e.entityId)throw Error("entityId is required")}encode(e){if(this.validate(e),!e.accountOrOrgId||!e.projectId||!e.entityId)throw Error("Missing required fields for Trello issue uniqueId");let t=[];return t.push("trello"),t.push("issue"),t.push("1"),t.push(""),t.push(e.accountOrOrgId),t.push(e.projectId),t.push(e.entityId),JSON.stringify(t)}decode(e){if(e.length<7)throw Error("Invalid Trello issue uniqueId, check version");return{provider:e[0],entityType:e[1],version:e[2],domain:""==e[3]?null:e[3],resourceId:null,accountOrOrgId:e[4],organizationName:null,projectId:e[5],repoId:null,entityId:e[6]}}},q=(e,t)=>{if("issue"!==t&&"pr"!==t)throw Error("unknown entityType");switch(e){case"azure":return"pr"===t?new $:new _;case"bitbucket":case"bitbucketServer":return"pr"===t?new E:new T;case"github":case"githubEnterprise":return"pr"===t?new O:new x;case"gitlab":case"gitlabSelfHosted":return"pr"===t?new B:new F;case"jira":case"jiraServer":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new L;case"trello":if("pr"===t)throw Error("EntityType PullRequest is not valid for Jira");return new U;default:throw Error("unknown provider")}},N=e=>{let t=JSON.parse(e);if(!t||!t.length)throw Error("invalid issue unique id");return q(t[0],t[1]).decode(t)},M=(e,t,i,r)=>({id:e,faIconName:i,name:t,priority:r,pullRequests:[]}),W="pinned",G="readyToMerge",H="unassignedReviewers",V="failingCI",j="conflicts",z="needsMyReview",Q="changesRequested",Y="reviewerCommented",K="waitingForReview",Z="draft",J="other",X="snoozed",ee="readyToMerge",et="unassignedReviewers",ei="failingCI",er="conflicts",es="needsMyReview",eo="changesRequested",en="reviewerCommented",ea="waitingForReview",el="draft",eu="other",ec=(e,t,i)=>e.map(e=>{var r,s,o,n,a,l,u,c,h,d,p,g,m,f;let w={...e,suggestedActionCategory:eu,priority:1e3,viewer:{canMerge:!1,isAuthor:!1,isAssignee:!1,isReviewer:!1,shouldMerge:!1,shouldAssignReviewer:!1,waitingOnReviews:!1,shouldReview:!1},failingCI:!1,hasConflicts:!1,changeRequestReviewCount:0,codeSuggestionsCount:0,commentReviewCount:0,approvalReviewCount:0};t&&(w.viewer.isAuthor=(null==(r=e.author)?void 0:r.id)===t.id,w.viewer.isAssignee=(null==(s=e.assignees)?void 0:s.some(e=>e.id===t.id))??!1,w.viewer.isReviewer=(null==(o=e.reviews)?void 0:o.some(e=>e.reviewer.id===t.id))??!1),w.viewer.canMerge=(null==(n=e.permissions)?void 0:n.canMerge)??!0,w.hasConflicts="CONFLICTS"===e.mergeableState,w.failingCI=(null==(l=null==(a=e.headCommit)?void 0:a.buildStatuses)?void 0:l.some(e=>"ERROR"===e.state||"FAILED"===e.state))||"FAILING_CHECKS"===e.mergeableState,w.commentReviewCount=(null==(u=e.reviews)?void 0:u.filter(e=>"COMMENTED"===e.state).length)??0,w.approvalReviewCount=(null==(c=e.reviews)?void 0:c.filter(e=>"APPROVED"===e.state).length)??0,w.changeRequestReviewCount=(null==(h=e.reviews)?void 0:h.filter(e=>"CHANGES_REQUESTED"===e.state).length)??0;let v=null==(d=null==i?void 0:i.enrichedItemsByUniqueId)?void 0:d[e.uuid];null!=v&&(w.viewer.enrichedItems=v,v.some(e=>"pin"===e.type)&&(w.viewer.pinned=!0,w.priority-=800),v.some(e=>"snooze"===e.type)&&(w.viewer.snoozed=!0));let y=(null==(g=null==(p=null==i?void 0:i.codeSuggestionsCountByPrUuid)?void 0:p[e.uuid])?void 0:g.count)||0;return y&&(w.codeSuggestionsCount=y),t&&!w.viewer.isAuthor&&(!w.viewer.isAssignee||w.viewer.isReviewer)||!w.viewer.canMerge||w.isDraft||w.failingCI||"MERGEABLE"!==e.mergeableState||e.reviewDecision&&"APPROVED"!==e.reviewDecision||(w.viewer.shouldMerge=!0,w.suggestedActionCategory=ee),(!t||w.viewer.isAuthor)&&e.isDraft&&(w.suggestedActionCategory=el),(!t||w.viewer.isAuthor)&&"REVIEW_REQUESTED"===e.reviewDecision&&(w.suggestedActionCategory=ea,w.viewer.waitingOnReviews=!0),(!t||w.viewer.isAuthor)&&"COMMENTED"===e.reviewDecision&&(w.suggestedActionCategory=en),(!t||w.viewer.isAuthor)&&w.failingCI&&(w.suggestedActionCategory=ei),(!t||w.viewer.isAuthor)&&w.hasConflicts&&(w.suggestedActionCategory=er),(!t||w.viewer.isAuthor)&&("CHANGES_REQUESTED"===e.reviewDecision||w.codeSuggestionsCount>0)&&(w.suggestedActionCategory=eo),t&&!w.viewer.isAuthor||null!=(m=e.reviews)&&m.length||(w.suggestedActionCategory=et,w.viewer.shouldAssignReviewer=!0),t&&null!=(f=e.reviews)&&f.some(e=>e.reviewer.id===t.id&&"REVIEW_REQUESTED"===e.state)&&(w.suggestedActionCategory=es,w.viewer.shouldReview=!0),w}),eh=(e,t,i)=>{var r,s,o,n,a,l,u,c,h,d,p,g;let m={pinned:M(W,"Pinned","thumbtack",(null==(r=null==i?void 0:i.bucketPriorityOverride)?void 0:r.pinned)??-1),readyToMerge:M(G,"Ready to Merge","code-merge",(null==(s=null==i?void 0:i.bucketPriorityOverride)?void 0:s.readyToMerge)??0),unassignedReviewers:M(H,"Unassigned Reviewers","user-plus",(null==(o=null==i?void 0:i.bucketPriorityOverride)?void 0:o.unassignedReviewers)??1),failingCI:M(V,"Failing CI","circle-x",(null==(n=null==i?void 0:i.bucketPriorityOverride)?void 0:n.failingCI)??2),conflicts:M(j,"Resolve Conflicts","triangle-exclamation",(null==(a=null==i?void 0:i.bucketPriorityOverride)?void 0:a.conflicts)??3),needsMyReview:M(z,"Needs My Review","eye",(null==(l=null==i?void 0:i.bucketPriorityOverride)?void 0:l.needsMyReview)??4),changesRequested:M(Q,"Suggested Changes","file-plus",(null==(u=null==i?void 0:i.bucketPriorityOverride)?void 0:u.changesRequested)??5),reviewerCommented:M(Y,"Reviewer Commented","comment",(null==(c=null==i?void 0:i.bucketPriorityOverride)?void 0:c.reviewerCommented)??6),waitingForReview:M(K,"Waiting for Review","circle-pause",(null==(h=null==i?void 0:i.bucketPriorityOverride)?void 0:h.waitingForReview)??7),draft:M(Z,"Draft","compass-drafting",(null==(d=null==i?void 0:i.bucketPriorityOverride)?void 0:d.draft)??8),other:M(J,"Other","ellipsis",(null==(p=null==i?void 0:i.bucketPriorityOverride)?void 0:p.other)??9),snoozed:M(X,"Snoozed","snooze",(null==(g=null==i?void 0:i.bucketPriorityOverride)?void 0:g.snoozed)??10)},f=ec(e,t,i).reduce((e,t)=>(e[t.uuid]=t,e),{});return e.forEach(e=>{let i=f[e.uuid],r=!0;if(i.viewer.snoozed)return void m[X].pullRequests.push(e);i.viewer.pinned&&m[W].pullRequests.push(e),t&&!i.viewer.isAuthor&&(!i.viewer.isAssignee||i.viewer.isReviewer)||i.isDraft||!i.viewer.canMerge||"MERGEABLE"!==i.mergeableState||e.reviewDecision&&"APPROVED"!==e.reviewDecision||(m[G].pullRequests.push(e),r=!1),i.viewer.shouldAssignReviewer&&(m[H].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&i.failingCI&&(m[V].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&i.hasConflicts&&(m[j].pullRequests.push(e),r=!1),i.viewer.shouldReview&&(m[z].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&("CHANGES_REQUESTED"===i.reviewDecision||i.codeSuggestionsCount>0)&&(m[Q].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&"COMMENTED"===i.reviewDecision&&(m[Y].pullRequests.push(e),r=!1),(!t||i.viewer.isAuthor)&&"REVIEW_REQUESTED"===i.reviewDecision&&(m[K].pullRequests.push(e),r=!1),i.isDraft&&(m[Z].pullRequests.push(e),r=!1),r&&m[J].pullRequests.push(e)}),Object.values(m).forEach(e=>{e.pullRequests.sort((e,t)=>f[e.uuid].priority-f[t.uuid].priority)}),m},ed=e=>{let t={};return e.forEach(e=>{let i=e.repository.id;t[i]?t[i].pullRequests.push(e):t[i]={name:e.repository.name,priority:0,pullRequests:[e],id:i}}),k(t)},ep=e=>{let t="internal-no-assignees",i={[t]:{name:"No assignees",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{e.assignees&&e.assignees.length?e.assignees.forEach(t=>{let r=t.id;i[r]?i[r].pullRequests.push(e):i[r]={accountData:t,name:R(t,`Unknown Assignee ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:r}}):i[t].pullRequests.push(e)}),k(i)},eg=e=>{let t="internal-no-author",i={[t]:{name:"No author",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{if(e.author){let t=e.author.id;i[t]?i[t].pullRequests.push(e):i[t]={accountData:e.author,name:R(e.author,`Unknown Author ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:t}}else i[t].pullRequests.push(e)}),k(i)},em=e=>{let t="internal-no-reviewer",i={[t]:{name:"No reviewers",priority:-1,pullRequests:[],id:t,faIconName:"user-slash"}};return e.forEach(e=>{e.reviews&&e.reviews.length?e.reviews.forEach(t=>{let r=t.reviewer.id;i[r]?i[r].pullRequests.push(e):i[r]={accountData:t.reviewer,name:R(t.reviewer,`Unknown Reviewer ${Object.keys(i).length}`),priority:0,pullRequests:[e],id:r}}):i[t].pullRequests.push(e)}),k(i)},ef=e=>{var t;return e.azureProject?[`${e.azureProject}-${e.azureOrganizationId}`]:(null==(t=e.providerData)?void 0:t.repositories.nodes.map(t=>`${e.provider}-${t.repositoryId}`))??[]},ew=(e,t)=>{let i="internal-no-workspace",r={[i]:{name:"No workspace",priority:-1,pullRequests:[],id:i,faIconName:"folder-xmark"}};if(t.length){let s=t.reduce((e,t)=>(ef(t).forEach(i=>{e[i]?e[i].push(t):e[i]=[t]}),e),{});e.forEach(e=>{let{provider:t}=N(e.uuid),o="github"===t?e.repository.graphQLId:e.repository.id,n="azure"===t?[`${t}-${o}`,`${e.repository.project}-${e.repository.owner.login}`]:[`${t}-${o}`],a=!1,l=n.reduce((e,t)=>s[t]?e.concat(s[t]):e,[]);null!=l&&l.length&&l.forEach(t=>{a=!0;let i=t.id;r[i]?r[i].pullRequests.push(e):r[i]={name:t.name,priority:0,pullRequests:[e],id:i,faIconName:"folder"}}),a||r[i].pullRequests.push(e)})}else r[i].pullRequests=e;return k(r)},ev=(e,t,i,r)=>{let s="internal-no-team",o={[s]:{name:"No team",priority:-1,pullRequests:[],id:s}};return r.length?e.forEach(e=>{var n,a,l;let u=!1,c=new Set;c.add(null==(n=e.author)?void 0:n.id),null==(a=e.assignees)||a.forEach(e=>c.add(e.id)),null==(l=e.reviews)||l.forEach(e=>c.add(e.reviewer.id)),r.forEach(r=>{var s;if(null==(s=r.members)?void 0:s.some(e=>{var r,s;let o=null==(s=null==(r=t[e.id])?void 0:r[i])?void 0:s.providerID;return o&&c.has(o)})){u=!0;let t=r.id;o[t]?o[t].pullRequests.push(e):o[t]={name:r.name,priority:0,pullRequests:[e],id:t,teamData:r}}}),u||o[s].pullRequests.push(e)}):o[s].pullRequests=e,k(o)},ey={};d(ey,{getPullRequestRank:()=>eb});var eb=(e,t,i)=>{var r,s,o;let n=0,a,l;return null==(r=e.reviews)||r.forEach(e=>{e.reviewer.id===t&&(a=e.state),"CHANGES_REQUESTED"===e.state?l="CHANGES_REQUESTED":"APPROVED"===e.state&&"CHANGES_REQUESTED"!==l&&(l="APPROVED")}),l||(l="REVIEW_REQUESTED"),(null==(s=e.author)?void 0:s.id)===t?n+=1e3:null!=(o=e.assignees)&&o.find(e=>e.id===t)?n+=900:"REVIEW_REQUESTED"===a?n+=800:i&&(n+=700),"APPROVED"===l?"MERGEABLE"===e.mergeableState?n+=100:"CONFLICTS"===e.mergeableState?n+=90:n+=80:"CHANGES_REQUESTED"==l&&(n+=70),n},eC={};d(eC,{default:()=>eR});var eR={},ek={};d(ek,{default:()=>eS});var eS={},eP={};d(eP,{default:()=>eA});var eA={},eI={azureDevOps:m,bitbucket:w,bitbucketServer:y,github:ey,gitlab:eC,gitProvider:D,jira:ek,trello:eP}},7308:(e,t,i)=>{i.d(t,{Zr:()=>H,jg:()=>eR,p9:()=>V,Qj:()=>Y,e2:()=>K,wS:()=>Z,C6:()=>J,aG:()=>X,c1:()=>ee,Re:()=>er,uV:()=>es,aL:()=>et,gw:()=>ei,t$:()=>eo,GW:()=>en,iM:()=>ea,YR:()=>el,g0:()=>ec,UA:()=>eu,FF:()=>eh,Tq:()=>ed,RX:()=>ep,l7:()=>eg,sL:()=>em,tY:()=>ey,UI:()=>ev,x$:()=>ef,cf:()=>eC});var r=i(1398),s=i(1182),o=i(2099),n=i(8282),a=i(4123),l=i(8561),u=i(3592),c=i(3782),h=i(3621),d=i(2112),p=i(4931),g=i(8518),m=i(5853),f=i(8219),w=i(3130),v=i(4168),y=i(9013),b=i(4808),C=i(5962),R=i(8027),k=i(9271),S=i(7660),P=i(9181),A=i(9975),I=i(6366),D=i(9207),_=i(4357),$=i(3227),T=i(5462),E=i(2141),x=i(2870),O=i(7062),F=i(4692),B=i(3677),L=i(2812),U=i(5539),q=i(9091),N=i(4941),M=i(7864),W=i(3296),G=i(9679);function H(e,t,i,r){let o;return 1===i.repos.length?r?`${e}${(0,b.xv)(r,s.uR-e.length)}`:e:(o=null!=t.repo?`${r??""}${(0,b.eV)(s.EO.Dot,2,2)}${t.repo.formattedName}`:1===t.repos.length?`${r??""}${(0,b.eV)(s.EO.Dot,2,2)}${t.repos[0].formattedName}`:`${(0,b.eV)(s.EO.Dot,2,2)}${t.repos.length} repositories`,`${e}${(0,b.xv)(o,s.uR-e.length)}`)}async function V(e,t){return Y(e,["branches"],{buttons:t?.buttons,filter:t?.filter!=null?{branches:t.filter}:void 0,picked:t?.picked,sort:t?.sort==null||{branches:t.sort}})}async function j(e,t){return null==e?[]:(await e.git.remotes().getRemotes(t?.filter!=null?{filter:t.filter}:void 0)).map(e=>(0,$.G0)(e,t?.picked!=null&&("string"==typeof t.picked?e.name===t.picked:t.picked.includes(e.name)),{buttons:t?.buttons,upstream:!0}))}async function z(e,t){return Y(e,["tags"],{buttons:t?.buttons,filter:t?.filter!=null?{tags:t.filter}:void 0,picked:t?.picked,sort:t?.sort==null||{tags:t.sort}})}async function Q(e,{buttons:t,excludeOpened:i,filter:n,includeStatus:a,picked:l}){let u=e instanceof f.LN?await e.git.worktrees()?.getWorktrees():e;if(null==u)return[];let c=(0,L.x1)(await Promise.allSettled((0,q.Tj)(u,async e=>{let u;if(i&&e.opened||n?.(e)===!1)return;let c=!1;if(a)try{u=await e.getStatus()}catch(t){N.Vy.error(t,`Worktree status failed: ${e.uri.toString(!0)}`),c=!0}return function(e,t,i,n){let a,l,u="",c="";if(n?.type&&(u="worktree"),n?.includeStatus){let t="",i=0;n?.status!=null?n.status.upstream?.missing?(t+=s.EO.Warning,i+=3):(n.status.upstream?.state.behind?t+=s.EO.ArrowDown:i+=2,n.status.upstream?.state.ahead?t+=s.EO.ArrowUp:i+=2,n.status.hasChanges?t+="±":i+=2):i+=6,i>0&&(t+=" ".repeat(i));let r=e.formattedDate;r&&(u?u+=`  ${s.EO.Dot}  ${e.formattedDate}`:u=r),t&&(c+=c?`  ${s.EO.Dot}  ${t}`:t)}switch(e.type){case"bare":l="(bare)",a=new r.ThemeIcon("folder");break;case"branch":l=e.branch?.name??"unknown",a=(0,R.BI)(o.m.instance,e.branch);break;case"detached":l=(0,C.pV)(e.sha),a=new r.ThemeIcon("git-commit")}return{label:n?.checked?`${l}${(0,b.eV)("$(check)",2)}`:l,description:u?` ${u}`:void 0,detail:n?.path?`${c?`${c}  `:""}${i?`${s.EO.Warning} (missing)`:"$(folder)"} ${e.friendlyPath}`:c,alwaysShow:n?.alwaysShow,buttons:n?.buttons,picked:t,item:e,opened:e.opened,hasChanges:n?.status?.hasChanges,iconPath:a}}(e,null!=l&&("string"==typeof l?e.uri.toString()===l:l.includes(e.uri.toString())),c,{buttons:t,includeStatus:a,path:!0,status:u})})),e=>"fulfilled"===e.status?e.value:void 0);return(0,y.xG)(c)}async function Y(e,t,{buttons:i,filter:r,picked:s,sort:o}={}){let n,a,l;if(null==e)return[];let u=!1;if(e instanceof f.LN||1===e.length){u=!0;let i=e instanceof f.LN?e:e[0],[s,c,h]=await Promise.allSettled([t.includes("branches")?(0,k.Ao)(i):void 0,t.includes("branches")?i.git.branches().getBranches({filter:r?.branches,sort:"boolean"==typeof o?o:o?.branches}):void 0,t.includes("tags")?i.git.tags().getTags({filter:r?.tags,sort:!0}):void 0]);n=(0,M.Ro)(s),a=(0,M.Ro)(c)?.values??[],l=(0,M.Ro)(h)?.values??[]}else{let[i,s,u]=await Promise.allSettled([t.includes("branches")?(0,k.Ao)(e):void 0,t.includes("branches")?Promise.allSettled(e.map(e=>e.git.branches().getBranches({filter:r?.branches,sort:"boolean"==typeof o?o:o?.branches}))):void 0,t.includes("tags")?Promise.allSettled(e.map(e=>e.git.tags().getTags({filter:r?.tags,sort:"boolean"==typeof o?o:o?.tags}))):void 0]);n=(0,M.Ro)(i);let c="fulfilled"===s.status?s.value?.filter(e=>"fulfilled"===e.status)?.map(e=>e.value.values):void 0,h="fulfilled"===u.status?u.value?.filter(e=>"fulfilled"===e.status)?.map(e=>e.value.values):void 0;t.includes("branches")&&null!=c&&(a=(0,y.Xn)((0,L.E$)(c,(e,t)=>e.name===t.name))),t.includes("tags")&&null!=h&&(l=(0,y.uO)((0,L.E$)(h,(e,t)=>e.name===t.name)))}return(null==a||0===a.length)&&(null==l||0===l.length)?[]:null!=a&&0!==a.length&&(null==l||0===l.length)?[(0,D.uK)("Branches"),...await Promise.all(a.filter(e=>!e.remote).map(e=>(0,$.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!u&&"checkmark",ref:u,status:u,type:"remote",worktree:n?.has(e.id)}))),(0,D.uK)("Remote Branches"),...await Promise.all(a.filter(e=>e.remote).map(e=>(0,$.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!u&&"checkmark",ref:u,status:u,type:"remote"})))]:null!=l&&0!==l.length&&(null==a||0===a.length)?l.map(e=>(0,$.iq)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,message:!1,ref:u})):[(0,D.uK)("Branches"),...await Promise.all(a.filter(e=>!e.remote).map(e=>(0,$.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!u&&"checkmark",ref:u,status:u,worktree:n?.has(e.id)}))),(0,D.uK)("Tags"),...l.map(e=>(0,$.iq)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,message:!1,ref:u,type:!0})),(0,D.uK)("Remote Branches"),...await Promise.all(a.filter(e=>e.remote).map(e=>(0,$.IC)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:i,current:!!u&&"checkmark",ref:u,status:u,type:"remote"})))]}function K(e,t){return async(i,r)=>{let s=!1;if(r.startsWith("#")&&(s=!0,r=r.substring(1)),null==e)return!1;if(Array.isArray(e)){if(1!==e.length)return!1;e=e[0]}if(s&&t?.ranges&&(0,C.p8)(r))return i.items=[(0,$.vS)(r,e.path,!0,{alwaysShow:!0,buttons:t?.buttons,ref:!1,icon:!1})],!0;if(!await e.git.refs().isValidReference(r))return!!s&&(i.items=[(0,_.Du)(_.WL.Back,!0,{label:"Enter a reference or commit SHA"})],!0);if(!s&&await e.git.refs().hasBranchOrTag({filter:{branches:e=>e.name.includes(r),tags:e=>e.name.includes(r)}}))return!1;let o=await e.git.commits().getCommit(r);return i.items=[await (0,$.Rc)(o,!0,{alwaysShow:!0,buttons:t?.buttons,compact:!0,icon:"avatar"})],!0}}async function*Z(e,t,i){let r=(0,W.TX)({title:H(i.title??t.title,e,t),placeholder:i.placeholder??"Branch name",value:i.value,prompt:i.prompt??"Please provide a new branch name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid branch name"];if("repo"in e)return await e.repo.git.refs().checkIfCouldBeValidBranchOrTagName(t)?await e.repo.git.branches().getBranch(t)?[!1,`A branch named '${t}' already exists`]:[!0,void 0]:[!1,`'${t}' isn't a valid branch name`];let i=!0;for(let i of e.repos){if(!await i.git.refs().checkIfCouldBeValidBranchOrTagName(t))return[!1,`'${t}' isn't a valid branch name`];if(await i.git.branches().getBranch(t))return[!1,`A branch named '${t}' already exists`]}return[!0,void 0]}}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}async function*J(e,t,i){let r=(0,W.TX)({title:H(i.title??t.title,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote name",validate:async t=>null==t?[!1,void 0]:0===(t=t.trim()).length?[!1,"Please enter a valid remote name"]:/[^a-zA-Z0-9-_.]/.test(t)?[!1,`'${t}' isn't a valid remote name`]:"repo"in e&&0!==(await e.repo.git.remotes().getRemotes({filter:e=>e.name===t})).length?[!1,`A remote named '${t}' already exists`]:[!0,void 0]}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}async function*X(e,t,i){let r=(0,W.TX)({title:H(i.title??t.title,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote URL",validate:e=>{if(null==e)return[!1,void 0];if(0===(e=e.trim()).length)return[!1,"Please enter a valid remote URL"];let t=w.vw.test(e);return[t,t?void 0:`'${e}' isn't a valid remote URL`]}}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}async function*ee(e,t,i){let r=(0,W.TX)({title:H(i.title??t.title,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter tag name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid tag name"];if("repo"in e){let i=await e.repo.git.refs().checkIfCouldBeValidBranchOrTagName(t);return[i,i?void 0:`'${t}' isn't a valid tag name`]}let i=!0;for(let i of e.repos)if(!await i.git.refs().checkIfCouldBeValidBranchOrTagName(t))return[!1,`'${t}' isn't a valid branch name`];return[!0,void 0]}}),s=yield r;return(0,W.wc)(r,e,s)&&await (0,W.Ss)(r,e,s)?s:W.Lt}function*et(e,t,{filter:i,picked:r,placeholder:s,title:o}){let a=V(e.repo,{buttons:[G.yi],filter:i,picked:r}).then(e=>0===e.length?[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]:e),l=(0,W.Ac)({title:H(o??t.title,e,t),placeholder:t=>t?s:`No branches found in ${e.repo.formattedName}`,matchOnDetail:!0,items:a,onDidClickItemButton:(e,t,{item:i})=>{t===G.yi&&n._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await n._c(i,{select:!0,focus:!1,expand:!0})}}),u=yield l;return(0,W.fg)(l,e,u)?u[0].item:W.Lt}function*ei(e,t,{filter:i,picked:r,placeholder:s,emptyPlaceholder:o,sort:a,title:l}){let u=V(e.repo,{buttons:[G.yi],filter:i,picked:r,sort:a}).then(e=>e.length?e:[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]),c=(0,W.Ac)({multiselect:!0,title:H(l??t.title,e,t),placeholder:t=>t?s:o??`No branches found in ${e.repo.formattedName}`,matchOnDetail:!0,items:u,onDidClickItemButton:(e,t,{item:i})=>{t===G.yi&&n._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await n._c(i,{select:!0,focus:!1,expand:!0})}}),h=yield c;return(0,W.fg)(c,e,h)?h.map(e=>e.item):W.Lt}function*er(e,t,{filter:i,picked:r,placeholder:s,title:o,value:l,additionalButtons:u,ranges:c}){t.showTags=!0;let h=new G.y2(t.showTags),p=async()=>Y(e.repo,t.showTags?["branches","tags"]:["branches"],{buttons:"boolean"==typeof t.pickCommitForItem?[G.ig,G.yi]:[G.yi],filter:i,picked:r,sort:!0}),g=p().then(e=>0===e.length?[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]:e),m=(0,W.Ac)({title:H(o??t.title,e,t),placeholder:i=>i?`${"string"==typeof s?s:s(t)} (or enter a revision using #)`:`No branches${t.showTags?" or tags":""} found in ${e.repo.formattedName}`,matchOnDescription:!0,matchOnDetail:!0,value:l,selectValueWhenShown:!0,items:g,additionalButtons:[...u??[],h],onDidClickItemButton:(e,i,{item:r})=>i===G.ig?(t.pickCommitForItem=!0,!0):(i===G.yi&&((0,S.gC)(r)?n._c(r,{select:!0,focus:!1,expand:!0}):(0,S.A1)(r)?d._c(r,{select:!0,focus:!1,expand:!0}):(0,S.bv)(r)&&a.JX(r,{pin:!1,preserveFocus:!0})),!1),onDidClickButton:async(i,r)=>{if(r===h){i.busy=!0;try{t.showTags=!t.showTags,h.on=t.showTags;let r=await p();i.placeholder=0===r.length?`${e.repo.formattedName} has no branches${t.showTags?" or tags":""}`:`${"string"==typeof s?s:s(t)} (or enter a revision using #)`,i.items=r}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{(0,S.gC)(i)?n._c(i,{select:!0,focus:!1,expand:!0}):(0,S.A1)(i)?d._c(i,{select:!0,focus:!1,expand:!0}):(0,S.bv)(i)&&a.JX(i,{pin:!1,preserveFocus:!0})},onValidateValue:K(e.repo,{ranges:c})}),f=yield m;return(0,W.fg)(m,e,f)?f[0].item:W.Lt}function*es(e,t,{allowCreate:i,filter:s,picked:o,placeholder:l,title:u,value:c}){t.showTags=1===e.repos.length;let h=new G.y2(t.showTags),p={label:"Create New Branch...",iconPath:new r.ThemeIcon("plus"),alwaysShow:!0,item:""},g={label:"Choose a Pull Request...",iconPath:new r.ThemeIcon("git-pull-request"),alwaysShow:!0,item:(0,W.$t)("gitlens.showLaunchpad",{source:"quick-wizard"})},m=()=>Y(e.repos,t.showTags?["branches","tags"]:["branches"],{buttons:[G.yi],filter:{branches:1===e.repos.length?void 0:e=>!e.remote,...s},picked:o??e.reference?.ref,sort:{branches:{orderBy:"date:desc"},tags:{orderBy:"date:desc"}}}),f=m().then(e=>0===e.length?[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]:i?[p,g,...e]:[g,...e]),w=(0,W.Ac)({title:H(u??t.title,e,t),placeholder:i=>i?`${"string"==typeof l?l:l(t)} (or enter a revision using #)`:`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`}`,matchOnDescription:!0,matchOnDetail:!0,value:c??((0,S.bv)(e.reference)?e.reference.ref:void 0),selectValueWhenShown:!0,items:f,additionalButtons:[h],onDidChangeValue:e=>(p.item=e.value,!0),onDidClickItemButton:(e,t,{item:i})=>{!("string"==typeof i||(0,W.h8)(i))&&t===G.yi&&((0,S.gC)(i)?n._c(i,{select:!0,focus:!1,expand:!0}):(0,S.A1)(i)?d._c(i,{select:!0,focus:!1,expand:!0}):(0,S.bv)(i)&&a.JX(i,{pin:!1,preserveFocus:!0}))},onDidClickButton:async(i,r)=>{if(r===h){i.busy=!0;try{t.showTags=!t.showTags,h.on=t.showTags;let r=await m();i.placeholder=0===r.length?`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repos`}`:`${"string"==typeof l?l:l(t)} (or enter a revision using #)`,i.items=r}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{!("string"==typeof i||(0,W.h8)(i))&&((0,S.gC)(i)?n._c(i,{select:!0,focus:!1,expand:!0}):(0,S.A1)(i)?d._c(i,{select:!0,focus:!1,expand:!0}):(0,S.bv)(i)&&a.JX(i,{pin:!1,preserveFocus:!0}))},onValidateValue:K(e.repos)}),v=yield w;return(0,W.fg)(w,e,v)?v[0].item:W.Lt}async function*eo(e,t,{ignoreFocusOut:i,log:r,onDidLoadMore:s,picked:o,placeholder:n,showInSideBarCommand:l,showInSideBarButton:u,title:c}){async function h(e){if(!e?.commits.size)return[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)];let t=[G.kk,G.yi];(0,q.$1)(e.commits)?.[1].file!=null&&t.splice(0,0,G.Q8);let i=(0,L.x1)(await Promise.allSettled((0,q.Tj)(e.commits.values(),async e=>(0,$.Rc)(e,null!=o&&("string"==typeof o?e.ref===o:o.includes(e.ref)),{buttons:t,compact:!0,icon:"avatar"}))),e=>"fulfilled"===e.status?e.value:void 0);return e.hasMore&&i.push((0,_.Du)(_.WL.LoadMore)),i}let d=h(r).then(e=>null!=l?[l,...e]:e),p=(0,W.Ac)({title:H(c??t.title,e,t),placeholder:"string"==typeof n?n:n(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,value:"string"==typeof o&&r?.count===0?o:void 0,selectValueWhenShown:!0,items:d,onDidLoadMore:async e=>(e.keepScrollPosition=!0,r=await r?.more?.(x.H.get("advanced.maxListItems")),s?.(r),"string"!=typeof n&&(e.placeholder=n(t,r)),h(r)),additionalButtons:[...u?.button!=null?[u?.button]:[],...r?.hasMore?[G.TR]:[]],onDidClickItemButton:(e,t,i)=>{if(!D.Fj.is(i))switch(t){case G.kk:a.JX(i.item,{pin:!1,preserveFocus:!0});break;case G.yi:a._c(i.item,{select:!0,focus:!1,expand:!0});break;case G.Q8:{let e=i.item.file?.path;null!=e&&a.eX(e,i.item)}}},onDidClickButton:(e,t)=>{if(null==r)return;let i=e.activeItems.filter(e=>!D.Fj.is(e));t===u?.button&&u.onDidClick(i)},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{let i=e.activeItems.filter(e=>!D.Fj.is(e));"ctrl+right"===t?a.JX(i[0].item,{pin:!1,preserveFocus:!0}):await a._c(i[0].item,{select:!0,focus:!1,expand:!0})},onValidateValue:K(e.repo,{buttons:[G.kk,G.yi]})}),g=yield p;return(0,W.fg)(p,e,g)?D.Fj.is(g[0])?((0,W.nH)(e),await g[0].execute(),W.Lt):g[0].item:W.Lt}function*en(e,t,{log:i,onDidLoadMore:r,picked:s,placeholder:o,title:n}){async function l(e){return null==e?[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]:(0,L.x1)(await Promise.allSettled((0,q.Tj)(e.commits.values(),async e=>(0,$.Rc)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[G.kk,G.yi],compact:!0,icon:"avatar"}))),e=>"fulfilled"===e.status?e.value:void 0)}let u=(0,W.Ac)({title:H(n??t.title,e,t),multiselect:null!=i,placeholder:"string"==typeof o?o:o(t,i),matchOnDescription:!0,matchOnDetail:!0,items:l(i),onDidLoadMore:async e=>(e.keepScrollPosition=!0,i=await i?.more?.(x.H.get("advanced.maxListItems")),r?.(i),"string"!=typeof o&&(e.placeholder=o(t,i)),l(i)),additionalButtons:[...i?.hasMore?[G.TR]:[]],onDidClickItemButton:(e,t,{item:i})=>{switch(t){case G.kk:a.JX(i,{pin:!1,preserveFocus:!0});break;case G.yi:a._c(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{"ctrl+right"===t?a.JX(i,{pin:!1,preserveFocus:!0}):await a._c(i,{select:!0,focus:!1,expand:!0})}}),c=yield u;return(0,W.fg)(u,e,c)?c.map(e=>e.item):W.Lt}function*ea(e,t,i="Choose contributors"){async function r(){let t=(await o.m.instance.git.getOrOpenScmRepository(e.repo.path))?.inputBox.value,i=[];for(let r of(await e.repo.git.contributors().getContributors()))i.push(await (0,v.N)(r,t?.includes(r.getCoauthor()),{buttons:[G.yi]}));return(0,y.tB)(i)}let s=(0,W.Ac)({title:H(t.title,e,t),allowEmpty:!0,multiselect:!0,placeholder:i,matchOnDescription:!0,items:r(),onDidClickItemButton:(e,t,{item:i})=>{t===G.yi&&l._(i,{select:!0,focus:!1,expand:!0})},onDidChangeSelection:(0,U.s)((e,t)=>{if(!e.canSelectMany||e.busy)return;let i=!1;for(let r of e.items){if((0,_.hr)(r))continue;let e=t.includes(r);(r.picked!==e||r.alwaysShow!==e)&&(r.alwaysShow=r.picked=e,i=!0)}i&&(e.items=(0,y.tB)([...e.items]),e.selectedItems=t)},10),keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,t,{item:i})=>{l._(i,{select:!0,focus:!1,expand:!0})}}),n=yield s;return(0,W.fg)(s,e,n)?n.map(e=>e.item):W.Lt}function*el(e,t,{filter:i,picked:r,placeholder:s,title:o}){let n=j(e.repo,{buttons:[G.yi],filter:i,picked:r}).then(e=>0===e.length?[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]:e),a=(0,W.Ac)({title:H(o??t.title,e,t),placeholder:t=>t?s:`No remotes found in ${e.repo.formattedName}`,matchOnDetail:!0,items:n,onDidClickItemButton:(e,t,{item:i})=>{t===G.yi&&u._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await u._c(i,{select:!0,focus:!1,expand:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l[0].item:W.Lt}async function*eu(e,t,i="Choose a repository"){if("string"==typeof e.repo&&(e.repo=o.m.instance.git.getRepository(e.repo),null!=e.repo))return e.repo;let r=e.repo??await o.m.instance.git.getOrOpenRepositoryForEditor(),s=(0,W.Ac)({title:t.title,placeholder:0===t.repos.length?`${i} \u2014 no opened repositories found`:i,items:0===t.repos.length?[(0,_.Du)(_.WL.Cancel,!0,{label:"Cancel",detail:"No opened repositories found"})]:Promise.all(t.repos.map(e=>(0,$.sS)(e,e.id===r?.id,{branch:!0,buttons:[G.yi],fetched:!0,status:!0}))),onDidClickItemButton:(e,i,{item:r})=>{i===G.yi&&c._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,i,{item:r})=>{c._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),n=yield s;return(0,W.fg)(s,e,n)?n[0].item:W.Lt}async function*ec(e,t,i){let r;if(i={placeholder:"Choose repositories",skipIfPossible:!1,...i},null!=e.repos)if((0,L.Bo)(e.repos)){if(r=(0,L.x1)(e.repos,e=>t.repos.find(t=>t.path===e)),i.skipIfPossible&&0!==r.length&&e.repos.length===r.length)return r}else r=e.repos;else{let e=await o.m.instance.git.getOrOpenRepositoryForEditor();r=null!=e?[e]:[]}let s=(0,W.Ac)({multiselect:!0,title:t.title,placeholder:0===t.repos.length?`${i.placeholder} \u2014 no opened repositories found`:i.placeholder,items:0===t.repos.length?[(0,_.Du)(_.WL.Cancel,!0,{label:"Cancel",detail:"No opened repositories found"})]:Promise.all(t.repos.map(e=>(0,$.sS)(e,r.some(t=>t.id===e.id),{branch:!0,buttons:[G.yi],fetched:!0,status:!0}))),onDidClickItemButton:(e,i,{item:r})=>{i===G.yi&&c._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:(e,i,{item:r})=>{c._c(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),n=yield s;return(0,W.fg)(s,e,n)?n.map(e=>e.item):W.Lt}function*eh(e,t,{ignoreFocusOut:i,gitStash:r,picked:s,placeholder:o,title:n}){let a=(0,W.Ac)({title:H(n??t.title,e,t),placeholder:"string"==typeof o?o:o(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==r?[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]:[...(0,q.Tj)(r.stashes.values(),e=>(0,$.rA)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[G.kk],compact:!0,icon:!0}))],onDidClickItemButton:(e,t,{item:i})=>{t===G.kk&&h.JX(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await h.JX(i,{pin:!1,preserveFocus:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l[0].item:W.Lt}function*ed(e,t,{ignoreFocusOut:i,gitStash:r,picked:s,placeholder:o,title:n}){let a=(0,W.Ac)({title:H(n??t.title,e,t),multiselect:!0,placeholder:"string"==typeof o?o:o(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==r?[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]:[...(0,q.Tj)(r.stashes.values(),e=>(0,$.rA)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:[G.kk],compact:!0,icon:!0}))],onDidClickItemButton:(e,t,{item:i})=>{t===G.kk&&h.JX(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await h.JX(i,{pin:!1,preserveFocus:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l.map(e=>e.item):W.Lt}function*ep(e,t,{filter:i,picked:r,placeholder:s,title:o}){let n=z(e.repo,{buttons:[G.yi],filter:i,picked:r}).then(e=>0===e.length?[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]:e),a=(0,W.Ac)({multiselect:!0,title:H(o??t.title,e,t),placeholder:t=>t?s:`No tags found in ${e.repo.formattedName}`,matchOnDetail:!0,items:n,onDidClickItemButton:(e,t,{item:i})=>{t===G.yi&&d._c(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await d._c(i,{select:!0,focus:!1,expand:!0})}}),l=yield a;return(0,W.fg)(a,e,l)?l.map(e=>e.item):W.Lt}function*eg(e,t,{excludeOpened:i,filter:r,includeStatus:s,picked:o,placeholder:n,title:a}){let l=Q(t.worktrees??e.repo,{buttons:[G.xU,G.yi],excludeOpened:i,filter:r,includeStatus:s,picked:o}).then(e=>0===e.length?[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]:e),u=(0,W.Ac)({title:H(a??t.title,e,t),placeholder:t=>t?n:`No worktrees found in ${e.repo.formattedName}`,matchOnDetail:!0,items:l,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case G.xU:(0,B.OH)(i.uri,{location:"newWindow"});break;case G.yi:p._c(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await p._c(i,{select:!0,focus:!1,expand:!0})}}),c=yield u;return(0,W.fg)(u,e,c)?c[0].item:W.Lt}function*em(e,t,{excludeOpened:i,filter:r,includeStatus:s,picked:o,placeholder:n,title:a}){let l=Q(t.worktrees??e.repo,{buttons:[G.xU,G.yi],excludeOpened:i,filter:r,includeStatus:s,picked:o}).then(e=>0===e.length?[(0,_.Du)(_.WL.Back,!0),(0,_.Du)(_.WL.Cancel)]:e),u=(0,W.Ac)({multiselect:!0,title:H(a??t.title,e,t),placeholder:t=>t?n:`No worktrees found in ${e.repo.formattedName}`,matchOnDetail:!0,items:l,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case G.xU:(0,B.OH)(i.uri,{location:"newWindow"});break;case G.yi:p._c(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,{item:i})=>{await p._c(i,{select:!0,focus:!1,expand:!0})}}),c=yield u;return(0,W.fg)(u,e,c)?c.map(e=>e.item):W.Lt}function*ef(e,t){let i=(0,W.Ac)({title:H((0,S.M4)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,S.M4)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:ew(e),onDidClickItemButton:(t,i,r)=>{switch(i){case G.kk:(0,S.Nf)(e.reference)?h.JX(e.reference,{pin:!1,preserveFocus:!0}):a.JX(e.reference,{pin:!1,preserveFocus:!0});break;case G.yi:(0,S.Nf)(e.reference)?h._c(e.reference,{select:!0,focus:!1,expand:!0}):a._c(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),r=yield i;return(0,W.fg)(i,e,r)?r[0]:W.Lt}async function ew(e){let t,i=[new I._w(e.reference),new I.bO(e.reference)];if((0,g.kk)(e.reference))i.push((0,D.uK)("Actions"),new $.$N("Apply Stash...",{command:"stash",state:{subcommand:"apply",repo:e.repo,reference:e.reference}}),new $.$N("Rename Stash...",{command:"stash",state:{subcommand:"rename",repo:e.repo,reference:e.reference}}),new $.$N("Drop Stash...",{command:"stash",state:{subcommand:"drop",repo:e.repo,references:[e.reference]}}),(0,D.uK)(),new I.Xx(e.reference));else{let r=await e.repo.git.remotes().getRemotesWithProviders({sort:!0});r?.length&&i.push((0,D.uK)((0,P.lb)(r)??"Remote"),new T.zB(r,{type:m.J.Commit,sha:e.reference.sha}),new T.oN(r,{type:m.J.Commit,sha:e.reference.sha})),i.push((0,D.uK)("Actions"));let s=await e.repo.git.branches().getBranch(),[o,n]=await Promise.all([null!=s?e.repo.git.branches().getBranchesWithCommits([e.reference.ref],s.name,{commitDate:(0,g.WM)(e.reference)?e.reference.committer.date:void 0}):void 0,!s?.remote&&s?.upstream!=null?e.reference.isPushed():void 0]);o?.length?((t=!n)&&i.push(new $.$N("Push to Commit...",{command:"push",state:{repos:e.repo,reference:e.reference}})),i.push(new $.$N("Revert Commit...",{command:"revert",state:{repo:e.repo,references:[e.reference]}}),new $.$N(`Reset ${s?.name??"Current Branch"} to Commit...`,{command:"reset",state:{repo:e.repo,reference:e.reference}}),new $.$N(`Reset ${s?.name??"Current Branch"} to Previous Commit...`,{command:"reset",state:{repo:e.repo,reference:(0,S.kA)(`${e.reference.ref}^`,e.reference.repoPath,{refType:"revision",name:`${e.reference.name}^`,message:e.reference.message})}}))):i.push(new $.$N("Cherry Pick Commit...",{command:"cherry-pick",state:{repo:e.repo,references:[e.reference]}})),i.push(new $.$N(`Rebase ${s?.name??"Current Branch"} onto Commit...`,{command:"rebase",state:{repo:e.repo,destination:e.reference}}),new $.$N("Switch to Commit...",{command:"switch",state:{repos:[e.repo],reference:e.reference}}),(0,D.uK)(),new $.$N("Create Branch at Commit...",{command:"branch",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),new $.$N("Create Tag at Commit...",{command:"tag",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),(0,D.uK)("Copy"),new I.$t(e.reference),new I.Xx(e.reference))}return i.push((0,D.uK)("Open"),new I.MO(e.reference),new I.ps(e.reference),new I.X8(e.reference),(0,D.uK)(),new I.zR(e.reference),new I.IJ(e.reference)),i.push((0,D.uK)("Compare"),new I.ln(e.reference),new I.Wq(e.reference)),i.push((0,D.uK)(),new I.Y7(e.reference),new I.Tw(e.reference)),i.push((0,D.uK)("Browse"),new I.qB(e.reference,{openInNewWindow:!1}),new I.qB(e.reference,{before:!0,openInNewWindow:!1}),new I.qB(e.reference,{openInNewWindow:!0}),new I.qB(e.reference,{before:!0,openInNewWindow:!0})),i.unshift(new I.o3(e.reference,{unpublished:t,hint:"Click to see all changed files"})),i}function*ev(e,t,i){e.reference.fileset?.files;let r=(0,W.Ac)({title:H((0,S.M4)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,S.M4)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:[new I.o3(e.reference,{picked:null==e.fileName,hint:`Click to see ${(0,g.kk)(e.reference)?"stash":"commit"} actions`}),(0,D.uK)("Files"),...e.reference.fileset?.files.map(t=>new I.p1(e.reference,t,i?.picked===t.path))??[]],matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case G.kk:(0,S.Nf)(e.reference)?h.JX(e.reference,{pin:!1,preserveFocus:!0}):a.JX(e.reference,{pin:!1,preserveFocus:!0});break;case G.yi:(0,S.Nf)(e.reference)?h._c(e.reference,{select:!0,focus:!1,expand:!0}):a._c(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),s=yield r;return(0,W.fg)(r,e,s)?s[0]:W.Lt}function*ey(e,t){let i=(0,W.Ac)({title:H((0,S.M4)(e.reference,{capitalize:!0,icon:!1}),e,t,`${(0,b.eV)(s.EO.Dot,2,2)}${(0,O.j)(e.fileName,{fileOnly:!0})}`),placeholder:`${(0,O.j)(e.fileName,{relativeTo:e.repo.path})} in ${(0,S.M4)(e.reference,{icon:!1})}`,ignoreFocusOut:!0,items:eb(e),matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case G.kk:(0,S.Nf)(e.reference)?h.JX(e.reference,{pin:!1,preserveFocus:!0}):a.JX(e.reference,{pin:!1,preserveFocus:!0});break;case G.yi:(0,S.Nf)(e.reference)?h._c(e.reference,{select:!0,focus:!1,expand:!0}):a._c(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),r=yield i;return(0,W.fg)(i,e,r)?r[0]:W.Lt}async function eb(e){let t=await e.reference.findFile(e.fileName);if(null==t)return[];let i=[new I._w(e.reference),new I.bO(e.reference)];if((0,g.kk)(e.reference))i.push((0,D.uK)(),new I.Xx(e.reference),(0,D.uK)("Actions"),new I.Zq(e.reference,t),new I.$I(e.reference,t),(0,D.uK)(),new I.Xx(e.reference));else{let r=await e.repo.git.remotes().getRemotesWithProviders({sort:!0});r?.length&&i.push((0,D.uK)((0,P.lb)(r)??"Remote"),new T.zB(r,{type:m.J.Revision,fileName:e.fileName,commit:e.reference}),new T.oN(r,{type:m.J.Revision,fileName:e.fileName,commit:e.reference}),(0,D.uK)(),new T.zB(r,{type:m.J.Commit,sha:e.reference.ref}),new T.oN(r,{type:m.J.Commit,sha:e.reference.sha})),i.push((0,D.uK)("Actions"),new I.Zq(e.reference,t),new I.$I(e.reference,t),(0,D.uK)("Copy"),new I.$t(e.reference),new I.Xx(e.reference))}return i.push((0,D.uK)("Open"),new I.NH(e.reference,e.fileName),new I.S5(e.reference,e.fileName),new I.EG(e.reference,e.fileName),(0,D.uK)()),"D"!==t.status&&i.push(new I.Kw(e.reference,t)),i.push(new I.bi(e.reference,t)),i.push((0,D.uK)("Compare"),new I.ln(e.reference),new I.Wq(e.reference)),i.push((0,D.uK)("Browse"),new I.qB(e.reference,{openInNewWindow:!1}),new I.qB(e.reference,{before:!0,openInNewWindow:!1}),new I.qB(e.reference,{openInNewWindow:!0}),new I.qB(e.reference,{before:!0,openInNewWindow:!0})),i.unshift(new I.o3(e.reference,{file:t,hint:"Click to see all changed files"})),i}function*eC(e,t){let i=t.status.getUpstreamStatus({expand:!0,separator:", "}),s=t.status.getFormattedDiffStatus({expand:!0,separator:", "}),o=(0,W.Ac)({title:H(t.title,e,t),placeholder:i?`${i}, ${s}`:s,ignoreFocusOut:!0,items:function(e,t){let i,s=[],o=t.status.computeWorkingTreeStatus();return i=0===o.staged&&0===o.unstaged?"No working tree changes":`$(files) ${o.staged?`${(0,b.td)("staged file",o.staged)} (${o.stagedStatus})`:""}${o.unstaged?`${o.staged?", ":""}${(0,b.td)("unstaged file",o.unstaged)} (${o.unstagedStatus})`:""}`,t.status.upstream?(0===t.status.upstream.state.ahead&&0===t.status.upstream.state.behind?s.push((0,_.Du)(_.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} is up to date with $(git-branch) ${t.status.upstream?.name}`,detail:i})):0!==t.status.upstream.state.ahead&&0!==t.status.upstream.state.behind?s.push((0,_.Du)(_.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} has diverged from $(git-branch) ${t.status.upstream?.name}`,detail:i})):0!==t.status.upstream.state.ahead?s.push((0,_.Du)(_.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} is ahead of $(git-branch) ${t.status.upstream?.name}`,detail:i})):0!==t.status.upstream.state.behind&&s.push((0,_.Du)(_.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} is behind $(git-branch) ${t.status.upstream?.name}`,detail:i})),0!==t.status.upstream.state.behind&&s.push(new $.$N(`$(cloud-download) ${(0,b.td)("commit",t.status.upstream.state.behind)} behind`,{command:"log",state:{repo:e.repo,reference:(0,S.kA)((0,C.Xn)(t.status.ref,t.status.upstream?.name,".."),e.repo.path)}})),0!==t.status.upstream.state.ahead&&s.push(new $.$N(`$(cloud-upload) ${(0,b.td)("commit",t.status.upstream.state.ahead)} ahead`,{command:"log",state:{repo:e.repo,reference:(0,S.kA)((0,C.Xn)(t.status.upstream?.name,t.status.ref,".."),e.repo.path)}}))):s.push((0,_.Du)(_.WL.Noop,!0,{label:`$(git-branch) ${t.status.branch} has no upstream`,detail:i})),t.status.files.length&&(s.push(new I.aY(o.stagedAddsAndChanges.concat(o.unstagedAddsAndChanges))),s.push(new I.Ol(o.stagedAddsAndChanges.concat(o.unstagedAddsAndChanges)))),o.staged>0&&(s.push(new I.aY(o.stagedAddsAndChanges,"Open Staged Files")),s.push(new I.Ol(o.stagedAddsAndChanges,"Open Only Staged Files"))),o.unstaged>0&&(s.push(new I.aY(o.unstagedAddsAndChanges,"Open Unstaged Files")),s.push(new I.Ol(o.unstagedAddsAndChanges,"Open Only Unstaged Files"))),t.status.files.length&&s.push(new D.Fj("Close Unchanged Files",new r.ThemeIcon("x"),"gitlens.closeUnchangedFiles")),s}(e,t),keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t,i)=>{await i.onDidPressKey(t)}}),n=yield o;return(0,W.fg)(o,e,n)?n[0]:W.Lt}async function*eR(e,t,i,s){let n,a=await e.git.access(s,t.repo?.path);if(a.allowed)return a;let l=[];if(a.subscription.current.account?.verified===!1)l.push((0,_.Du)(_.WL.RequiresVerification,!0),(0,D.uK)(),(0,_.Du)(_.WL.Cancel)),n="You must verify your email before you can continue";else{if(null==a.subscription.required)return a;let t=await e.productConfig.getApplicablePromo(a.subscription.current.state,"gate"),i=t?.content?.quickpick.detail;switch(s){case"graph":case"timeline":case"worktrees":n=(0,A.zx)(a.subscription.required)&&null!=a.subscription.current.account?"Pro feature — requires GitLens Pro for use on privately-hosted repos":"Pro feature — requires a trial or GitLens Pro for use on privately-hosted repos";break;default:n=(0,A.zx)(a.subscription.required)&&null!=a.subscription.current.account?"Pro feature — requires GitLens Pro":"Pro feature — requires a trial or GitLens Pro"}(0,A.zx)(a.subscription.required)&&null!=a.subscription.current.account?l.push((0,_.Du)(_.WL.RequiresPaidSubscription,!0,{detail:i}),(0,D.uK)(),(0,_.Du)(_.WL.Cancel)):null!=a.subscription.current.account||(0,A.lc)(a.subscription.current)?l.push((0,_.Du)(_.WL.StartProTrial,!0),(0,_.Du)(_.WL.SignIn),(0,D.uK)(),(0,_.Du)(_.WL.Cancel)):l.push((0,_.Du)(_.WL.StartPreview,!0),(0,D.uK)(),(0,_.Du)(_.WL.Cancel))}switch(s){case"launchpad":l.splice(0,0,(0,_.Du)(_.WL.Cancel,void 0,{label:"Launchpad prioritizes your pull requests to keep you focused and your team unblocked",detail:"Click to learn more about Launchpad",iconPath:new r.ThemeIcon("rocket"),onDidSelect:()=>void(0,E.RS)("gitlens.openWalkthrough",{step:"accelerate-pr-reviews",source:{source:"launchpad",detail:"info"}})}),(0,D.uK)());break;case"startWork":l.splice(0,0,(0,_.Du)(_.WL.Noop,void 0,{label:"Start work on an issue from your connected integrations",iconPath:new r.ThemeIcon("issues")}),(0,D.uK)());break;case"associateIssueWithBranch":l.splice(0,0,(0,_.Du)(_.WL.Noop,void 0,{label:"Connect your branches to their associated issues in Home view",iconPath:new r.ThemeIcon("issues")}),(0,D.uK)());break;case"worktrees":l.splice(0,0,(0,_.Du)(_.WL.Noop,void 0,{label:"Worktrees minimize context switching by allowing simultaneous work on multiple branches",iconPath:(0,F.G5)(o.m.instance,"icon-repo.svg")}))}let u=(0,W.Ac)({title:i.title,placeholder:n,items:l,buttons:[],isConfirmationStep:!0}),c=yield u;return(0,W.fg)(u,t,c)?a:W.Lt}},7320:(e,t,i)=>{i.r(t),i.d(t,{GitHubEnterpriseIntegration:()=>GitHubEnterpriseIntegration,GitHubIntegration:()=>GitHubIntegration});var r=i(1849),s=i(6206),o=i(4793),n=i(8832),a=i(5759),l=i(4269),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor;let h=l.Mt[r.Q7.GitHub],d=Object.freeze({id:h.id,scopes:h.scopes}),p=l.Mt[r.PY.GitHubEnterprise],g=Object.freeze({id:p.id,scopes:p.scopes}),m=l.Mt[r.PY.CloudGitHubEnterprise],f=Object.freeze({id:m.id,scopes:m.scopes});let GitHubIntegrationBase=class GitHubIntegrationBase extends n.T5{async getProviderAccountForCommit({accessToken:e},t,i,r){return(await this.container.github)?.getAccountForCommit(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i,r){return(await this.container.github)?.getAccountForEmail(this,e,t.owner,t.name,i,{...r,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e},t){return(await this.container.github)?.getDefaultBranch(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t,i){return(await this.container.github)?.getIssueOrPullRequest(this,e,t.owner,t.name,Number(i),{baseUrl:this.apiBaseUrl})}async getProviderIssue({accessToken:e},t,i){return(await this.container.github)?.getIssue(this,e,t.owner,t.name,Number(i),{baseUrl:this.apiBaseUrl,includeBody:!0})}async getProviderPullRequest({accessToken:e},t,i){return(await this.container.github)?.getPullRequest(this,e,t.owner,t.name,parseInt(i,10),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,r,s){let{include:o,...n}=s??{},a=(await Promise.resolve().then(i.bind(i,3213))).toGitHubPullRequestState;return(await this.container.github)?.getPullRequestForBranch(this,e,t.owner,t.name,r,{...n,include:o?.map(e=>a(e)),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t,i){return(await this.container.github)?.getPullRequestForCommit(this,e,t.owner,t.name,i,{baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata({accessToken:e},t,i){return(await this.container.github)?.getRepositoryMetadata(this,e,t.owner,t.name,{baseUrl:this.apiBaseUrl},i)}async searchProviderMyPullRequests({accessToken:e},t,i,r){return(await this.container.github)?.searchMyPullRequests(this,e,{repos:t?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl,silent:r},i)}async searchProviderMyIssues({accessToken:e},t,i){return(await this.container.github)?.searchMyIssues(this,e,{repos:t?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl,includeBody:!0},i)}async searchProviderPullRequests({accessToken:e},t,i,r){return(await this.container.github)?.searchPullRequests(this,e,{search:t,repos:i?.map(e=>`${e.owner}/${e.name}`),baseUrl:this.apiBaseUrl},r)}async mergeProviderPullRequest({accessToken:e},t,i){let r=t.nodeId,s=t.refs?.head?.sha;return null!=r&&null!=s&&((await this.container.github)?.mergePullRequest(this,e,r,s,{mergeMethod:i?.mergeMethod,baseUrl:this.apiBaseUrl})??!1)}async getProviderCurrentAccount({accessToken:e},t){return(await this.container.github)?.getCurrentAccount(this,e,{...t,baseUrl:this.apiBaseUrl})}getProviderPullRequestIdentityFromMaybeUrl(e){return(0,a.h)(e,this.id)}};let GitHubIntegration=class GitHubIntegration extends GitHubIntegrationBase{authProvider=d;id=r.Q7.GitHub;key=this.id;name="GitHub";get domain(){return h.domain}get apiBaseUrl(){return"https://api.github.com"}access(){return Promise.resolve(!0)}async refresh(){let e=await this.authenticationService.get(this.authProvider.id),t=await e.getSession(this.authProviderDescriptor);null==t&&this.maybeConnected?this.disconnect({silent:!0}):(t?.accessToken!==this._session?.accessToken&&(this._session=void 0),super.refresh())}};let GitHubEnterpriseIntegration=class GitHubEnterpriseIntegration extends GitHubIntegrationBase{constructor(e,t,i,s,o){super(e,t,i),this._domain=s,this.id=o,this.key=`${this.id}:${this.domain}`,this.authProvider=this.id===r.PY.GitHubEnterprise?g:f}authProvider;key;name="GitHub Enterprise";get domain(){return this._domain}get apiBaseUrl(){return`https://${this._domain}/api/v3`}async connect(e){return!!await (0,o.KH)(this.container,`Rich integration with ${this.name} is a Pro feature.`,{source:"integrations",detail:{action:"connect",integration:this.id}})&&super.connect(e)}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o)})([(0,s.Rm)()],GitHubEnterpriseIntegration.prototype,"connect",1)},7383:(e,t,i)=>{i.d(t,{PatchDetailsWebviewProvider:()=>PatchDetailsWebviewProvider});var r=i(1398),s=i(3037),o=i(1182),n=i(2320),a=i(4123),l=i(1705),u=i(6821),c=i(8219),h=i(6770),d=i(7660),p=i(5962),g=i(1902),m=i(1982),f=i(6207),w=i(711),v=i(4797),y=i(9679),b=i(5539),C=i(7864),R=i(4808);async function k(e,t,i,o){let n=(0,C.v6)(),a=[];function l(e){return e.sort((e,t)=>(e.picked?-1:1)-(t.picked?-1:1)||(0,R.wN)(e.label,t.label))}try{let u=r.window.createQuickPick();if(a.push(u,u.onDidHide(()=>n.fulfill(void 0)),u.onDidAccept(()=>u.busy?void 0:n.fulfill(u.selectedItems.map(e=>e.item))),u.onDidTriggerButton(e=>{e===y.tH&&(u.canSelectMany?u.selectedItems=[]:n.fulfill([]))})),u.ignoreFocusOut=!0,u.title=e,u.placeholder=t,u.matchOnDescription=!0,u.matchOnDetail=!0,u.canSelectMany=o?.multiselect??!0,u.buttons=o?.clearButton?[y.tH]:[],u.busy=!0,u.show(),i=await i,o?.filter!=null&&(i=i.filter(o.filter)),!n.pending)return;let c=i.map(e=>{let t={label:e.name??e.username,description:e.email,picked:o?.picked?.(e)??!1,item:e,iconPath:(0,s.m_)(e.email,void 0)};return t.alwaysShow=t.picked,t});if(!n.pending)return;return u.items=l(c),u.canSelectMany?u.selectedItems=c.filter(e=>e.picked):u.activeItems=c.filter(e=>e.picked),u.busy=!1,a.push(u.onDidChangeSelection((0,b.s)(e=>{if(!u.canSelectMany||u.busy)return;let t=!1;for(let i of u.items){let r=e.includes(i);(i.picked!==r||i.alwaysShow!==r)&&(i.alwaysShow=i.picked=r,t=!0)}t&&(u.items=l([...u.items]),u.selectedItems=e)},10))),await n.promise}finally{a.forEach(e=>void e.dispose())}}var S=i(1288),P=i(2141),A=i(2870),I=i(9615),D=i(9388),_=i(6206),$=i(9091),T=i(9686),E=i(3415),x=i(8493),O=i(486);let F="patchDetails",B=new O.Q2(F,"apply"),L=new O.Q2(F,"archive"),U=new O.Q2(F,"create"),q=new O.Q2(F,"openInGraph"),N=new O.Q2(F,"checked");new O.Q2(F,"selectRepo"),new O.Q2(F,"selectBase"),new O.Q2(F,"file/actions/execute");let M=new O.Q2(F,"file/open");new O.Q2(F,"file/openOnRemote");let W=new O.Q2(F,"file/compareWorking"),G=new O.Q2(F,"file/comparePrevious"),H=new O.Q2(F,"preferences/update"),V=new O.Q2(F,"switchMode"),j=new O.Q2(F,"cloud/copyLink");new O.Q2(F,"local/createPatch");let z=new O.Q2(F,"create/repository/check"),Q=new O.Q2(F,"update/create/metadata"),Y=new O.Q2(F,"update/draft/metadata"),K=new O.Q2(F,"update/draft/permissions"),Z=new O.Q2(F,"update/users"),J=new O.Q2(F,"update/userSelection"),X=new O.Oz(F,"explain"),ee=new O.Oz(F,"generate"),et=new O.C1(F,"didChange",!0),ei=new O.C1(F,"create/didChange"),er=new O.C1(F,"draft/didChange"),es=new O.C1(F,"preferences/didChange"),eo=new O.C1(F,"draft/didChangeRepository");new O.C1(F,"org/settings/didChange");let RepositoryRefChangeset=class RepositoryRefChangeset{constructor(e,t,i,r,s,o){this.container=e,this.repository=t,this.revision=i,this.files=r,this.checked=s,this.expanded=o}type="revision";dispose(){}suspend(){}resume(){}_checked=!1;get checked(){return this._checked}set checked(e){this._checked=e}_expanded=!1;get expanded(){return this._expanded}set expanded(e){this._expanded!==e&&(this._expanded=e)}async getChange(){return{type:"revision",repository:{name:this.repository.name,path:this.repository.path,uri:this.repository.uri.toString()},revision:this.revision,files:this.files,checked:this.checked,expanded:this.expanded}}};let RepositoryWipChangeset=class RepositoryWipChangeset{constructor(e,t,i,r,s,o){this.container=e,this.repository=t,this.revision=i,this.onDidChangeRepositoryWip=r,this.checked=s,this.expanded=o}type="wip";_disposable;dispose(){this._disposable?.dispose(),this._disposable=void 0}suspend(){this._disposable?.dispose(),this._disposable=void 0}resume(){this._files=void 0,this._expanded&&this.subscribe()}_checked=!1;get checked(){return this._checked}set checked(e){this._checked=e}_expanded=!1;get expanded(){return this._expanded}set expanded(e){this._expanded!==e&&(this._files=void 0,e?this.subscribe():(this._disposable?.dispose(),this._disposable=void 0),this._expanded=e)}_files;async getChange(){let e;return this.expanded&&(null==this._files&&(this._files=this.getFiles()),e=await this._files),{type:"wip",repository:{name:this.repository.name,path:this.repository.path,uri:this.repository.uri.toString()},revision:this.revision,files:e?.files,checked:this.checked,expanded:this.expanded}}subscribe(){null==this._disposable&&(this._disposable=r.Disposable.from(this.repository.watchFileSystem(1e3),this.repository.onDidChangeFileSystem(()=>this.onDidChangeWip(),this),this.repository.onDidChange(e=>{e.changed(c.Z_.Index,c.Ti.Any)&&this.onDidChangeWip()})))}onDidChangeWip(){this._files=void 0,this.onDidChangeRepositoryWip(this)}async getFiles(){let e=await this.container.git.status(this.repository.path).getStatus(),t=[];if(null!=e)for(let i of e.files){let e={repoPath:i.repoPath,path:i.path,status:i.status,originalPath:i.originalPath,staged:i.staged};t.push(e),i.staged&&i.wip&&t.push({...e,staged:!1})}return{files:t}}};var en=Object.defineProperty,ea=Object.getOwnPropertyDescriptor,el=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ea(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&en(t,i,o),o};let PatchDetailsWebviewProvider=class PatchDetailsWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._context={mode:"create",draft:void 0,draftGkDevUrl:void 0,draftUserState:void 0,draftVisibiltyState:void 0,create:void 0,preferences:this.getPreferences(),orgSettings:this.getOrgSettings()},this.setHostTitle(),this.host.description=o.WZ,this._disposable=r.Disposable.from(A.H.onDidChangeAny(this.onAnyConfigurationChanged,this),e.git.onDidChangeRepositories(this.onRepositoriesChanged,this),(0,I.wt)(this.onContextChanged,this))}_context;_disposable;dispose(){this._disposable.dispose()}canReuseInstance(...e){let[t]=e;if(t?.mode==="view"&&null!=t.draft)switch(t.draft.draftType){case"cloud":return this._context.draft?.draftType===t.draft.draftType&&this._context.draft.id===t.draft.id;case"local":return this._context.draft?.draftType===t.draft.draftType&&this._context.draft.patch.contents===t.draft.patch?.contents}return!1}getTelemetryContext(){return{...this.host.getTelemetryContext()}}async onShowing(e,t,...i){let[r]=i;if(r?.mode==="view"&&null!=r.draft)await this.updateViewDraftState(r.draft),this.trackViewDraft(this._context.draft,r.source);else{this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let e=r?.mode==="create"&&null!=r.create?r.create:{repositories:void 0};this.updateCreateDraftState(e)}return t?.preserveVisibility&&!this.host.visible?[!1,void 0]:[!0,void 0]}includeBootstrap(){return this.getState(this._context)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,P.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0)),(0,P.Lb)(`${this.host.id}.close`,()=>this.closeView())),e}onMessageReceived(e){switch(!0){case B.is(e):this.applyPatch(e.params);break;case j.is(e):this.copyCloudLink();break;case U.is(e):this.createDraft(e.params);break;case X.is(e):this.explainRequest(X,e);break;case ee.is(e):this.generateRequest(ee,e);break;case G.is(e):this.openFileComparisonWithPrevious(e.params);break;case W.is(e):this.openFileComparisonWithWorking(e.params);break;case M.is(e):this.openFile(e.params);break;case q.is(e):(0,P.RS)("gitlens.showInCommitGraph",{ref:(0,d.kA)(e.params.ref,e.params.repoPath,{refType:"revision"})});break;case V.is(e):this.switchMode(e.params);break;case Q.is(e):this.updateCreateMetadata(e.params);break;case Y.is(e):this.updateDraftMetadata(e.params);break;case K.is(e):this.updateDraftPermissions();break;case z.is(e):this.updateCreateCheckedState(e.params);break;case H.is(e):this.updatePreferences(e.params);break;case N.is(e):this.onPatchChecked(e.params);break;case Z.is(e):this.onInviteUsers();break;case J.is(e):this.onUpdatePatchUserSelection(e.params);break;case L.is(e):this.archiveDraft(e.params.reason)}}onRefresh(){this.updateState(!0)}onReloaded(){this.updateState(!0)}onVisibilityChanged(e){this._context.create?.changes.forEach(t=>e?t.resume():t.suspend()),e&&this.host.sendPendingIpcNotifications()}onAnyConfigurationChanged(e){(A.H.changed(e,["defaultDateFormat","views.patchDetails.files","views.patchDetails.avatars"])||A.H.changedCore(e,"workbench.tree.renderIndentGuides")||A.H.changedCore(e,"workbench.tree.indent"))&&(this._context.preferences={...this._context.preferences,...this.getPreferences()},this.updateState())}getPreferences(){return{avatars:A.H.get("views.patchDetails.avatars"),dateFormat:A.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",files:A.H.get("views.patchDetails.files"),indentGuides:A.H.getCore("workbench.tree.renderIndentGuides")??"onHover",indent:A.H.getCore("workbench.tree.indent")}}onContextChanged(e){["gitlens:gk:organization:ai:enabled","gitlens:gk:organization:drafts:enabled"].includes(e)&&(this._context.orgSettings=this.getOrgSettings(),this.updateState())}getOrgSettings(){return{ai:(0,I.SD)("gitlens:gk:organization:ai:enabled",!1),byob:(0,I.SD)("gitlens:gk:organization:drafts:byob",!1)}}onRepositoriesChanged(e){if("create"===this.mode&&null!=this._context.create){if(this._context.create?.showingAllRepos)for(let t of e.added)this._context.create.changes.set(t.uri.toString(),new RepositoryWipChangeset(this.container,t,{to:h.SU,from:"HEAD"},this.onRepositoryWipChanged.bind(this),!1,!0));for(let t of e.removed)this._context.create.changes.delete(t.uri.toString());this.notifyDidChangeCreateDraftState()}}onRepositoryWipChanged(e){this.notifyDidChangeCreateDraftState()}get mode(){return this._context.mode}setMode(e,t){this._context.mode=e,this.setHostTitle(e),(0,I.o)("gitlens:views:patchDetails:mode","editor"===A.H.get("cloudPatches.experimental.layout")?void 0:e),t||this.updateState(!0)}setHostTitle(e=this._context.mode){"create"===e?this.host.title="Create Cloud Patch":this._context.draft?.draftType==="cloud"&&"suggested_pr_change"===this._context.draft.type?this.host.title="Cloud Suggestion":this.host.title="Cloud Patch Details"}async applyPatch(e){if(null==this._context.draft||"local"===this._context.draft.draftType||!e.selected?.length)return;let t=this._context.draft.changesets?.[0];if(null==t)return;let i="branch"===e.target;for(let s of t.patches)if(e.selected.includes(s.id))try{let e,t=s.commit??await this.getOrCreateCommitForPatch(s.gkRepositoryId);if(!t)continue;if(i){let i=t.getRepository(),n=await (0,v.vt)(`Select a Branch ${o.EO.Dot} ${i?.name}`,i);if(null==n){r.window.showErrorMessage(`Unable to apply patch to '${s.repository.name}': No branch selected`);continue}let a="string"==typeof n;e={branchName:a?n:n.ref,createBranchIfNeeded:a}}await this.container.git.patch(t.repoPath)?.applyUnreachableCommitForPatch(t.ref,{stash:"prompt",...e}),r.window.showInformationMessage("Patch applied successfully")}catch(e){if(e instanceof n.AL)return;e instanceof l.ol?e.reason===l.a_.AppliedWithConflicts?r.window.showWarningMessage("Patch applied with conflicts"):r.window.showErrorMessage(e.message):r.window.showErrorMessage(`Unable to apply patch onto '${s.baseRef}': ${e.message}`)}}closeView(){if((0,I.o)("gitlens:views:patchDetails:mode",void 0),"create"===this._context.mode)this.container.views.drafts.show();else if(this._context.draft?.draftType==="cloud")if("suggested_pr_change"===this._context.draft.type){let e=this._context.draft.changesets?.[0].patches[0].repository;(0,x.$)({type:"wip",repository:ec(e)?e:void 0,source:"patchDetails"})}else this.container.views.drafts.revealDraft(this._context.draft)}copyCloudLink(){this._context.draft?.draftType==="cloud"&&r.env.clipboard.writeText(this._context.draft.deepLinkUrl)}async getOrganizationMembers(){return this.container.organizations.getMembers()}async onInviteUsers(){let e,t,i;"create"===this.mode?(i=this._context.create?.userSelections?.map(e=>e.member.id),t=this._context.create?.userSelections?.find(e=>"owner"===e.member.role),e=t?.user):(i=this._context.draftUserState?.selections?.filter(e=>"delete"!==e.change)?.map(e=>e.member.id),e=this._context.draftUserState?.users.find(e=>"owner"===e.role));let r=await k("Select Collaborators","Choose collaborators to share this patch with",this.getOrganizationMembers(),{multiselect:!0,filter:t=>t.id!==e?.userId,picked:e=>i?.includes(e.id)??!1});if(null==r)return;if("create"===this.mode){let e=r.map(e=>eh(e,void 0,"editor","add"));null!=t&&e.push(t),this._context.create.userSelections=e,this.notifyDidChangeCreateDraftState();return}let s=this._context.draftUserState,o=s.selections,n=new Map,a=new Set(r.map(e=>e.id)),l=[];for(let e of o){if(a.has(e.member.id)||"owner"===e.member.role){n.set(e.member.id,e);continue}l.push({...e,change:"delete"})}for(let e of r){let t=n.get(e.id);null!=t&&"delete"===t.change&&(t.change=void 0),l.push(null!=t?t:eh(e,void 0,"editor","add"))}l.length&&(s.selections=l,this.notifyDidChangeViewDraftState())}onUpdatePatchUserSelection(e){if("create"===this.mode){let t=this._context.create?.userSelections;if(null==t)return;if("remove"===e.role){let i=t.findIndex(t=>t.member.id===e.selection.member.id);if(-1===i)return;t.splice(i,1)}else{let i=t.find(t=>t.member.id===e.selection.member.id);if(null==i)return;i.pendingRole=e.role}this.notifyDidChangeCreateDraftState();return}let t=this._context.draftUserState.selections.find(t=>t.member.id===e.selection.member.id);null!=t&&("remove"===e.role?t.change="delete":(t.change="modify",t.pendingRole=e.role),this.notifyDidChangeViewDraftState())}async createDraft({title:e,changesets:t,description:i,visibility:s,userSelections:o}){if(!await (0,w.G5)(this.container,"Cloud Patches are a Preview feature and require an account.",{source:"cloud-patches",detail:"create"})||!await (0,f.l)(this.container))return;let n=[],a=Object.entries(t),l=1===a.length;for(let[e,t]of a){if(!l&&!1===t.checked)continue;let i=this._context.create?.changes?.get(e);if(null==i)continue;let{revision:r,repository:s}=i;"wip"===t.type&&"staged"===t.checked&&(r={...r,to:h.id}),n.push({repository:s,revision:r})}if(null!=n)try{let t=await this.container.drafts.createDraft("patch",e,n,{description:i,visibility:s});null!=o&&0!==o.length&&await this.container.drafts.addDraftUsers(t.id,o.map(e=>({userId:e.member.id,role:e.pendingRole}))),async function(){let e={title:"View Patch"},i={title:"Copy Link"},s=!1;for(;;){let o=await r.window.showInformationMessage(`Cloud Patch successfully created${s?"— link copied to the clipboard":""}`,e,i);if(o===i){r.env.clipboard.writeText(t.deepLinkUrl),s=!0;continue}o===e&&(0,g.X)({mode:"view",draft:t});break}}(),this.container.views.drafts.refresh(!0).then(()=>void this.container.views.drafts.revealDraft(t)),this.closeView()}catch(e){this.notifyDidChangeCreateDraftState(),r.window.showErrorMessage(`Unable to create draft: ${e.message}`)}}async archiveDraft(e){if(this._context.draft?.draftType!=="cloud")return;let t="suggested_pr_change"===this._context.draft.type,i="Cloud Patch";t&&(i="Code Suggestion");try{await this.container.drafts.archiveDraft(this._context.draft,{archiveReason:e}),this._context.draft={...this._context.draft,isArchived:!0,archivedReason:e};let s="archived";if(t)switch(e){case"accepted":s="accepted";break;case"rejected":s="declined"}r.window.showInformationMessage(`${i} successfully ${s}`),this.notifyDidChangeViewDraftState(),t&&this.trackArchiveDraft(this._context.draft)}catch(o){let s="archive";if(t)switch(e){case"accepted":s="accept";break;case"rejected":s="decline"}r.window.showErrorMessage(`Unable to ${s} ${i}: ${o.message}`)}}async trackArchiveDraft(e){let t;e=await this.ensureDraftContent(e);let i=e.changesets?.[0].patches.find(e=>ec(e.repository));(0,c.Z6)(i?.repository)&&(t=await this.container.git.visibility(i.repository.uri));let r=(0,m.y)(e,i);this.container.telemetry.sendEvent("codeSuggestionArchived",{provider:r?.provider,"repository.visibility":t,repoPrivacy:t,draftId:e.id,reason:e.archivedReason},{source:"patchDetails"})}async explainRequest(e,t){let i;if(this._context.draft?.draftType!=="cloud")return void this.host.respond(e,t,{error:{message:"Unable to find patch"}});try{let e=await this.getDraftPatch(this._context.draft);if(null==e)throw Error("Unable to find patch");let t=await this.getOrCreateCommitForPatch(e.gkRepositoryId);if(null==t)throw Error("Unable to find commit");let r=await this.container.ai.explainCommit(t,{source:"patchDetails",type:`draft-${this._context.draft.type}`},{progress:{location:{viewId:this.host.id}}});if(null==r)throw Error("Error retrieving content");i={result:r.parsed}}catch(e){i={error:{message:e.message}}}this.host.respond(e,t,i)}async generateRequest(e,t){let i,r;if(this._context.create?.changes!=null){for(let e of this._context.create.changes.values())if(e.repository){i=e.repository;break}}if(!i)return void this.host.respond(e,t,{error:{message:"Unable to find changes"}});try{let e=await this.container.ai.generateCreateDraft(i,{source:"patchDetails",type:"patch"},{progress:{location:{viewId:this.host.id}}});if(null==e)throw Error("Error retrieving content");r={title:e.parsed.summary,description:e.parsed.body}}catch(e){r={error:{message:e.message}}}this.host.respond(e,t,r)}async openPatchContents(e){}onPatchChecked(e){if(e.patch.repository.located||!1===e.checked)return;let t=this._context.draft?.changesets?.[0].patches?.find(t=>t.gkRepositoryId===e.patch.gkRepositoryId);null!=t&&this.getOrLocatePatchRepository(t,{prompt:!0,notifyOnLocation:!0})}notifyPatchRepositoryUpdated(e){return this.host.notify(eo,{patch:(0,E.l)({...e,contents:void 0,commit:void 0,repository:{id:e.gkRepositoryId,name:e.repository?.name??"",located:ec(e.repository)}})})}updateCreateCheckedState(e){let t=this._context.create?.changes.get(e.repoUri);null!=t&&(t.checked=e.checked,this.notifyDidChangeCreateDraftState())}updateCreateMetadata(e){null!=this._context.create&&(this._context.create.title=e.title,this._context.create.description=e.description,this._context.create.visibility=e.visibility,this.notifyDidChangeCreateDraftState())}updateDraftMetadata(e){null!=this._context.draft&&(this._context.draftVisibiltyState=e.visibility,this.notifyDidChangeViewDraftState())}async updateDraftPermissions(){let e=this._context.draft,t=e.id,i=[];null!=this._context.draftVisibiltyState&&this._context.draftVisibiltyState!==e.visibility&&i.push(this.container.drafts.updateDraftVisibility(t,this._context.draftVisibiltyState));let s=this._context.draftUserState?.selections,o=[];if(null!=s)for(let e of s)void 0!==e.change&&("delete"!==e.change&&o.push({userId:e.member.id,role:e.pendingRole}),"add"!==e.change&&i.push(this.container.drafts.removeDraftUser(t,e.member.id)));(0!==i.length||0!==o.length)&&(0!==i.length&&await Promise.all(i),0!==o.length&&await this.container.drafts.addDraftUsers(t,o),await this.createDraftUserState(e,{force:!0}),r.window.showInformationMessage("Cloud Patch successfully updated"),this.notifyDidChangeViewDraftState())}switchMode(e){this.setMode(e.mode)}_notifyDidChangeStateDebounced=void 0;updateState(e=!1){if(this.host.clearPendingIpcNotifications(),e)return void this.notifyDidChangeState();null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,b.s)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced()}async getState(e){let t,i;return"create"===e.mode&&null!=e.create&&(t=await this.getCreateDraftState(e)),"view"===e.mode&&null!=e.draft&&(i=await this.getViewDraftState(e)),(0,E.l)({...this.host.baseWebviewState,mode:e.mode,create:t,draft:i,preferences:e.preferences,orgSettings:e.orgSettings})}async notifyDidChangeState(){return this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(et,{state:await this.getState(this._context)})}updateCreateDraftState(e){let t,i=!1;if(null!=e.changes){t=this._context.create?.changes??new Map;let i=new Set;for(let s of e.changes){let e,o=this.container.git.getRepository(r.Uri.parse(s.repository.uri));null!=o&&(e="wip"===s.type?new RepositoryWipChangeset(this.container,o,s.revision,this.onRepositoryWipChanged.bind(this),s.checked??!0,s.expanded??!0):new RepositoryRefChangeset(this.container,o,s.revision,s.files,s.checked??!0,s.expanded??!0),i.add(o.uri.toString()),t.set(o.uri.toString(),e))}if(i.size!==t.size)for(let[e,r]of t)i.has(e)||(r.checked=!1)}else i=null==e.repositories,t=new Map((e.repositories??this.container.git.openRepositories).map(e=>[e.uri.toString(),new RepositoryWipChangeset(this.container,e,{to:h.SU,from:"HEAD"},this.onRepositoryWipChanged.bind(this),!0,!0)]));this._context.create={title:e.title,description:e.description,changes:t,showingAllRepos:i,visibility:"public"},this.setMode("create",!0),this.notifyDidChangeCreateDraftState()}async getCreateDraftState(e){let{create:t}=e;if(null==t)return;let i={};if(0!==t.changes.size)for(let[e,r]of t.changes){let t=await r.getChange();t?.files?.length!==0&&(t.checked!==r.checked&&(t.checked=r.checked),i[e]=t)}return{title:t.title,description:t.description,changes:i,visibility:t.visibility,userSelections:t.userSelections}}async notifyDidChangeCreateDraftState(){return this.host.notify(ei,{mode:this._context.mode,create:await this.getCreateDraftState(this._context)})}async trackViewDraft(e,t){let i;if(e?.draftType!=="cloud"||"suggested_pr_change"!==e.type)return;e=await this.ensureDraftContent(e);let r=e.changesets?.[0].patches.find(e=>ec(e.repository));(0,c.Z6)(r?.repository)&&(i=await this.container.git.visibility(r.repository.uri));let s=(0,m.y)(e,r);this.container.telemetry.sendEvent("codeSuggestionViewed",{provider:s?.provider,"repository.visibility":i,repoPrivacy:i,draftId:e.id,draftPrivacy:e.visibility,source:t},{source:t??"patchDetails"})}async updateViewDraftState(e){this._context.draft=e,e?.draftType==="cloud"&&(this._context.draftGkDevUrl=this.container.drafts.generateWebUrl(e),await this.createDraftUserState(e,{force:!0})),this.setMode("view",!0),this.notifyDidChangeViewDraftState()}async getViewDraftState(e,t=!0){if(null==e.draft)return;let i=e.draft;if("cloud"===i.draftType){!0===t&&eu(i)&&setTimeout(async()=>{await this.ensureDraftContent(i),this.notifyDidChangeViewDraftState(!1)},0);let e=this._context.draftUserState;return{draftType:"cloud",id:i.id,type:i.type,createdAt:i.createdAt.getTime(),updatedAt:i.updatedAt.getTime(),author:{id:i.author.id,name:i.author.name,email:i.author.email,avatar:i.author.avatarUri?.toString()},role:i.role,title:i.title,description:i.description,isArchived:i.isArchived,archivedReason:i.archivedReason,visibility:i.visibility,gkDevLink:this._context.draftGkDevUrl,patches:i.changesets?.length?(0,E.l)(i.changesets[0].patches.map(e=>({...e,contents:void 0,commit:void 0,repository:{id:e.gkRepositoryId,name:e.repository?.name??"",located:ec(e.repository)}}))):void 0,users:e.users,userSelections:e.selections}}}async createDraftUserState(e,t){if(null==this._context.draftUserState||t?.force===!0)try{let t=await this.container.drafts.getDraftUsers(e.id);if(0===t.length)return;let i=[],r=[],s=await this.getOrganizationMembers();for(let e of t){i.push(e);let t=s.find(t=>t.id===e.userId);r.push(eh(t,e))}r.sort((e,t)=>((e.pendingRole??e.member.role)==="owner"?-1:1)-((t.pendingRole??t.member.role)==="owner"?-1:1)||e.member.name.localeCompare(t.member.name)),this._context.draftUserState={users:i,selections:r}}catch{}}async notifyDidChangeViewDraftState(e=!0){return this.host.notify(er,{mode:this._context.mode,draft:(0,E.l)(await this.getViewDraftState(this._context,e))})}updatePreferences(e){(this._context.preferences?.files?.compact!==e.files?.compact||this._context.preferences?.files?.icon!==e.files?.icon||this._context.preferences?.files?.layout!==e.files?.layout||this._context.preferences?.files?.threshold!==e.files?.threshold)&&(null!=e.files&&(this._context.preferences?.files?.compact!==e.files?.compact&&A.H.updateEffective("views.patchDetails.files.compact",e.files?.compact),this._context.preferences?.files?.icon!==e.files?.icon&&A.H.updateEffective("views.patchDetails.files.icon",e.files?.icon),this._context.preferences?.files?.layout!==e.files?.layout&&A.H.updateEffective("views.patchDetails.files.layout",e.files?.layout),this._context.preferences?.files?.threshold!==e.files?.threshold&&A.H.updateEffective("views.patchDetails.files.threshold",e.files?.threshold),this._context.preferences.files=e.files),this.notifyDidChangePreferences())}async notifyDidChangePreferences(){return this.host.notify(es,{preferences:this._context.preferences})}async getDraftPatch(e,t){e.changesets=await this.ensureChangesets(e);let i=null==t?e.changesets[0].patches?.[0]:e.changesets[0].patches?.find(e=>e.gkRepositoryId===t);if(null!=i){if(null==i.contents||null==i.files||null==i.repository){let e=await this.container.drafts.getPatchDetails(i.id);i.contents=e.contents,i.files=e.files,i.repository=e.repository}return i}}async getFileCommitFromParams(e){let[t,i]=await this.getOrCreateCommit(e);return null!=t&&null!=i?[t,new u.l(this.container,e.repoPath,e.path,e.status,e.originalPath,void 0,void 0,e.staged),i]:null!=(t=await t?.getCommitForFile(e.path,e.staged))?[t,t.file,i]:void 0}async getOrCreateCommit(e){switch(this.mode){case"create":return this.getCommitForFile(e);case"view":return[await this.getOrCreateCommitForPatch(e.gkRepositoryId)];default:return[void 0]}}async getCommitForFile(e){let t=(0,$.I6)(this._context.create.changes.values(),t=>t.repository.path===e.repoPath);if(null==t)return[void 0];let i=await t.getChange();if(null==i)return[void 0];if("revision"===i.type){let t=await this.container.git.commits(e.repoPath).getCommit(i.revision.to??h.SU);return i.revision.to===i.revision.from||i.revision.from.length===i.revision.to.length+1&&i.revision.from.endsWith("^")&&i.revision.from.startsWith(i.revision.to)?[t]:[t,i.revision]}return"wip"===i.type?[await this.container.git.commits(e.repoPath).getCommit(i.revision.to??h.SU)]:[void 0]}async getOrCreateCommitForPatch(e){let t=this._context.draft;if("local"===t.draftType)return;let i=await this.getDraftPatch(t,e);if(i?.repository!=null){if(i?.commit==null){let e=await this.getOrLocatePatchRepository(i,{prompt:!0});if(null==e)return;let s=i.baseRef??"HEAD";for(;;){try{let r=await e.git.patch()?.createUnreachableCommitForPatch(s,t.title,i.contents);i.commit=r}catch(t){if(null!=s){let t={title:"Choose Base..."},i={title:"Cancel",isCloseAffordance:!0},o=await r.window.showErrorMessage(`Unable to apply the patch onto ${"HEAD"===s?"HEAD":`'${(0,p.pV)(s)}'`}.
Do you want to try again on a different base?`,{modal:!0},t,i);if(null==o||o===i)break;if(o===t){let t=await (0,S.NZ)(e.path,"Choose New Base for Patch","Choose a new base to apply the patch onto",{allowRevisions:!0,include:S.m7.BranchesAndTags|S.m7.HEAD});if(null==t)break;s=t.ref;continue}}else r.window.showErrorMessage(`Unable to apply the patch on base '${(0,p.pV)(s)}': ${t.message}`)}break}}return i?.commit}}async openFile(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;(0,a.Tq)(r,i,{preserveFocus:!0,preview:!0,...e.showOptions})}getChangesTitleNote(){return"view"===this._context.mode&&this._context.draft?.draftType==="cloud"&&"suggested_pr_change"===this._context.draft.type?"Code Suggestion":"Patch"}async openFileComparisonWithPrevious(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r,s]=t,o=this.getChangesTitleNote();(0,a.eX)(r,null!=s?{repoPath:i.repoPath,rhs:s.to??h.SU,lhs:s.from}:i,{preserveFocus:!0,preview:!0,...e.showOptions,rhsTitle:"view"===this.mode?`${(0,T.P8)(r.path)} (${o})`:void 0}),this.container.events.fire("file:selected",{uri:r.uri},{source:this.host.id})}async openFileComparisonWithWorking(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r,s]=t,o=this.getChangesTitleNote();(0,a.DD)(r,null!=s?{repoPath:i.repoPath,ref:s.to}:i,{preserveFocus:!0,preview:!0,...e.showOptions,lhsTitle:"view"===this.mode?`${(0,T.P8)(r.path)} (${o})`:void 0})}async getOrLocatePatchRepository(e,t){if(null==e.repository||(0,c.Z6)(e.repository))return e.repository;let i=await this.container.repositoryIdentity.getRepository(e.repository,{openIfNeeded:!0,prompt:t?.prompt??!1});return null==i?r.window.showErrorMessage(`Unable to locate repository '${e.repository.name}'`):(e.repository=i,t?.notifyOnLocation&&this.notifyPatchRepositoryUpdated(e)),i}async ensureChangesets(e){return e.changesets??=await this.container.drafts.getChangesets(e.id),e.changesets}async ensureDraftContent(e){if(!eu(e))return e;e.changesets=await this.ensureChangesets(e);let t=e.changesets.flatMap(e=>e.patches).filter(e=>null==e.contents||null==e.files||null==e.repository);if(0===t.length)return e;for(let e of(await Promise.allSettled(t.map(e=>this.container.drafts.getPatchDetails(e)))))if("fulfilled"===e.status){let i=t.find(t=>t.id===e.value.id);null!=i&&(i.contents=e.value.contents,i.files=e.value.files,i.repository=e.value.repository,await this.getOrLocatePatchRepository(i))}return e}};function eu(e){return null==e.changesets||(0,$.zN)(e.changesets,e=>e.patches.some(e=>null==e.contents||null==e.files||null==e.repository))}function ec(e){return null!=e&&(0,c.Z6)(e)}function eh(e,t,i,r){return{change:r,member:e,user:t,pendingRole:i,avatarUrl:e?.email!=null?(0,s.m_)(e.email,void 0).toString():void 0}}el([(0,_.Yz)({args:!1})],PatchDetailsWebviewProvider.prototype,"getState",1),el([(0,D.G)(e=>e.id)],PatchDetailsWebviewProvider.prototype,"ensureChangesets",1)},7392:(e,t,i)=>{i.d(t,{Z:()=>Formatter});var r=i(4808);let s=new Map,o=/ /g,n={collapseWhitespace:!1,padDirection:"left",prefix:void 0,suffix:void 0,truncateTo:void 0};let Formatter=class Formatter{_item;_options;constructor(e,t){this.reset(e,t)}reset(e,t){this._item=e,this.collapsableWhitespace=0,(null!=t||null==this._options)&&(null==t&&(t={}),null==t.dateFormat&&(t.dateFormat="MMMM Do, YYYY h:mma"),null==t.tokenOptions&&(t.tokenOptions={}),this._options=t)}collapsableWhitespace=0;_padOrTruncate(e,t){if(null==e||0===e.length)return e;if(0===(t??=n).truncateTo)return`${t.prefix?t.prefix.trimEnd():""}${t.suffix?t.suffix.trimStart():""}`;t.prefix&&(e=`${t.prefix}${e}`);let i=t.suffix?(0,r.RG)(t.suffix):0,s=t.truncateTo;if(null==s)return this.collapsableWhitespace=0,t.suffix?`${e}${t.suffix}`:e;s+=this.collapsableWhitespace,this.collapsableWhitespace=0;let o=(0,r.vJ)(e,s,i+1);if(o.truncated)return`${e.slice(0,o.index)}${o.ellipsed?"…":""}${t.suffix??""}`;let a=o.width;return(t.suffix&&(e+=t.suffix,a+=i),a===s)?e:(t.collapseWhitespace&&(this.collapsableWhitespace=s-a),"left"===t.padDirection)?e.padStart(s," "):t.collapseWhitespace?e:e.padEnd(s," ")}static _formatter=void 0;static fromTemplateCore(e,t,i,s){let n;return(t=t.replace(o," "),e instanceof Formatter)?(0,r.GW)(t,e):(null==(n=null==s||"string"==typeof s?{dateFormat:s}:s).tokenOptions&&(n.tokenOptions=(0,r.Vx)(t).reduce((e,t)=>(e[t.key]=t.options,e),Object.create(null))),null==this._formatter?this._formatter=new e(i,n):this._formatter.reset(i,n),(0,r.GW)(t,this._formatter))}static fromTemplateCoreAsync(e,t,i,s){let n;return(t=t.replace(o," "),e instanceof Formatter)?(0,r.Ow)(t,e):(null==(n=null==s||"string"==typeof s?{dateFormat:s}:s).tokenOptions&&(n.tokenOptions=(0,r.Vx)(t).reduce((e,t)=>(e[t.key]=t.options,e),Object.create(null))),null==this._formatter?this._formatter=new e(i,n):this._formatter.reset(i,n),(0,r.Ow)(t,this._formatter))}static has(e,...t){let i=1===t.length?t[0]:`(${t.join("|")})`,r=s.get(i);return null==r&&(r=RegExp(`\\b${i}\\b`),s.set(i,r)),r.test(e)}}},7400:(e,t,i)=>{i.r(t),i.d(t,{GitLabApi:()=>GitLabApi});var r=i(1398),s=i(2476),o=i(6741),n=i(2320),a=i(2356),l=i(7019),u=i(2870),c=i(6206),h=i(4941),d=i(1003),p=i(8178),g=i(4808),m=i(4045),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?w(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&f(t,i,o),o};let y="gid://gitlab/User/";function b(e){return"string"==typeof e&&e?.startsWith(y)?e.substring(y.length):String(e)}let GitLabApi=class GitLabApi{_disposable;_projectIds=new Map;constructor(e){this._disposable=u.H.onDidChangeAny(e=>{(u.H.changedCore(e,["http.proxy","http.proxyStrictSSL"])||u.H.changed(e,["proxy","remotes"]))&&this.resetCaches()})}dispose(){this._disposable.dispose()}resetCaches(){this._projectIds.clear(),this._proxyAgents.clear()}_proxyAgents=new Map;getProxyAgent(e){if(o.HZ)return;let t=this._proxyAgents.get(e.id);if(void 0===t){let i=e.getIgnoreSSLErrors();t=(0,s.cQ)(!0!==i&&"force"!==i&&void 0),this._proxyAgents.set(e.id,t??null)}return t??void 0}async getAccountForCommit(e,t,i,s,o,a,l){let u=(0,d.dQ)(),c=await this.getProjectId(e,t,i,s,a?.baseUrl,l);if(c)try{let i,s=await this.request(e,t,a?.baseUrl,`v4/projects/${c}/repository/commits/${o}?stats=false`,{method:"GET"},l,u);for(let r of(await this.findUser(e,t,s.author_name,a)))if(r.name===s.author_name||r.publicEmail&&r.publicEmail===s.author_email){if(i=r,"active"===r.state)break}else((0,g.Q_)(r.name,s.author_name)||r.publicEmail&&(0,g.Q_)(r.publicEmail,s.author_email))&&(i=r);if(null==i)return;return i.avatarUrl&&!/^([a-zA-Z][\w+.-]+):/.test(i.avatarUrl)&&(i.avatarUrl=r.Uri.joinPath(r.Uri.parse(i.webUrl),"..",i.avatarUrl).toString()),{provider:e,id:String(i.id),name:i.name||void 0,email:s.author_email||void 0,avatarUrl:i.avatarUrl||void 0,username:i.username||void 0}}catch(t){if(t instanceof n.LN)return;throw this.handleException(t,e,u)}}async getAccountForEmail(e,t,i,r,s,o){let a=(0,d.dQ)();try{let[i]=await this.findUser(e,t,s,o);if(null==i)return;return{provider:e,id:String(i.id),name:i.name||void 0,email:i.publicEmail||void 0,avatarUrl:i.avatarUrl||void 0,username:i.username||void 0}}catch(t){if(t instanceof n.LN)return;throw this.handleException(t,e,a)}}async getDefaultBranch(e,t,i,r,s,o){let a=(0,d.dQ)();try{let n=`query getDefaultBranch(
	$fullPath: ID!
) {
	project(fullPath: $fullPath) {
		repository {
			rootRef
		}
}`,l=await this.graphql(e,t,s?.baseUrl,n,{fullPath:`${i}/${r}`},o,a),u=l?.data?.project?.repository?.rootRef??void 0;if(null==u)return;return{provider:e,name:u}}catch(t){if(t instanceof n.LN)return;throw this.handleException(t,e,a)}}async getIssueOrPullRequest(e,t,i,r,s,o,a){let l=(0,d.dQ)();try{let n=`query getIssueOrMergeRequest(
	$fullPath: ID!
	$iid: String!
) {
	project(fullPath: $fullPath) {
		mergeRequest(iid: $iid) {
			author {
				id
				name
				avatarUrl
				webUrl
			}
			iid
			title
			description
			state
			createdAt
			updatedAt
			mergedAt
			webUrl
		}
		issue(iid: $iid) {
			author {
				id
				name
				avatarUrl
				webUrl
			}
			iid
			title
			description
			state
			createdAt
			updatedAt
			closedAt
			webUrl
		}
	}
}`,u=await this.graphql(e,t,o?.baseUrl,n,{fullPath:`${i}/${r}`,iid:String(s)},a,l);if(u?.data?.project?.issue!=null){let t=u.data.project.issue;return{provider:e,type:"issue",id:t.iid,nodeId:void 0,createdDate:new Date(t.createdAt),updatedDate:new Date(t.updatedAt),title:t.title,closed:"closed"===t.state,closedDate:null==t.closedAt?void 0:new Date(t.closedAt),url:t.webUrl,state:"locked"===t.state?"closed":t.state}}if(u?.data?.project?.mergeRequest!=null){let t=u.data.project.mergeRequest;return{provider:e,type:"pullrequest",id:t.iid,nodeId:void 0,createdDate:new Date(t.createdAt),updatedDate:new Date(t.updatedAt),title:t.title,closed:"closed"===t.state,closedDate:"closed"===t.state?new Date(t.updatedAt):void 0,url:t.webUrl,state:"locked"===t.state?"closed":t.state}}return}catch(t){if(t instanceof n.LN)return;throw this.handleException(t,e,l)}}async getPullRequestForBranch(e,t,i,r,s,o,l){let u=(0,d.dQ)();try{let n,c=`
			nodes {
				iid
				author {
					id
					name
					avatarUrl
					webUrl
				}
				title
				description
				state
				createdAt
				updatedAt
				mergedAt
				webUrl
			}`,h=`query getMergeRequestForBranch(
	$fullPath: ID!
	$branches: [String!]
) {
	project(fullPath: $fullPath) {
		${o?.include==null?`mergeRequests(sourceBranches: $branches sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
		${o?.include?.includes("opened")?`opened: mergeRequests(sourceBranches: $branches state: opened sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
		${o?.include?.includes("merged")?`merged: mergeRequests(sourceBranches: $branches state: merged sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
		${o?.include?.includes("closed")?`closed: mergeRequests(sourceBranches: $branches state: closed sort: UPDATED_DESC first: 1) {
			${c}
		}`:""}
	}
}`,d=await this.graphql(e,t,o?.baseUrl,h,{fullPath:`${i}/${r}`,branches:[s],state:o?.include},l,u);if(o?.include==null)n=d?.data?.project?.mergeRequests?.nodes?.[0];else for(let e of o.include){let t;"opened"===e?t=d?.data?.project?.opened?.nodes?.[0]:"merged"===e?t=d?.data?.project?.merged?.nodes?.[0]:"closed"===e&&(t=d?.data?.project?.closed?.nodes?.[0]),null!=t&&(null==n||new Date(t.updatedAt)>new Date(n.updatedAt))&&(n=t)}if(null==n)return;return new a.B9(e,{id:b(n.author?.id)??"",name:n.author?.name??"Unknown",avatarUrl:n.author?.avatarUrl??"",url:n.author?.webUrl??""},String(n.iid),void 0,n.title,n.webUrl,{owner:i,repo:r},(0,m.fromGitLabMergeRequestState)(n.state),new Date(n.createdAt),new Date(n.updatedAt),"closed"!==n.state?void 0:new Date(n.updatedAt),null==n.mergedAt?void 0:new Date(n.mergedAt))}catch(t){if(t instanceof n.LN)return;throw this.handleException(t,e,u)}}async getPullRequestForCommit(e,t,i,r,s,o,a){let l=(0,d.dQ)(),u=await this.getProjectId(e,t,i,r,o?.baseUrl,a);if(u)try{let n=await this.request(e,t,o?.baseUrl,`v4/projects/${u}/repository/commits/${s}/merge_requests`,{method:"GET"},a,l);if(null==n||0===n.length)return;return n.length>1&&n.sort((e,t)=>("opened"===e.state?-1:1)-("opened"===t.state?-1:1)||new Date(t.updated_at).getTime()-new Date(e.updated_at).getTime()),(0,m.fromGitLabMergeRequestREST)(n[0],e,{owner:i,repo:r})}catch(t){if(t instanceof n.LN)return;throw this.handleException(t,e,l)}}async getPullRequest(e,t,i,r,s,o,a){let l=(0,d.dQ)();try{let n=`query getMergeRequest(
	$fullPath: ID!
	$iid: String!
) {
	project(fullPath: $fullPath) {
		mergeRequest(iid: $iid) {
			id,
			iid
			state,
			author {
				id
				name
				avatarUrl
				webUrl
			}
			diffRefs {
				baseSha
				headSha
			}
			title
			description
			webUrl
			createdAt
			updatedAt
			mergedAt
			targetBranch
			sourceBranch
			project {
				id
				fullPath
				webUrl
			}
			sourceProject {
				id
				fullPath
				webUrl
			}
		}
	}
}`,u=await this.graphql(e,t,o?.baseUrl,n,{fullPath:`${i}/${r}`,iid:String(s)},a,l);if(u?.data?.project?.mergeRequest==null)return;let c=u.data.project.mergeRequest;return(0,m.fromGitLabMergeRequest)(c,e)}catch(t){if(t instanceof n.LN)return;throw this.handleException(t,e,l)}}async getRepositoryMetadata(e,t,i,r,s,o){let a=(0,d.dQ)(),l=await this.getProjectId(e,t,i,r,s?.baseUrl,o);if(l)try{let i=await this.request(e,t,s?.baseUrl,`v4/projects/${l}`,{method:"GET"},o,a);if(null==i)return;return{provider:e,owner:i.namespace.full_path,name:i.path,isFork:null!=i.forked_from_project,parent:null!=i.forked_from_project?{owner:i.forked_from_project.namespace.full_path,name:i.forked_from_project.path}:void 0}}catch(t){if(t instanceof n.LN)return;throw this.handleException(t,e,a)}}async searchPullRequests(e,t,i,r){let s=(0,d.dQ)(),o=i?.search;if(!o)return[];try{let n=await this.request(e,t,i?.baseUrl,`v4/search/?scope=merge_requests&search=${o}&per_page=20`,{method:"GET"},r,s);if(0===n.length)return[];let a=n.map((e,t)=>`$id_${t}: MergeRequestID!`).join(`
`),l=n.map((e,t)=>`mergeRequest_${t}: mergeRequest(id: $id_${t}) { ...mergeRequestFields }`).join(`
`),u=`fragment mergeRequestFields on MergeRequest {
				diffRefs {
					baseSha
					headSha
				}
				project {
					id
					fullPath
					webUrl
				}
				sourceProject {
					id
					fullPath
					webUrl
				}
			}`,c=`query getMergeRequests (${a}) {${l}} ${u}`,h=n.reduce((e,t,i)=>(e[`id_${i}`]=`gid://gitlab/MergeRequest/${t.id}`,e),{}),d=await this.graphql(e,t,i?.baseUrl,c,h,r,s);if(d?.data!=null)return n.reduce((t,i,r)=>{let s=d.data[`mergeRequest_${r}`];if(null==s)return t;let o={...s,iid:String(i.iid),id:String(i.id),state:i.state,author:{id:b(i.author?.id)??"",name:i.author?.name??"Unknown",avatarUrl:i.author?.avatar_url??"",webUrl:i.author?.web_url??""},title:i.title,description:i.description,webUrl:i.web_url,createdAt:i.created_at,updatedAt:i.updated_at,mergedAt:i.merged_at,sourceBranch:i.source_branch,targetBranch:i.target_branch};return t.push((0,m.fromGitLabMergeRequest)(o,e)),t},[]);return[]}catch(t){if(t instanceof n.LN)return[];throw this.handleException(t,e,s)}}async findUser(e,t,i,r,s){let o=(0,d.dQ)();try{let n=`query findUser(
$search: String!
) {
	users(search: $search) {
		nodes {
			id
			name
			username,
			publicEmail,
			state
			avatarUrl
			webUrl
		}
	}
}`,a=await this.graphql(e,t,r?.baseUrl,n,{search:i},s,o),l=a?.data?.users?.nodes;if(null==l||0===l.length)return[];let u=[];for(let e of l){let t=/gid:\/\/gitlab\/User\/([0-9]+)\b/.exec(e.id);null!=t&&u.push({id:parseInt(t[1],10),name:e.name,username:e.username,publicEmail:e.publicEmail||void 0,state:e.state,avatarUrl:e.avatarUrl,webUrl:e.webUrl})}return u}catch(t){if(t instanceof n.LN)return[];return this.handleException(t,e,o),[]}}getProjectId(e,t,i,r,s,o){let n=`${t}|${i}/${r}`,a=this._projectIds.get(n);return null==a&&(a=this.getProjectIdCore(e,t,i,r,s,o),this._projectIds.set(n,a)),a}async getProjectIdCore(e,t,i,r,s,o){let a=(0,d.dQ)();try{let n=`query getProjectId(
	$fullPath: ID!
) {
	project(fullPath: $fullPath) {
		id
	}
}`,l=await this.graphql(e,t,s,n,{fullPath:`${i}/${r}`},o,a),u=l?.data?.project?.id;if(null==u)return;let c=/gid:\/\/gitlab\/Project\/([0-9]+)\b/.exec(u);if(null==c)return;let h=c[1];return(0,d.TT)(a,` \u2022 projectId=${h}`),h}catch(t){if(t instanceof n.LN)return;this.handleException(t,e,a);return}}async graphql(e,t,i,o,a,l,u){let c;try{let r=(0,p.u)(`[GITLAB] POST ${i}`,{log:!1}),u=this.getProxyAgent(e);try{let r;if(null!=l){if(l.isCancellationRequested)throw new n.AL;r=new AbortController,l.onCancellationRequested(()=>r.abort())}if((c=await (0,s.Ff)(e.getIgnoreSSLErrors(),()=>(0,s.hd)(`${i??"https://gitlab.com/api"}/graphql`,{method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},agent:u,signal:r?.signal,body:JSON.stringify({query:o,variables:a})}))).ok){let e=await c.json();if("errors"in e)throw new n.QI("GitLab",c,e.errors);return e}throw new n.QI("GitLab",c)}finally{let e=/(^[^({\n]+)/.exec(o),t=` ${e?.[1].trim()??o}`;r?.stop({message:t})}}catch(i){throw i instanceof n.QI||"AbortError"===i.name?this.handleRequestError(e,t,i,u):h.Vy.isDebugging&&r.window.showErrorMessage(`GitLab request failed: ${i.message}`),i}}async request(e,t,i,o,a,l,u){let c,d=`${i??"https://gitlab.com/api"}/${o}`;try{let i=(0,p.u)(`[GITLAB] ${a?.method??"GET"} ${d}`,{log:!1}),r=this.getProxyAgent(e);try{let i;if(null!=l){if(l.isCancellationRequested)throw new n.AL;i=new AbortController,l.onCancellationRequested(()=>i.abort())}if((c=await (0,s.Ff)(e.getIgnoreSSLErrors(),()=>(0,s.hd)(d,{headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},agent:r,signal:i?.signal,...a}))).ok)return await c.json();throw new n.QI("GitLab",c)}finally{i?.stop()}}catch(i){throw i instanceof n.QI||"AbortError"===i.name?this.handleRequestError(e,t,i,u):h.Vy.isDebugging&&r.window.showErrorMessage(`GitLab request failed: ${i.message}`),i}}handleRequestError(e,t,i,s){if("AbortError"===i.name||!(i instanceof n.QI))throw new n.AL(i);switch(i.status){case 404:case 410:case 422:throw new n.LN(i);case 401:throw new n.v3("gitlab",n.R.Unauthorized,i);case 403:if(i.message.includes("rate limit exceeded")){let e,r=i.response?.headers?.get("x-ratelimit-reset");throw null!=r&&Number.isNaN(e=parseInt(r,10))&&(e=void 0),new n.HG(i,t,e)}throw new n.v3("gitlab",n.R.Forbidden,i);case 500:h.Vy.error(i,s),null!=i.response&&(e?.trackRequestException(),(0,l.wW)(`${e?.name??"GitLab"} failed to respond and might be experiencing issues.${null==e||"gitlab"===e.id?" Please visit the [GitLab status page](https://status.gitlab.com) for more information.":""}`));return;case 502:if(h.Vy.error(i,s),i.message.includes("timeout")){e?.trackRequestException(),(0,l.lW)(e?.name??"GitLab");return}break;default:if(i.status>=400&&i.status<500)throw new n.tk(i)}h.Vy.error(i,s),h.Vy.isDebugging&&r.window.showErrorMessage(`GitLab request failed: ${i.response?.errors?.[0]?.message??i.message}`)}handleException(e,t,i){return h.Vy.error(e,i),e instanceof n.v3&&this.showAuthenticationErrorMessage(e,t),e}async showAuthenticationErrorMessage(e,t){if(e.reason===n.R.Unauthorized||e.reason===n.R.Forbidden){let i="Reauthenticate";await r.window.showErrorMessage(`${e.message}. Would you like to try reauthenticating${e.reason===n.R.Forbidden?" to provide additional access":""}?`,i)===i&&(await t.reauthenticate(),this.resetCaches())}else r.window.showErrorMessage(e.message)}};v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getAccountForCommit",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getAccountForEmail",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getDefaultBranch",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getIssueOrPullRequest",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getPullRequestForBranch",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getPullRequestForCommit",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getPullRequest",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"getRepositoryMetadata",1),v([(0,c.Yz)({args:{0:e=>e.name,1:"<token>"}})],GitLabApi.prototype,"searchPullRequests",1)},7471:(e,t,i)=>{i.r(t),i.d(t,{CloudIntegrationService:()=>CloudIntegrationService});var r=i(4941),s=i(1003),o=i(225);let CloudIntegrationService=class CloudIntegrationService{constructor(e,t){this.container=e,this.connection=t}async getConnections(){let e=(0,s.dQ)(),t=await this.connection.fetchGkApi("v1/provider-tokens",{method:"GET"},{organizationId:!1});if(!t.ok){let i=(await t.json())?.error,s="string"==typeof i?i:i?.message??t.statusText;null!=i&&r.Vy.error(void 0,e,`Failed to get connected providers from cloud: ${s}`),this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/getConnections/failed",{code:t.status});return}return(await t.json())?.data}async getConnectionSession(e,t){let i=(0,s.dQ)(),n=!!t,a=o.xq[e];if(null==a)return void r.Vy.error(void 0,i,`Unsupported cloud integration type: ${e}`);let l=t?{method:"POST",body:JSON.stringify({access_token:t})}:{method:"GET"},u=await this.connection.fetchGkApi(`v1/provider-tokens/${a}${n?"/refresh":""}`,l,{organizationId:!1});if(!u.ok){let s=(await u.json())?.error,o="string"==typeof s?s:s?.message??u.statusText;null!=s&&r.Vy.error(void 0,i,`Failed to ${n?"refresh":"get"} ${e} token from cloud: ${o}`),this.container.telemetry.enabled&&this.container.telemetry.sendEvent(t?"cloudIntegrations/refreshConnection/failed":"cloudIntegrations/getConnection/failed",{code:u.status,"integration.id":e});return}return(await u.json())?.data}async disconnect(e){let t=(0,s.dQ)(),i=o.xq[e];if(null==i)return r.Vy.error(void 0,t,`Unsupported cloud integration type: ${e}`),!1;let n=await this.connection.fetchGkApi(`v1/provider-tokens/${i}`,{method:"DELETE"},{organizationId:!1});if(!n.ok){let i=(await n.json())?.error,s="string"==typeof i?i:i?.message??n.statusText;return null!=i&&r.Vy.error(void 0,t,`Failed to disconnect ${e} token from cloud: ${s}`),this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/disconnect/failed",{code:n.status,"integration.id":e}),!1}return!0}}},7500:(e,t,i)=>{i.d(t,{I:()=>v,o:()=>FileAnnotationController});var r=i(1398),s=i(2141),o=i(2870),n=i(9615),a=i(8782),l=i(797),u=i(6206),c=i(3361),h=i(5539),d=i(9091),p=i(9686),g=i(1176),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o};let v={gutterBlameAnnotation:r.window.createTextEditorDecorationType({rangeBehavior:r.DecorationRangeBehavior.OpenOpen,textDecoration:"none"}),gutterBlameHighlight:void 0,changesLineChangedAnnotation:void 0,changesLineAddedAnnotation:void 0,changesLineDeletedAnnotation:void 0};let FileAnnotationController=class FileAnnotationController{constructor(e){this.container=e,this._disposable=r.Disposable.from(this._onDidToggleAnnotations,(0,c.Oo)(e.onReady)(this.onReady,this),o.H.onDidChange(this.onConfigurationChanged,this),r.window.onDidChangeActiveColorTheme(this.onThemeChanged,this)),this._toggleModes=new Map}_onDidToggleAnnotations=new r.EventEmitter;get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}_annotationsDisposable;_annotationProviders=new Map;_disposable;_editor;_keyboardScope=void 0;_toggleModes;_windowAnnotationType=void 0;dispose(){this.clearAll(),v.gutterBlameAnnotation?.dispose(),v.gutterBlameHighlight?.dispose(),v.changesLineChangedAnnotation?.dispose(),v.changesLineAddedAnnotation?.dispose(),v.changesLineDeletedAnnotation?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){let t,i=null==e;if(o.H.changed(e,["blame.highlight","changes.locations"])&&this.updateDecorations(!1),o.H.changed(e,"fileAnnotations.dismissOnEscape")&&(o.H.get("fileAnnotations.dismissOnEscape")?r.window.visibleTextEditors.some(e=>this.getProvider(e))&&this.attachKeyboardHook():this.detachKeyboardHook()),o.H.changed(e,"blame.toggleMode")&&(t=o.H.get("blame.toggleMode"),this._toggleModes.set("blame",t),i||"file"!==t||this.clearAll()),o.H.changed(e,"changes.toggleMode")&&(t=o.H.get("changes.toggleMode"),this._toggleModes.set("changes",t),i||"file"!==t||this.clearAll()),o.H.changed(e,"heatmap.toggleMode")&&(t=o.H.get("heatmap.toggleMode"),this._toggleModes.set("heatmap",t),i||"file"!==t||this.clearAll()),!i&&o.H.changed(e,["blame","changes","heatmap","hovers","defaultDateFormat","defaultDateSource","defaultDateStyle","defaultGravatarsStyle"]))for(let e of this._annotationProviders.values())null!=e&&this.show(e.editor,e.annotationType??"blame")}onThemeChanged(e){this.updateDecorations(!0)}async onActiveTextEditorChanged(e){if(null==e||(0,l.oU)(e)){if(this._editor=e,this.isInWindowToggle())return void await this.show(e,this._windowAnnotationType);null==this.getProvider(e)?this.detachKeyboardHook():this.attachKeyboardHook()}}onBlameStateChanged(e){let t=r.window.activeTextEditor;if(null!=t){if(e.blameable){o.H.get("fileAnnotations.preserveWhileEditing")&&this.restore(t);return}this.clearCore((0,g.B0)(t))}}async onDirtyIdleTriggered(e){if(!o.H.get("fileAnnotations.preserveWhileEditing")||!(await e.document.getStatus()).blameable)return;let t=r.window.activeTextEditor;null!=t&&this.restore(t)}onDirtyStateChanged(e){for(let[t,i]of this._annotationProviders)e.document.is(i.editor.document)&&(o.H.get("fileAnnotations.preserveWhileEditing")?e.dirty||this.restore(e.editor):e.dirty&&this.clearCore(t))}onTabsChanged(e){for(let t of e.closed)this.clearCore((0,g.UB)(t))}onTextDocumentClosed(e){if(this.container.git.isTrackable(e.uri))for(let[t,i]of this._annotationProviders)i.editor.document===e&&this.clearCore(t)}onTextEditorViewColumnChanged(e){let t=this.getProvider(e.textEditor);if(null==t){let t=(0,d.I6)(this._annotationProviders.values(),t=>t.editor.document===e.textEditor.document);if(null==t)return;this.clearCore(t.correlationKey);return}t.restore(e.textEditor)}onVisibleTextEditorsChanged(e){for(let t of e)this.getProvider(t)?.restore(t,!1)}isInWindowToggle(){return"window"===this.getToggleMode(this._windowAnnotationType)}getToggleMode(e){return null==e?"file":this._toggleModes.get(e)??"file"}clear(e){return this.isInWindowToggle()?this.clearAll():null!=e?this.clearCore((0,g.B0)(e),!0):void 0}async clearAll(){for(let[e]of(this._windowAnnotationType=void 0,this._annotationProviders))await this.clearCore(e,!0);this.unsubscribe()}async getAnnotationType(e){let t=this.getProvider(e);if(null==t)return;let i=await this.container.documentTracker.get(e.document),r=await i?.getStatus();if(r?.blameable)return t.annotationType}getProvider(e){if(e?.document!=null)return this._annotationProviders.get((0,g.B0)(e))}debouncedRestores=new WeakMap;restore(e,t){let i=this.getProvider(e);if(null==i)return;let r=this.debouncedRestores.get(e);null==r&&(r=(0,h.s)(e=>{this.debouncedRestores.delete(e),i.restore(e,t??!0)},500),this.debouncedRestores.set(e,r)),r(e)}_annotatedUris=new a.T;_computingUris=new a.T;async onProviderEditorStatusChanged(e,t){let i;if(null==e)return;let r=!1;if(this.isInWindowToggle())i=t,r=!!(this._annotatedUris.size||this._computingUris.size),this._annotatedUris.clear(),this._computingUris.clear();else{i=void 0;let s=e.document.uri;switch(t){case"computing":this._annotatedUris.has(s)||(this._annotatedUris.add(s),r=!0),this._computingUris.has(s)||(this._computingUris.add(s),r=!0);break;case"computed":null==this.getProvider(e)?this._annotatedUris.has(s)&&(this._annotatedUris.delete(s),r=!0):this._annotatedUris.has(s)||(this._annotatedUris.add(s),r=!0),this._computingUris.has(s)&&(this._computingUris.delete(s),r=!0);break;default:this._annotatedUris.has(s)&&(this._annotatedUris.delete(s),r=!0),this._computingUris.has(s)&&(this._computingUris.delete(s),r=!0)}}r&&await Promise.allSettled([(0,n.o)("gitlens:window:annotated",i),(0,n.o)("gitlens:tabs:annotated:computing",[...this._computingUris]),(0,n.o)("gitlens:tabs:annotated",[...this._annotatedUris])])}async show(e,t,i){if("window"===this.getToggleMode(t)){let i=null==this._windowAnnotationType,s=!i&&this._windowAnnotationType!==t;if(this._windowAnnotationType=t,s&&(await this.clearAll(),i=!0),i)for(let i of r.window.visibleTextEditors)i!==e&&this.show(i,t);if(null==e)return this.subscribe(),!1}if(null==e)return!1;this._editor=e;let s=await this.container.documentTracker.getOrAdd(e.document),o=await s?.getStatus();if(!o?.blameable)return!1;let n=this.getProvider(e);return n?.annotationType===t?(await n.provideAnnotation(i),!0):null!=await r.window.withProgress({location:r.ProgressLocation.Window},async r=>{this.onProviderEditorStatusChanged(e,"computing");let s=this.showAnnotationsCore(n,e,t,i,r);return await s,this.onProviderEditorStatusChanged(e,"computed"),s})}async toggle(e,t,i,r){if(null!=e&&"file"===this._toggleModes.get(t)){let i=await this.container.documentTracker.getOrAdd(e.document),r=await i?.getStatus();if("changes"===t&&!r?.tracked||!r?.blameable)return!1}let s=this.getProvider(e);if(null==s)return null==e&&this.isInWindowToggle()?(await this.clearAll(),!1):this.show(e,t,i);let o=s.annotationType!==t||!s.canReuse(i);return!0===r&&!o||(this.isInWindowToggle()?await this.clearAll():await this.clearCore(s.correlationKey,!0),!!o&&this.show(e,t,i))}nextChange(){let e=this.getProvider(r.window.activeTextEditor);e?.nextChange?.()}previousChange(){let e=this.getProvider(r.window.activeTextEditor);e?.previousChange?.()}async attachKeyboardHook(){o.H.get("fileAnnotations.dismissOnEscape")&&null==this._keyboardScope&&(this._keyboardScope=await this.container.keyboard.beginScope({escape:{onDidPressKey:async()=>{let e=this._editor;null!=e&&await this.clear(e)}}}))}async clearCore(e,t){let i=this._annotationProviders.get(e);null!=i&&(this._annotationProviders.delete(e),i.dispose(),this._annotationProviders.size&&e!==(0,g.B0)(this._editor)||(null!=this._editor&&this.onProviderEditorStatusChanged(this._editor,void 0),await this.detachKeyboardHook()),this._annotationProviders.size||!t&&this.isInWindowToggle()||(this._windowAnnotationType=void 0,this.unsubscribe()),this._onDidToggleAnnotations.fire())}async detachKeyboardHook(){null!=this._keyboardScope&&(await this._keyboardScope.dispose(),this._keyboardScope=void 0)}async showAnnotationsCore(e,t,r,s,o){let n;if(null!=o){let e="annotations";switch(r){case"blame":e="blame annotations";break;case"changes":e="changes annotations";break;case"heatmap":e="heatmap annotations"}o.report({message:`Computing ${e} for ${(0,p.P8)(t.document.fileName)}`})}await this.attachKeyboardHook();let a=await this.container.documentTracker.getOrAdd(t.document);switch(r){case"blame":{let{GutterBlameAnnotationProvider:e}=await Promise.resolve().then(i.bind(i,5404));n=new e(this.container,e=>this.onProviderEditorStatusChanged(e.editor,e.status),t,a);break}case"changes":{let{GutterChangesAnnotationProvider:e}=await Promise.resolve().then(i.bind(i,8942));n=new e(this.container,e=>this.onProviderEditorStatusChanged(e.editor,e.status),t,a);break}case"heatmap":{let{GutterHeatmapBlameAnnotationProvider:e}=await Promise.resolve().then(i.bind(i,988));n=new e(this.container,e=>this.onProviderEditorStatusChanged(e.editor,e.status),t,a)}}if(null!=n&&await n.validate?.()!==!1){if(null!=e&&await this.clearCore(e.correlationKey,!0),0===this._annotationProviders.size&&this.subscribe(),this._annotationProviders.set(n.correlationKey,n),await n.provideAnnotation(s))return this._onDidToggleAnnotations.fire(),n;await this.clearCore(n.correlationKey,!0)}}subscribe(){this._annotationsDisposable??=r.Disposable.from(r.window.onDidChangeActiveTextEditor((0,h.s)(this.onActiveTextEditorChanged,50),this),r.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),r.window.onDidChangeVisibleTextEditors((0,h.s)(this.onVisibleTextEditorsChanged,50),this),r.window.tabGroups.onDidChangeTabs(this.onTabsChanged,this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),this.container.documentTracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.documentTracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.container.documentTracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this),(0,s.Lb)("gitlens.annotations.nextChange",()=>this.nextChange()),(0,s.Lb)("gitlens.annotations.previousChange",()=>this.previousChange()))}unsubscribe(){this._annotationsDisposable?.dispose(),this._annotationsDisposable=void 0}updateDecorations(e){let t=e?Object.entries(v):void 0;if(this.updateHighlightDecoration(),this.updateChangedDecorations(),!e)return;let i=new Map;for(let[e,r]of t)null!=r&&r!==(v[e]??null)&&i.set(r,v[e]??null);if(0!==i.size)for(let e of r.window.visibleTextEditors)this.getProvider(e)?.refresh(i)}updateChangedDecorations(){let e,t,i;v.changesLineAddedAnnotation?.dispose(),v.changesLineChangedAnnotation?.dispose(),v.changesLineDeletedAnnotation?.dispose();let s=o.H.get("changes.locations");switch(r.window.activeColorTheme.kind){case r.ColorThemeKind.Light:e=[72,152,93],t=[32,144,211],i=[229,20,0];break;case r.ColorThemeKind.HighContrast:default:e=[72,126,2],t=[27,129,168],i=[241,76,76]}v.changesLineAddedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:s.includes("line")?`rgba(${e.join(",")},0.4)`:void 0,isWholeLine:!!s.includes("line")||void 0,gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${e.join(",")})' x='13' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.addedForeground"):void 0}),v.changesLineChangedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:s.includes("line")?`rgba(${t.join(",")},0.4)`:void 0,isWholeLine:!!s.includes("line")||void 0,gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${t.join(",")})' x='13' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.modifiedForeground"):void 0}),v.changesLineDeletedAnnotation=r.window.createTextEditorDecorationType({gutterIconPath:s.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><polygon fill='rgb(${i.join(",")})' points='13,10 13,18 17,14'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:s.includes("overview")?new r.ThemeColor("editorOverviewRuler.deletedForeground"):void 0})}updateHighlightDecoration(){v.gutterBlameHighlight?.dispose(),v.gutterBlameHighlight=void 0;let e=o.H.get("blame.highlight");if(e.enabled){let{locations:t}=e,i=t.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent("<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='#00bcf2' fill-opacity='0.6' x='7' y='0' width='3' height='18'/></svg>")}`):void 0;v.gutterBlameHighlight=r.window.createTextEditorDecorationType({gutterIconPath:i,gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:r.OverviewRulerLane.Right,backgroundColor:t.includes("line")?new r.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:t.includes("overview")?new r.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0})}}};w([(0,u.Rm)({args:{0:e=>e?.document.uri.toString(!0)}})],FileAnnotationController.prototype,"clear",1),w([(0,u.Rm)()],FileAnnotationController.prototype,"clearAll",1),w([(0,u.Rm)({args:{0:e=>e?.document.uri.toString(!0),2:!1}})],FileAnnotationController.prototype,"show",1),w([(0,u.Rm)({args:{0:e=>e?.document.uri.toString(!0),2:!1}})],FileAnnotationController.prototype,"toggle",1),w([(0,u.Rm)()],FileAnnotationController.prototype,"nextChange",1),w([(0,u.Rm)()],FileAnnotationController.prototype,"previousChange",1),w([(0,u.Rm)()],FileAnnotationController.prototype,"clearCore",1),w([(0,u.Yz)({singleLine:!0,if:function(){return null==this._annotationsDisposable}})],FileAnnotationController.prototype,"subscribe",1),w([(0,u.Yz)({singleLine:!0,if:function(){return null!=this._annotationsDisposable}})],FileAnnotationController.prototype,"unsubscribe",1)},7563:(e,t,i)=>{i.d(t,{T:()=>w});var r=i(1398),s=i(1182),o=i(8518),n=i(6770),a=i(5962),l=i(7019),u=i(2141),c=i(797),h=i(5231),d=i(4941),p=i(9686),g=i(9442),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor;let w=class extends g.Kt{constructor(e){super("gitlens.diffWith"),this.container=e}static createMarkdownCommandLink(e,t){let i;if((0,o.WM)(e)){if(null==e.file||null==e.unresolvedPreviousSha)throw Error("Commit has no file");i=e.isUncommitted?{repoPath:e.repoPath,lhs:{sha:"HEAD",uri:e.file.uri},rhs:{sha:"",uri:e.file.uri},line:t}:{repoPath:e.repoPath,lhs:{sha:e.unresolvedPreviousSha,uri:e.file.originalUri??e.file.uri},rhs:{sha:e.sha,uri:e.file.uri},line:t}}else i=e;return(0,h.J)("gitlens.diffWith",i)}async execute(e){if(e?.lhs!=null&&e?.rhs!=null&&null!=(e={...e,lhs:{...e.lhs},rhs:{...e.rhs},showOptions:null==e.showOptions?void 0:{...e.showOptions}}).repoPath)try{let t=e.lhs.sha,i=e.rhs.sha;if([e.lhs.sha,e.rhs.sha]=await Promise.all([await this.container.git.refs(e.repoPath).resolveReference(e.lhs.sha,e.lhs.uri,{timeout:(0,a.X$)(e.lhs.sha)?100:void 0}),await this.container.git.refs(e.repoPath).resolveReference(e.rhs.sha,e.rhs.uri,{timeout:(0,a.X$)(e.rhs.sha)?100:void 0})]),e.lhs.sha!==n.nB&&(t=e.lhs.sha),e.rhs.sha&&e.rhs.sha!==n.nB){let t=await this.container.git.commits(e.repoPath).getCommitFileStatus(e.rhs.uri,e.rhs.sha);t?.status==="D"?e.rhs.sha=n.nB:i=e.rhs.sha,t?.status==="A"&&e.lhs.sha.endsWith("^")&&(e.lhs.sha=n.nB)}let[o,l]=await Promise.all([this.container.git.getBestRevisionUri(e.repoPath,e.lhs.uri.fsPath,e.lhs.sha),this.container.git.getBestRevisionUri(e.repoPath,e.rhs.uri.fsPath,e.rhs.sha)]),u=(0,a.pV)(i,{strings:{uncommitted:"Working Tree"}});null==l?u=(0,a._k)(e.rhs.sha)?"deleted":0===u.length&&e.rhs.sha===n.nB?"not in Working Tree":`deleted${0===u.length?"":` in ${u}`}`:null==o&&(u=`added${0===u.length?"":` in ${u}`}`);let h=e.lhs.sha!==n.nB?(0,a.pV)(t):"";null==o&&0===e.rhs.sha.length&&(null!=l?(h=0===h.length?"":`not in ${h}`,u=""):h=`deleted${0===h.length?"":` in ${h}`}`),null==e.lhs.title&&(null!=o||0!==h.length)&&(e.lhs.title=`${(0,p.P8)(e.lhs.uri.fsPath)}${h?` (${h})`:""}`),null==e.rhs.title&&(e.rhs.title=`${(0,p.P8)(e.rhs.uri.fsPath)}${u?` (${u})`:""}`);let d=null!=e.lhs.title&&null!=e.rhs.title?`${e.lhs.title} ${s.EO.ArrowLeftRightLong} ${e.rhs.title}`:e.lhs.title??e.rhs.title;null==e.showOptions&&(e.showOptions={}),null==e.showOptions.viewColumn&&(e.showOptions.viewColumn=r.ViewColumn.Active),null!=e.line&&0!==e.line&&(e.showOptions.selection=new r.Range(e.line,0,e.line,0)),await (0,c.pr)(o??this.container.git.getRevisionUri(e.repoPath,n.nB,e.lhs.uri.fsPath),l??this.container.git.getRevisionUri(e.repoPath,n.nB,e.rhs.uri.fsPath),d,e.showOptions)}catch(e){d.Vy.error(e,"DiffWithCommand","getVersionedFile"),(0,l.qQ)("Unable to open compare")}}};w=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o})([(0,u.G5)()],w)},7660:(e,t,i)=>{i.d(t,{A1:()=>f,M4:()=>l,Nf:()=>m,SN:()=>g,bv:()=>p,cf:()=>d,eN:()=>c,fC:()=>u,gC:()=>h,kA:()=>a});var r=i(1182),s=i(4808),o=i(3631),n=i(5962);function a(e,t,i={refType:"revision"}){switch(i.refType){case"branch":return{refType:"branch",repoPath:t,ref:e,name:i.name,id:i.id,remote:i.remote,sha:i.sha,upstream:i.upstream};case"stash":return{refType:"stash",repoPath:t,ref:e,sha:e,name:i.name,stashNumber:i.number,message:i.message,stashOnRef:i.stashOnRef};case"tag":return{refType:"tag",repoPath:t,ref:e,name:i.name,id:i.id,sha:i.sha};default:return{refType:"revision",repoPath:t,ref:e,sha:e,name:i.name??(0,n.pV)(e,{strings:{working:"Working Tree"}}),message:i.message}}}function l(e,t){let i;if(null==e)return"";if(t=!1===t?{}:{expand:!0,icon:!0,label:t?.label??t?.expand??!0,...t},!Array.isArray(e)||1===e.length){let a=Array.isArray(e)?e[0]:e,l=t?.quoted?`'${a.name}'`:a.name;switch(a.refType){case"branch":{let e;a.remote&&(l=`${(0,o.Zq)(l)}: ${(0,o.km)(l)}`,l=t?.quoted?`'${l}'`:l),e=t.label?t.capitalize&&t.expand?`${a.remote?"Remote ":""}Branch `:`${a.remote?"remote ":""}branch `:"",i=`${e}${t.icon?`$(git-branch)${r.EO.Space}${l}`:l}`;break}case"tag":i=`${t.label?"tag ":""}${t.icon?`$(tag)${r.EO.Space}${l}`:l}`;break;default:if(m(a)){let e;t.expand&&a.message&&(e=`${null!=a.stashNumber?`#${a.stashNumber}: `:""}${a.message.length>20?`${a.message.substring(0,20).trimEnd()}${r.EO.Ellipsis}`:a.message}`),i=`${t.label?"stash ":""}${t.icon?`$(archive)${r.EO.Space}${e??a.name}`:e??(a.stashNumber?`#${a.stashNumber}`:a.name)}`}else if((0,n.p8)(a.ref))i=l;else{let e,s;t.expand&&a.message&&(e=a.message.length>20?` (${a.message.substring(0,20).trimEnd()}${r.EO.Ellipsis})`:` (${a.message})`),t.expand&&t.label&&(0,n.M3)(a.ref)?(l=a.name.endsWith("^")?a.name.substring(0,a.name.length-1):a.name,t?.quoted&&(l=`'${l}'`),s="before "):s="",i=`${t.label?`${s}commit `:""}${t.icon?`$(git-commit)${r.EO.Space}${l}${e??""}`:`${l}${e??""}`}`}}return t.capitalize&&t.expand&&!1!==t.label?(0,s.ZH)(i):i}let a=t.expand?` (${e.map(e=>e.name).join(", ")})`:"";switch(e[0].refType){case"branch":return`${e.length} branches${a}`;case"tag":return`${e.length} tags${a}`;default:return`${e.length} ${m(e[0])?"stashes":"commits"}${a}`}}function u(e){return"branch"===e.refType&&e.remote?(0,o.km)(e.name):e.name}function c(e){switch(e?.refType){case"branch":return"Branch";case"stash":return"Stash";case"tag":return"Tag";default:return"Commit"}}function h(e){return e?.refType==="branch"}function d(e){return null!=e&&"object"==typeof e&&"string"==typeof e.refType&&"string"==typeof e.repoPath&&"string"==typeof e.ref&&"string"==typeof e.name}function p(e){return e?.refType==="revision"}function g(e){return e?.refType==="revision"&&(0,n.p8)(e.ref)}function m(e){return e?.refType==="stash"||e?.refType==="revision"&&!!e?.stashName}function f(e){return e?.refType==="tag"}},7687:(e,t,i)=>{i.d(t,{a:()=>IntegrationService,p:()=>R});var r=i(1398),s=i(6741),o=i(1849);let n={launchpad:"launchpad"};var a=i(2870),l=i(4152),u=i(9388),c=i(6206),h=i(3361),d=i(9091),p=i(4941),g=i(1003),m=i(225),f=i(8593),w=i(8094),v=i(4269),y=Object.defineProperty,b=Object.getOwnPropertyDescriptor,C=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?b(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&y(t,i,o),o};let IntegrationService=class IntegrationService{constructor(e,t,i){this.container=e,this.authenticationService=t,this.configuredIntegrationService=i,this._disposable=r.Disposable.from(a.H.onDidChange(e=>{a.H.changed(e,"remotes")&&this._ignoreSSLErrors.clear()}),r.authentication.onDidChangeSessions(this.onAuthenticationSessionsChanged,this),e.subscription.onDidCheckIn(this.onUserCheckedIn,this),e.subscription.onDidChange(this.onDidChangeSubscription,this))}_onDidChangeConnectionState=new r.EventEmitter;get onDidChangeConnectionState(){return this._onDidChangeConnectionState.event}_onDidSyncCloudIntegrations=new r.EventEmitter;get onDidSyncCloudIntegrations(){return this._onDidSyncCloudIntegrations.event}get onDidChangeConfiguredIntegrations(){return this.configuredIntegrationService.onDidChange}_connectedCache=new Set;_disposable;_integrations=new Map;dispose(){this._integrations.forEach(e=>e.dispose()),this._integrations.clear(),this._disposable?.dispose()}async syncCloudIntegrations(e){let t=(0,g.dQ)(),i=new Set,r=new Map;if(await this.container.subscription.getAuthenticationSession()){let e=await this.container.cloudIntegrations,s=await e?.getConnections();if(null==s)return;s.map(e=>{let s=m.F7[e.provider];if(null!=s&&(i.add(m.F7[e.provider]),e.domain?.length>0))try{let t=new URL(e.domain).host;r.set(s,t)}catch{p.Vy.warn(`Invalid domain for ${s} integration: ${e.domain}. Ignoring.`,t)}})}for await(let t of this.getSupportedCloudIntegrations(r))await t.syncCloudConnection(i.has(t.id)?"connected":"disconnected",e);return this.container.telemetry.enabled&&this.container.telemetry.setGlobalAttributes({"cloudIntegrations.connected.count":i.size,"cloudIntegrations.connected.ids":(0,d.fj)(i.values(),",")}),this._onDidSyncCloudIntegrations.fire(),i}async *getSupportedCloudIntegrations(e){for(let t of(0,m.It)())if((0,v.Ii)(t)&&!e.has(t)){let e=await this.get(t,void 0);null!=e&&(yield e)}else{let i=await this.get(t,e.get(t));null!=i&&(yield i)}}onUserCheckedIn(){this.syncCloudIntegrations(!1)}onDidChangeSubscription(e){e.current?.account==null&&this.syncCloudIntegrations(!1)}async manageCloudIntegrations(e){let t=(0,g.dQ)();if(this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/settingsOpened",{"integration.id":void 0},e),null!=(await this.container.subscription.getSubscription()).account||await this.container.subscription.loginOrSignUp(!0,e)){try{let e=await this.container.accountAuthentication.getExchangeToken();if(!await (0,l.CZ)(this.container.urls.getGkDevUrl("settings/integrations",`token=${e}`)))return}catch(e){if(p.Vy.error(e,t),!await (0,l.CZ)(this.container.urls.getGkDevUrl("settings/integrations")))return}(0,h.s)(r.window.onDidChangeWindowState,2)(async t=>{if(t.focused){let t=await this.syncCloudIntegrations(!0);this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/connected",{"integration.ids":void 0,"integration.connected.ids":t?(0,d.fj)(t.values(),","):void 0},e)}})}}async connectCloudIntegrations(e,t){let i,s=(0,g.dQ)(),o=e?.integrationIds;this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/connecting",{"integration.ids":o?.join(",")},t);let a=(await this.container.subscription.getSubscription()).account,u=new Set;if(o?.length){for(let t of(e?.skipIfConnected&&!e?.skipPreSync&&await this.syncCloudIntegrations(!0),o))try{let e=await this.get(t);if(null==e)continue;(e.maybeConnected??await e.isConnected())&&u.add(t)}catch(e){p.Vy.log(`Failed to get integration ${t} by its ID. Consider it as not-connected and ignore. Error message: ${e.message}`,s)}if(e?.skipIfConnected&&u.size===o.length)return!0}let c="source=gitlens";if(t?.source!=null&&null!=n[t.source]&&(c+=`&context=${n[t.source]}`),null!=o){let e=[];for(let t of o){let i=m.xq[t];null==i?p.Vy.error(void 0,s,`Attempting to connect unsupported cloud integration type: ${t}`):e.push(i)}e.length>0&&(c+=`&provider=${e.join(",")}`)}let f=c;try{if(null!=a){let e=await this.container.accountAuthentication.getExchangeToken(m.Je);c+=`&token=${e}`}else{let e=await r.env.asExternalUri(r.Uri.parse(`${r.env.uriScheme}://${this.container.context.extension.id}/${m.Je}`));c+=`&redirect_uri=${encodeURIComponent(e.toString(!0))}`}if(!await (0,l.CZ)(this.container.urls.getGkDevUrl("connect",c)))return!1}catch(e){if(p.Vy.error(e,s),!await (0,l.CZ)(this.container.urls.getGkDevUrl("connect",f)))return!1}let w=(0,h.I7)(this.container.uri.onDidReceiveCloudIntegrationAuthenticationUri,(e,t)=>{t(new URLSearchParams(e.query).get("code")??void 0)});try{i=await r.window.withProgress({location:r.ProgressLocation.Notification,title:"Connecting integrations...",cancellable:!0},(e,t)=>Promise.race([w.promise,new Promise((e,i)=>t.onCancellationRequested(()=>i("Cancelled"))),new Promise((e,t)=>setTimeout(t,3e5,"Cancelled"))]))}catch{return!1}finally{w.cancel()}if(null==a&&(null==i||(await this.container.subscription.loginWithCode({code:i},t),null==(a=(await this.container.subscription.getSubscription()).account))))return!1;let v=await this.syncCloudIntegrations(!0);if(this.container.telemetry.enabled&&this.container.telemetry.sendEvent("cloudIntegrations/connected",{"integration.ids":o?.join(","),"integration.connected.ids":v?(0,d.fj)(v.values(),","):void 0},t),null!=o){for(let e of o){let t=await this.get(e);if(null!=t&&(t.maybeConnected??await t.isConnected())&&!u.has(e))return!0}return!1}return!0}onAuthenticationSessionsChanged(e){for(let t of this._integrations.values())e.provider.id===t.authProvider.id&&t.refresh()}connected(e,t){this._connectedCache.has(t)||(this._connectedCache.add(t),this.container.telemetry.enabled&&("hosting"===e.type?(0,m.LT)(e.id)?this.container.telemetry.sendEvent("cloudIntegrations/hosting/connected",{"hostingProvider.provider":e.id,"hostingProvider.key":t}):this.container.telemetry.sendEvent("remoteProviders/connected",{"hostingProvider.provider":e.id,"hostingProvider.key":t,"remoteProviders.key":t}):this.container.telemetry.sendEvent("cloudIntegrations/issue/connected",{"issueProvider.provider":e.id,"issueProvider.key":t})),setTimeout(()=>this._onDidChangeConnectionState.fire({key:t,reason:"connected"}),250))}disconnected(e,t){this._connectedCache.delete(t),this.container.telemetry.enabled&&("hosting"===e.type?(0,m.LT)(e.id)?this.container.telemetry.sendEvent("cloudIntegrations/hosting/disconnected",{"hostingProvider.provider":e.id,"hostingProvider.key":t}):this.container.telemetry.sendEvent("remoteProviders/disconnected",{"hostingProvider.provider":e.id,"hostingProvider.key":t,"remoteProviders.key":t}):this.container.telemetry.sendEvent("cloudIntegrations/issue/disconnected",{"issueProvider.provider":e.id,"issueProvider.key":t})),setTimeout(()=>this._onDidChangeConnectionState.fire({key:t,reason:"disconnected"}),250)}isConnected(e){return null==e?0!==this._connectedCache.size:this._connectedCache.has(e)}async getConfigured(e){return this.configuredIntegrationService.getConfigured(e)}async get(e,t){let r=this.getCached(e,t);if(null==r){switch(e){case o.Q7.GitHub:r=new(await Promise.resolve().then(i.bind(i,7320))).GitHubIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this));break;case o.PY.CloudGitHubEnterprise:if(null==t){if(null!=(r=this.findCachedById(e)))return r;let s=await this.getConfigured({id:o.PY.CloudGitHubEnterprise});if(s.length){let{domain:o}=s[0];if(null==o)throw Error(`Domain is required for '${e}' integration`);r=new(await Promise.resolve().then(i.bind(i,7320))).GitHubEnterpriseIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),o,e),t=o;break}return}r=new(await Promise.resolve().then(i.bind(i,7320))).GitHubEnterpriseIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),t,e);break;case o.PY.GitHubEnterprise:if(null==t)throw Error(`Domain is required for '${e}' integration`);r=new(await Promise.resolve().then(i.bind(i,7320))).GitHubEnterpriseIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),t,e);break;case o.Q7.GitLab:r=new(await Promise.resolve().then(i.bind(i,5784))).GitLabIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this));break;case o.PY.CloudGitLabSelfHosted:if(null==t){if(null!=(r=this.findCachedById(e)))return r;let s=await this.getConfigured({id:o.PY.CloudGitLabSelfHosted});if(s.length){let{domain:o}=s[0];if(null==o)throw Error(`Domain is required for '${e}' integration`);r=new(await Promise.resolve().then(i.bind(i,5784))).GitLabSelfHostedIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),o,e),t=o;break}return}r=new(await Promise.resolve().then(i.bind(i,5784))).GitLabSelfHostedIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),t,e);break;case o.PY.GitLabSelfHosted:if(null==t)throw Error(`Domain is required for '${e}' integration`);r=new(await Promise.resolve().then(i.bind(i,5784))).GitLabSelfHostedIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),t,e);break;case o.Q7.Bitbucket:r=new(await Promise.resolve().then(i.bind(i,8094))).BitbucketIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this));break;case o.PY.BitbucketServer:if(null==t){if(null!=(r=this.findCachedById(e)))return r;let s=await this.getConfigured({id:o.PY.BitbucketServer});if(s.length){let{domain:o}=s[0];if(null==o)throw Error(`Domain is required for '${e}' integration`);r=new(await Promise.resolve().then(i.bind(i,5248))).BitbucketServerIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),o),t=o;break}return}r=new(await Promise.resolve().then(i.bind(i,5248))).BitbucketServerIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this),t);break;case o.Q7.AzureDevOps:r=new(await Promise.resolve().then(i.bind(i,8593))).AzureDevOpsIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this));break;case o.tp.Jira:r=new(await Promise.resolve().then(i.bind(i,903))).JiraIntegration(this.container,this.authenticationService,this.getProvidersApi.bind(this));break;default:throw Error(`Integration with '${e}' is not supported`)}this._integrations.set(this.getCacheKey(e,t),r)}return r}_providersApi;async getProvidersApi(){if(null==this._providersApi){let t=this.container,r=this.authenticationService;async function e(){return new(await Promise.resolve().then(i.bind(i,149))).ProvidersApi(t,r)}this._providersApi=e()}return this._providersApi}getByRemote(e){return e?.provider==null?Promise.resolve(void 0):this.getByRemoteCore(e,this.get)}getByRemoteCached(e){if(e?.provider!=null)return this.getByRemoteCore(e,this.getCached)}getByRemoteCore(e,t){let i=t.bind(this);switch(e.provider.id){case"azure-devops":if((0,f.isAzureCloudDomain)(e.provider.domain))return i(o.Q7.AzureDevOps);return t===this.get?Promise.resolve(void 0):void 0;case"bitbucket":if((0,w.isBitbucketCloudDomain)(e.provider.domain))return i(o.Q7.Bitbucket);return t===this.get?Promise.resolve(void 0):void 0;case"bitbucket-server":if(!(0,w.isBitbucketCloudDomain)(e.provider.domain))return i(o.PY.BitbucketServer);return t===this.get?Promise.resolve(void 0):void 0;case"github":if(null!=e.provider.domain&&!(0,v.EO)(e.provider.domain))return i(e.provider.custom?o.PY.GitHubEnterprise:o.PY.CloudGitHubEnterprise,e.provider.domain);return i(o.Q7.GitHub);case"gitlab":if(null!=e.provider.domain&&!(0,v.Gz)(e.provider.domain))return i(e.provider.custom?o.PY.GitLabSelfHosted:o.PY.CloudGitLabSelfHosted,e.provider.domain);return i(o.Q7.GitLab);default:return t===this.get?Promise.resolve(void 0):void 0}}async getMyIssues(e,t){let i=new Map,r=e?.filter(e=>e in o.Q7||e in o.PY),s=new Map,n=!1;for(let e of this.container.git.openRepositories)for(let t of(await e.git.remotes().getRemotes())){let e=await t.getIntegration();if(null!=e){for(let i of(e.id===o.Q7.AzureDevOps&&(n=!0),r?.length?r:[...Object.values(o.Q7),...Object.values(o.PY)]))if(e.id===i&&t.provider?.owner!=null&&t.provider?.repoName!=null){let e={key:`${t.provider.owner}/${t.provider.repoName}`,owner:t.provider.owner,name:t.provider.repoName};s.has(i)?s.get(i)?.push(e):s.set(i,[e])}}}for(let r of e?.length?e:[...Object.values(o.Q7),...Object.values(o.tp),...Object.values(o.PY)]){let e=await this.get(r),a=t?.openRepositoriesOnly&&r!==o.Q7.AzureDevOps&&((0,v.KC)(r)||(0,v.NT)(r))&&!s.has(r)||r===o.Q7.AzureDevOps&&!n;null==e||a||i.set(e,t?.openRepositoriesOnly&&!a?s.get(r):void 0)}if(0!==i.size)return this.getMyIssuesCore(i,t?.cancellation)}async getMyIssuesCore(e,t){let i=[];for(let[r,s]of e)null!=r&&i.push(r.searchMyIssues(s,t));let r=await Promise.allSettled(i);return[...(0,d.Bq)((0,d.x1)(r,e=>"fulfilled"===e.status?e.value:void 0))]}async getMyIssuesForRemotes(e){if(Array.isArray(e)||(e=[e]),!e.length)return;if(1===e.length){let[t]=e;if(t?.provider==null)return;let i=await this.getByRemote(t);return i?.searchMyIssues(t.provider.repoDesc)}let t=new Map;for(let i of e){if(i?.provider==null)continue;let e=await i.getIntegration();if(null==e)continue;let r=t.get(e);null==r&&(r=[],t.set(e,r)),r.push(i.provider.repoDesc)}return this.getMyIssuesCore(t)}async getMyCurrentAccounts(e){let t=new Map;return await Promise.allSettled(e.map(async e=>{let i=await this.get(e);if(null==i)return;let r=await i.getCurrentAccount();r&&t.set(e,r)})),t}async getMyPullRequests(e,t,i){let r=new Map;for(let t of e?.length?e:Object.values(o.Q7)){let e;try{e=await this.get(t)}catch{}null!=e&&r.set(e,void 0)}if(0!==r.size)return this.getMyPullRequestsCore(r,t,i)}async getMyPullRequestsCore(e,t,i){let r=Date.now(),s=[];for(let[r,o]of e)null!=r&&s.push(r.searchMyPullRequests(o,t,i));let o=await Promise.allSettled(s),n=[...(0,d.x1)(o,e=>"fulfilled"===e.status&&e.value?.error!=null?e.value.error:void 0)];return n.length?{error:1===n.length?n[0]:AggregateError(n),duration:Date.now()-r}:{value:[...(0,d.Bq)((0,d.x1)(o,e=>"fulfilled"===e.status&&null!=e.value&&e.value?.error==null?e.value.value:void 0))],duration:Date.now()-r}}async getMyPullRequestsForRemotes(e){if(Array.isArray(e)||(e=[e]),!e.length)return;if(1===e.length){let[t]=e;if(t?.provider==null)return;let i=await this.getByRemote(t);return i?.searchMyPullRequests(t.provider.repoDesc)}let t=new Map;for(let i of e){if(i?.provider==null)continue;let e=await i.getIntegration();if(null==e)continue;let r=t.get(e);null==r&&(r=[],t.set(e,r)),r.push(i.provider.repoDesc)}return this.getMyPullRequestsCore(t)}isMaybeConnected(e){return!!(e.provider?.id!=null&&this.supports(e.provider.id))&&this.getByRemoteCached(e)?.maybeConnected}async reset(){for(let e of this._integrations.values())await e.reset();await this.authenticationService.reset(),await this.container.storage.deleteWithPrefix("provider:authentication:skip"),queueMicrotask(()=>void this.syncCloudIntegrations(!0))}supports(e){return null!=R(e)}_ignoreSSLErrors=new Map;ignoreSSLErrors(e){if(s.HZ)return!1;let t=this._ignoreSSLErrors.get(e.id);if(void 0===t){let i=a.H.get("remotes")?.find(t=>t.type.toLowerCase()===e.id&&t.domain===e.domain);t=i?.ignoreSSLErrors??!1,this._ignoreSSLErrors.set(e.id,t)}return t}getCached(e,t){return this._integrations.get(this.getCacheKey(e,t))}findCachedById(e){let t=this.getCacheKey(e,"");for(let[e,i]of this._integrations)if(e.startsWith(t))return i}getCacheKey(e,t){return(0,v.NT)(e)?`${e}:${t}`:e}};function R(e){switch(e){case"azure-devops":return o.Q7.AzureDevOps;case"bitbucket":return o.Q7.Bitbucket;case"github":return o.Q7.GitHub;case"gitlab":return o.Q7.GitLab;case"bitbucket-server":return o.PY.BitbucketServer;default:return}}C([(0,u.G)(),(0,c.Yz)()],IntegrationService.prototype,"syncCloudIntegrations",1),C([(0,c.Rm)({args:{0:e=>e?.length?e.join(","):"<undefined>",1:!1}})],IntegrationService.prototype,"getMyIssues",1),C([(0,c.Yz)({args:{0:e=>Array.isArray(e)?e.map(e=>e.name):e.name}})],IntegrationService.prototype,"getMyIssuesForRemotes",1),C([(0,c.Rm)({args:{0:e=>e?.length?e.join(","):"<undefined>"}})],IntegrationService.prototype,"getMyCurrentAccounts",1),C([(0,c.Rm)({args:{0:e=>e?.length?e.join(","):"<undefined>",1:!1}})],IntegrationService.prototype,"getMyPullRequests",1),C([(0,c.Yz)({args:{0:e=>Array.isArray(e)?e.map(e=>e.name):e.name}})],IntegrationService.prototype,"getMyPullRequestsForRemotes",1),C([(0,c.Rm)()],IntegrationService.prototype,"reset",1)},7688:(e,t,i)=>{i.d(t,{_:()=>r});let r="gitlens.action."},7808:(e,t,i)=>{i.d(t,{m9:()=>a,Fx:()=>l,uR:()=>u});var r=i(6989);function s(e,t){let[i,r,s,o]=e;i+=(r&s|~r&o)+t[0]-0x28955b88|0,o+=((i=(i<<7|i>>>25)+r|0)&r|~i&s)+t[1]-0x173848aa|0,s+=((o=(o<<12|o>>>20)+i|0)&i|~o&r)+t[2]+0x242070db|0,r+=((s=(s<<17|s>>>15)+o|0)&o|~s&i)+t[3]-0x3e423112|0,i+=((r=(r<<22|r>>>10)+s|0)&s|~r&o)+t[4]-0xa83f051|0,o+=((i=(i<<7|i>>>25)+r|0)&r|~i&s)+t[5]+0x4787c62a|0,s+=((o=(o<<12|o>>>20)+i|0)&i|~o&r)+t[6]-0x57cfb9ed|0,r+=((s=(s<<17|s>>>15)+o|0)&o|~s&i)+t[7]-0x2b96aff|0,i+=((r=(r<<22|r>>>10)+s|0)&s|~r&o)+t[8]+0x698098d8|0,o+=((i=(i<<7|i>>>25)+r|0)&r|~i&s)+t[9]-0x74bb0851|0,s+=((o=(o<<12|o>>>20)+i|0)&i|~o&r)+t[10]-42063|0,r+=((s=(s<<17|s>>>15)+o|0)&o|~s&i)+t[11]-0x76a32842|0,i+=((r=(r<<22|r>>>10)+s|0)&s|~r&o)+t[12]+0x6b901122|0,o+=((i=(i<<7|i>>>25)+r|0)&r|~i&s)+t[13]-0x2678e6d|0,s+=((o=(o<<12|o>>>20)+i|0)&i|~o&r)+t[14]-0x5986bc72|0,r+=((s=(s<<17|s>>>15)+o|0)&o|~s&i)+t[15]+0x49b40821|0,i+=((r=(r<<22|r>>>10)+s|0)&o|s&~o)+t[1]-0x9e1da9e|0,o+=((i=(i<<5|i>>>27)+r|0)&s|r&~s)+t[6]-0x3fbf4cc0|0,s+=((o=(o<<9|o>>>23)+i|0)&r|i&~r)+t[11]+0x265e5a51|0,r+=((s=(s<<14|s>>>18)+o|0)&i|o&~i)+t[0]-0x16493856|0,i+=((r=(r<<20|r>>>12)+s|0)&o|s&~o)+t[5]-0x29d0efa3|0,o+=((i=(i<<5|i>>>27)+r|0)&s|r&~s)+t[10]+0x2441453|0,s+=((o=(o<<9|o>>>23)+i|0)&r|i&~r)+t[15]-0x275e197f|0,r+=((s=(s<<14|s>>>18)+o|0)&i|o&~i)+t[4]-0x182c0438|0,i+=((r=(r<<20|r>>>12)+s|0)&o|s&~o)+t[9]+0x21e1cde6|0,o+=((i=(i<<5|i>>>27)+r|0)&s|r&~s)+t[14]-0x3cc8f82a|0,s+=((o=(o<<9|o>>>23)+i|0)&r|i&~r)+t[3]-0xb2af279|0,r+=((s=(s<<14|s>>>18)+o|0)&i|o&~i)+t[8]+0x455a14ed|0,i+=((r=(r<<20|r>>>12)+s|0)&o|s&~o)+t[13]-0x561c16fb|0,o+=((i=(i<<5|i>>>27)+r|0)&s|r&~s)+t[2]-0x3105c08|0,s+=((o=(o<<9|o>>>23)+i|0)&r|i&~r)+t[7]+0x676f02d9|0,r+=((s=(s<<14|s>>>18)+o|0)&i|o&~i)+t[12]-0x72d5b376|0,i+=((r=(r<<20|r>>>12)+s|0)^s^o)+t[5]-378558|0,o+=((i=(i<<4|i>>>28)+r|0)^r^s)+t[8]-0x788e097f|0,s+=((o=(o<<11|o>>>21)+i|0)^i^r)+t[11]+0x6d9d6122|0,r+=((s=(s<<16|s>>>16)+o|0)^o^i)+t[14]-0x21ac7f4|0,i+=((r=(r<<23|r>>>9)+s|0)^s^o)+t[1]-0x5b4115bc|0,o+=((i=(i<<4|i>>>28)+r|0)^r^s)+t[4]+0x4bdecfa9|0,s+=((o=(o<<11|o>>>21)+i|0)^i^r)+t[7]-0x944b4a0|0,r+=((s=(s<<16|s>>>16)+o|0)^o^i)+t[10]-0x41404390|0,i+=((r=(r<<23|r>>>9)+s|0)^s^o)+t[13]+0x289b7ec6|0,o+=((i=(i<<4|i>>>28)+r|0)^r^s)+t[0]-0x155ed806|0,s+=((o=(o<<11|o>>>21)+i|0)^i^r)+t[3]-0x2b10cf7b|0,r+=((s=(s<<16|s>>>16)+o|0)^o^i)+t[6]+0x4881d05|0,i+=((r=(r<<23|r>>>9)+s|0)^s^o)+t[9]-0x262b2fc7|0,o+=((i=(i<<4|i>>>28)+r|0)^r^s)+t[12]-0x1924661b|0,s+=((o=(o<<11|o>>>21)+i|0)^i^r)+t[15]+0x1fa27cf8|0,r+=((s=(s<<16|s>>>16)+o|0)^o^i)+t[2]-0x3b53a99b|0,r=(r<<23|r>>>9)+s|0,i+=(s^(r|~o))+t[0]-0xbd6ddbc|0,i=(i<<6|i>>>26)+r|0,o+=(r^(i|~s))+t[7]+0x432aff97|0,o=(o<<10|o>>>22)+i|0,s+=(i^(o|~r))+t[14]-0x546bdc59|0,s=(s<<15|s>>>17)+o|0,r+=(o^(s|~i))+t[5]-0x36c5fc7|0,r=(r<<21|r>>>11)+s|0,i+=(s^(r|~o))+t[12]+0x655b59c3|0,i=(i<<6|i>>>26)+r|0,o+=(r^(i|~s))+t[3]-0x70f3336e|0,o=(o<<10|o>>>22)+i|0,s+=(i^(o|~r))+t[10]-1051523|0,s=(s<<15|s>>>17)+o|0,r+=(o^(s|~i))+t[1]-0x7a7ba22f|0,r=(r<<21|r>>>11)+s|0,i+=(s^(r|~o))+t[8]+0x6fa87e4f|0,i=(i<<6|i>>>26)+r|0,o+=(r^(i|~s))+t[15]-0x1d31920|0,o=(o<<10|o>>>22)+i|0,s+=(i^(o|~r))+t[6]-0x5cfebcec|0,s=(s<<15|s>>>17)+o|0,r+=(o^(s|~i))+t[13]+0x4e0811a1|0,r=(r<<21|r>>>11)+s|0,i+=(s^(r|~o))+t[4]-0x8ac817e|0,i=(i<<6|i>>>26)+r|0,o+=(r^(i|~s))+t[11]-0x42c50dcb|0,o=(o<<10|o>>>22)+i|0,s+=(i^(o|~r))+t[2]+0x2ad7d2bb|0,s=(s<<15|s>>>17)+o|0,r+=(o^(s|~i))+t[9]-0x14792c6f|0,r=(r<<21|r>>>11)+s|0,e[0]=i+e[0]|0,e[1]=r+e[1]|0,e[2]=s+e[2]|0,e[3]=o+e[3]|0}let o=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];function n(e){let t="";for(let i=0;i<4;i+=1)t+=o[e>>8*i+4&15]+o[e>>8*i&15];return t}function a(){return(0,r.K)(globalThis.crypto.getRandomValues(new Uint8Array(16)))}function l(e,t="hex"){return function(e,t="hex"){let i=(function(e){let t,i=e.length,r=[0x67452301,-0x10325477,-0x67452302,0x10325476];for(t=64;t<=i;t+=64)s(r,function(e){let t=[];for(let i=0;i<64;i+=4)t[i>>2]=e.charCodeAt(i)+(e.charCodeAt(i+1)<<8)+(e.charCodeAt(i+2)<<16)+(e.charCodeAt(i+3)<<24);return t}(e.substring(t-64,t)));let o=(e=e.substring(t-64)).length,n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<o;t+=1)n[t>>2]|=e.charCodeAt(t)<<(t%4<<3);if(n[t>>2]|=128<<(t%4<<3),t>55)for(s(r,n),t=0;t<16;t+=1)n[t]=0;let a=(8*i).toString(16).match(/(.*?)(.{0,8})$/),l=parseInt(a[2],16),u=parseInt(a[1],16)||0;return n[14]=l,n[15]=u,s(r,n),r})(e).map(n).join("");return"hex"===t?i:globalThis.btoa(function(e){let t=[],i=e.length;for(let r=0;r<i-1;r+=2)t.push(parseInt(e.substring(r,r+2),16));return String.fromCharCode(...t)}(i))}(e,t)}function u(){return globalThis.crypto.randomUUID()}},7841:(e,t,i)=>{i.r(t),i.d(t,{GeminiProvider:()=>GeminiProvider});var r=i(1820),s=i(8730);let o=[{id:"gemini-2.5-flash-preview-04-17",name:"Gemini 2.5 Flash (Preview)",maxTokens:{input:1048576,output:65536},provider:r.mJ},{id:"gemini-2.5-pro-preview-03-25",name:"Gemini 2.5 Pro (Preview)",maxTokens:{input:1048576,output:65536},provider:r.mJ},{id:"gemini-2.5-pro-exp-03-25",name:"Gemini 2.5 Pro (Experimental)",maxTokens:{input:1048576,output:65536},provider:r.mJ,hidden:!0},{id:"gemini-2.0-flash",name:"Gemini 2.0 Flash",maxTokens:{input:1048576,output:8192},provider:r.mJ,default:!0},{id:"gemini-2.0-flash-001",name:"Gemini 2.0 Flash",maxTokens:{input:1048576,output:8192},provider:r.mJ,hidden:!0},{id:"gemini-2.0-flash-lite",name:"Gemini 2.0 Flash-Lite",maxTokens:{input:1048576,output:8192},provider:r.mJ},{id:"gemini-2.0-flash-lite-001",name:"Gemini 2.0 Flash-Lite",maxTokens:{input:1048576,output:8192},provider:r.mJ,hidden:!0},{id:"gemini-2.0-flash-lite-preview-02-05",name:"Gemini 2.0 Flash-Lite (Preview)",maxTokens:{input:1048576,output:8192},provider:r.mJ,hidden:!0},{id:"gemini-2.0-pro-exp-02-05",name:"Gemini 2.0 Pro (Experimental)",maxTokens:{input:2097152,output:8192},provider:r.mJ},{id:"gemini-2.0-flash-thinking-exp-01-21",name:"Gemini 2.0 Flash Thinking (Experimental)",maxTokens:{input:1048576,output:8192},provider:r.mJ},{id:"gemini-2.0-flash-exp",name:"Gemini 2.0 Flash (Experimental)",maxTokens:{input:1048576,output:8192},provider:r.mJ},{id:"gemini-exp-1206",name:"Gemini Experimental 1206",maxTokens:{input:2097152,output:8192},provider:r.mJ,hidden:!0},{id:"gemini-exp-1121",name:"Gemini Experimental 1121",maxTokens:{input:2097152,output:8192},provider:r.mJ,hidden:!0},{id:"gemini-1.5-pro",name:"Gemini 1.5 Pro",maxTokens:{input:2097152,output:8192},provider:r.mJ},{id:"gemini-1.5-flash",name:"Gemini 1.5 Flash",maxTokens:{input:1048576,output:8192},provider:r.mJ},{id:"gemini-1.5-flash-8b",name:"Gemini 1.5 Flash 8B",maxTokens:{input:1048576,output:8192},provider:r.mJ}];let GeminiProvider=class GeminiProvider extends s.G{id=r.mJ.id;name=r.mJ.name;descriptor=r.mJ;config={keyUrl:"https://aistudio.google.com/app/apikey"};getModels(){return Promise.resolve(o)}getUrl(e){return"https://generativelanguage.googleapis.com/v1beta/chat/completions"}fetchCore(e,t,i,r,s){if("max_completion_tokens"in r){let{max_completion_tokens:e,...t}=r;r=e?{max_tokens:e,...t}:t}return super.fetchCore(e,t,i,r,s)}}},7864:(e,t,i)=>{i.d(t,{Ar:()=>w,FO:()=>a,Mp:()=>m,NY:()=>PromiseCancelledError,Ro:()=>l,aj:()=>u,nZ:()=>o,sc:()=>p,uk:()=>f,v6:()=>n,w:()=>s,wD:()=>d,wW:()=>h,yL:()=>c,zu:()=>g});var r=i(9091);async function*s(e){let t=new Map(e.map((e,t)=>[t,e.then(e=>({index:t,value:e,status:"fulfilled"}),e=>({index:t,reason:e,status:"rejected"}))]));for(;t.size;){let e=await Promise.race(t.values());t.delete(e.index),yield e}}let PromiseCancelledError=class PromiseCancelledError extends Error{constructor(e,t){super(t),this.promise=e}};function o(e,t,i,r){return null==t&&null==i?e:new Promise((s,o)=>{let n,a,l=!1,u=t=>{n?.dispose(),a?.dispose(),l||(r?.onDidCancel!=null?r.onDidCancel(s,o,t):o(new PromiseCancelledError(e,r?.cancelMessage??("cancelled"===t?"CANCELLED":"TIMED OUT"))))};if(n=i?.onCancellationRequested(()=>u("cancelled")),null!=t)if("number"==typeof t){let e=setTimeout(()=>u("timedout"),t);a={dispose:()=>clearTimeout(e)}}else a=t.onCancellationRequested(()=>u("timedout"));e.then(()=>{l=!0,n?.dispose(),a?.dispose(),s(e)},e=>{l=!0,n?.dispose(),a?.dispose(),o(e)})})}function n(){let e={pending:!0,promise:void 0,fulfill:void 0,cancel:void 0};return e.promise=new Promise((t,i)=>{e.fulfill=function(i){e.pending=!1,t(i)},e.cancel=function(t){e.pending=!1,null!=t?i(t):i()}}),e}function a(e){return e?.pending?e.promise:void 0}function l(e,t){return e?.status==="fulfilled"?e.value:t}function u(e){return e.map(l).filter(e=>null!=e)}function c(e){return null!=e&&(e instanceof Promise||"function"==typeof e?.then)}function h(e,t,i,r){let s,o;if(!c(e))return Promise.resolve({value:e,paused:!1});if(null==t&&null==i)return e.then(e=>({value:e,paused:!1}));let n=Promise.race([e.then(e=>(s?.dispose(),o?.dispose(),t?.isCancellationRequested)?{value:Promise.resolve(e),paused:!0,reason:"cancelled"}:{value:e,paused:!1}),new Promise(r=>{let n=t=>{s?.dispose(),o?.dispose(),r({value:e,paused:!0,reason:t})};if(s=t?.onCancellationRequested(()=>n("cancelled")),null!=i){let e="number"==typeof i?AbortSignal.timeout(i):i,t=()=>n("timedout");e.addEventListener("abort",t),o={dispose:()=>e.removeEventListener("abort",t)}}})]);return null==r?n:n.then(e=>(e.paused&&setTimeout(()=>r(e),0),e))}async function d(e,t,i,s,o){if(0===e.size)return e;null!=s&&"number"==typeof s&&(s=AbortSignal.timeout(s));let n=await Promise.all((0,r.Tj)(e,([e,r])=>h(r.catch(e=>!t&&e instanceof Error?e:void 0),i,s).then(t=>[e,t])));if(null!=o&&n.some(([,e])=>e.paused)){async function a(){let e=new Map;for(let[t,i]of n)e.set(t,{value:i.paused?await i.value:i.value,paused:!1});return e}let e=n.some(([,e])=>e.paused&&"cancelled"===e.reason);o({value:a(),paused:!0,reason:e?"cancelled":"timedout"})}return new Map(n)}async function p(e,t,i,s){if(0===e.size)return e;null!=i&&"number"==typeof i&&(i=AbortSignal.timeout(i));let o=await Promise.all((0,r.Tj)(e,([e,[r,...s]])=>null==r?[e,[void 0,...s]]:h(r.catch(()=>void 0),t,i).then(t=>[e,[t,...s]])));if(null!=s&&o.some(([,[e]])=>e?.paused??!1)){async function n(){let e=new Map;for(let[t,[i,...r]]of o)e.set(t,[{value:i?.paused?await i.value:i?.value,paused:!1},...r]);return e}let e=o.some(([,[e]])=>e?.paused&&"cancelled"===e.reason);s({value:n(),paused:!0,reason:e?"cancelled":"timedout"})}return new Map(o)}async function g(e,t,i,r){null!=i&&"number"==typeof i&&(i=AbortSignal.timeout(i));let s=e.then(e=>null==e?e:p(e,t,i,r)),o=await h(e,t,i);return o.paused?{value:s,paused:o.paused,reason:o.reason}:{value:await s,paused:!1}}async function m(e,t){let i=Date.now(),r=await h(e,void 0,t.timeout);return{value:r.paused?await r.value.finally(()=>t.onSlow(Date.now()-i)):r.value,duration:Date.now()-i}}function f(e){return new Promise(t=>setTimeout(t,e))}function w(){return new Promise(e=>queueMicrotask(e))}},7945:(e,t,i)=>{i.d(t,{Or:()=>m,Bp:()=>f,K0:()=>w,j7:()=>v,d2:()=>k,BA:()=>y,Ey:()=>b,xT:()=>C,cD:()=>R,nX:()=>S,qv:()=>P,z2:()=>I,q:()=>A,oD:()=>D,vH:()=>_,qU:()=>$});var r=i(1398),s=i(9779),o=i(8518),n=i(6458),a=i(8601),l=i(8219),u=i(3219),c=i(326),h=i(5628),d=i(9065),p=i(5818),g=i(7273);function m(e){return"editorLine"===e.type}function f(e){return"timeline-item:git"===e.type}function w(e){return"viewItem"===e.type&&(0,s.P)(e.node.branch)}function v(e){return"viewItem"===e.type&&(0,o.WM)(e.node.commit)}function y(e){return"viewItem"===e.type&&(0,n.c)(e.node.contributor)}function b(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&(null!=t.file.repoPath||null!=t.repoPath)}function C(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&(0,o.WM)(t.commit)&&(null!=t.file.repoPath||null!=t.repoPath)}function R(e){if("viewItem"!==e.type)return!1;let t=e.node;return null!=t.file&&null!=t.ref1&&null!=t.ref2&&(null!=t.file.repoPath||null!=t.repoPath)}function k(e){return"viewItem"===e.type&&"string"==typeof e.node.compareRef?.ref&&"string"==typeof e.node.compareWithRef?.ref}function S(e){return"viewItem"===e.type&&(e.node instanceof g.t||e.node instanceof g.p)}function P(e){return"viewItem"===e.type&&(0,a.V)(e.node.remote)}function A(e){return"viewItem"===e.type&&e.node.repo instanceof l.LN}function I(e){return"viewItem"===e.type&&"string"==typeof e.node.repoPath}function D(e){return"viewItem"===e.type&&(0,u.d)(e.node.tag)}function _(e){if("viewItem"!==e.type)return!1;let t=e.node.workspace;return t instanceof c.j2||t instanceof h.h}function $(e,t,...i){let s,o=[...i],n=i[0];if(t?.expectsEditor){if((null==n||null!=n.id&&n.document?.uri!=null)&&(s=n,n=(i=i.slice(1))[0]),i.length>0&&(null==n||n instanceof r.Uri)){let[t,...n]=i;if(null!=t){null==s&&(t.toString()===r.window.activeTextEditor?.document.uri.toString()||e.endsWith("InDiffLeft"))&&(s=r.window.activeTextEditor);let i=n[0];return null!=i&&Array.isArray(i)&&0!==i.length&&i[0]instanceof r.Uri?[{command:e,type:"uris",args:o,editor:s,uri:t,uris:i},n.slice(1)]:[{command:e,type:"uri",args:o,editor:s,uri:t},n]}i=i.slice(1)}else if(null==s){if(null!=n&&"object"==typeof n&&"lineNumber"in n&&"uri"in n){let[,...t]=i;return[{command:e,type:"editorLine",args:o,editor:void 0,line:n.lineNumber-1,uri:n.uri},t]}s=r.window.activeTextEditor}}if(n instanceof p.eu){let[t,r,...s]=i;if(t instanceof p.eu&&Array.isArray(r)&&r[0]instanceof p.eu){let i=r.filter(e=>e?.constructor===t.constructor);return[{command:e,type:"viewItems",args:o,node:t,nodes:i},s]}return[{command:e,type:"viewItem",args:o,node:t,uri:t.uri},s]}if((0,d.D0)(n)){let t=[],r=0;for(let e of i){if(!(0,d.D0)(e))break;r++,t.push(e)}return[{command:e,type:"scm-states",args:o,scmResourceStates:t,uri:t[0].resourceUri},i.slice(r)]}if((0,d.xC)(n)){let t=[],r=0;for(let e of i){if(!(0,d.xC)(e))break;r++,t.push(e)}return[{command:e,type:"scm-groups",args:o,scmResourceGroups:t},i.slice(r)]}if(function(e){return null!=e&&null!=e&&null!=e.timestamp&&null!=e.label&&null!=e.ref&&null!=e.previousRef&&null!=e.message}(n)){let[t,r,...s]=i;return[{command:e,type:"timeline-item:git",args:o,item:t,uri:r},s]}if((0,d.Y6)(n)){let[t,...r]=i;return[{command:e,type:"scm",args:o,scm:t},r]}return[{command:e,type:"unknown",args:o,editor:s,uri:s?.document.uri},i]}},7984:(e,t,i)=>{let r;i.d(t,{n0:()=>v,nx:()=>w,w:()=>y,kM:()=>b,v7:()=>f,iS:()=>C});var s=i(1398),o=i(1182),n=i(8103),a=i(2870);function l(e,t){let i=Math.pow(10,t);return Math.round(e*i)/i}let RGBA=class RGBA{_rgbaBrand=void 0;r;g;b;a;constructor(e,t,i,r=1){this.r=0|Math.min(255,Math.max(0,e)),this.g=0|Math.min(255,Math.max(0,t)),this.b=0|Math.min(255,Math.max(0,i)),this.a=l(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b&&e.a===t.a}};let HSLA=class HSLA{_hslaBrand=void 0;h;s;l;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=l(Math.max(Math.min(1,t),0),3),this.l=l(Math.max(Math.min(1,i),0),3),this.a=l(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.l===t.l&&e.a===t.a}static fromRGBA(e){let t=e.r/255,i=e.g/255,r=e.b/255,s=e.a,o=Math.max(t,i,r),n=Math.min(t,i,r),a=0,l=0,u=(n+o)/2,c=o-n;if(c>0){switch(l=Math.min(u<=.5?c/(2*u):c/(2-2*u),1),o){case t:a=(i-r)/c+6*(i<r);break;case i:a=(r-t)/c+2;break;case r:a=(t-i)/c+4}a*=60,a=Math.round(a)}return new HSLA(a,l,u,s)}static _hue2rgb(e,t,i){return(i<0&&(i+=1),i>1&&(i-=1),i<1/6)?e+(t-e)*6*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e}static toRGBA(e){let t,i,r,s=e.h/360,{s:o,l:n,a}=e;if(0===o)t=i=r=n;else{let e=n<.5?n*(1+o):n+o-n*o,a=2*n-e;t=HSLA._hue2rgb(a,e,s+1/3),i=HSLA._hue2rgb(a,e,s),r=HSLA._hue2rgb(a,e,s-1/3)}return new RGBA(Math.round(255*t),Math.round(255*i),Math.round(255*r),a)}};let HSVA=class HSVA{_hsvaBrand=void 0;h;s;v;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=l(Math.max(Math.min(1,t),0),3),this.v=l(Math.max(Math.min(1,i),0),3),this.a=l(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.v===t.v&&e.a===t.a}static fromRGBA(e){let t,i=e.r/255,r=e.g/255,s=e.b/255,o=Math.max(i,r,s),n=o-Math.min(i,r,s);return new HSVA(Math.round(60*(0===n?0:o===i?((r-s)/n%6+6)%6:o===r?(s-i)/n+2:(i-r)/n+4)),0===o?0:n/o,o,e.a)}static toRGBA(e){let{h:t,s:i,v:r,a:s}=e,o=r*i,n=o*(1-Math.abs(t/60%2-1)),a=r-o,[l,u,c]=[0,0,0];return t<60?(l=o,u=n):t<120?(l=n,u=o):t<180?(u=o,c=n):t<240?(u=n,c=o):t<300?(l=n,c=o):t<=360&&(l=o,c=n),new RGBA(l=Math.round((l+a)*255),u=Math.round((u+a)*255),c=Math.round((c+a)*255),s)}};let Color=class Color{static from(e){return e instanceof Color?e:h(e)||Color.red}static fromCssVariable(e,t){return h(t.getPropertyValue(e).trim())||Color.red}static fromHex(e){return d(e)||Color.red}static equals(e,t){return!e&&!t||!!e&&!!t&&e.equals(t)}rgba;_hsla;get hsla(){return this._hsla?this._hsla:HSLA.fromRGBA(this.rgba)}_hsva;get hsva(){return this._hsva?this._hsva:HSVA.fromRGBA(this.rgba)}constructor(e){if(e)if(e instanceof RGBA)this.rgba=e;else if(e instanceof HSLA)this._hsla=e,this.rgba=HSLA.toRGBA(e);else if(e instanceof HSVA)this._hsva=e,this.rgba=HSVA.toRGBA(e);else throw Error("Invalid color ctor argument");else throw Error("Color needs a value")}equals(e){return null!=e&&!!e&&RGBA.equals(this.rgba,e.rgba)&&HSLA.equals(this.hsla,e.hsla)&&HSVA.equals(this.hsva,e.hsva)}getRelativeLuminance(){let e=Color._relativeLuminanceForComponent(this.rgba.r),t=Color._relativeLuminanceForComponent(this.rgba.g);return l(.2126*e+.7152*t+.0722*Color._relativeLuminanceForComponent(this.rgba.b),4)}static _relativeLuminanceForComponent(e){let t=e/255;return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}luminance(e){return function(e,t){if(0===t)return new Color(new RGBA(0,0,0,e.rgba.a));if(1===t)return new Color(new RGBA(255,255,255,e.rgba.a));let i=e.getRelativeLuminance(),r=20,s=(e,i)=>{let o=e.mix(i,.5),n=o.getRelativeLuminance();return!(1e-7>Math.abs(t-n))&&r--?n>t?s(e,o):s(o,i):o},o=(i>t?s(Color.black,e):s(e,Color.white)).rgba;return new Color(new RGBA(o.r,o.g,o.b,e.rgba.a))}(this,e)}getContrastRatio(e){let t=this.getRelativeLuminance(),i=e.getRelativeLuminance();return t>i?(t+.05)/(i+.05):(i+.05)/(t+.05)}isDarker(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3<128}isLighter(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3>=128}isLighterThan(e){return this.getRelativeLuminance()>e.getRelativeLuminance()}isDarkerThan(e){return this.getRelativeLuminance()<e.getRelativeLuminance()}lighten(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l+this.hsla.l*e,this.hsla.a))}darken(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l-this.hsla.l*e,this.hsla.a))}transparent(e){let{r:t,g:i,b:r,a:s}=this.rgba;return new Color(new RGBA(t,i,r,s*e))}isTransparent(){return 0===this.rgba.a}isOpaque(){return 1===this.rgba.a}opposite(){return new Color(new RGBA(255-this.rgba.r,255-this.rgba.g,255-this.rgba.b,this.rgba.a))}blend(e){let t=e.rgba,i=this.rgba.a,r=t.a,s=i+r*(1-i);if(s<1e-6)return Color.transparent;let o=this.rgba.r*i/s+t.r*r*(1-i)/s;return new Color(new RGBA(o,this.rgba.g*i/s+t.g*r*(1-i)/s,this.rgba.b*i/s+t.b*r*(1-i)/s,s))}mix(e,t){let i=this.rgba,r=e.rgba;return new Color(new RGBA(i.r+t*(r.r-i.r),i.g+t*(r.g-i.g),i.b+t*(r.b-i.b),i.a+t*(r.a-i.a)))}makeOpaque(e){if(this.isOpaque()||1!==e.rgba.a)return this;let{r:t,g:i,b:r,a:s}=this.rgba;return new Color(new RGBA(e.rgba.r-s*(e.rgba.r-t),e.rgba.g-s*(e.rgba.g-i),e.rgba.b-s*(e.rgba.b-r),1))}flatten(...e){let t=e.reduceRight((e,t)=>Color._flatten(t,e));return Color._flatten(this,t)}static _flatten(e,t){let i=1-e.rgba.a;return new Color(new RGBA(i*t.rgba.r+e.rgba.a*e.rgba.r,i*t.rgba.g+e.rgba.a*e.rgba.g,i*t.rgba.b+e.rgba.a*e.rgba.b))}_toString;toString(){return this._toString||(this._toString=function(e){return e.isOpaque()?`#${u(e.rgba.r)}${u(e.rgba.g)}${u(e.rgba.b)}`:`rgba(${e.rgba.r}, ${e.rgba.g}, ${e.rgba.b}, ${Number(e.rgba.a.toFixed(2))})`}(this)),this._toString}static getLighterColor(e,t,i){if(e.isLighterThan(t))return e;i=i||.5;let r=e.getRelativeLuminance(),s=t.getRelativeLuminance();return i=i*(s-r)/s,e.lighten(i)}static getDarkerColor(e,t,i){if(e.isDarkerThan(t))return e;i=i||.5;let r=e.getRelativeLuminance(),s=t.getRelativeLuminance();return i=i*(r-s)/r,e.darken(i)}static white=new Color(new RGBA(255,255,255,1));static black=new Color(new RGBA(0,0,0,1));static red=new Color(new RGBA(255,0,0,1));static blue=new Color(new RGBA(0,0,255,1));static green=new Color(new RGBA(0,255,0,1));static cyan=new Color(new RGBA(0,255,255,1));static lightgrey=new Color(new RGBA(211,211,211,1));static transparent=new Color(new RGBA(0,0,0,0))};function u(e){let t=e.toString(16);return 2!==t.length?`0${t}`:t}let c=/^((?:rgb|hsl)a?)\((-?\d+(?:%|deg)?)[,\s]+(-?\d+%?)[,\s]+(-?\d+%?)[,\s]*(-?[\d.]+%?)?\)$/i;function h(e){let t;if(0===(e=e.trim()).length)return null;if(e.charCodeAt(0)===o.s7.Hash)return d(e);let i=c.exec(e);if(null==i)return null;let r=i[1];switch(r){case"rgb":case"hsl":t=[parseInt(i[2],10),parseInt(i[3],10),parseInt(i[4],10),1];break;case"rgba":case"hsla":t=[parseInt(i[2],10),parseInt(i[3],10),parseInt(i[4],10),parseFloat(i[5])];break;default:return null}switch(r){case"rgb":case"rgba":return new Color(new RGBA(t[0],t[1],t[2],t[3]));case"hsl":case"hsla":return new Color(new HSLA(t[0],t[1],t[2],t[3]))}return Color.red}function d(e){let t=(e=e.trim()).length;if(0===t||e.charCodeAt(0)!==o.s7.Hash)return null;switch(t){case 7:{let t=16*p(e.charCodeAt(1))+p(e.charCodeAt(2));return new Color(new RGBA(t,16*p(e.charCodeAt(3))+p(e.charCodeAt(4)),16*p(e.charCodeAt(5))+p(e.charCodeAt(6)),1))}case 9:{let t=16*p(e.charCodeAt(1))+p(e.charCodeAt(2)),i=16*p(e.charCodeAt(3))+p(e.charCodeAt(4));return new Color(new RGBA(t,i,16*p(e.charCodeAt(5))+p(e.charCodeAt(6)),(16*p(e.charCodeAt(7))+p(e.charCodeAt(8)))/255))}case 4:{let t=p(e.charCodeAt(1)),i=p(e.charCodeAt(2)),r=p(e.charCodeAt(3));return new Color(new RGBA(16*t+t,16*i+i,16*r+r))}case 5:{let t=p(e.charCodeAt(1)),i=p(e.charCodeAt(2)),r=p(e.charCodeAt(3)),s=p(e.charCodeAt(4));return new Color(new RGBA(16*t+t,16*i+i,16*r+r,(16*s+s)/255))}default:return null}}function p(e){switch(e){case o.s7.Digit0:break;case o.s7.Digit1:return 1;case o.s7.Digit2:return 2;case o.s7.Digit3:return 3;case o.s7.Digit4:return 4;case o.s7.Digit5:return 5;case o.s7.Digit6:return 6;case o.s7.Digit7:return 7;case o.s7.Digit8:return 8;case o.s7.Digit9:return 9;case o.s7.a:case o.s7.A:return 10;case o.s7.b:case o.s7.B:return 11;case o.s7.c:case o.s7.C:return 12;case o.s7.d:case o.s7.D:return 13;case o.s7.e:case o.s7.E:return 14;case o.s7.f:case o.s7.F:return 15}return 0}var g=i(4808);let m=["#f66a0a","#ef6939","#e96950","#e26862","#db6871","#d3677e","#cc678a","#c46696","#bb66a0","#b365a9","#a965b3","#a064bb","#9664c4","#8a63cc","#7e63d3","#7162db","#6262e2","#5061e9","#3961ef","#0a60f6"];function f(){if(null==r){let e,{coldColor:t,hotColor:i}=a.H.get("heatmap");r={hot:(e="#0a60f6"===t&&"#f66a0a"===i?m:function(e,t,i){let r=[],s=Color.from(e),o=Color.from(t);r.push(s.toString());for(let e=1;e<19;e++){let t=s.mix(o,e/19);r.push(t.toString())}return r.push(o.toString()),r}(i,t,0)).slice(0,10),cold:e.slice(10,20)};let s=a.H.onDidChange(e=>{a.H.changed(e,["heatmap.ageThreshold","heatmap.hotColor","heatmap.coldColor"])&&(s.dispose(),r=void 0)})}return r}function w(e,t,i){let[r,s,o,n]=R(t,i);e.renderOptions.before.borderColor=`rgba(${r},${s},${o},${n})`}function v(e,t,i,r){let[o,n,l,u]=R(e,t),{fadeLines:c,locations:h}=a.H.get("heatmap"),d=h.includes("gutter"),p=h.includes("line"),g=h.includes("overview"),m=`${o},${n},${l},${u}`,f=r.get(m);return null==f?(f={decorationType:s.window.createTextEditorDecorationType({backgroundColor:p?`rgba(${o},${n},${l},${.15*u})`:void 0,opacity:c?`${t.computeOpacity(e).toFixed(2)} !important`:void 0,isWholeLine:!!p||!!c||void 0,gutterIconPath:d?s.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${o},${n},${l})' fill-opacity='${u}' x='8' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:d?"contain":void 0,overviewRulerLane:g?s.OverviewRulerLane.Center:void 0,overviewRulerColor:g?`rgba(${o},${n},${l},${.7*u})`:void 0}),rangesOrOptions:[i],dispose:!0},r.set(m,f)):f.rangesOrOptions.push(i),f.decorationType}function y(e,t,i,r){let s={renderOptions:{before:{...r}}};e.isUncommitted&&(s.renderOptions.before.color=r.uncommittedColor);let a=n.c.fromTemplate(t,e,i);return s.renderOptions.before.contentText=(0,g.eV)(a.replace(/ /g,o.EO.Space),1,1),s}function b(e,t,i,r,o,n){let l,u,c,h=0;for(let e of Object.values(o.tokenOptions))if(void 0!==e){if(null==e.truncateTo){h=-1;break}h+=e.truncateTo}if(h>=0&&(h+=(0,g.RG)((0,g.GW)(r,void 0)))>0&&(h+=3),t.enabled&&(l="solid",u="left"===t.location?"0 0 0 2px":"0 2px 0 0"),h>=0){let e=a.H.getCore("editor.letterSpacing");c=null!=e&&0!==e?`calc(${h}ch + ${Math.round(h*e)+(i?13:-6)}px)`:`calc(${h}ch ${i?"+ 13px":"- 6px"})`}return{backgroundColor:new s.ThemeColor("gitlens.gutterBackgroundColor"),borderStyle:l,borderWidth:u,color:new s.ThemeColor("gitlens.gutterForegroundColor"),fontWeight:n.weight??"normal",fontStyle:n.style??"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:`${e?"overline solid rgba(0, 0, 0, .2)":"none"};box-sizing: border-box${i?";padding: 0 0 0 18px":""}${n.family?`;font-family: ${n.family}`:""}${n.size?`;font-size: ${n.size}px`:""};`,width:c,uncommittedColor:new s.ThemeColor("gitlens.gutterUncommittedForegroundColor")}}function C(e,t,i,r,a=!0){let l=n.c.fromTemplate(t,e,{...i,messageTruncateAtNewLine:!0});return{renderOptions:{after:{backgroundColor:new s.ThemeColor("gitlens.trailingLineBackgroundColor"),color:new s.ThemeColor("gitlens.trailingLineForegroundColor"),contentText:(0,g.eV)(l.replace(/ /g,o.EO.Space),1,1),fontWeight:r?.weight??"normal",fontStyle:r?.style??"normal",textDecoration:`none${a?"":";position: absolute"}${r?.family?`;font-family: ${r.family}`:""}${r?.size?`;font-size: ${r.size}px`:""};`}}}}function R(e,t){let i=t.computeRelativeAge(e),r=function(e){let t=h(e);return null==t?null:[t.rgba.r,t.rgba.g,t.rgba.b,t.rgba.a]}((e.getTime()<t.coldThresholdTimestamp?t.colors.cold:t.colors.hot)[i]);return[...r??[0,0,0],null==r?0:0===i?1:i<=5?.8:.6]}},8027:(e,t,i)=>{i.d(t,{BI:()=>n,Wf:()=>p,b_:()=>l,nL:()=>u,pL:()=>g,pr:()=>h,wL:()=>m,x1:()=>d,xu:()=>c});var r=i(1398),s=i(4692),o=i(9181);function n(e,t){switch(t?.status){case"ahead":case"behind":case"diverged":return(0,s.G5)(e,`icon-branch-${t.status}.svg`);case"upToDate":return(0,s.G5)(e,"icon-branch-synced.svg");default:return new r.ThemeIcon("git-branch")}}let a={".":void 0,"!":"diff-ignored","?":"diff-added",A:"diff-added",D:"diff-removed",M:"diff-modified",R:"diff-renamed",C:"diff-added",AA:"warning",AU:"warning",UA:"warning",DD:"warning",DU:"warning",UD:"warning",UU:"warning",T:"diff-modified",U:"diff-modified"};function l(e){let t=a[e];return null!=t?new r.ThemeIcon(t):void 0}function u(e){if(null==e)return`<span class="codicon codicon-link" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`;if("pullrequest"===e.type)switch(e.state){case"merged":return`<span class="codicon codicon-git-merge" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`;case"closed":return`<span class="codicon codicon-git-pull-request-closed" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#f85149":"#cf222e"};"></span>`;case"opened":return`<span class="codicon codicon-git-pull-request" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`;default:return'<span class="codicon codicon-git-pull-request"></span>'}return e.closed?`<span class="codicon codicon-pass" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};"></span>`:`<span class="codicon codicon-issues" style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};"></span>`}function c(e){if(null==e)return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(link)</span>`;if("pullrequest"===e.type)switch(e.state){case"merged":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(git-merge)</span>`;case"closed":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#f85149":"#cf222e"};">$(git-pull-request-closed)</span>`;case"opened":return`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(git-pull-request)</span>`;default:return"$(git-pull-request)"}return e.closed?`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#a371f7":"#8250df"};">$(pass)</span>`:`<span style="color:${r.window.activeColorTheme.kind===r.ColorThemeKind.Dark?"#3fb950":"#1a7f37"};">$(issues)</span>`}function h(e){if(null==e)return new r.ThemeIcon("link",new r.ThemeColor("gitlens.closedAutolinkedIssueIconColor"));if("pullrequest"===e.type)switch(e.state){case"merged":return new r.ThemeIcon("git-merge",new r.ThemeColor("gitlens.mergedPullRequestIconColor"));case"closed":return new r.ThemeIcon("git-pull-request-closed",new r.ThemeColor("gitlens.closedPullRequestIconColor"));case"opened":return new r.ThemeIcon("git-pull-request",new r.ThemeColor("gitlens.openPullRequestIconColor"));default:return new r.ThemeIcon("git-pull-request")}return e.closed?new r.ThemeIcon("pass",new r.ThemeColor("gitlens.closedAutolinkedIssueIconColor")):new r.ThemeIcon("issues",new r.ThemeColor("gitlens.openAutolinkedIssueIconColor"))}function d(e,t,i){return i?.avatars&&t?.provider?.icon!=null?(0,s.G5)(e,`icon-${t.provider.icon}.svg`):new r.ThemeIcon((0,o.O5)(t))}function p(e,t,i,o=r.window.activeColorTheme){if(t.provider?.icon==null)return;let n=r.Uri.joinPath(e.context.extensionUri,`images/${(0,s.kH)(o)?"light":"dark"}/icon-${t.provider.icon}.svg`);return null!=i?i(n):n}function g(e,t,i){let r=t.virtual?"-cloud":"",o=i?.branchStatus;switch(o){case"ahead":case"behind":case"diverged":return(0,s.G5)(e,`icon-repo-${o}${r}.svg`);case"upToDate":if(i?.hasWorkingTreeChanges)return(0,s.G5)(e,`icon-repo-changes${r}.svg`);return(0,s.G5)(e,`icon-repo-synced${r}.svg`);default:if(i?.hasWorkingTreeChanges)return(0,s.G5)(e,`icon-repo-changes${r}.svg`);return(0,s.G5)(e,`icon-repo${r}.svg`)}}function m(e,t,i){switch(t?.status){case"ahead":case"behind":case"diverged":return(0,s.G5)(e,`icon-repo-${t.status}.svg`);case"upToDate":if(i?.hasWorkingTreeChanges)return(0,s.G5)(e,"icon-repo-changes.svg");return(0,s.G5)(e,"icon-repo-synced.svg");default:if(i?.hasWorkingTreeChanges)return(0,s.G5)(e,"icon-repo-changes.svg");return(0,s.G5)(e,"icon-repo.svg")}}},8094:(e,t,i)=>{i.r(t),i.d(t,{BitbucketIntegration:()=>BitbucketIntegration,isBitbucketCloudDomain:()=>d});var r=i(7808),s=i(1849),o=i(9091),n=i(7864),a=i(8832),l=i(4269);let u=l.Mt[s.Q7.Bitbucket],c=Object.freeze({id:u.id,scopes:u.scopes});let BitbucketIntegration=class BitbucketIntegration extends a.T5{authProvider=c;id=s.Q7.Bitbucket;key=this.id;name="Bitbucket";get domain(){return u.domain}get apiBaseUrl(){return"https://api.bitbucket.org/2.0"}async mergeProviderPullRequest({accessToken:e},t,i){return(await this.getProvidersApi()).mergePullRequest(this.id,t,{accessToken:e,mergeMethod:i?.mergeMethod})}async getProviderAccountForCommit(e,t,i,r){return Promise.resolve(void 0)}async getProviderAccountForEmail(e,t,i,r){return Promise.resolve(void 0)}async getProviderDefaultBranch(e,t){return Promise.resolve(void 0)}async getProviderIssueOrPullRequest({accessToken:e},t,i,r){return(await this.container.bitbucket)?.getIssueOrPullRequest(this,e,t.owner,t.name,i,this.apiBaseUrl,{type:r})}async getProviderIssue({accessToken:e},t,i){return(await this.container.bitbucket)?.getIssue(this,e,t.owner,t.name,i,this.apiBaseUrl)}async getProviderPullRequestForBranch({accessToken:e},t,i,r){return(await this.container.bitbucket)?.getPullRequestForBranch(this,e,t.owner,t.name,i,this.apiBaseUrl)}async getProviderPullRequestForCommit(e,t,i){return Promise.resolve(void 0)}async getProviderRepositoryMetadata(e,t,i){return Promise.resolve(void 0)}_accounts;async getProviderCurrentAccount({accessToken:e}){if(this._accounts??=new Map,null==this._accounts.get(e)){let t=await this.getProvidersApi(),i=await t.getCurrentUser(this.id,{accessToken:e});this._accounts.set(e,i?{provider:this,id:i.id,name:i.name??void 0,email:i.email??void 0,avatarUrl:i.avatarUrl??void 0,username:i.username??void 0}:void 0)}return this._accounts.get(e)}_workspaces;async getProviderResourcesForUser(e,t=!1){this._workspaces??=new Map;let{accessToken:i}=e;if(null==this._workspaces.get(i)||t){let t=await this.getProvidersApi(),r=await this.getProviderCurrentAccount(e);if(r?.id==null)return;let s=await t.getBitbucketResourcesForUser(r.id,{accessToken:i});this._workspaces.set(i,null!=s?s.map(e=>({...e,key:e.id})):void 0)}return this._workspaces.get(i)}async searchProviderMyPullRequests(e,t){if(null!=t)return;let i=await this.getProvidersApi();if(!i)return;let r=await g(this.container.git.openRepositories.map(e=>e.git.remotes().getRemotes())),s=await p(r.map(async e=>{let t=await e.getIntegration(),[i,r]=e.path.split("/");return t?.id===this.id?{name:r,namespace:i}:void 0})),n=await this.getProviderCurrentAccount(e);if(n?.username==null)return;let a=await this.getProviderResourcesForUser(e);if(null==a||0===a.length)return;let u=a.map(async t=>{let r=await i.getBitbucketPullRequestsAuthoredByUserForWorkspace(n.id,t.slug,{accessToken:e.accessToken});return r?.map(e=>(0,l.QF)(e,this))}),c=i.getPullRequestsForRepos(this.id,s,{query:`state="OPEN" AND reviewers.uuid="${n.id}"`,accessToken:e.accessToken}).then(e=>e.values?.map(e=>(0,l.QF)(e,this)));return[...(0,o.pD)(await g([...u,c]),e=>e.url,(e,t)=>e)]}async searchProviderMyIssues(e,t){if(null==t||0===t.length)return;let i=await this.getProviderCurrentAccount(e);if(i?.username==null)return;let r=await this.getProviderResourcesForUser(e);if(null==r||0===r.length)return;let s=await this.container.bitbucket;if(s)return await g(t.map(t=>s.getUsersIssuesForRepo(this,e.accessToken,i.id,t.owner,t.name,this.apiBaseUrl)))}storagePrefix="bitbucket";async providerOnConnect(){if(null==this._session)return;let e=(0,r.Fx)(this._session.accessToken),t=this.container.storage.get(`${this.storagePrefix}:${e}:account`),i=this.container.storage.get(`${this.storagePrefix}:${e}:workspaces`),s=t?.data?{...t.data,provider:this}:void 0,o=i?.data?.map(e=>({...e}));null==t&&null!=(s=await this.getProviderCurrentAccount(this._session))&&(await this.container.storage.deleteWithPrefix(this.storagePrefix),await this.container.storage.store(`${this.storagePrefix}:${e}:account`,{v:1,timestamp:Date.now(),data:{id:s.id,name:s.name,email:s.email,avatarUrl:s.avatarUrl,username:s.username}})),this._accounts??=new Map,this._accounts.set(this._session.accessToken,s),null==i&&(o=await this.getProviderResourcesForUser(this._session,!0),await this.container.storage.store(`${this.storagePrefix}:${e}:workspaces`,{v:1,timestamp:Date.now(),data:o})),this._workspaces??=new Map,this._workspaces.set(this._session.accessToken,o)}providerOnDisconnect(){this._accounts=void 0,this._workspaces=void 0}};let h=/^bitbucket\.org$/i;function d(e){return null!=e&&h.test(e)}async function p(e){return(await Promise.allSettled(e)).map(e=>(0,n.Ro)(e)).filter(e=>null!=e)}async function g(e){return(await p(e)).flat().filter(e=>null!=e)}},8103:(e,t,i)=>{i.d(t,{c:()=>CommitFormatter});var r=i(3037),s=i(7563),o=i(6882),n=i(1866),a=i(134),l=i(8734),u=i(6121),c=i(1182),h=i(7688),d=i(2099),p=i(5119),g=i(4793),m=i(2870),f=i(5231),w=i(9091),v=i(4256),y=i(7864),b=i(4808),C=i(8518),R=i(2356),k=i(6770),S=i(8027),P=i(4119),A=i(9181),I=i(5962),D=i(7392);let CommitFormatter=class CommitFormatter extends D.Z{reset(e,t){super.reset(e,t),null==this._options.outputFormat&&(this._options.outputFormat="plaintext")}get _authorDate(){return this._item.author.formatDate(this._options.dateFormat)}get _authorDateAgo(){return this._item.author.fromNow()}get _authorDateAgoShort(){return this._item.author.fromNow(!0)}get _committerDate(){return this._item.committer.formatDate(this._options.dateFormat)}get _committerDateAgo(){return this._item.committer.fromNow()}get _committerDateAgoShort(){return this._item.committer.fromNow(!0)}get _date(){return this._item.formatDate(this._options.dateFormat)}get _dateAgo(){return this._item.formatDateFromNow()}get _dateAgoShort(){return this._item.formatDateFromNow(!0)}get _pullRequestDate(){let{pullRequest:e}=this._options;return null!=e&&(0,R.r0)(e)?e.formatDate(this._options.dateFormat)??"":""}get _pullRequestDateAgo(){let{pullRequest:e}=this._options;return null!=e&&(0,R.r0)(e)?e.formatDateFromNow()??"":""}get _pullRequestDateOrAgo(){return"absolute"===(null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle"))?this._pullRequestDate:this._pullRequestDateAgo}get ago(){return this._padOrTruncate(this._dateAgo,this._options.tokenOptions.ago)}get agoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._date:this._dateAgo,this._options.tokenOptions.agoOrDate)}get agoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._date:this._dateAgoShort,this._options.tokenOptions.agoOrDateShort)}get author(){return this.formatAuthor(this._item.author.name,this._item.author.email,this._options.tokenOptions.author)}get authorFirst(){let[e]=this._item.author.name.split(" ");return this.formatAuthor(e,this._item.author.email,this._options.tokenOptions.authorFirst)}get authorLast(){let[e,t]=this._item.author.name.split(" ");return this.formatAuthor(t||e,this._item.author.email,this._options.tokenOptions.authorLast)}formatAuthor(e,t,i){let r=this._padOrTruncate(e,i);switch(this._options.outputFormat){case"markdown":return`[${r}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,b.yz)(e),t=(0,b.yz)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${r}</a>`;default:return r}}get authorAgo(){return this._padOrTruncate(this._authorDateAgo,this._options.tokenOptions.authorAgo)}get authorAgoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._authorDate:this._authorDateAgo,this._options.tokenOptions.authorAgoOrDate)}get authorAgoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._authorDate:this._authorDateAgoShort,this._options.tokenOptions.authorAgoOrDateShort)}get authorDate(){return this._padOrTruncate(this._authorDate,this._options.tokenOptions.authorDate)}get authorNotYou(){let{name:e,email:t}=this._item.author;if("You"===e)return this._padOrTruncate("",this._options.tokenOptions.authorNotYou);let i=this._padOrTruncate(e,this._options.tokenOptions.authorNotYou);switch(this._options.outputFormat){case"markdown":return`[${i}](${t?`mailto:${t} "Email ${e} (${t})"`:`# "${e}"`})`;case"html":return e=(0,b.yz)(e),t=(0,b.yz)(t),`<a ${t?`href="mailto:${t}" title="Email ${e} (${t})"`:`href="#" title="${e}"`})${this._options.htmlFormat?.classes?.author?` class="${this._options.htmlFormat.classes.author}"`:""}>${i}</a>`;default:return i}}get avatar(){let{outputFormat:e}=this._options;if("plaintext"===e||!m.H.get("hovers.avatars"))return this._padOrTruncate("",this._options.tokenOptions.avatar);let{name:t}=this._item.author,i=this._options.presence;if((0,y.yL)(i)&&(i={status:"offline",statusText:"Offline"}),null!=i){let r=`${t} ${"You"===t?"are":"is"} ${"dnd"===i.status?"in ":""}${i.statusText.toLocaleLowerCase()}`;return"html"===e&&(r=(0,b.yz)(r)),this._getAvatar(e,r,this._options.avatarSize).then(t=>this._padOrTruncate(`${t}${this._getPresence(e,i,r)}`,this._options.tokenOptions.avatar))}return"html"===e&&(t=(0,b.yz)(t)),this._getAvatar(e,t,this._options.avatarSize)}async _getAvatar(e,t,i){i=i??m.H.get("hovers.avatarSize");let r=this._item.getAvatarUri({defaultStyle:m.H.get("defaultGravatarsStyle"),size:i}),s=(await r).toString(!0);return this._padOrTruncate("html"===e?`<img src="${s}" alt="title)" title="${t}" width="${i}" height="${i}"${this._options.htmlFormat?.classes?.avatar?` class="${this._options.htmlFormat.classes.avatar}"`:""} />`:`![${t}](${s}|width=${i},height=${i} "${t}")`,this._options.tokenOptions.avatar)}_getPresence(e,t,i){return"html"===e?`<img src="${(0,r.Sk)(t.status)}" alt="${i}" title="${i}"${this._options.htmlFormat?.classes?.avatarPresence?` class="${this._options.htmlFormat.classes.avatarPresence}"`:""}/>`:`![${i}](${(0,r.Sk)(t.status)} "${i}")`}get changes(){if(!(0,C.WM)(this._item)||null==this._item.stats)return this._padOrTruncate("",this._options.tokenOptions.changes);let e=this._item.formatStats("stats","plaintext"!==this._options.outputFormat?{color:!0}:void 0);return this._padOrTruncate(e,this._options.tokenOptions.changes)}get changesDetail(){if(!(0,C.WM)(this._item)||null==this._item.stats)return this._padOrTruncate("",this._options.tokenOptions.changesDetail);let e=this._item.formatStats("stats","plaintext"!==this._options.outputFormat?{color:!0}:void 0),t=this._item.formatStats("expanded",{addParenthesesToFileStats:!0,color:"plaintext"!==this._options.outputFormat,separator:", "});return t&&(e+=` ${t}`),this._padOrTruncate(e,this._options.tokenOptions.changesDetail)}get changesShort(){if(!(0,C.WM)(this._item)||null==this._item.stats)return this._padOrTruncate("",this._options.tokenOptions.changesShort);let e=this._item.formatStats("short",{separator:""});return this._padOrTruncate(e,this._options.tokenOptions.changesShort)}get commands(){let e;if("plaintext"===this._options.outputFormat||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.commands);if(this._item.isUncommitted){let{previousLineComparisonUris:e}=this._options;return e?.previous!=null?`[\`${this._padOrTruncate((0,I.pV)((0,I.KH)(e.current.sha)?e.current.sha:k.SU),this._options.tokenOptions.commands)}\`](${o.G.createMarkdownCommandLink(this._item.sha,this._item.repoPath)} "Inspect Commit Details") &nbsp;[$(chevron-left)$(compare-changes)](${s.T.createMarkdownCommandLink({lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},repoPath:this._item.repoPath,line:this._options.editor?.line})} "Open Changes with Previous Revision") &nbsp;[$(versions)](${a.E.createMarkdownCommandLink(d.m.instance.git.getRevisionUriFromGitUri(e.previous),"blame",this._options.editor?.line)} "Open Blame Prior to this Change")`:`[\`${this._padOrTruncate((0,I.pV)(this._item.isUncommittedStaged?k.id:k.SU),this._options.tokenOptions.commands)}\`](${o.G.createMarkdownCommandLink(this._item.sha,this._item.repoPath)} "Inspect Commit Details")`}let t=" &nbsp;&nbsp;|&nbsp;&nbsp; ";if(e=`---

[\`$(git-commit) ${this.id}\`](${o.G.createMarkdownCommandLink(this._item.sha,this._item.repoPath)} "Inspect Commit Details") &nbsp;[$(chevron-left)$(compare-changes)](${s.T.createMarkdownCommandLink(this._item,this._options.editor?.line)} "Open Changes with Previous Revision")`,null!=this._item.file&&null!=this._item.unresolvedPreviousSha){let t=d.m.instance.git.getRevisionUri(this._item.repoPath,this._item.unresolvedPreviousSha,this._item.file.originalPath??this._item.file?.path);e+=` &nbsp;[$(versions)](${a.E.createMarkdownCommandLink(t,"blame",this._options.editor?.line)} "Open Blame Prior to this Change")`}e+=` &nbsp;[$(search)](${(0,f.J)("gitlens.revealCommitInView",{repoPath:this._item.repoPath,sha:this._item.sha,revealInView:!0})} "Reveal in Side Bar")`,(0,g.LK)()&&(e+=` &nbsp;[$(gitlens-graph)](${(0,f.J)("gitlens.showInCommitGraph",{ref:(0,P.rd)(this._item,{excludeMessage:!0})})} "Open in Commit Graph")`);let{pullRequest:i,remotes:r}=this._options;if(r?.length){let t=(0,A.zF)(r);e+=` &nbsp;[$(globe)](${n.y.createMarkdownCommandLink(this._item.sha)} "Open Commit on ${t?.length?t[0].name:"Remote"}")`}if(null!=i)(0,R.r0)(i)?e+=`${t}[$(git-pull-request) PR #${i.id}](${_("openPullRequest",{repoPath:this._item.repoPath,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain},pullRequest:{id:i.id,url:i.url}})} "Open Pull Request \\#${i.id}${1===d.m.instance.actionRunners.count("openPullRequest")?` on ${i.provider.name}`:"..."}
${c.EO.Dash.repeat(2)}
${(0,v.FV)(i.title).replace(/"/g,'\\"')}
${i.state}, ${i.formatDateFromNow()}")`:(0,y.yL)(i)&&(e+=`${t}[$(git-pull-request) PR $(loading~spin)](${(0,f.J)("gitlens.refreshHover",void 0)} "Searching for a Pull Request (if any) that introduced this commit...")`);else if(null!=r){let[i]=r;i?.hasIntegration()&&!i.maybeIntegrationConnected&&m.H.get("integrations.enabled")&&(e+=`${t}[$(plug) Connect to ${i?.provider.name}${c.EO.Ellipsis}](${l.d.createMarkdownCommandLink(i)} "Connect to ${i.provider.name} to enable the display of the Pull Request (if any) that introduced this commit")`)}if(d.m.instance.actionRunners.count("hover.commands")>0){let{name:i,email:r}=this._item.author;e+=`${t}[$(organization) Team${c.EO.SpaceThinnest}${c.EO.Ellipsis}](${_("hover.commands",{repoPath:this._item.repoPath,commit:{sha:this._item.sha,author:{name:i,email:r,presence:this._options.presence}},file:null!=this._options.editor?{uri:this._options.editor?.uri.toString(),line:this._options.editor?.line}:void 0})} "Show Team Actions")`}let h=this._item.getGitUri();return e+=`${t}[$(ellipsis)](${u.N.createMarkdownCommandLink(null!=h?{revisionUri:d.m.instance.git.getRevisionUriFromGitUri(h).toString(!0)}:{commit:this._item})} "Show More Actions")`,this._padOrTruncate(e,this._options.tokenOptions.commands)}get committerAgo(){return this._padOrTruncate(this._committerDateAgo,this._options.tokenOptions.committerAgo)}get committerAgoOrDate(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._committerDate:this._committerDateAgo,this._options.tokenOptions.committerAgoOrDate)}get committerAgoOrDateShort(){let e=null!=this._options.dateStyle?this._options.dateStyle:m.H.get("defaultDateStyle");return this._padOrTruncate("absolute"===e?this._committerDate:this._committerDateAgoShort,this._options.tokenOptions.committerAgoOrDateShort)}get committerDate(){return this._padOrTruncate(this._committerDate,this._options.tokenOptions.committerDate)}get date(){return this._padOrTruncate(this._date,this._options.tokenOptions.date)}get email(){let{email:e}=this._item.author;return this._padOrTruncate(e??"",this._options.tokenOptions.email)}get footnotes(){if(null==this._options.footnotes||0===this._options.footnotes.size)return"";let{footnotes:e,outputFormat:t}=this._options,i=new Map;for(let[t,r]of e){let e=i.get(r);null==e?(e=[(0,b.VU)(t)],i.set(r,e)):e.push((0,b.VU)(t))}return"plaintext"===t?this._padOrTruncate((0,w.fj)((0,w.Tj)(i,([e,t])=>`${t.join(",")} ${e}`),`
`),this._options.tokenOptions.footnotes):this._padOrTruncate((0,w.fj)(i.keys(),"html"===t?"<br \\>":"markdown"===t?`\\
`:`
`),this._options.tokenOptions.footnotes)}get id(){let e=this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.id);return"plaintext"!==this._options.outputFormat&&this._options.unpublished?`<span style="color:#35b15e;"${this._options.htmlFormat?.classes?.id?` class="${this._options.htmlFormat.classes.id}"`:""}>${e} (unpublished)</span>`:e}get link(){let e,t,i;switch((0,C.kk)(this._item)?(e="archive",t=this._padOrTruncate(`Stash${this._item.stashNumber?` #${this._item.stashNumber}`:""}`,this._options.tokenOptions.link)):(e=null==this._item.sha||this._item.isUncommitted?"":"git-commit",t=this._padOrTruncate((0,I.pV)(this._item.sha??"",{strings:{working:"Working Tree"}}),this._options.tokenOptions.id)),this._options.outputFormat){case"markdown":e=e?`$(${e}) `:"",i=`[\`${e}${t}\`](${o.G.createMarkdownCommandLink({ref:(0,P.rd)(this._item)})} "Inspect Commit Details")`;break;case"html":e=e?`<span class="codicon codicon-${e}"></span>`:"",i=`<a href="${o.G.createMarkdownCommandLink({ref:(0,P.rd)(this._item)})}" title="Inspect Commit Details"${this._options.htmlFormat?.classes?.link?` class="${this._options.htmlFormat.classes.link}"`:""}>${e}${t}</a>`;break;default:i=this.id}return this._padOrTruncate(i,this._options.tokenOptions.link)}get message(){let{outputFormat:e}=this._options;if(this._item.isUncommitted){let t=this._item.file?.hasConflicts??!1,i=this._item.isUncommittedStaged||(this._options.previousLineComparisonUris?.current?.isUncommittedStaged??!1),r=`${t?"Merge":i?"Staged":"Uncommitted"} changes`;switch(e){case"html":r=`<span ${this._options.htmlFormat?.classes?.message?`class="${this._options.htmlFormat.classes.message}"`:""}>${r}</span>`;break;case"markdown":r=`
> ${r}`}return this._padOrTruncate(r,this._options.tokenOptions.message)}let t=(this._options.messageTruncateAtNewLine?this._item.summary:this._item.message??this._item.summary).trim().replace(/\r?\n/g,`
`);switch(t=(0,p.E)(t),t=this._padOrTruncate(t,this._options.tokenOptions.message),"plaintext"!==e&&(t=(0,b.yz)(t)),"markdown"===e&&(t=(0,v.FV)(t,{quoted:!0,inlineBackticks:!0,preserveLinks:!0})),this._options.messageAutolinks&&(t=d.m.instance.autolinks.linkify(t,e,this._options.remotes,this._options.enrichedAutolinks,null==this._options.pullRequest||(0,y.yL)(this._options.pullRequest)?void 0:new Set([this._options.pullRequest.id]),this._options.footnotes)),null!=this._options.messageIndent&&"plaintext"===e&&(t=t.replace(/^/gm,c.EO.Space.repeat(this._options.messageIndent))),e){case"html":return`<span ${this._options.htmlFormat?.classes?.id?`class="${this._options.htmlFormat.classes.id}"`:""}>${t}</span>`;case"markdown":return`
> ${t}`;default:return t}}get pullRequest(){let e,{pullRequest:t}=this._options;if(null==t||"html"===this._options.outputFormat)return this._padOrTruncate("",this._options.tokenOptions.pullRequest);if((0,R.r0)(t))if("markdown"===this._options.outputFormat){if(e=`[**$(git-pull-request) PR #${t.id}**](${_("openPullRequest",{repoPath:this._item.repoPath,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain},pullRequest:{id:t.id,url:t.url}})} "Open Pull Request \\#${t.id}${1===d.m.instance.actionRunners.count("openPullRequest")?` on ${t.provider.name}`:"..."}
${c.EO.Dash.repeat(2)}
${(0,v.FV)(t.title).replace(/"/g,'\\"')}
${t.state}, ${t.formatDateFromNow()}")`,null!=this._options.footnotes){let e=(0,v.FV)(t.title).replace(/"/g,'\\"').trim(),i=this._options.footnotes.size+1;this._options.footnotes.set(i,`${(0,S.xu)(t)} [**${e}**](${t.url} "Open Pull Request \\#${t.id} on ${t.provider.name}")\\
${c.EO.Space.repeat(4)} #${t.id} ${t.state} ${t.formatDateFromNow()}`)}}else if(null!=this._options.footnotes){let i=this._options.footnotes.size+1;this._options.footnotes.set(i,`PR #${t.id}: ${t.title}  ${c.EO.Dot}  ${t.state}, ${t.formatDateFromNow()}`),e=`PR #${t.id}${(0,b.VU)(i)}`}else e=`PR #${t.id}`;else{if(!(0,y.yL)(t))return this._padOrTruncate("",this._options.tokenOptions.pullRequest);e="markdown"===this._options.outputFormat?`[PR $(loading~spin)](${(0,f.J)("gitlens.refreshHover",void 0)} "Searching for a Pull Request (if any) that introduced this commit...")`:this._options?.pullRequestPendingMessage??""}return this._padOrTruncate(e,this._options.tokenOptions.pullRequest)}get pullRequestAgo(){return this._padOrTruncate(this._pullRequestDateAgo,this._options.tokenOptions.pullRequestAgo)}get pullRequestAgoOrDate(){return this._padOrTruncate(this._pullRequestDateOrAgo,this._options.tokenOptions.pullRequestAgoOrDate)}get pullRequestDate(){return this._padOrTruncate(this._pullRequestDate,this._options.tokenOptions.pullRequestDate)}get pullRequestState(){let{pullRequest:e}=this._options;return this._padOrTruncate(null!=e&&(0,R.r0)(e)?e.state??"":"",this._options.tokenOptions.pullRequestState)}get sha(){return this._padOrTruncate(this._item.shortSha??"",this._options.tokenOptions.sha)}get stashName(){return this._padOrTruncate(this._item.stashName??"",this._options.tokenOptions.stashName)}get stashNumber(){return this._padOrTruncate(this._item.stashNumber??"",this._options.tokenOptions.stashNumber)}get stashOnRef(){return this._padOrTruncate(this._item.stashOnRef??"",this._options.tokenOptions.stashOnRef)}get tips(){let e=this._options.getBranchAndTagTips?.(this._item.sha,{icons:"markdown"===this._options.outputFormat,pills:"markdown"===this._options.outputFormat||"html"===this._options.outputFormat&&(!this._options.htmlFormat?.classes?.tips||{cssClass:this._options.htmlFormat.classes.tips})});return this._padOrTruncate(e??"",this._options.tokenOptions.tips)}static fromTemplate(e,t,i){if((null==i||"string"==typeof i)&&(i={dateFormat:i}),CommitFormatter.has(e,"footnotes")&&null==i.footnotes&&(i.footnotes=new Map),CommitFormatter.has(e,"avatar")&&i?.outputFormat)throw Error("Invalid template token 'avatar' used in non-async call");return super.fromTemplateCore(this,e,t,i)}static fromTemplateAsync(e,t,i){return CommitFormatter.has(e,"footnotes")&&((null==i||"string"==typeof i)&&(i={dateFormat:i}),null==i.footnotes&&(i.footnotes=new Map)),super.fromTemplateCoreAsync(this,e,t,i)}static has(e,...t){return super.has(e,...t)}};function _(e,t){return(0,f.J)(`${h._}${e}`,{...t,type:e})}},8146:(e,t,i)=>{i.d(t,{Z:()=>StatusFileNode});var r=i(1398),s=i(534),o=i(2624),n=i(6821),a=i(567),l=i(5962),u=i(2141),c=i(745),h=i(9686),d=i(6572),p=i(5818),g=i(4484);let StatusFileNode=class StatusFileNode extends d.u${_files;_hasStagedChanges;_hasUnstagedChanges;_type;constructor(e,t,i,r,s){let n,a;for(let e of r.reverse())null==n?n=e:("M"===n.status||"M"!==e.status)&&(n=e);n??=r[r.length-1];let l=!1,u=!1;for(let{commit:e}of r)if(e.isUncommitted)if(e.isUncommittedStaged){l=!0,u||(a=e.sha);break}else a=void 0,u=!0;else if(u)break;else{a=e.sha;break}super("status-file",o.nk.fromFile(n,i,a),e,t,n),this._files=r,this._type=s,this._hasStagedChanges=l,this._hasUnstagedChanges=u}toClipboard(){return this.fileName}get fileName(){return this.file.path}getChildren(){return this._files.map(e=>new g.f(this.view,this,e,e.commit))}getTreeItem(){let e=1===this._files.length,t=new r.TreeItem(this.label,e?r.TreeItemCollapsibleState.None:r.TreeItemCollapsibleState.Collapsed);t.description=this.description,t.command=this.getCommand();let i=this._files.map(t=>`${(0,d.o1)(t,e?"":`in \`\`\`${t.commit.isUncommitted?"":"$(git-commit) "}${(0,l.pV)(t.commit.sha)}\`\`\``)}${(0,n.H)(t)&&null!=t.stats?`

`:`\\
`}`).join("").trim();if(i.endsWith("\\")&&(i=i.slice(0,-1)),t.tooltip=new r.MarkdownString(i,!0),this._hasStagedChanges||this._hasUnstagedChanges)t.contextValue=p.U0.File,t.contextValue+=this._hasStagedChanges?"+staged":"",t.contextValue+=this._hasUnstagedChanges?"+unstaged":"",t.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),t.iconPath=r.ThemeIcon.File;else{t.contextValue=p.U0.StatusFileCommits;let e=(0,a.O)(this.file.status);t.iconPath={dark:this.view.container.context.asAbsolutePath((0,h.HS)("images","dark",e)),light:this.view.container.context.asAbsolutePath((0,h.HS)("images","light",e))}}return this._label=void 0,this._description=void 0,t}_description;get description(){return null==this._description&&(this._description=s.Z.fromTemplate(this.view.config.formats.files.description,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,c.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=s.Z.fromTemplate(this.view.config.formats.files.label,{...this.file,commit:this.commit},{relativePath:this.relativePath})),this._label}get commit(){return this._files[0]?.commit}get priority(){return this._hasStagedChanges&&!this._hasUnstagedChanges?-3:this._hasStagedChanges?-2:this._hasUnstagedChanges?-1:0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){let e;if((this._hasStagedChanges||this._hasUnstagedChanges)&&1===this._files.length)return(0,u.gu)("gitlens.diffWithPrevious","Open Changes with Previous Revision",void 0,{commit:this.commit,uri:o.nk.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}});switch(this._type){case"ahead":case"behind":{let t=this._files[this._files.length-1].commit,i=this._files[0].commit;e={lhs:{sha:`${t.sha}^`,uri:o.nk.fromFile(t.fileset?.files?.find(e=>e.path===this.file.path)??this.file.path,this.repoPath,`${t.sha}^`,!0)},rhs:{sha:i.sha,uri:o.nk.fromFile(i.fileset?.files?.find(e=>e.path===this.file.path)??this.file.path,this.repoPath,i.sha)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}};break}default:{let t=this._files[this._files.length-1].commit,i=t.fileset?.files?.find(e=>e.path===this.file.path)??this.file;e={lhs:{sha:`${t.sha}^`,uri:o.nk.fromFile(i,this.repoPath,void 0,!0)},rhs:{sha:"",uri:o.nk.fromFile(this.file,this.repoPath)},repoPath:this.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}}}}return(0,u.gu)("gitlens.diffWith","Open Changes",e)}}},8178:(e,t,i)=>{i.d(t,{e:()=>Stopwatch,u:()=>n});var r=i(3881),s=i(4941),o=i(1003);Symbol.dispose??=Symbol("Symbol.dispose"),Symbol.asyncDispose??=Symbol("Symbol.asyncDispose");let Stopwatch=class Stopwatch{logScope;logLevel;logProvider;_time;get startTime(){return this._time}_stopped=!1;constructor(e,t,...i){let n;if(this.logScope=null!=e&&"string"!=typeof e?e:(0,o.jr)(e??"",!1),n="boolean"==typeof t?.log?t.log?{}:void 0:t?.log??{},this.logLevel=t?.logLevel??"info",this.logProvider=t?.provider??s.nH,this._time=(0,r.k)(),null!=n){if(!this.logProvider.enabled(this.logLevel))return;i.length?this.logProvider.log(this.logLevel,this.logScope,`${n.message??""}${n.suffix??""}`,...i):this.logProvider.log(this.logLevel,this.logScope,`${n.message??""}${n.suffix??""}`)}}[Symbol.dispose](){this.stop()}elapsed(){let[e,t]=(0,r.k)(this._time);return 1e3*e+Math.floor(t/1e6)}log(e){this.logCore(e,!1)}restart(e){this.logCore(e,!0),this._time=(0,r.k)(),this._stopped=!1}stop(e){this._stopped||(this.restart(e),this._stopped=!0)}logCore(e,t){if(!this.logProvider.enabled(this.logLevel))return;if(!t)return void this.logProvider.log(this.logLevel,this.logScope,`${e?.message??""}${e?.suffix??""}`);let[i,s]=(0,r.k)(this._time),o=1e3*i+Math.floor(s/1e6),n=e?.message??"";this.logProvider.log(o>250?"warn":this.logLevel,this.logScope,`${n?`${n} `:""}[${o}ms]${e?.suffix??""}`)}};function n(e,t,...i){return(t?.provider??s.nH).enabled(t?.logLevel??"info")?new Stopwatch(e,t,...i):void 0}},8219:(e,t,i)=>{i.d(t,{LN:()=>M,Ti:()=>q,Z6:()=>W,Z_:()=>U});var r,s,o=i(1398),n=i(7808),a=i(1182),l=i(7019),u=i(2919),c=i(2141),h=i(2870),d=i(8782),p=i(4152),g=i(6045),m=i(9388),f=i(1555),w=i(6206),v=i(5539),y=i(9091),b=i(4941),C=i(1003),R=i(9638),k=i(9686),S=i(3631),P=i(7660),A=Object.defineProperty,I=Object.getOwnPropertyDescriptor,D=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),_=e=>{throw TypeError(e)},$=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?I(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&A(t,i,o),o},T=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&_("Object expected"),i&&(r=t[D("asyncDispose")]),void 0===r&&(r=t[D("dispose")],i&&(s=r)),"function"!=typeof r&&_("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},E=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let x="index,HEAD,*_HEAD,MERGE_*,rebase-apply/**,rebase-merge/**,sequencer/**",O="worktrees/*,worktrees/**/index,worktrees/**/HEAD,worktrees/**/*_HEAD,worktrees/**/MERGE_*,worktrees/**/rebase-merge/**,worktrees/**/rebase-apply/**,worktrees/**/sequencer/**",F=`{${x}}`,B=`{config,refs/**,${O}}`,L=`{${x},config,refs/**,${O}}`;var U=((r=U||{})[r.Unknown=-1]="Unknown",r[r.Index=0]="Index",r[r.Head=1]="Head",r[r.Heads=2]="Heads",r[r.Tags=3]="Tags",r[r.Stash=4]="Stash",r[r.Remotes=5]="Remotes",r[r.Worktrees=6]="Worktrees",r[r.Config=7]="Config",r[r.PausedOperationStatus=8]="PausedOperationStatus",r[r.CherryPick=9]="CherryPick",r[r.Merge=10]="Merge",r[r.Rebase=11]="Rebase",r[r.Revert=12]="Revert",r[r.Closed=100]="Closed",r[r.Ignores=101]="Ignores",r[r.RemoteProviders=102]="RemoteProviders",r[r.Starred=103]="Starred",r[r.Opened=104]="Opened",r),q=((s=q||{})[s.Any=0]="Any",s[s.Exclusive=1]="Exclusive",s);let RepositoryChangeEvent=class RepositoryChangeEvent{constructor(e,t){this.repository=e,this._changes=new Set(t)}_changes;toString(e=!1){return e?`changes=${(0,y.fj)(this._changes,", ")}`:`{ repository: ${this.repository?.name??""}, changes: ${(0,y.fj)(this._changes,", ")} }`}changed(...e){let t=e.slice(0,-1),i=e[e.length-1];if(0===i)return(0,y.zN)(this._changes,e=>t.includes(e));let r=this._changes;1===i&&(t.includes(9)||t.includes(10)||t.includes(11)||t.includes(12)?t.includes(8)||t.push(8):t.includes(8)&&((r=new Set(r)).delete(9),r.delete(10),r.delete(11),r.delete(12)));let s=[...(0,y.pb)(r,e=>t.includes(e))];return 1===i?s.length===r.size:s.length===t.length}with(e){return new RepositoryChangeEvent(this.repository,[...this._changes,...e])}};let N=(0,g.N)(),M=class{constructor(e,t,i,r,s,n,a,l=!1){if(this.container=e,this.providerService=t,this.provider=i,this.folder=r,this.uri=s,this.root=n,null!=r)if(n)this._name=r.name;else{let t=e.git.getRelativePath(s,r.uri);this._name=t||r.name}else this._name=(0,k.P8)(s.path);this.git.config().getGitDir?.().then(e=>{if(e?.commonUri==null)return;let t=e.commonUri.path;t.endsWith("/.git")&&(t=t.substring(0,t.length-5)),this._commonRepositoryName=(0,k.P8)(t);let i=`${this._commonRepositoryName}: `;this._name.startsWith(i)||(this._name=`${i}${this._name}`)}),this.index=r?.index??e.git.repositoryCount,this.id=(0,u.dX)(s),this._suspended=a,this._closed=l,this._disposable=o.Disposable.from(this._onDidChange,this._onDidChangeFileSystem,this.setupRepoWatchers(),h.H.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(),this._orderByLastFetched&&this.getLastFetched()}_onDidChange=new o.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeFileSystem=new o.EventEmitter;get onDidChangeFileSystem(){return this._onDidChangeFileSystem.event}_commonRepositoryName;get commonRepositoryName(){return this._commonRepositoryName}get formattedName(){return this.name}id;index;instance=N.next();_name;get name(){return this._name}_idHash;get idHash(){return void 0===this._idHash&&(this._idHash=(0,n.Fx)(this.id)),this._idHash}_disposable;_fireChangeDebounced=void 0;_fireFileSystemChangeDebounced=void 0;_pendingFileSystemChange;_pendingRepoChange;_suspended;setupRepoWatchers(){let e;return this.setupRepoWatchersCore().then(t=>e=t),{dispose:()=>void e?.dispose()}}async setupRepoWatchersCore(){let e=(0,C.dQ)(),t=[];t.push(this.container.events.on("git:cache:reset",e=>{(!e.data.repoPath||e.data.repoPath===this.path)&&e.data.types?.includes("providers")&&this.fireChange(102)}),this.container.events.on("git:repo:change",e=>{e.data.repoPath===this.path&&this.fireChange(...e.data.changes)}));let i=o.workspace.createFileSystemWatcher(new o.RelativePattern(this.uri,"**/.gitignore"));function r(i,r){b.Vy.debug(e,`watching '${i.toString(!0)}' for repository changes`);let s=o.workspace.createFileSystemWatcher(new o.RelativePattern(i,r));return t.push(s,s.onDidChange(e=>this.onRepositoryChanged(e,i,"change")),s.onDidCreate(e=>this.onRepositoryChanged(e,i,"create")),s.onDidDelete(e=>this.onRepositoryChanged(e,i,"delete"))),s}t.push(i,i.onDidChange(this.onGitIgnoreChanged,this),i.onDidCreate(this.onGitIgnoreChanged,this),i.onDidDelete(this.onGitIgnoreChanged,this));let s=await this.git.config().getGitDir?.();return null!=s&&(s?.commonUri==null?r.call(this,s.uri,L):(r.call(this,s.uri,F),r.call(this,s.commonUri,B))),o.Disposable.from(...t)}dispose(){this.unWatchFileSystem(!0),this._disposable.dispose()}toString(){return(0,b.zu)(this)}_closed=!1;get closed(){return this._closed}set closed(e){let t=this._closed!==e;if(this._closed=e,t){var i=[];try{let t=T(i,(0,C.bP)(`${(0,b.zu)(this)}.closed`,!1));b.Vy.debug(t,`setting closed=${e}`),this.fireChange(this._closed?100:104)}catch(e){var r=e,s=!0}finally{E(i,r,s)}}}get etag(){return this._updatedAt}get git(){let e=this.uri;return new Proxy(this.container.git,{get:(t,i)=>{let r=t[i];return"function"==typeof r?(...i)=>r.call(t,e,...i):r}})}get path(){return this.uri.scheme===a.xB.File?(0,k.Fd)(this.uri.fsPath):this.uri.toString()}_orderByLastFetched=!1;get orderByLastFetched(){return this._orderByLastFetched}_updatedAt=0;get updatedAt(){return this._updatedAt}get virtual(){return this.provider.virtual}onConfigurationChanged(e){h.H.changed(e,"sortRepositoriesBy")&&(this._orderByLastFetched=h.H.get("sortRepositoriesBy")?.startsWith("lastFetched:")??!1),null!=e&&h.H.changed(e,"remotes",this.folder?.uri)&&this.fireChange(5)}onFileSystemChanged(e){/(?:(?:\/|\\)node_modules|\.git)(?:\/|\\|$)/.test(e.fsPath)||(this._etagFileSystem=Date.now(),this.fireFileSystemChange(e))}onGitIgnoreChanged(e){this.fireChange(101)}onRepositoryChanged(e,t,i){if(e?.path.includes("/fsmonitor--daemon/"))return;this._lastFetched=void 0,this._orderByLastFetched&&this.getLastFetched();let r=null!=e?/(worktrees|index|HEAD|FETCH_HEAD|ORIG_HEAD|CHERRY_PICK_HEAD|MERGE_HEAD|REBASE_HEAD|rebase-merge|rebase-apply|REVERT_HEAD|config|refs\/(?:heads|remotes|stash|tags))/.exec(this.container.git.getRelativePath(e,t)):void 0;if(null!=r)switch(r[1]){case"config":this.fireChange(7,5);return;case"index":this.fireChange(0);return;case"FETCH_HEAD":return;case"HEAD":this.fireChange(1,2);return;case"ORIG_HEAD":case"refs/heads":this.fireChange(2);return;case"CHERRY_PICK_HEAD":this.fireChange(9,8);return;case"MERGE_HEAD":this.fireChange(10,8);return;case"REBASE_HEAD":case"rebase-merge":case"rebase-apply":this.fireChange(11,8);return;case"REVERT_HEAD":this.fireChange(12,8);return;case"refs/remotes":this.fireChange(5);return;case"refs/stash":this.fireChange(4);return;case"refs/tags":this.fireChange(3);return;case"worktrees":this.fireChange(6);return}this.fireChange(-1)}access(e){return this.container.git.access(e,this.uri)}branchDelete(e,t){Array.isArray(e)||(e=[e]);let i=e.filter(e=>!e.remote);if(0!==i.length){let r=["--delete"];if(t?.force&&r.push("--force"),this.runTerminalCommand("branch",...r,...e.map(e=>e.ref)),t?.remote){let e=i.filter(e=>null!=e.upstream);if(0!==e.length)for(let[t,i]of(0,y.Fi)(e,e=>(0,S.Zq)(e.upstream.name)).entries())this.runTerminalCommand("push","-d",t,...i.map(e=>(0,S.km)(e.upstream.name)))}}let r=e.filter(e=>e.remote);if(0!==r.length)for(let[e,t]of(0,y.Fi)(r,e=>(0,S.Zq)(e.name)).entries())this.runTerminalCommand("push","-d",e,...t.map(e=>(0,P.fC)(e)))}containsUri(e){return this===this.container.git.getRepository(e)}async fetch(e){let{progress:t,...i}={progress:!0,...e};return t?o.window.withProgress({location:o.ProgressLocation.Notification,title:null!=i.branch?`${i.pull?"Pulling":"Fetching"} ${i.branch.name}...`:`Fetching ${i.remote?`${i.remote} of `:""}${this.formattedName}...`},()=>this.fetchCore(i)):this.fetchCore(i)}async fetchCore(e){try{await this.git.fetch(e),this.fireChange(-1)}catch(e){b.Vy.error(e),(0,l.qQ)("Unable to fetch repository")}}async getCommonRepository(){let e=await this.git.config().getGitDir?.();return e?.commonUri==null?this:this.container.git.getOrOpenRepository(e.commonUri,{detectNested:!1,force:!0,closeOnOpen:!0})}async getCommonRepositoryUri(){let e=await this.git.config().getGitDir?.();return e?.commonUri?.path.endsWith("/.git")?e.commonUri.with({path:e.commonUri.path.substring(0,e.commonUri.path.length-5)}):e?.commonUri}_lastFetched;get lastFetchedCached(){return this._lastFetched}async getLastFetched(){let e=await this.git.getLastFetchedTimestamp();return null!=e&&(this._lastFetched=e),this._lastFetched??0}merge(...e){this.runTerminalCommand("merge",...e)}async pull(e){let{progress:t,...i}={progress:!0,...e};return t?o.window.withProgress({location:o.ProgressLocation.Notification,title:`Pulling ${this.formattedName}...`},()=>this.pullCore(i)):this.pullCore(i)}async pullCore(e){try{let t=h.H.getCore("git.pullTags",this.uri);h.H.getCore("git.fetchOnPull",this.uri)&&await this.git.fetch(),await this.git.pull({...e,tags:t}),this.fireChange(-1)}catch(e){b.Vy.error(e),(0,l.qQ)("Unable to pull repository")}}async showCreatePullRequestPrompt(e,t){if(!this.container.actionRunners.count("createPullRequest")||!await (0,l.ky)(t.name))return;let i=await this.git.remotes().getRemote(e);(0,c.ph)("createPullRequest",{repoPath:this.path,remote:null!=i?{name:i.name,provider:null!=i.provider?{id:i.provider.id,name:i.provider.name,domain:i.provider.domain}:void 0,url:i.url}:{name:e},branch:{name:t.name,isRemote:t.remote,upstream:t.upstream?.name}})}async push(e){let{progress:t,...i}={progress:!0,...e};return t?o.window.withProgress({location:o.ProgressLocation.Notification,title:(0,P.gC)(i.reference)?`${null!=i.publish?"Publishing ":"Pushing "}${i.reference.name}...`:`Pushing ${this.formattedName}...`},()=>this.pushCore(i)):this.pushCore(i)}async pushCore(e){try{await this.git.push({reference:e?.reference,force:e?.force,publish:e?.publish}),(0,P.gC)(e?.reference)&&e?.publish!=null&&this.showCreatePullRequestPrompt(e.publish.remote,e.reference),this.fireChange(-1)}catch(e){b.Vy.error(e),(0,l.qQ)("Unable to push repository")}}rebase(e,...t){this.runTerminalCommand(null!=e&&0!==e.length?`${e.join(" ")} rebase`:"rebase",...t)}resume(){this._suspended&&(this._suspended=!1,null!=this._pendingRepoChange&&this._fireChangeDebounced(),null!=this._pendingFileSystemChange&&this._fireFileSystemChangeDebounced?.())}revert(...e){this.runTerminalCommand("revert",...e)}get starred(){let e=this.container.storage.getWorkspace("starred:repositories");return null!=e&&!0===e[this.id]}star(e){return this.updateStarred(!0,e)}async switch(e,t){let{progress:i,...r}={progress:!0,...t};return i?o.window.withProgress({location:o.ProgressLocation.Notification,title:`Switching ${this.formattedName} to ${e}...`,cancellable:!1},()=>this.switchCore(e,r)):this.switchCore(e,r)}async switchCore(e,t){try{await this.git.checkout(e,t),this.fireChange(-1)}catch(e){b.Vy.error(e),(0,l.qQ)("Unable to switch to reference")}}async getAbsoluteOrBestRevisionUri(e,t){let i=this.container.git.getAbsoluteUri(e,this.uri);return null!=i&&this.containsUri(i)&&await (0,p.t2)(i)?i:null!=t?this.git.getBestRevisionUri(e,t):void 0}unstar(e){return this.updateStarred(!1,e)}async updateStarred(e,t){null!=t?await this.updateStarredCore("branches",t.id,e):await this.updateStarredCore("repositories",this.id,e),this.fireChange(103)}async updateStarredCore(e,t,i){let r=`starred:${e}`,s=this.container.storage.getWorkspace(r);s=(0,R.Y8)(s,t,i),await this.container.storage.storeWorkspace(r,s),this.fireChange(103)}_etagFileSystem;get etagFileSystem(){return this._etagFileSystem}suspend(){this._suspended=!0}waitForRepoChange(e){return new Promise(t=>{let i,r,s=()=>{null!=i&&(clearTimeout(i),i=void 0),r?.dispose(),r=void 0};Promise.race([new Promise(t=>{i=setTimeout(()=>{s(),t(!1)},e)}),new Promise(e=>{r=this.onDidChange(()=>{s(),e(!0)})})]).then(e=>t(e))})}_fsWatcherDisposable;_fsWatchers=new Map;_fsChangeDelay=2500;watchFileSystem(e=2500){let t=(0,n.uR)();if(this._fsWatchers.set(t,e),null==this._fsWatcherDisposable){let e=o.workspace.createFileSystemWatcher(new o.RelativePattern(this.uri,"**"));this._fsWatcherDisposable=o.Disposable.from(e,e.onDidChange(this.onFileSystemChanged,this),e.onDidCreate(this.onFileSystemChanged,this),e.onDidDelete(this.onFileSystemChanged,this)),this._etagFileSystem=Date.now()}return this.ensureMinFileSystemChangeDelay(),{dispose:()=>this.unWatchFileSystem(t)}}unWatchFileSystem(e){if("boolean"!=typeof e&&(this._fsWatchers.delete(e),0!==this._fsWatchers.size))return void this.ensureMinFileSystemChangeDelay();this._etagFileSystem=void 0,this._fsChangeDelay=2500,this._fsWatchers.clear(),this._fsWatcherDisposable?.dispose(),this._fsWatcherDisposable=void 0}ensureMinFileSystemChangeDelay(){let e=(0,y.jk)(this._fsWatchers.values());e!==this._fsChangeDelay&&(this._fsChangeDelay=e,this._fireFileSystemChangeDebounced?.flush(),this._fireFileSystemChangeDebounced?.cancel(),this._fireFileSystemChangeDebounced=void 0)}fireChange(...e){let t=(0,C.dQ)();if(this._updatedAt=Date.now(),this._fireChangeDebounced??=(0,v.s)(this.fireChangeCore.bind(this),250),this._pendingRepoChange=this._pendingRepoChange?.with(e)??new RepositoryChangeEvent(this,e),this.providerService.onRepositoryChanged(this,this._pendingRepoChange),this._suspended)return void b.Vy.debug(t,`queueing suspended ${this._pendingRepoChange.toString(!0)}`);this._fireChangeDebounced()}fireChangeCore(){var e=[];try{let t=this._pendingRepoChange;if(null==t)return;this._pendingRepoChange=void 0;let i=T(e,(0,C.bP)(`${(0,b.zu)(this)}.fireChangeCore`,!1));b.Vy.debug(i,`firing ${t.toString(!0)}`);try{this._onDidChange.fire(t)}finally{this.providerService.onDidRepositoryChange.fire(t)}}catch(e){var t=e,i=!0}finally{E(e,t,i)}}fireFileSystemChange(e){let t=(0,C.dQ)();this._updatedAt=Date.now(),this._fireFileSystemChangeDebounced??=(0,v.s)(this.fireFileSystemChangeCore.bind(this),this._fsChangeDelay),this._pendingFileSystemChange??={repository:this,uris:new d.T};let i=this._pendingFileSystemChange;if(i.uris.add(e),this._suspended)return void b.Vy.debug(t,`queueing suspended fs changes=${(0,y.fj)((0,y.Tj)(i.uris,e=>e.fsPath),", ")}`);this._fireFileSystemChangeDebounced()}async fireFileSystemChangeCore(){var e=[];try{let t=this._pendingFileSystemChange;if(null==t)return;this._pendingFileSystemChange=void 0;let i=await this.git.excludeIgnoredUris([...t.uris]);if(!i.length)return;i.length!==t.uris.size&&(t={...t,uris:new d.T(i)});let r=T(e,(0,C.bP)(`${(0,b.zu)(this)}.fireChangeCore`,!1));b.Vy.debug(r,`firing fs changes=${(0,y.fj)((0,y.Tj)(t.uris,e=>e.fsPath),", ")}`),this._onDidChangeFileSystem.fire(t)}catch(e){var t=e,i=!0}finally{E(e,t,i)}}async runTerminalCommand(e,...t){await this.git.runGitCommandViaTerminal?.(e,t,{execute:!0}),setTimeout(()=>this.fireChange(-1),2500)}};function W(e){return e instanceof M}$([(0,w.Yz)({singleLine:!0})],M.prototype,"setupRepoWatchersCore",1),$([(0,f.B)()],M.prototype,"git",1),$([(0,w.Yz)()],M.prototype,"onGitIgnoreChanged",1),$([(0,w.Yz)()],M.prototype,"onRepositoryChanged",1),$([(0,w.Rm)()],M.prototype,"access",1),$([(0,w.Rm)()],M.prototype,"branchDelete",1),$([(0,m.G)(),(0,w.Rm)()],M.prototype,"fetch",1),$([(0,m.G)(),(0,w.Rm)({exit:!0})],M.prototype,"getCommonRepository",1),$([(0,w.Rm)({exit:!0})],M.prototype,"getCommonRepositoryUri",1),$([(0,m.G)()],M.prototype,"getLastFetched",1),$([(0,w.Rm)()],M.prototype,"merge",1),$([(0,m.G)(),(0,w.Rm)()],M.prototype,"pull",1),$([(0,m.G)(),(0,w.Rm)()],M.prototype,"push",1),$([(0,w.Rm)()],M.prototype,"rebase",1),$([(0,w.Rm)()],M.prototype,"revert",1),$([(0,m.G)(),(0,w.Rm)()],M.prototype,"switch",1),$([(0,w.Yz)()],M.prototype,"fireChange",1),$([(0,w.Yz)()],M.prototype,"fireFileSystemChange",1),M=$([(0,w.Is)((e,t)=>`${t}(${e.id}|${e.instance})`)],M)},8282:(e,t,i)=>{i.d(t,{$w:()=>a,TF:()=>n,_c:()=>l,vt:()=>o});var r=i(2099),s=i(3583);function o(e,t,i){return(0,s.b)({command:"branch",state:{subcommand:"create",repo:e,reference:t,name:i}})}function n(e,t){return(0,s.b)({command:"branch",state:{subcommand:"delete",repo:e,references:t}})}function a(e,t,i){return(0,s.b)({command:"branch",state:{subcommand:"rename",repo:e,reference:t,name:i}})}function l(e,t){return r.m.instance.views.revealBranch(e,t)}},8397:(e,t,i)=>{i.d(t,{ST:()=>p,X:()=>c,oe:()=>d,t6:()=>h});var r=i(1398),s=i(2099),o=i(4692),n=i(2812),a=i(9091),l=i(9207),u=i(3227);async function c(e,t,i,r,o){let n=s.m.instance.git.getBestRepository(e,t);if(null==n||o?.filter==null||await o.filter(n)||(n=void 0),null!=n)return n;let a=await d(i,r,void 0,o);return a instanceof l.Fj?void await a.execute():a}async function h(e,t,i,r){let o;if(null==(o=null==i?s.m.instance.git.highlander:await s.m.instance.git.getOrOpenRepository(i))||r?.filter==null||await r.filter(o)||(o=void 0),null!=o)return o;let n=await d(e,t,void 0,r);return n instanceof l.Fj?void await n.execute():n}async function d(e,t,i,l){let c;if(i??=s.m.instance.git.openRepositories,l?.filter==null)c=await Promise.all((0,a.Tj)(i??s.m.instance.git.openRepositories,e=>(0,u.sS)(e,e===l?.picked,{branch:!0,status:!0})));else{let{filter:e}=l;c=(0,n.x1)(await Promise.allSettled((0,a.Tj)(s.m.instance.git.openRepositories,async t=>await e(t)?(0,u.sS)(t,t===l?.picked,{branch:!0,status:!0}):void 0)),e=>"fulfilled"===e.status?e.value:void 0)}if(0===c.length)return;let h=r.window.createQuickPick();h.ignoreFocusOut=(0,o.dW)();let d=[];try{let i=await new Promise(i=>{d.push(h.onDidHide(()=>i(void 0)),h.onDidAccept(()=>{0!==h.activeItems.length&&i(h.activeItems[0])})),h.title=e,h.placeholder=t,h.matchOnDescription=!0,h.matchOnDetail=!0,h.items=c,h.show()});return i?.item}finally{h.dispose(),d.forEach(e=>void e.dispose())}}async function p(e,t="Choose a repository",i){let l;if(null==i||Array.isArray(i)||null!=i.filter||(i=void 0),null==i||Array.isArray(i))l=await Promise.all((0,a.Tj)(i??s.m.instance.git.openRepositories,e=>(0,u.sS)(e,void 0,{branch:!0,status:!0})));else{let{filter:e}=i;l=(0,n.x1)(await Promise.allSettled((0,a.Tj)(s.m.instance.git.openRepositories,async t=>await e(t)?(0,u.sS)(t,void 0,{branch:!0,status:!0}):void 0)),e=>"fulfilled"===e.status?e.value:void 0)}if(0===l.length)return[];let c=r.window.createQuickPick();c.ignoreFocusOut=(0,o.dW)();let h=[];try{let i=await new Promise(i=>{h.push(c.onDidHide(()=>i(void 0)),c.onDidAccept(()=>i(c.selectedItems))),c.title=e,c.placeholder=t,c.matchOnDescription=!0,c.matchOnDetail=!0,c.items=l,c.canSelectMany=!0,c.selectedItems=l,c.show()});if(null==i)return[];return i.map(e=>e.item)}finally{c.dispose(),h.forEach(e=>void e.dispose())}}},8493:(e,t,i)=>{i.d(t,{$:()=>s});var r=i(2099);async function s(e,t){return r.m.instance.views.commitDetails.show(t,e)}},8518:(e,t,i)=>{i.d(t,{M7:()=>GitCommitIdentity,WM:()=>R,Yg:()=>P,kk:()=>k});var r=i(1398),s=i(3037),o=i(1182),n=i(2812),a=i(8845),l=i(9388),u=i(1555),c=i(4941),h=i(7864),d=i(4808),p=i(2624),g=i(1838),m=i(5962),f=i(6821),w=i(6770),v=Object.defineProperty,y=Object.getOwnPropertyDescriptor,b=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?y(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&v(t,i,o),o};let C=/stash@{(\d+)}/;function R(e){return e instanceof P}function k(e){return R(e)&&"stash"===e.refType&&!!e.stashName}let S=class _GitCommit{constructor(e,t,i,r,s,a,l,u,c,h,d,p,g,f){this.container=e,this.repoPath=t,this.sha=i,this.author=r,this.committer=s,this.parents=l,this.ref=i,this.shortSha=i.substring(0,this.container.CommitShaFormatting.length),this.tips=p,g?(this.refType="stash",this.stashName=g||void 0,this.stashOnRef=f||void 0,this.stashNumber=C.exec(g)?.[1]):this.refType="revision",null!=u?(this._message=u,a!==u?this._summary=`${a} ${o.EO.Ellipsis}`:this._summary=a):(0,m._k)(i,!0)?(this._summary=a,this._message="Uncommitted Changes"):this._summary=`${a} ${o.EO.Ellipsis}`,null!=h&&(this._stats=h),null!=c&&(this.fileset=c,this._recomputeStats=!0),this.lines=(0,n.eC)(d)??[]}_stashUntrackedFilesLoaded=!1;_recomputeStats=!1;lines;ref;refType;shortSha;stashName;stashNumber;stashOnRef;tips;toString(){return`${(0,c.zu)(this)}(${this.repoPath}|${this.shortSha})`}get date(){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.date:this.author.date}_file;get file(){return this._file}_fileset;get fileset(){return this._fileset}set fileset(e){let t;if(null==e){this._fileset=e,this._file=void 0;return}if(e.pathspec?.endsWith("*")&&(e={...e,pathspec:e.pathspec.slice(0,-1)}),this._fileset=e,e.pathspec)if(1===e.files.length)[t]=e.files;else{let i=e.files.filter(t=>t.path===e.pathspec);i.length>1?this.isUncommitted&&(t=this._file??i[0]):1===i.length?[t]=i:t=1===(i=e.files.filter(t=>t.path.startsWith(e.pathspec))).length?i[0]:void 0}null!=t?this._file=new f.l(this.container,t.repoPath,t.path,t.status,t.originalPath??this._file?.originalPath,t.previousSha??this._file?.previousSha,t.stats??this._file?.stats):this._file=void 0}get formattedDate(){return"absolute"===this.container.CommitDateFormatting.dateStyle?this.formatDate(this.container.CommitDateFormatting.dateFormat):this.formatDateFromNow()}get isUncommitted(){return(0,m._k)(this.sha)}get isUncommittedStaged(){return(0,m.KH)(this.sha)}_message;get message(){return this._message}get name(){return this.stashName?this.stashName:this.shortSha}_stats;get stats(){return this._recomputeStats&&this.computeFileStats(),this._stats}_summary;get summary(){return this._summary}_resolvedPreviousSha;get resolvedPreviousSha(){return this._resolvedPreviousSha}get unresolvedPreviousSha(){let e=this._resolvedPreviousSha??(null!=this.file?this.file.previousSha:this.parents[0])??`${this.sha}^`;return(0,m.RK)(e)?"HEAD":e}_etagFileSystem;hasFullDetails(e){return null!=this.message&&null!=this.fileset&&!this.fileset.filtered&&(!e?.include?.stats||this.fileset.files.some(e=>null!=e.stats))&&(this.isUncommitted&&this._etagFileSystem===this.container.git.getRepository(this.repoPath)?.etagFileSystem||0!==this.parents.length)&&("stash"!==this.refType||this._stashUntrackedFilesLoaded)}async ensureFullDetails(e){if(!this.hasFullDetails(e)){if(this.isUncommitted){let t=this.container.git.getRepository(this.repoPath);if(this._etagFileSystem=t?.etagFileSystem,null!=this._etagFileSystem){let e=await t?.git.status().getStatus();if(null!=e){let t=e.files.flatMap(e=>e.getPseudoFileChanges());(0,m.KH)(this.sha)&&(t=t.filter(e=>e.staged)),this.fileset={files:t,filtered:!1,pathspec:this.fileset?.pathspec}}this._etagFileSystem=t?.etagFileSystem}if(e?.include?.stats){let e=await t?.git.diff().getChangedFilesCount(this.sha);this._stats=e,this._recomputeStats=!1}else this._recomputeStats=!0;return}if("stash"===this.refType){let[t]=await Promise.allSettled([this.container.git.stash(this.repoPath)?.getStashCommitFiles(this.sha,e),this.getPreviousSha()]),i=(0,h.Ro)(t);i?.length&&(this.fileset={files:i,filtered:!1,pathspec:this.fileset?.pathspec}),this._stashUntrackedFilesLoaded=!0}else{let t=this.container.git.commits(this.repoPath),[i,r]=await Promise.allSettled([t.getCommit(this.sha),e?.include?.stats?t.getCommitFilesStats?.(this.sha):void 0,this.getPreviousSha()]),s=(0,h.Ro)(i);null!=s&&(this.parents.push(...s.parents??[]),this._summary=s.summary,this._message=s.message,this.fileset={files:s.fileset?.files??[],filtered:!1,pathspec:this.fileset?.pathspec});let o=(0,h.Ro)(r);if(o?.length&&this.fileset?.files.length){let e=this.fileset.files.map(e=>{let t=o.find(t=>t.path===e.path)?.stats;return null!=t?new f.l(this.container,e.repoPath,e.path,e.status,e.originalPath,e.previousSha,t,e.staged):e});this.fileset={...this.fileset,files:e}}}this._recomputeStats=!0}}computeFileStats(){if(!this._recomputeStats||null==this.fileset)return;this._recomputeStats=!1;let e={added:0,deleted:0,changed:0},t=0,i=0;for(let r of this.fileset.files)switch(null!=r.stats&&(t+=r.stats.additions,i+=r.stats.deletions),r.status){case"A":case"?":e.added++;break;case"D":e.deleted++;break;default:e.changed++}null!=this._stats&&(0===t&&0!==this._stats.additions&&(t=this._stats.additions),0===i&&0!==this._stats.deletions&&(i=this._stats.deletions)),this._stats={...this._stats,files:e,additions:t,deletions:i}}async findFile(e,t,i){if(!this.hasFullDetails(i)&&(await this.ensureFullDetails(i),null==this.fileset))return;let r=this.container.git.getRelativePath(e,this.repoPath);return this.isUncommitted&&null!=t?this.fileset?.files.find(e=>e.path===r&&e.staged===t):this.fileset?.files.find(e=>e.path===r)}formatDate(e){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.formatDate(e):this.author.formatDate(e)}formatDateFromNow(e){return"committed"===this.container.CommitDateFormatting.dateSource?this.committer.fromNow(e):this.author.fromNow(e)}formatStats(e,t){let{stats:i}=this;if(null==i)return t?.empty??"";let{files:r,additions:s,deletions:n}=i;if(0>=(0,g.Zx)(r)&&s<=0&&n<=0)return t?.empty??"";let a=t?.separator??" ";function l(i,r){if("expanded"===e)return`${(0,d.td)("file",r)} ${i}`;let s=`${"added"===i?"+":"deleted"===i?"-":"~"}${r}`;return"stats"===e&&t?.color?`<span style="color:${"added"===i?"var(--vscode-gitDecoration-addedResourceForeground)":"deleted"===i?"var(--vscode-gitDecoration-deletedResourceForeground)":"var(--vscode-gitDecoration-modifiedResourceForeground)"};">${s}</span>`:s}let u=[];if("number"==typeof r)r&&u.push(l("changed",r));else{let{added:t,changed:i,deleted:s}=r;t?u.push(l("added",t)):"stats"===e&&u.push(l("added",0)),i?u.push(l("changed",i)):"stats"===e&&u.push(l("changed",0)),s?u.push(l("deleted",s)):"stats"===e&&u.push(l("deleted",0))}let c=u.join(a);if("stats"===e&&t?.color&&(c=`<span style="background-color:var(--vscode-textCodeBlock-background);border-radius:3px;">&nbsp;${c}&nbsp;&nbsp;</span>`),t?.addParenthesesToFileStats&&(c=`(${c})`),"expanded"===e){let e=[];if(s){let i=(0,d.td)("addition",s);t?.color?e.push(`<span style="color:var(--vscode-gitDecoration-addedResourceForeground);">${i}</span>`):e.push(i)}if(n){let i=(0,d.td)("deletion",n);t?.color?e.push(`<span style="color:var(--vscode-gitDecoration-deletedResourceForeground);">${i}</span>`):e.push(i)}e.length&&(c+=`${u.length?t?.addParenthesesToFileStats?`${o.EO.Space} `:", ":""}${e.join(a)}`)}return c}async getAssociatedPullRequest(e,t){if(!this.isUncommitted&&(e??=await this.container.git.remotes(this.repoPath).getBestRemoteWithIntegration(),e?.hasIntegration()))return(await this.container.integrations.getByRemote(e))?.getPullRequestForCommit(e.provider.repoDesc,this.sha,t)}async getEnrichedAutolinks(e){if(!this.isUncommitted&&(e??=await this.container.git.remotes(this.repoPath).getBestRemoteWithIntegration(),e?.provider!=null))return null==this.message&&await this.ensureFullDetails(),this.container.autolinks.getEnrichedAutolinks(this.message??this.summary,e)}getAvatarUri(e){return this.author.getAvatarUri(this,e)}getCachedAvatarUri(e){return this.author.getCachedAvatarUri(e)}async getCommitForFile(e,t){let i="string"==typeof e?this.container.git.getRelativePath(e,this.repoPath):e.path,r=await this.findFile(i,t);if(null!=r)return this.with({sha:r.staged?w.id:this.sha,fileset:{...this.fileset,pathspec:i}})}async getCommitsForFiles(e){return this.hasFullDetails(e)||(await this.ensureFullDetails(e),null!=this.fileset)?this.fileset?.files.map(e=>this.with({fileset:{...this.fileset,pathspec:e.path}}))??[]:[]}getGitUri(e=!1){let t=this._file?.uri??this.container.git.getAbsoluteUri(this.repoPath,this.repoPath);return e?new p.nk(this._file?.originalUri??t,{repoPath:this.repoPath,sha:this.unresolvedPreviousSha}):new p.nk(t,this)}getPreviousComparisonUrisForLine(e,t){return null!=this.file?this.container.git.diff(this.repoPath).getPreviousComparisonUrisForLine(this.file.uri,e,t??(this.sha===w.SU?void 0:this.sha)):Promise.resolve(void 0)}_previousShaPromise;async getPreviousSha(){if(null==this._previousShaPromise){async function e(){if(null!=this.file){if(null!=this.file.previousSha&&(0,m.HH)(this.file.previousSha))return this.file.previousSha;let e=await this.container.git.refs(this.repoPath).resolveReference((0,m._k)(this.sha,!0)?"HEAD":`${this.sha}^`,this.file.originalPath??this.file.path);return this._resolvedPreviousSha=e,e}let e=this.parents[0];if(null!=e&&(0,m.HH)(e))return this._resolvedPreviousSha=e,e;let t=await this.container.git.refs(this.repoPath).resolveReference((0,m._k)(this.sha,!0)?"HEAD":`${this.sha}^`);return this._resolvedPreviousSha=t,t}this._previousShaPromise=e.call(this)}return this._previousShaPromise}getRepository(){return this.container.git.getRepository(this.repoPath)}async isPushed(){return this.container.git.commits(this.repoPath).hasCommitBeenPushed(this.ref)}with(e){return new _GitCommit(this.container,this.repoPath,e.sha??this.sha,this.author,this.committer,this.summary,this.getChangedValue(e.parents,this.parents)??[],this.message,this.getChangedValue(e.fileset,this.fileset),this.getChangedValue(e.stats,this.stats),this.getChangedValue(e.lines,this.lines),this.tips,this.stashName,this.stashOnRef)}getChangedValue(e,t){return void 0===e?t:null===e?void 0:e}};b([(0,u.B)()],S.prototype,"isUncommitted",1),b([(0,u.B)()],S.prototype,"isUncommittedStaged",1),b([(0,l.G)()],S.prototype,"ensureFullDetails",1),b([(0,u.B)()],S.prototype,"getGitUri",1),b([(0,u.B)((e,t)=>`${e}|${t??""}`)],S.prototype,"getPreviousComparisonUrisForLine",1),b([(0,l.G)()],S.prototype,"isPushed",1);let P=S;let GitCommitIdentity=class GitCommitIdentity{constructor(e,t,i,r){this.name=e,this.email=t,this.date=i,this.avatarUrl=r}formatDate(e){return(0,a.Yq)(this.date,e??"MMMM Do, YYYY h:mma")}fromNow(e){return(0,a.PI)(this.date,e)}getAvatarUri(e,t){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.m_)(this.email,e,t)}getCachedAvatarUri(e){return null!=this.avatarUrl?r.Uri.parse(this.avatarUrl):(0,s.qJ)(this.email,e)}};b([(0,u.B)(e=>e??"MMMM Do, YYYY h:mma")],GitCommitIdentity.prototype,"formatDate",1)},8561:(e,t,i)=>{i.d(t,{_:()=>n,s:()=>o});var r=i(2099),s=i(3583);function o(e,t){return(0,s.b)({command:"co-authors",state:{repo:e,contributors:t}})}function n(e,t){return r.m.instance.views.revealContributor(e,t)}},8576:(e,t,i)=>{i.d(t,{DP:()=>CloudIntegrationAuthenticationProvider,Ht:()=>BuiltInAuthenticationProvider,RH:()=>LocalIntegrationAuthenticationProvider});var r=i(1398),s=i(1849),o=i(6206),n=i(1945),a=i(4269),l=i(225),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor,h=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o};let d=0x40000000-1;let IntegrationAuthenticationProviderBase=class IntegrationAuthenticationProviderBase{constructor(e,t,i){this.container=e,this.authenticationService=t,this.configuredIntegrationService=i}disposables=[];cloud=!1;dispose(){this.disposables.forEach(e=>void e.dispose())}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}async deleteSession(e){let t=await this.configuredIntegrationService.getConfigured({id:this.authProviderId,domain:(0,a.NT)(this.authProviderId)?e?.domain:void 0,type:this.cloud?"cloud":"local"});await this.configuredIntegrationService.deleteStoredSessions(this.authProviderId,e,this.cloud?void 0:"local"),null!=t&&t.length>0&&this.fireDidChange()}async deleteAllSessions(){let e=await this.configuredIntegrationService.getConfigured({id:this.authProviderId,type:this.cloud?"cloud":"local"});await this.configuredIntegrationService.deleteAllStoredSessions(this.authProviderId,this.cloud?void 0:"local"),null!=e&&e.length>0&&this.fireDidChange()}async getSession(e,t){let i,r;t?.forceNewSession?await this.configuredIntegrationService.deleteStoredSessions(this.authProviderId,e,this.cloud?void 0:"local"):(i=await this.configuredIntegrationService.getStoredSession(this.authProviderId,e,this.cloud?"cloud":"local"),r=i?.accessToken);let s=i?.expiresAt!=null&&new Date(i.expiresAt).getTime()<Date.now();return(null==i||s)&&(!this.cloud&&(t?.createIfNeeded||t?.forceNewSession)?i=await this.getNewSession(e):this.cloud&&(i=await this.getNewSession(e,{...t,refreshIfExpired:s})),null!=i&&await this.configuredIntegrationService.storeSession(this.authProviderId,i)),r!==i?.accessToken&&this.fireDidChange(),i}fireDidChange(){queueMicrotask(()=>this._onDidChange.fire())}};h([(0,o.Yz)()],IntegrationAuthenticationProviderBase.prototype,"deleteSession",1),h([(0,o.Yz)()],IntegrationAuthenticationProviderBase.prototype,"deleteAllSessions",1),h([(0,o.Yz)()],IntegrationAuthenticationProviderBase.prototype,"getSession",1);let LocalIntegrationAuthenticationProvider=class LocalIntegrationAuthenticationProvider extends IntegrationAuthenticationProviderBase{async getNewSession(e){return this.createSession(e)}};let CloudIntegrationAuthenticationProvider=class CloudIntegrationAuthenticationProvider extends IntegrationAuthenticationProviderBase{cloud=!0;async getNewSession(e,t){if(t?.forceNewSession){if(!await this.disconnectCloudSession())return;this.connectCloudSession(!1,t?.source);return}let i=t?.refreshIfExpired||t?.createIfNeeded||t?.forceNewSession||t?.sync?await this.getCloudSession(e):void 0;if(t?.createIfNeeded&&null==i){if(!await this.connectCloudSession(!0,t?.source))return;i=await this.getSession(e,{source:t?.source})}return i}async connectCloudSession(e,t){return!!(0,l.LT)(this.authProviderId)&&this.container.integrations.connectCloudIntegrations({integrationIds:[this.authProviderId],skipIfConnected:e,skipPreSync:!0},{source:t??"integrations",detail:{action:"connect",integration:this.authProviderId}})}async getCloudSession(e){let t;if(!await this.container.subscription.getAuthenticationSession(!1))return;let i=await this.container.cloudIntegrations;if(null==i)return;let r=await i.getConnectionSession(this.authProviderId);if(r?.expiresIn===0&&(this.authProviderId===s.Q7.GitHub||(0,a.Ii)(this.authProviderId))&&(r.expiresIn=d),null!=r&&r.expiresIn<60&&(r=await i.getConnectionSession(this.authProviderId,r.accessToken)),r){try{t=new URL(r.domain).protocol}catch{t=void 0}return{id:this.configuredIntegrationService.getSessionId(e),accessToken:r.accessToken,scopes:e.scopes,account:{id:"",label:""},cloud:!0,expiresAt:new Date(1e3*r.expiresIn+Date.now()),domain:e.domain,protocol:t??void 0}}}async disconnectCloudSession(){if(!await this.container.subscription.getAuthenticationSession(!1))return!1;let e=await this.container.cloudIntegrations;return null!=e&&e.disconnect(this.authProviderId)}};let BuiltInAuthenticationProvider=class BuiltInAuthenticationProvider extends LocalIntegrationAuthenticationProvider{constructor(e,t,i,s){super(e,t,i),this.authProviderId=s,this.disposables.push(r.authentication.onDidChangeSessions(e=>{e.provider.id===this.authProviderId&&this.fireDidChange()}))}createSession(){throw Error("Method `createSession` should never be used in BuiltInAuthenticationProvider")}async getSession(e,t){if(null==e)return;let{createIfNeeded:i,forceNewSession:r}=t??{};return(0,n.c)(this.container,this.authProviderId,e,r?{forceNewSession:!0}:i?{createIfNeeded:!0}:{silent:!0})}};h([(0,o.Yz)()],BuiltInAuthenticationProvider.prototype,"getSession",1)},8577:(e,t,i)=>{i.d(t,{do:()=>p,qr:()=>ActionRunners,zM:()=>g});var r,s=i(1398),o=i(7688),n=i(2141),a=i(2870),l=i(9615),u=i(4692),c=i(6045),h=i(4808);let d=["createPullRequest","openPullRequest","hover.commands"];var p=((r=p||{})[r.BuiltIn=0]="BuiltIn",r[r.BuiltInPartner=1]="BuiltInPartner",r[r.Partner=2]="Partner",r[r.BuiltInPartnerInstaller=3]="BuiltInPartnerInstaller",r);let g="Built In";let ActionRunnerQuickPickItem=class ActionRunnerQuickPickItem{constructor(e,t){this.runner=e,this._label="string"==typeof e.label?e.label:e.label(t)}_label;get label(){return this._label}get detail(){return this.runner.name}};let NoActionRunnersQuickPickItem=class NoActionRunnersQuickPickItem{runner;get label(){return"No actions were found"}get detail(){}};let m=(0,c.N)();let RegisteredActionRunner=class RegisteredActionRunner{constructor(e,t,i){this.type=e,this.runner=t,this.unregister=i,this.id=m.next()}id;dispose(){this.unregister()}get name(){return this.runner.name}get label(){return this.runner.label}get order(){switch(this.type){case 0:return 0;case 1:return 1;case 2:return this.partnerId?1:2;case 3:return 3;default:return 100}}get partnerId(){return this.runner.partnerId}run(e){return this.runner.run(e)}};let ActionRunners=class ActionRunners{constructor(e){this.container=e;let t=[this._onDidChange,a.H.onDidChange(e=>{a.H.changed(e,"partners")&&this._updateAllContextKeys()})];for(let e of d)t.push((0,n.Lb)(`${o._}${e}`,(e,t)=>this.run(e,t)));this._disposable=s.Disposable.from(...t)}_onDidChange=new s.EventEmitter;get onDidChange(){return this._onDidChange.event}_actionRunners=new Map;_disposable;dispose(){for(let e of(this._disposable.dispose(),this._actionRunners.values()))for(let t of e)t.dispose();this._actionRunners.clear()}count(e){return this.get(e)?.length??0}get(e){var t=a.H.get("partners"),i=this._actionRunners.get(e);return null!=i&&0!==i.length?null==t?i:i.filter(e=>null==e.partnerId||null!=e.partnerId&&t[e.partnerId]?.enabled!==!1):void 0}has(e){return this.count(e)>0}register(e,t,i=2){let r=this._actionRunners.get(e);null==r&&(r=[],this._actionRunners.set(e,r));let s=e=>{this._updateContextKeys(e),this._onDidChange.fire(e)},o=this._actionRunners,n=new RegisteredActionRunner(i,t,function(){if(1===r.length)o.delete(e),s(e);else{let e=r.indexOf(this);-1!==e&&r.splice(e,1)}});return r.push(n),s(e),{dispose:()=>n.dispose()}}registerBuiltIn(e,t){return this.register(e,{...t,partnerId:void 0,name:g},0)}registerBuiltInPartner(e,t,i){return this.register(t,{...i,partnerId:e},1)}registerBuiltInPartnerInstaller(e,t,i){return this.register(t,{...i,partnerId:e,name:`${i.name} (Not Installed)`},3)}async run(e,t){let i,r=this.get(e.type);if(null!=r&&0!==r.length&&(null!=t&&(r=r.filter(e=>e.id===t)),0!==r.length)){if(r.length>1||r.every(e=>0!==e.type)){let t=r.sort((e,t)=>e.order-t.order||(0,h.wN)(e.name,t.name)).map(t=>new ActionRunnerQuickPickItem(t,e));0===t.length&&t.push(new NoActionRunnersQuickPickItem);let o=s.window.createQuickPick();o.ignoreFocusOut=(0,u.dW)();let n=[];try{let r=await new Promise(i=>{let r,s;switch(n.push(o.onDidHide(()=>i(void 0)),o.onDidAccept(()=>{0!==o.activeItems.length&&i(o.activeItems[0])})),e.type){case"createPullRequest":r="Create Pull Request",s="Choose how to create a pull request";break;case"openPullRequest":r="Open Pull Request",s="Choose how to open the pull request";break;case"hover.commands":r="Need Help or Want to Collaborate?",s="Choose what you would like to do"}o.title=r,o.placeholder=s,o.matchOnDetail=!0,o.items=t,o.show()});if(null==r)return;i=r.runner}finally{o.dispose(),n.forEach(e=>void e.dispose())}}else[i]=r;await i?.run(e)}}async _updateContextKeys(e){await (0,l.o)(`gitlens:action:${e}`,this.count(e))}async _updateAllContextKeys(){for(let e of d)await this._updateContextKeys(e)}}},8593:(e,t,i)=>{i.r(t),i.d(t,{AzureDevOpsIntegration:()=>AzureDevOpsIntegration,isAzureCloudDomain:()=>h});var r=i(1398),s=i(1849),o=i(7864),n=i(8832),a=i(4269);let l=a.Mt[s.Q7.AzureDevOps],u=Object.freeze({id:l.id,scopes:l.scopes});let AzureDevOpsIntegration=class AzureDevOpsIntegration extends n.T5{authProvider=u;id=s.Q7.AzureDevOps;key=this.id;name="Azure DevOps";get domain(){return l.domain}get apiBaseUrl(){return"https://dev.azure.com"}_accounts;async getProviderCurrentAccount({accessToken:e}){if(this._accounts??=new Map,null==this._accounts.get(e)){let t=await this.getProvidersApi(),i=await t.getCurrentUser(this.id,{accessToken:e});this._accounts.set(e,i?{provider:this,id:i.id,name:i.name??void 0,email:i.email??void 0,avatarUrl:i.avatarUrl??void 0,username:i.username??void 0}:void 0)}return this._accounts.get(e)}_organizations;async getProviderResourcesForUser(e,t=!1){this._organizations??=new Map;let{accessToken:i}=e;if(null==this._organizations.get(i)||t){let t=await this.getProvidersApi(),r=await this.getProviderCurrentAccount(e);if(r?.id==null)return;let s=await t.getAzureResourcesForUser(r.id,{accessToken:i});this._organizations.set(i,null!=s?s.map(e=>({...e,key:e.id})):void 0)}return this._organizations.get(i)}_projects;async getProviderProjectsForResources({accessToken:e},t,i=!1){this._projects??=new Map;let r=[];if(i)r=t;else for(let i of t){let t=`${e}:${i.id}`;null==this._projects.get(t)&&r.push(i)}if(r.length>0){let t=await this.getProvidersApi(),i=(await Promise.allSettled(r.map(i=>t.getAzureProjectsForResource(i.name,{accessToken:e})))).map(e=>(0,o.Ro)(e)?.values).flat().filter(e=>null!=e);for(let t of r){let r=i?.filter(e=>e.namespace===t.name);null!=r&&this._projects.set(`${e}:${t.id}`,r.map(e=>({id:e.id,name:e.name,resourceId:t.id,resourceName:t.name,key:e.id})))}}return t.reduce((t,i)=>{let r=this._projects.get(`${e}:${i.id}`);return null!=r&&t.push(...r),t},[])}async getRepoDescriptorsForProjects(e,t){let i=new Map;if(0===t.length)return i;let r=await this.getProvidersApi(),{accessToken:s}=e;return await Promise.all(t.map(async e=>{let t=(await r.getReposForAzureProject(e.resourceName,e.name,{accessToken:s}))?.values;null!=t&&t.length>0&&i.set(e.id,t.map(t=>({id:t.id,nodeId:t.graphQLId??void 0,resourceName:e.resourceName,name:t.name,projectName:e.name,url:t.webUrl??void 0,cloneUrlHttps:t.httpsUrl??void 0,cloneUrlSsh:t.sshUrl??void 0,key:t.id})))})),i}async mergeProviderPullRequest({accessToken:e},t,i){let r=await this.getProvidersApi();if(null==t.refs||null==t.project)return!1;try{return await r.mergePullRequest(this.id,t,{...i,accessToken:e})}catch(e){return this.showMergeErrorMessage(e),!1}}async showMergeErrorMessage(e){await r.window.showErrorMessage(`${e.message}. Check branch policies, and ensure you have the necessary permissions to merge the pull request.`)}async getProviderAccountForCommit(e,t,i,r){return Promise.resolve(void 0)}async getProviderAccountForEmail(e,t,i,r){return Promise.resolve(void 0)}async getProviderDefaultBranch(e,t){return Promise.resolve(void 0)}async getProviderIssueOrPullRequest({accessToken:e},t,i){return(await this.container.azure)?.getIssueOrPullRequest(this,e,t.owner,t.name,i,{baseUrl:this.apiBaseUrl})}async getProviderIssue(e,t,i){let r=await this.getProviderCurrentAccount(e);if(r?.username==null)return;let s=await this.getProviderResourcesForUser(e);if(null==s||0===s.length)return;let o=await this.getProviderProjectsForResources(e,s);if(null==o||0===o.length)return;let n=o.find(e=>e.resourceName===t.owner&&e.name===t.name);if(null!=n)return(await this.container.azure)?.getIssue(this,e.accessToken,n,i,{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,i,r){return(await this.container.azure)?.getPullRequestForBranch(this,e,t.owner,t.name,i,{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit(e,t,i){return Promise.resolve(void 0)}async getRepoInfo(e){return(await this.getProvidersApi()).getRepo(this.id,e.owner,e.name,e.project,{accessToken:this._session?.accessToken})}async getProviderRepositoryMetadata(e,t,i){return Promise.resolve(void 0)}async searchProviderMyPullRequests(e,t){let i=await this.getProvidersApi();if(null!=t)return;let r=await this.getProviderCurrentAccount(e);if(r?.username==null)return;let s=await this.getProviderResourcesForUser(e);if(null==s||0===s.length)return;let o=await this.getProviderProjectsForResources(e,s);if(null==o||0===o.length)return;let n=Array.from((await this.getRepoDescriptorsForProjects(e,o)??new Map).values()).filter(e=>null!=e).flat(),a=o.map(e=>({namespace:e.resourceName,project:e.name})),l=(await i.getPullRequestsForAzureProjects(a,{accessToken:e.accessToken,assigneeLogins:[r.username]}))?.map(e=>this.fromAzureProviderPullRequest(e,n,o)),u=(await i.getPullRequestsForAzureProjects(a,{accessToken:e.accessToken,authorLogin:r.username}))?.map(e=>this.fromAzureProviderPullRequest(e,n,o)),c=new Map;for(let e of u??[])c.set(e.id,e);for(let e of l??[])null==c.get(e.id)&&c.set(e.id,e);return Array.from(c.values())}async searchProviderMyIssues(e,t){let i=await this.getProvidersApi(),r=await this.getProviderCurrentAccount(e);if(r?.username==null)return;let s=await this.getProviderResourcesForUser(e);if(null==s||0===s.length)return;let o=await this.getProviderProjectsForResources(e,s);if(null==o||0===o.length)return;let n=(await Promise.all(o.map(async t=>(await i.getIssuesForAzureProject(t.resourceName,t.name,{accessToken:e.accessToken,assigneeLogins:[r.username]})).values.map(e=>(0,a.J3)(e,this,{project:t}))))).flat(),l=(await Promise.all(o.map(async t=>(await i.getIssuesForAzureProject(t.resourceName,t.name,{accessToken:e.accessToken,authorLogin:r.username})).values.map(e=>(0,a.J3)(e,this,{project:t}))))).flat(),u=new Map;for(let e of l??[])u.set(e.id,e);for(let e of n??[])null==u.get(e.id)&&u.set(e.id,e);return Array.from(u.values())}async providerOnConnect(){if(null==this._session)return;let e=this.container.storage.get(`azure:${this._session.accessToken}:account`),t=this.container.storage.get(`azure:${this._session.accessToken}:organizations`),i=this.container.storage.get(`azure:${this._session.accessToken}:projects`),r=e?.data?{...e.data,provider:this}:void 0,s=t?.data?.map(e=>({...e})),o=i?.data?.map(e=>({...e}));for(let n of(null==e&&null!=(r=await this.getProviderCurrentAccount(this._session))&&(await this.container.storage.deleteWithPrefix("azure"),await this.container.storage.store(`azure:${this._session.accessToken}:account`,{v:1,timestamp:Date.now(),data:{id:r.id,name:r.name,email:r.email,avatarUrl:r.avatarUrl,username:r.username}})),this._accounts??=new Map,this._accounts.set(this._session.accessToken,r),null==t&&(s=await this.getProviderResourcesForUser(this._session,!0),await this.container.storage.store(`azure:${this._session.accessToken}:organizations`,{v:1,timestamp:Date.now(),data:s})),this._organizations??=new Map,this._organizations.set(this._session.accessToken,s),null==i&&s?.length&&(o=await this.getProviderProjectsForResources(this._session,s),await this.container.storage.store(`azure:${this._session.accessToken}:projects`,{v:1,timestamp:Date.now(),data:o})),this._projects??=new Map,o??[])){let e=`${this._session.accessToken}:${n.resourceId}`,t=this._projects.get(e);null==t?this._projects.set(e,[n]):t.some(e=>e.id===n.id)||t.push(n)}}providerOnDisconnect(){this._organizations=void 0,this._projects=void 0,this._accounts=void 0}fromAzureProviderPullRequest(e,t,i){let r,s=t.find(t=>t.name===e.repository.name),o=null!=e.headRepository?t.find(t=>t.name===e.headRepository.name):void 0;return null!=s&&(e.repository.remoteInfo={...e.repository.remoteInfo,cloneUrlHTTPS:s.cloneUrlHttps??"",cloneUrlSSH:s.cloneUrlSsh??""}),null!=o&&(e.headRepository={...e.headRepository,id:e.headRepository?.id??o.id,name:e.headRepository?.name??o.name,owner:{login:e.headRepository?.owner.login??o.resourceName},remoteInfo:{...e.headRepository?.remoteInfo,cloneUrlHTTPS:o.cloneUrlHttps??"",cloneUrlSSH:o.cloneUrlSsh??""}}),s?.projectName!=null&&(r=i.find(e=>e.name===s.projectName)),(0,a.QF)(e,this,{project:r})}};let c=/^dev\.azure\.com$|\bvisualstudio\.com$/i;function h(e){return null!=e&&c.test(e)}},8601:(e,t,i)=>{i.d(t,{V:()=>u,X:()=>GitRemote});var r=i(1555),s=i(4808),o=i(3130),n=Object.defineProperty,a=Object.getOwnPropertyDescriptor,l=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?a(t,i):t,l=e.length-1;l>=0;l--)(s=e[l])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&n(t,i,o),o};function u(e){return e instanceof GitRemote}let GitRemote=class GitRemote{constructor(e,t,i,r,s,o,n,a){this.container=e,this.repoPath=t,this.name=i,this.scheme=r,this._domain=s,this._path=o,this.provider=n,this.urls=a}get default(){let e=this.container.storage.getWorkspace("remote:default");return this.name===e||this.remoteKey===e}get domain(){return this.provider?.domain??this._domain}get id(){return`${this.name}/${this.remoteKey}`}get maybeIntegrationConnected(){return this.container.integrations.isMaybeConnected(this)}get path(){return this.provider?.path??this._path}get remoteKey(){return this._domain?`${this._domain}/${this._path}`:this.path}get url(){let e;for(let t of this.urls){if("push"===t.type)return t.url;null==e&&(e=t.url)}return e}async getIntegration(){return null!=this.provider?this.container.integrations.getByRemote(this):void 0}hasIntegration(){return null!=this.provider&&this.container.integrations.supports(this.provider.id)}matches(e,t){if(null==t){if((0,s.Q_)(e,this.url))return!0;[,e,t]=(0,o.BX)(e)}return(0,s.Q_)(e,this.domain)&&(0,s.Q_)(t,this.path)}async setAsDefault(e=!0){await this.container.git.remotes(this.repoPath).setRemoteAsDefault(this.name,e)}};l([(0,r.B)()],GitRemote.prototype,"domain",1),l([(0,r.B)()],GitRemote.prototype,"id",1),l([(0,r.B)()],GitRemote.prototype,"path",1),l([(0,r.B)()],GitRemote.prototype,"remoteKey",1),l([(0,r.B)()],GitRemote.prototype,"url",1)},8608:(e,t,i)=>{i.r(t),i.d(t,{XAIProvider:()=>XAIProvider});var r=i(1820),s=i(8730);let o=[{id:"grok-beta",name:"Grok Beta",maxTokens:{input:131072,output:4096},provider:r.zJ,default:!0}];let XAIProvider=class XAIProvider extends s.G{id=r.zJ.id;name=r.zJ.name;descriptor=r.zJ;config={keyUrl:"https://console.x.ai/",keyValidator:/(?:xai-)?[a-zA-Z0-9]{32,}/};getModels(){return Promise.resolve(o)}getUrl(e){return"https://api.x.ai/v1/chat/completions"}}},8730:(e,t,i)=>{i.d(t,{G:()=>OpenAICompatibleProvider});var r=i(2476),s=i(2320),o=i(4941),n=i(1003),a=i(3151),l=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),u=e=>{throw TypeError(e)},c=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&u("Object expected"),i&&(r=t[l("asyncDispose")]),void 0===r&&(r=t[l("dispose")],i&&(s=r)),"function"!=typeof r&&u("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},h=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let OpenAICompatibleProvider=class OpenAICompatibleProvider{constructor(e,t){this.container=e,this.connection=t}dispose(){}async configured(e){return await this.getApiKey(e)!=null}async getApiKey(e){let{keyUrl:t,keyValidator:i}=this.config;return(0,a.Hi)(this.container,{id:this.id,name:this.name,requiresAccount:this.descriptor.requiresAccount,validator:null!=i?e=>i.test(e):()=>!0,url:t},e)}getHeaders(e,t,i,r){return{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${t}`}}async sendRequest(e,t,i,r,l){var u=[];try{let h=c(u,(0,n.bP)(`${(0,o.zu)(this)}.sendRequest`,!1));try{return await this.fetch(e,t,i,r,l.modelOptions,l.cancellation)}catch(i){if(i instanceof s.AL)throw o.Vy.error(i,h,`Cancelled request to ${(0,a.u5)(e)}: (${t.provider.name})`),i;if(o.Vy.error(i,h,`Unable to ${(0,a.u5)(e)}: (${t.provider.name})`),i instanceof s.V9)throw i;throw Error(`Unable to ${(0,a.u5)(e)}: (${t.provider.name}) ${i.message}`)}}catch(e){var d=e,p=!0}finally{h(u,d,p)}}async fetch(e,t,i,r,s,o){let n=0,l=t.maxTokens.input;for(;;){let u={model:t.id,messages:await r(l,n),stream:!1,max_completion_tokens:t.maxTokens.output?Math.min(s?.outputTokens??1/0,t.maxTokens.output):s?.outputTokens,temperature:(0,a.dj)(s?.temperature??t.temperature)},c=await this.fetchCore(e,t,i,u,o);if(!c.ok){let i=await this.handleFetchFailure(c,e,t,n,l);if(i.retry){l=i.maxInputTokens,n++;continue}}let h=await c.json();return{id:h.id,content:h.choices?.[0].message.content?.trim()??h.content?.[0]?.text?.trim()??"",model:t,usage:{promptTokens:h.usage?.prompt_tokens??h.usage?.input_tokens,completionTokens:h.usage?.completion_tokens??h.usage?.output_tokens,totalTokens:h.usage?.total_tokens,limits:h?.usage?.gk!=null?{used:h.usage.gk.used,limit:h.usage.gk.limit,resetsOn:new Date(h.usage.gk.resets_on)}:void 0}}}}async handleFetchFailure(e,t,i,r,o){let n;if(404===e.status)throw new s.V9(s.zK.Unauthorized,Error(`Your API key doesn't seem to have access to the selected '${i.id}' model`));if(429===e.status)throw new s.V9(s.zK.RateLimitOrFundsExceeded,Error(`(${this.name}) ${e.status}: Too many requests (rate limit exceeded) or your account is out of funds`));try{n=await e.json()}catch{}if(n?.error?.code==="context_length_exceeded"){if(r<2)return{retry:!0,maxInputTokens:o-200*(r||1)};throw new s.V9(s.zK.RequestTooLarge,Error(`(${this.name}) ${e.status}: ${n?.error?.message||e.statusText}`))}throw Error(`(${this.name}) ${e.status}: ${n?.error?.message||e.statusText}`)}async fetchCore(e,t,i,o,n){let a;null!=n&&(a=new AbortController,n.onCancellationRequested(()=>a?.abort()));let l=this.getUrl(t);try{return await (0,r.hd)(l,{headers:await this.getHeaders(e,i,t,l),method:"POST",body:JSON.stringify(o),signal:a?.signal})}catch(e){if("AbortError"===e.name)throw new s.AL(e);throw e}}}},8734:(e,t,i)=>{i.d(t,{d:()=>p});var r=i(8601),s=i(8397),o=i(2141),n=i(5231),a=i(9091),l=i(9442),u=i(7945),c=Object.defineProperty,h=Object.getOwnPropertyDescriptor,d=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?h(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&c(t,i,o),o};let p=class extends l.Kt{constructor(e){super("gitlens.connectRemoteProvider"),this.container=e}static createMarkdownCommandLink(e){let t;return t=(0,r.V)(e)?{remote:e.name,repoPath:e.repoPath}:e,(0,n.J)("gitlens.connectRemoteProvider",t)}preExecute(e,t){return(0,u.qv)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i,r;if(e?.repoPath==null){let e=new Map;for(let t of this.container.git.openRepositories){let i=await t.git.remotes().getBestRemoteWithIntegration({includeDisconnected:!0});i?.provider!=null&&e.set(t,i)}if(0===e.size)return!1;if(1===e.size){let i;[i,t]=(0,a.$1)(e),r=i.path}else{let i=await (0,s.oe)(void 0,"Choose which repository to connect to the remote provider",[...e.keys()]);if(null==i)return;r=i.path,t=e.get(i)}}else if(e?.remote==null){if(r=e.repoPath,null==(t=await this.container.git.remotes(r).getBestRemoteWithIntegration({includeDisconnected:!0})))return!1}else if(r=e.repoPath,t=(i=await this.container.git.remotes(r).getRemotesWithProviders()).find(t=>t.name===e.remote),!t?.hasIntegration())return!1;let o=await this.container.integrations.getByRemote(t);if(null==o)return!1;let n=await o.connect("remoteProvider");return n&&!(i??await this.container.git.remotes(r).getRemotesWithProviders()).some(e=>e.default)&&await t.setAsDefault(!0),n}};p=d([(0,o.G5)()],p);let g=class extends l.Kt{constructor(e){super("gitlens.disconnectRemoteProvider"),this.container=e}static createMarkdownCommandLink(e){let t;return t=(0,r.V)(e)?{remote:e.name,repoPath:e.repoPath}:e,(0,n.J)("gitlens.disconnectRemoteProvider",t)}preExecute(e,t){return(0,u.qv)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i;if(e?.repoPath==null){let e=new Map;for(let t of this.container.git.openRepositories){let i=await t.git.remotes().getBestRemoteWithIntegration({includeDisconnected:!1});null!=i&&e.set(t,i)}if(0===e.size)return;if(1===e.size){let r;[r,t]=(0,a.$1)(e),i=r.path}else{let r=await (0,s.oe)(void 0,"Choose which repository to disconnect from the remote provider",[...e.keys()]);if(null==r)return;i=r.path,t=e.get(r)}}else if(e?.remote==null){if(i=e.repoPath,null==(t=await this.container.git.remotes(i).getBestRemoteWithIntegration({includeDisconnected:!1})))return}else if(i=e.repoPath,t=(await this.container.git.remotes(i).getRemotesWithProviders()).find(t=>t.name===e.remote),!t?.hasIntegration())return;let r=await this.container.integrations.getByRemote(t);return r?.disconnect()}};g=d([(0,o.G5)()],g)},8757:(e,t,i)=>{i.d(t,{l:()=>n,n:()=>a});let r=new TextDecoder,s=new TextEncoder,o=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];function n(e){let t=s.encode(e),i=Array(t.length);for(let e=0;e<t.length;++e)i[e]=o[t[e]];return i.join("")}function a(e){let t=e.match(/(\w{2})/g);if(null===t)return"";let i=new Uint8Array(t.map(e=>parseInt(e,16)));return r.decode(i)}},8772:(e,t,i)=>{i.r(t),i.d(t,{HuggingFaceProvider:()=>HuggingFaceProvider});var r=i(2476),s=i(1820),o=i(8730);let HuggingFaceProvider=class HuggingFaceProvider extends o.G{id=s.xS.id;name=s.xS.name;descriptor=s.xS;config={keyUrl:"https://huggingface.co/settings/tokens",keyValidator:/(?:hf_)?[a-zA-Z0-9]{32,}/};async getModels(){let e=new URLSearchParams({filter:"text-generation,conversational",inference:"warm",sort:"trendingScore",limit:"30"}),t=await (0,r.hd)(`https://huggingface.co/api/models?${e.toString()}`,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"});return(await t.json()).map(e=>({id:e.id,name:e.id.split("/").pop(),maxTokens:{input:4096,output:4096},provider:s.xS,temperature:null}))}getUrl(e){return`https://api-inference.huggingface.co/models/${e.id}/v1/chat/completions`}}},8782:(e,t,i)=>{i.d(t,{T:()=>UriSet});let UriMap=class UriMap{static defaultToKey=e=>e.toString();[Symbol.toStringTag]="UriMap";_map;constructor(e){if(this._map=new Map,e?.length)for(let[t,i]of e)this.set(t,i)}set(e,t){return this._map.set(UriMap.defaultToKey(e),{uri:e,value:t}),this}get(e){return this._map.get(UriMap.defaultToKey(e))?.value}has(e){return this._map.has(UriMap.defaultToKey(e))}get size(){return this._map.size}clear(){this._map.clear()}delete(e){return this._map.delete(UriMap.defaultToKey(e))}forEach(e,t){for(let[i,r]of(void 0!==t&&(e=e.bind(t)),this._map))e(r.value,r.uri,this)}*values(){for(let e of this._map.values())yield e.value}*keys(){for(let e of this._map.values())yield e.uri}*entries(){for(let e of this._map.values())yield[e.uri,e.value]}*[Symbol.iterator](){for(let[,e]of this._map)yield[e.uri,e.value]}};let UriSet=class UriSet{[Symbol.toStringTag]="UriSet";_map;constructor(e){if(this._map=new UriMap,e?.length)for(let t of e)this.add(t)}get size(){return this._map.size}add(e){return this._map.set(e,e),this}clear(){this._map.clear()}delete(e){return this._map.delete(e)}forEach(e,t){this._map.forEach((i,r)=>e.call(t,r,r,this))}has(e){return this._map.has(e)}entries(){return this._map.entries()}keys(){return this._map.keys()}values(){return this._map.keys()}[Symbol.iterator](){return this.keys()}}},8829:(e,t,i)=>{i.d(t,{G:()=>a});var r=i(1398),s=i(745),o=i(4692),n=i(9091);async function a(e,t,i){let a=[],l=t.repoPath,u=t.ref;function c(t){return e.git.getRevisionUri(l,u,`${l}/${t.item.path}`)}try{let t,h=r.window.createQuickPick();h.ignoreFocusOut=i?.ignoreFocusOut??(0,o.dW)();let d=i.initialPath??"";if(i?.keyboard!=null){let{keyboard:r}=i;(t=e.keyboard.createScope(Object.fromEntries(r.keys.map(e=>[e,{onDidPressKey:async e=>{if(0!==h.activeItems.length){let[t]=h.activeItems;if(null!=t.item){let i=h.ignoreFocusOut;h.ignoreFocusOut=!0,await r.onDidPressKey(e,c(t)),h.ignoreFocusOut=i}}}}])))).start(),null!=d&&t.pause(["left","ctrl+left","right","ctrl+right"]),a.push(t)}h.title=i.title,h.placeholder=i?.placeholder??"Search files by name",h.matchOnDescription=!0,h.value=d,h.busy=!0,h.show();let p=await e.git.revision(l).getTreeForRevision(u),g=[...(0,n.x1)(p,e=>{if("blob"!==e.type)return;let[t,i]=(0,s.Uf)(e.path,void 0,!0);return{label:t,description:"."===i?"":i,item:e}})];h.items=g,h.busy=!1;let m=await new Promise(e=>{a.push(h,h.onDidHide(()=>e(void 0)),h.onDidAccept(()=>{0!==h.activeItems.length&&e(h.activeItems[0])}),h.onDidChangeValue(e=>{if(null!=t){for(let i of(0!==e.length?t.pause(["left","ctrl+left","right","ctrl+right"]):t.resume(),g))!i.item.path.includes(e)||i.label.includes(e)||i.description.includes(e)?i.alwaysShow=!1:i.alwaysShow=!0;h.items=g}}))});return null!=m?c(m):void 0}finally{a.forEach(e=>void e.dispose())}}},8832:(e,t,i)=>{i.d(t,{On:()=>IssueIntegration,T5:()=>HostingIntegration,dQ:()=>v,sT:()=>IntegrationBase,yK:()=>y});var r=i(1398),s=i(1849),o=i(2320),n=i(7019),a=i(2870),l=i(9388),u=i(6206),c=i(9091),h=i(4941),d=i(1003),p=i(9975),g=i(4269),m=Object.defineProperty,f=Object.getOwnPropertyDescriptor,w=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?f(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&m(t,i,o),o};function v(e){return"key"in e&&null!=e.key&&"id"in e&&null!=e.id&&"name"in e&&null!=e.name}function y(e){return"key"in e&&null!=e.key&&"owner"in e&&null!=e.owner&&"name"in e&&null!=e.name}let IntegrationBase=class IntegrationBase{constructor(e,t,i){this.container=e,this.authenticationService=t,this.getProvidersApi=i}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}dispose(){this._onDidChange.dispose()}get authProviderDescriptor(){return{domain:this.domain,scopes:this.authProvider.scopes}}get icon(){return this.id}async access(){let e=await this.container.subscription.getSubscription();return(0,p.k0)(e.state)}autolinks(){return[]}get connectedKey(){return`connected:${this.key}`}get maybeConnected(){return void 0===this._session?void 0:null!==this._session}get connectionExpired(){if(this._session?.expiresAt!=null)return new Date(this._session.expiresAt)<new Date}_session;getSession(e){return void 0===this._session?this.ensureSession({createIfNeeded:!1,source:e}):this._session??void 0}async connect(e){try{return!!await this.ensureSession({createIfNeeded:!0,source:e})}catch{return!1}}async disconnect(e){if(e?.currentSessionOnly&&null===this._session)return;let t=null!=this._session,i=!e?.currentSessionOnly;if(t&&!e?.currentSessionOnly&&!e?.silent){let e,t={title:"Disable"},s={title:"Disable & Sign Out"},o={title:"Cancel",isCloseAffordance:!0};if(null==(e=this.authenticationService.supports(this.authProvider.id)?await r.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?

Note: signing out clears the saved authentication.`,{modal:!0},t,s,o):await r.window.showWarningMessage(`Are you sure you want to disable the rich integration with ${this.name}?`,{modal:!0},t,o))||e===o)return;i=e===s}i&&(await this.authenticationService.get(this.authProvider.id)).deleteSession(this.authProviderDescriptor),this.resetRequestExceptionCount(),this._session=null,t&&(e?.currentSessionOnly||e?.silent||this.container.storage.storeWorkspace(this.connectedKey,!1).catch(),this._onDidChange.fire(),e?.currentSessionOnly||this.container.integrations.disconnected(this,this.key)),await this.providerOnDisconnect?.()}async reauthenticate(){void 0!==this._session&&(this._session=void 0,await this.ensureSession({createIfNeeded:!0,forceNewSession:!0}))}refresh(){this.ensureSession({createIfNeeded:!1})}requestExceptionCount=0;resetRequestExceptionCount(){this.requestExceptionCount=0}async reset(){await this.disconnect({silent:!0}),await this.container.storage.deleteWorkspace(this.connectedKey)}async syncCloudConnection(e,t){if(this._session?.cloud!==!1)switch(e){case"connected":if(t){let e=await this.authenticationService.get(this.authProvider.id);await e.deleteSession(this.authProviderDescriptor),this._session=void 0,await this.container.storage.deleteWorkspace(this.connectedKey)}else{if(null!=this._session||this.requestExceptionCount>0||!1===this.container.storage.getWorkspace(this.connectedKey))return;t=!0}await this.ensureSession({sync:t});break;case"disconnected":await this.disconnect({silent:!0})}}handleProviderException(e,t,i){return e instanceof o.AL||(h.Vy.error(e,t),(e instanceof o.v3||e instanceof o.tk)&&this.trackRequestException()),i}trackRequestException(){this.requestExceptionCount++,this.requestExceptionCount>=5&&null!==this._session&&((0,n.c8)(this.name),this.disconnect({currentSessionOnly:!0}))}async isConnected(){return await this.getSession("integrations")!=null}async ensureSession(e){let t,{createIfNeeded:i,forceNewSession:r,source:s,sync:o}=e;if(null!=this._session)return this._session;if(a.H.get("integrations.enabled")){if(i||o)await this.container.storage.deleteWorkspace(this.connectedKey);else if(!1===this.container.storage.getWorkspace(this.connectedKey))return;try{let e=await this.authenticationService.get(this.authProvider.id);t=await e.getSession(this.authProviderDescriptor,o?{sync:o,source:s}:{createIfNeeded:i,forceNewSession:r,source:s})}catch(e){if(await this.container.storage.deleteWorkspace(this.connectedKey),e instanceof Error&&e.message.includes("User did not consent"))return;t=null}return void 0!==t||i||o||await this.container.storage.deleteWorkspace(this.connectedKey),this._session=t??null,this.resetRequestExceptionCount(),null!=t&&(await this.container.storage.storeWorkspace(this.connectedKey,!0),queueMicrotask(()=>{this._onDidChange.fire(),this.container.integrations.connected(this,this.key),this.providerOnConnect?.()})),t??void 0}}getIgnoreSSLErrors(){return this.container.integrations.ignoreSSLErrors(this)}async searchMyIssues(e,t){let i=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())try{let i=await this.searchProviderMyIssues(this._session,null!=e?Array.isArray(e)?e:[e]:void 0,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}}async getIssueOrPullRequest(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getIssueOrPullRequest(t,i?.type,e,this,()=>({value:(async()=>{try{let r=await this.getProviderIssueOrPullRequest(this._session,e,t,i?.type);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}})()}),i)}async getIssue(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getIssue(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderIssue(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,r,void 0)}})()}),i)}async getCurrentAccount(e){let t=(0,d.dQ)();if(!(this.maybeConnected??await this.isConnected()))return;let{expiryOverride:i,...r}=e??{};return await this.container.cache.getCurrentAccount(this,()=>({value:(async()=>{try{let e=await this.getProviderCurrentAccount?.(this._session,r);return this.resetRequestExceptionCount(),e}catch(e){return this.handleProviderException(e,t,void 0)}})()}),{expiryOverride:i})}async getPullRequest(e,t){let i=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return await this.container.cache.getPullRequest(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderPullRequest?.(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}})()}))}};w([(0,u.Rm)()],IntegrationBase.prototype,"connect",1),w([(0,l.G)(),(0,u.Rm)()],IntegrationBase.prototype,"disconnect",1),w([(0,u.Rm)()],IntegrationBase.prototype,"reauthenticate",1),w([(0,u.Rm)()],IntegrationBase.prototype,"syncCloudConnection",1),w([(0,u.Yz)()],IntegrationBase.prototype,"trackRequestException",1),w([(0,l.G)(),(0,u.Yz)({exit:!0})],IntegrationBase.prototype,"isConnected",1),w([(0,l.G)()],IntegrationBase.prototype,"ensureSession",1),w([(0,u.Yz)()],IntegrationBase.prototype,"searchMyIssues",1),w([(0,u.Yz)()],IntegrationBase.prototype,"getIssueOrPullRequest",1),w([(0,u.Yz)()],IntegrationBase.prototype,"getIssue",1),w([(0,u.Yz)()],IntegrationBase.prototype,"getPullRequest",1);let IssueIntegration=class IssueIntegration extends IntegrationBase{type="issues";async getAccountForResource(e){if(this.maybeConnected??await this.isConnected())try{let t=await this.getProviderAccountForResource(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,void 0,void 0)}}async getResourcesForUser(){if(this.maybeConnected??await this.isConnected())try{let e=await this.getProviderResourcesForUser(this._session);return this.resetRequestExceptionCount(),e}catch(e){return this.handleProviderException(e,void 0,void 0)}}async getProjectsForResources(e){if(this.maybeConnected??await this.isConnected())try{let t=await this.getProviderProjectsForResources(this._session,e);return this.resetRequestExceptionCount(),t}catch(e){return this.handleProviderException(e,void 0,void 0)}}async getProjectsForUser(){let e=await this.getResourcesForUser();if(null!=e)return this.getProjectsForResources(e)}async getIssuesForProject(e,t){if(this.maybeConnected??await this.isConnected())try{let i=await this.getProviderIssuesForProject(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,void 0,void 0)}}};w([(0,l.G)(),(0,u.Yz)()],IssueIntegration.prototype,"getAccountForResource",1),w([(0,l.G)(),(0,u.Yz)()],IssueIntegration.prototype,"getResourcesForUser",1),w([(0,u.Yz)()],IssueIntegration.prototype,"getProjectsForResources",1),w([(0,u.Yz)()],IssueIntegration.prototype,"getIssuesForProject",1);let HostingIntegration=class HostingIntegration extends IntegrationBase{type="hosting";async getAccountForEmail(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())try{let r=await this.getProviderAccountForEmail(this._session,e,t,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}}async getAccountForCommit(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())try{let r=await this.getProviderAccountForCommit(this._session,e,t,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}}async getDefaultBranch(e,t){let i=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getRepositoryDefaultBranch(e,this,()=>({value:(async()=>{try{let i=await this.getProviderDefaultBranch(this._session,e,t?.cancellation);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}})()}),{expiryOverride:t?.expiryOverride})}async getRepositoryMetadata(e,t){let i=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getRepositoryMetadata(e,this,()=>({value:(async()=>{try{let i=await this.getProviderRepositoryMetadata(this._session,e,t?.cancellation);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,void 0)}})()}),{expiryOverride:t?.expiryOverride})}async mergePullRequest(e,t){let i=(0,d.dQ)();if(!(this.maybeConnected??await this.isConnected()))return!1;try{let i=await this.mergeProviderPullRequest(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,i,!1)}}async getPullRequestForBranch(e,t,i){let r=(0,d.dQ)();if(!(this.maybeConnected??await this.isConnected()))return;let{expiryOverride:s,...o}=i??{};return this.container.cache.getPullRequestForBranch(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderPullRequestForBranch(this._session,e,t,o);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,r,void 0)}})()}),{expiryOverride:s})}async getPullRequestForCommit(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())return this.container.cache.getPullRequestForSha(t,e,this,()=>({value:(async()=>{try{let i=await this.getProviderPullRequestForCommit(this._session,e,t);return this.resetRequestExceptionCount(),i}catch(e){return this.handleProviderException(e,r,void 0)}})()}),i)}async getMyIssuesForRepos(e,t){let i,r=this.authProvider.id;if(!(this.maybeConnected??await this.isConnected()))return;let o=await this.getProvidersApi();if(r!==s.Q7.GitLab&&(o.isRepoIdsInput(e)||r===s.Q7.AzureDevOps&&!e.every(e=>null!=e.project&&null!=e.namespace)))return void h.Vy.warn(`Unsupported input for provider ${r}`,"getIssuesForRepos");if(r===s.Q7.AzureDevOps){let s=new Set,n=new Set;for(let t of e)s.add(t.namespace),n.add(t.project);if(s.size>1)return void h.Vy.warn(`Multiple organizations not supported for provider ${r}`,"getIssuesForRepos");if(0===s.size)return void h.Vy.warn(`No organizations found for provider ${r}`,"getIssuesForRepos");let a=(0,c.$1)(s.values());if(t?.filters!=null){let e;if(!o.providerSupportsIssueFilters(r,t.filters))return void h.Vy.warn(`Unsupported filters for provider ${r}`,"getIssuesForRepos");try{e=await o.getCurrentUserForInstance(r,a)}catch(e){h.Vy.error(e,"getIssuesForRepos");return}if(null==e)return void h.Vy.warn(`Unable to get current user for ${r}`,"getIssuesForRepos");let s=e.name;if(null==s)return void h.Vy.warn(`Unable to get user property for filter for ${r}`,"getIssuesForRepos");i={authorLogin:t.filters.includes(g.mN.Author)?s:void 0,assigneeLogins:t.filters.includes(g.mN.Assignee)?[s]:void 0,mentionLogin:t.filters.includes(g.mN.Mention)?s:void 0}}let l=JSON.parse(t?.cursor??"{}").cursors??[],u=Array.from(n.values()).map(e=>({namespace:a,project:e,cursor:void 0}));l.length>0&&(u=l);try{let e={cursors:[]},t=!1,r=[];return await Promise.all(u.map(async s=>{let n=await o.getIssuesForAzureProject(s.namespace,s.project,{...i,cursor:s.cursor});r.push(...n.values),n.paging?.more&&(t=!0,e.cursors.push({namespace:s.namespace,project:s.project,cursor:n.paging.cursor}))})),{values:r,paging:{more:t,cursor:JSON.stringify(e)}}}catch(e){h.Vy.error(e,"getIssuesForRepos");return}}if(t?.filters!=null){let e;try{e=await o.getCurrentUser(r)}catch(e){h.Vy.error(e,"getIssuesForRepos");return}if(null==e)return void h.Vy.warn(`Unable to get current user for ${r}`,"getIssuesForRepos");let s=e.username;if(null==s)return void h.Vy.warn(`Unable to get user property for filter for ${r}`,"getIssuesForRepos");i={authorLogin:t.filters.includes(g.mN.Author)?s:void 0,assigneeLogins:t.filters.includes(g.mN.Assignee)?[s]:void 0,mentionLogin:t.filters.includes(g.mN.Mention)?s:void 0}}if(o.getProviderIssuesPagingMode(r)===g.W3.Repo&&!o.isRepoIdsInput(e)){let s=JSON.parse(t?.cursor??"{}").cursors??[],n=e.map(e=>({repo:e,cursor:void 0}));s.length>0&&(n=s);try{let e={cursors:[]},s=!1,a=[];return await Promise.all(n.map(async n=>{let l=await o.getIssuesForRepo(r,n.repo,{...i,cursor:n.cursor,baseUrl:t?.customUrl});a.push(...l.values),l.paging?.more&&(s=!0,e.cursors.push({repo:n.repo,cursor:l.paging.cursor}))})),{values:a,paging:{more:s,cursor:JSON.stringify(e)}}}catch(e){h.Vy.error(e,"getIssuesForRepos");return}}try{return await o.getIssuesForRepos(r,e,{...i,cursor:t?.cursor,baseUrl:t?.customUrl})}catch(e){h.Vy.error(e,"getIssuesForRepos");return}}async getMyPullRequestsForRepos(e,t){let i,r=this.authProvider.id;if(!(this.maybeConnected??await this.isConnected()))return;let o=await this.getProvidersApi();if(r!==s.Q7.GitLab&&(o.isRepoIdsInput(e)||r===s.Q7.AzureDevOps&&!e.every(e=>null!=e.project&&null!=e.namespace)))return void h.Vy.warn(`Unsupported input for provider ${r}`);if(t?.filters!=null){let n,a;if(!o.providerSupportsPullRequestFilters(r,t.filters))return void h.Vy.warn(`Unsupported filters for provider ${r}`,"getPullRequestsForRepos");if(r===s.Q7.AzureDevOps){let t=new Set;for(let i of e)t.add(i.namespace);if(t.size>1)return void h.Vy.warn(`Multiple organizations not supported for provider ${r}`,"getPullRequestsForRepos");if(0===t.size)return void h.Vy.warn(`No organizations found for provider ${r}`,"getPullRequestsForRepos");let i=(0,c.$1)(t.values());try{n=await o.getCurrentUserForInstance(r,i)}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}}else try{n=await o.getCurrentUser(r)}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}if(null==n)return void h.Vy.warn(`Unable to get current user for ${r}`,"getPullRequestsForRepos");switch(r){case s.Q7.Bitbucket:case s.Q7.AzureDevOps:a=n.id;break;default:a=n.username}if(null==a)return void h.Vy.warn(`Unable to get user property for filter for ${r}`,"getPullRequestsForRepos");i={authorLogin:t.filters.includes(g.XP.Author)?a:void 0,assigneeLogins:t.filters.includes(g.XP.Assignee)?[a]:void 0,reviewRequestedLogin:t.filters.includes(g.XP.ReviewRequested)?a:void 0,mentionLogin:t.filters.includes(g.XP.Mention)?a:void 0}}if(o.getProviderPullRequestsPagingMode(r)===g.W3.Repo&&!o.isRepoIdsInput(e)){let s=JSON.parse(t?.cursor??"{}").cursors??[],n=e.map(e=>({repo:e,cursor:void 0}));s.length>0&&(n=s);try{let e={cursors:[]},s=!1,a=[];return await Promise.all(n.map(async n=>{let l=await o.getPullRequestsForRepo(r,n.repo,{...i,cursor:n.cursor,baseUrl:t?.customUrl});a.push(...l.values),l.paging?.more&&(s=!0,e.cursors.push({repo:n.repo,cursor:l.paging.cursor}))})),{values:a,paging:{more:s,cursor:JSON.stringify(e)}}}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}}try{return await o.getPullRequestsForRepos(r,e,{...i,cursor:t?.cursor,baseUrl:t?.customUrl})}catch(e){h.Vy.error(e,"getPullRequestsForRepos");return}}async searchMyPullRequests(e,t,i){let r=(0,d.dQ)();if(!(this.maybeConnected??await this.isConnected()))return;let s=Date.now();try{return{value:await this.searchProviderMyPullRequests(this._session,null!=e?Array.isArray(e)?e:[e]:void 0,t,i),duration:Date.now()-s}}catch(e){return h.Vy.error(e,r),{error:e,duration:Date.now()-s}}}async searchPullRequests(e,t,i){let r=(0,d.dQ)();if(this.maybeConnected??await this.isConnected())try{let r=await this.searchProviderPullRequests?.(this._session,e,null!=t?Array.isArray(t)?t:[t]:void 0,i);return this.resetRequestExceptionCount(),r}catch(e){return this.handleProviderException(e,r,void 0)}}getPullRequestIdentityFromMaybeUrl(e){return this.getProviderPullRequestIdentityFromMaybeUrl?.(e)}};w([(0,l.G)(),(0,u.Yz)()],HostingIntegration.prototype,"getAccountForEmail",1),w([(0,l.G)(),(0,u.Yz)()],HostingIntegration.prototype,"getAccountForCommit",1),w([(0,u.Yz)()],HostingIntegration.prototype,"getDefaultBranch",1),w([(0,u.Yz)()],HostingIntegration.prototype,"getRepositoryMetadata",1),w([(0,u.Yz)()],HostingIntegration.prototype,"getPullRequestForBranch",1),w([(0,u.Yz)()],HostingIntegration.prototype,"getPullRequestForCommit",1),w([(0,u.Yz)()],HostingIntegration.prototype,"searchMyPullRequests",1),w([(0,u.Yz)()],HostingIntegration.prototype,"searchPullRequests",1)},8845:(e,t,i)=>{let r,s,o,n;i.d(t,{Fl:()=>d,PI:()=>g,Tl:()=>p,Yq:()=>m,bH:()=>v,m8:()=>f,zd:()=>y});let a=/(?<literal>\[.*?\])|(?<year>YYYY|YY)|(?<month>M{1,4})|(?<day>Do|DD?)|(?<weekday>d{2,4})|(?<hour>HH?|hh?)|(?<minute>mm?)|(?<second>ss?)|(?<fractionalSecond>SSS)|(?<dayPeriod>A|a)|(?<timeZoneName>ZZ?)/g,l=/(?<dateStyle>full|long|medium|short)(?:\+(?<timeStyle>full|long|medium|short))?/,u=[["year",629856e5,31536e6,"yr"],["month",2628e6,2628e6,"mo"],["week",6048e5,6048e5,"wk"],["day",864e5,864e5,"d"],["hour",36e5,36e5,"h"],["minute",6e4,6e4,"m"],["second",1e3,1e3,"s"]],c=new Map,h=new Map;function d(e){s="string"==typeof e?"system"===e||0===e.trim().length?void 0:[e]:e??void 0,o=void 0,n=void 0,c.clear(),h.clear(),r=void 0}function p(e,t){let i=new Date(e.getTime());for(let[e,r]of Object.entries(t))if(r)switch(e){case"years":i.setFullYear(i.getFullYear()+r);break;case"months":i.setMonth(i.getMonth()+r);break;case"days":i.setDate(i.getDate()+r);break;case"hours":i.setHours(i.getHours()+r);break;case"minutes":i.setMinutes(i.getMinutes()+r);break;case"seconds":i.setSeconds(i.getSeconds()+r)}return i}function g(e,t){let i=("number"==typeof e?e:e.getTime())-new Date().getTime();for(let[e,a,l,c]of u){let u=Math.abs(i);if(u>=a||1e3===a){if(t){if(null==r&&(r=null!=n?n.resolvedOptions().locale:null!=o?o.resolvedOptions().locale:(n=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"always",style:"narrow"})).resolvedOptions().locale),"en"===r||r?.startsWith("en-")){let e=Math.round(u/l);return`${e}${c}`}return null==n&&(n=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"always",style:"narrow"})),n.format(Math.round(i/l),e)}return null==o&&(o=new Intl.RelativeTimeFormat(s,{localeMatcher:"best fit",numeric:"auto",style:"long"})),o.format(Math.round(i/l),e)}}return""}function m(e,t,i,r=!0){t=t??void 0;let o=`${i??""}:${t}`,n=c.get(o);if(null==n){let e,u=function(e){if(null==e)return{localeMatcher:"best fit",dateStyle:"full",timeStyle:"short"};let t=l.exec(e);if(t?.groups!=null){let{dateStyle:e,timeStyle:i}=t.groups;return{localeMatcher:"best fit",dateStyle:e||"full",timeStyle:i||void 0}}let i={localeMatcher:"best fit"};for(let{groups:t}of e.matchAll(a))if(null!=t){for(let[e,r]of Object.entries(t))if(null!=r)switch(e){case"year":i.year=4===r.length?"numeric":"2-digit";break;case"month":switch(r.length){case 4:i.month="long";break;case 3:i.month="short";break;case 2:i.month="2-digit";break;case 1:i.month="numeric"}break;case"day":"DD"===r?i.day="2-digit":i.day="numeric";break;case"weekday":switch(r.length){case 4:i.weekday="long";break;case 3:i.weekday="short";break;case 2:i.weekday="narrow"}break;case"hour":i.hour=2===r.length?"2-digit":"numeric",i.hour12="hh"===r||"h"===r;break;case"minute":i.minute=2===r.length?"2-digit":"numeric";break;case"second":i.second=2===r.length?"2-digit":"numeric";break;case"fractionalSecond":i.fractionalSecondDigits=3;break;case"dayPeriod":i.dayPeriod="narrow",i.hour12=!0,i.hourCycle="h12";break;case"timeZoneName":i.timeZoneName=2===r.length?"long":"short"}}return i}(t);e=null==i?s:"system"===i?void 0:[i],n=new Intl.DateTimeFormat(e,u),r&&c.set(o,n)}if(null==t||l.test(t))return n.format(e);let u=n.formatToParts(e);return t.replace(a,(t,o,n,a,l,h,d,p,g,m,f,v,y,b,C)=>{if(null!=o)return o.substring(1,o.length-1);for(let[t,o]of Object.entries(C)){if(null==o)continue;let n=u.find(e=>e.type===t);if("Do"===o&&n?.type==="day"){var R=Number(n.value);let e=R%100;return`${R}${w[(e-20)%10]??w[e]??w[0]}`}if("a"===o&&n?.type==="dayPeriod"){let t=(function(e){let t=`${i??""}:time:${e}`,o=c.get(t);if(null==o){let n;n=null==i?s:"system"===i?void 0:[i],o=new Intl.DateTimeFormat(n,{localeMatcher:"best fit",timeStyle:e}),r&&c.set(t,o)}return o})("short").formatToParts(e).find(e=>"dayPeriod"===e.type);return` ${(t??n)?.value??""}`}return n?.value??""}return""})}function f(e,t,i,r){let s=("number"==typeof t?t:t.getTime())-("number"==typeof e?e:e.getTime()),o=r??Math.floor;switch(i){case"days":return o(s/864e5);case"hours":return o(s/36e5);case"minutes":return o(s/6e4);case"seconds":return o(s/1e3);default:return s}}let w=["th","st","nd","rd"];function v(e,t,i){return y(t,i)(e)}function y(e,t){null==e&&(e="decimal");let i=`${t??""}:${e}`,r=h.get(i);if(null==r){let o,n={localeMatcher:"best fit",style:e};o=null==t?s:"system"===t?void 0:[t],r=new Intl.NumberFormat(o,n),h.set(i,r)}return r.format}},8902:(e,t,i)=>{i.d(t,{x:()=>FolderNode});var r=i(1398),s=i(2624),o=i(4808),n=i(5818);let FolderNode=class FolderNode extends n.eu{constructor(e,t,i,r,o,a,l){super("folder",s.nk.fromFile(a??o,r),e,t),this.parent=t,this.root=i,this.repoPath=r,this.folderName=o,this.relativePath=a,this.containsWorkingFiles=l,this._uniqueId=(0,n.pF)(`${this.type}+${a??o}`,this.context)}priority=1;get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){let e;if(void 0===this.root.descendants||void 0===this.root.children)return[];if("list"===FolderNode.getFileNesting(this.view.config.files,this.root.descendants,void 0===this.relativePath))this.root.descendants.forEach(e=>e.relativePath=this.root.relativePath),e=this.root.descendants;else for(let t of(e=[],this.root.children.values())){if(void 0===t.value){e.push(new FolderNode(this.view,this.folderName?this:this.parent,t,this.repoPath,t.name,t.relativePath,this.containsWorkingFiles));continue}t.value.parent=this.folderName?this:this.parent,t.value.relativePath=this.root.relativePath,e.push(t.value)}return e.sort((e,t)=>(e instanceof FolderNode?-1:1)-(t instanceof FolderNode?-1:1)||e.priority-t.priority||(0,o.wN)(e.label,t.label)),e}getTreeItem(){let e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Expanded);return e.id=this.id,e.contextValue=n.U0.Folder,this.containsWorkingFiles&&(e.contextValue+="+working"),e.iconPath=r.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}static getFileNesting(e,t,i){let r=e.layout||"auto";if("auto"===r){if(i||e.compact){let i=e.threshold||5;if(t.length<=i)return"list"}return"tree"}return r}}},8942:(e,t,i)=>{i.d(t,{GutterChangesAnnotationProvider:()=>GutterChangesAnnotationProvider});var r=i(1398),s=i(9156),o=i(2870),n=i(6206),a=i(1003),l=i(7864),u=i(8178),c=i(1176),h=i(7500),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor,g=(e,t)=>(t=Symbol[e])?t:Symbol.for("Symbol."+e),m=e=>{throw TypeError(e)},f=(e,t,i)=>{if(null!=t){var r,s;"object"!=typeof t&&"function"!=typeof t&&m("Object expected"),i&&(r=t[g("asyncDispose")]),void 0===r&&(r=t[g("dispose")],i&&(s=r)),"function"!=typeof r&&m("Object not disposable"),s&&(r=function(){try{s.call(this)}catch(e){return Promise.reject(e)}}),e.push([i,r,t])}else i&&e.push([i]);return t},w=(e,t,i)=>{var r="function"==typeof SuppressedError?SuppressedError:function(e,t,i,r){return(r=Error(i)).name="SuppressedError",r.error=e,r.suppressed=t,r},s=e=>t=i?new r(e,t,"An error was suppressed during disposal"):(i=!0,e),o=r=>{for(;r=e.pop();)try{var n=r[1]&&r[1].call(r[2]);if(r[0])return Promise.resolve(n).then(o,e=>(s(e),o()))}catch(e){s(e)}if(i)throw t};return o()};let v=0x40000000-1;let GutterChangesAnnotationProvider=class GutterChangesAnnotationProvider extends c.wJ{hoverProviderDisposable;sortedHunkStarts;state;constructor(e,t,i,r){super(e,t,"changes",i,r)}canReuse(e){return this.annotationContext?.sha===e?.sha&&this.annotationContext?.only===e?.only}clear(){return this.state=void 0,null!=this.hoverProviderDisposable&&(this.hoverProviderDisposable.dispose(),this.hoverProviderDisposable=void 0),super.clear()}nextChange(){if(null==this.sortedHunkStarts)return;let e=-1,t=this.editor.selection.active.line;for(let i of this.sortedHunkStarts)if(i>t){e=i;break}-1===e&&(e=this.sortedHunkStarts[0]),e>0&&(this.editor.selection=new r.Selection(e,0,e,0),this.editor.revealRange(new r.Range(e,0,e,0),r.TextEditorRevealType.InCenterIfOutsideViewport))}previousChange(){if(null==this.sortedHunkStarts)return;let e=-1,t=this.editor.selection.active.line;for(let i of this.sortedHunkStarts){if(i>=t)break;e=i}-1===e&&(e=this.sortedHunkStarts[this.sortedHunkStarts.length-1]),e>0&&(this.editor.selection=new r.Selection(e,0,e,0),this.editor.revealRange(new r.Range(e,0,e,0),r.TextEditorRevealType.InCenterIfOutsideViewport))}async onProvideAnnotation(e,t){var i=[];try{let s,o,n=(0,a.dQ)(),c=this.trackedDocument.uri.sha,d=e?.sha!=null&&e.sha!==c?`${e.sha}^`:void 0,p=this.container.git.commits(this.trackedDocument.uri.repoPath),g=null==c&&null==d;if(g){let e=await p.getOldestUnpushedShaForPath(this.trackedDocument.uri);if(null!=e)e=`${e}^`,s=await p.getCommitForFile(this.trackedDocument.uri,e),null!=s?null!=d?d=e:(c=e,d=""):g=!1;else{let e=await this.container.git.status(this.trackedDocument.uri.repoPath).getStatusForFile?.(this.trackedDocument.uri),t=e?.getPseudoCommits(this.container,await this.container.git.config(this.trackedDocument.uri.repoPath).getCurrentUser());t?.length?(s=await p.getCommitForFile(this.trackedDocument.uri),c="HEAD"):this.trackedDocument.dirty?c="HEAD":g=!1}}g||(s=await p.getCommitForFile(this.trackedDocument.uri,d??c),null!=s&&(null!=d||(c=`${s.ref}^`),d=s.ref));let m=(await Promise.allSettled(null==d&&this.editor.document.isDirty?[this.container.git.getDiffForFileContents(this.trackedDocument.uri,c,this.editor.document.getText()),this.container.git.getDiffForFile(this.trackedDocument.uri,c,d)]:[this.container.git.getDiffForFile(this.trackedDocument.uri,c,d)])).map(e=>(0,l.Ro)(e)).filter(e=>!!e);if(!m?.length)return!1;let w=f(i,(0,u.u)(n)),y=new Map,b=e?.sha!=null&&e?.only?await this.container.git.getBlame(this.trackedDocument.uri,this.editor?.document):void 0;for(let t of(this.sortedHunkStarts=[],m))for(let i of t.hunks){if(null!=b){let t=!0,r=e.sha;for(let e=i.current.position.start-1;e<i.current.position.end;e++)b.lines[e]?.sha===r&&(t=!1);if(t)continue}for(let[e,t]of i.lines){if("unchanged"===t.state)continue;let i=this.editor.document.validateRange(new r.Range(new r.Position(e-1,0),new r.Position(e-1,v)));this.sortedHunkStarts.push(i.start.line),null==o&&(o=new r.Selection(i.start,i.end));let s=y.get(t.state);null==s?(s={decorationType:"added"===t.state?h.I.changesLineAddedAnnotation:"removed"===t.state?h.I.changesLineDeletedAnnotation:h.I.changesLineChangedAnnotation,rangesOrOptions:[{range:i}]},y.set(t.state,s)):s.rangesOrOptions.push({range:i})}}return this.sortedHunkStarts.sort((e,t)=>e-t),w?.restart({suffix:" to compute recent changes annotations"}),y.size&&(this.setDecorations([...y.values()]),w?.stop({suffix:" to apply all recent changes annotations"}),null==o||e?.selection===!1||t?.restoring||(this.editor.selection=o,this.editor.revealRange(o,r.TextEditorRevealType.InCenterIfOutsideViewport))),this.state={commit:s,diffs:m},this.registerHoverProvider(),!0}catch(e){var s=e,o=!0}finally{w(i,s,o)}}registerHoverProvider(){let e=o.H.get("hovers");e.enabled&&e.annotations.enabled&&(this.hoverProviderDisposable?.dispose(),this.hoverProviderDisposable=r.languages.registerHoverProvider({pattern:this.editor.document.uri.fsPath},{provideHover:(e,t,i)=>this.provideHover(e,t,i)}))}async provideHover(e,t,i){if(null==this.state||"line"!==o.H.get("hovers.annotations.over")&&0!==t.character)return;let{commit:n,diffs:a}=this.state;for(let i of a)for(let o of i.hunks){let i=o.previous.count>o.current.count;if(t.line>=o.current.position.start-1&&t.line<=o.current.position.end-!i){let a=await (0,s.ec)(n,this.trackedDocument.uri,t.line,o);if(null==a)return;return new r.Hover(a,e.validateRange(new r.Range(o.current.position.start-1,0,o.current.position.end-!i,v)))}}}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?p(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&d(t,i,o)})([(0,n.Rm)()],GutterChangesAnnotationProvider.prototype,"onProvideAnnotation",1)},9013:(e,t,i)=>{i.d(t,{Xn:()=>w,tB:()=>v,ZE:()=>y,uO:()=>b,xG:()=>C});var r=i(2870),s=i(4808),o=i(6458),n=i(1398),a=i(1182),l=i(745),u=i(3677),c=i(8845),h=i(1555),d=i(9686),p=i(5962),g=Object.defineProperty,m=Object.getOwnPropertyDescriptor,f=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?m(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&g(t,i,o),o};let GitWorktree=class GitWorktree{constructor(e,t,i,r,s,o,n,a,l){this.container=e,this.isDefault=t,this.type=i,this.repoPath=r,this.uri=s,this.locked=o,this.prunable=n,this.sha=a,this.branch=l}get date(){return this.branch?.date}get path(){return this.uri.scheme===a.xB.File?(0,d.Fd)(this.uri.fsPath):this.uri.toString()}get friendlyPath(){return null!=this.workspaceFolder?(0,u.kZ)(this.uri):(0,d.Fd)((0,l.V8)(this.repoPath,this.uri.fsPath))||(0,d.Fd)(this.uri.fsPath)}get formattedDate(){return"absolute"===this.container.BranchDateFormatting.dateStyle?this.formatDate(this.container.BranchDateFormatting.dateFormat):this.formatDateFromNow()}get hasChanges(){return this._status?.hasChanges}get opened(){return this.workspaceFolder?.uri.toString()===this.uri.toString()}get name(){switch(this.type){case"bare":return"(bare)";case"detached":return(0,p.pV)(this.sha);default:return this.branch?.name||this.friendlyPath}}get workspaceFolder(){return n.workspace.getWorkspaceFolder(this.uri)}formatDate(e){return null!=this.date?(0,c.Yq)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,c.PI)(this.date):""}_status;_statusPromise;async getStatus(e){return"bare"===this.type?Promise.resolve(void 0):((null==this._statusPromise||e?.force)&&(this._statusPromise=new Promise(async(e,t)=>{try{let t=await this.container.git.status(this.uri.fsPath).getStatus();this._status=t,e(t)}catch(e){t(e)}})),this._statusPromise)}};function w(e,t){switch((t={current:!0,groupByType:!0,orderBy:r.H.get("sortBranchesBy"),...t}).orderBy){case"date:asc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openedWorktreesByBranch?(t.openedWorktreesByBranch.has(e.id)?-1:1)-(t.openedWorktreesByBranch.has(i.id)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(t.groupByType?(i.remote?-1:1)-(e.remote?-1:1):0)||(null==e.date?-1:e.date.getTime())-(null==i.date?-1:i.date.getTime())||(0,s.wN)(e.name,i.name));case"name:asc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openedWorktreesByBranch?(t.openedWorktreesByBranch.has(e.id)?-1:1)-(t.openedWorktreesByBranch.has(i.id)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(t.groupByType?(i.remote?-1:1)-(e.remote?-1:1):0)||(0,s.wN)(e.name,i.name));case"name:desc":return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openedWorktreesByBranch?(t.openedWorktreesByBranch.has(e.id)?-1:1)-(t.openedWorktreesByBranch.has(i.id)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||("main"===e.name?-1:1)-("main"===i.name?-1:1)||("master"===e.name?-1:1)-("master"===i.name?-1:1)||("develop"===e.name?-1:1)-("develop"===i.name?-1:1)||(t.groupByType?(i.remote?-1:1)-(e.remote?-1:1):0)||(0,s.wN)(i.name,e.name));default:return e.sort((e,i)=>(t.missingUpstream?(e.upstream?.missing?-1:1)-(i.upstream?.missing?-1:1):0)||(t.current?(e.current?-1:1)-(i.current?-1:1):0)||(t.openedWorktreesByBranch?(t.openedWorktreesByBranch.has(e.id)?-1:1)-(t.openedWorktreesByBranch.has(i.id)?-1:1):0)||(e.starred?-1:1)-(i.starred?-1:1)||(t.groupByType?(i.remote?-1:1)-(e.remote?-1:1):0)||(null==i.date?-1:i.date.getTime())-(null==e.date?-1:e.date.getTime())||(0,s.wN)(i.name,e.name))}}function v(e,t){t={picked:!0,current:!0,orderBy:r.H.get("sortContributorsBy"),...t};let i=e=>(0,o.c)(e)?e:e.item,n=(e,i)=>!t.picked||(0,o.c)(e)||(0,o.c)(i)?0:(e.picked?-1:1)-(i.picked?-1:1);switch(t.orderBy){case"count:asc":return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||e.commits-r.commits||(e.latestCommitDate?.getTime()??0)-(r.latestCommitDate?.getTime()??0)});case"date:desc":return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(r.latestCommitDate?.getTime()??0)-(e.latestCommitDate?.getTime()??0)||r.commits-e.commits});case"date:asc":return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(e.latestCommitDate?.getTime()??0)-(r.latestCommitDate?.getTime()??0)||r.commits-e.commits});case"name:asc":return e.sort((e,r)=>{let o=n(e,r);return e=i(e),r=i(r),o||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(0,s.wN)(e.name??e.username,r.name??r.username)});case"name:desc":return e.sort((e,r)=>{let o=n(e,r);return e=i(e),r=i(r),o||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(0,s.wN)(r.name??r.username,e.name??e.username)});case"score:desc":return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(r.stats?.contributionScore??0)-(e.stats?.contributionScore??0)||r.commits-e.commits||(r.latestCommitDate?.getTime()??0)-(e.latestCommitDate?.getTime()??0)});case"score:asc":return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||(e.stats?.contributionScore??0)-(r.stats?.contributionScore??0)||e.commits-r.commits||(e.latestCommitDate?.getTime()??0)-(r.latestCommitDate?.getTime()??0)});default:return e.sort((e,r)=>{let s=n(e,r);return e=i(e),r=i(r),s||(t.current?(e.current?-1:1)-(r.current?-1:1):0)||r.commits-e.commits||(r.latestCommitDate?.getTime()??0)-(e.latestCommitDate?.getTime()??0)})}}function y(e,t){switch((t={orderBy:r.H.get("sortRepositoriesBy"),...t}).orderBy){case"name:asc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(0,s.wN)(e.name,t.name));case"name:desc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(0,s.wN)(t.name,e.name));case"lastFetched:asc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(e.lastFetchedCached??0)-(t.lastFetchedCached??0));case"lastFetched:desc":return e.sort((e,t)=>(e.starred?-1:1)-(t.starred?-1:1)||(t.lastFetchedCached??0)-(e.lastFetchedCached??0));default:return e}}function b(e,t){switch((t={orderBy:r.H.get("sortTagsBy"),...t}).orderBy){case"date:asc":return e.sort((e,t)=>(e.date?.getTime()??0)-(t.date?.getTime()??0));case"name:asc":return e.sort((e,t)=>(0,s.wN)(e.name,t.name));case"name:desc":return e.sort((e,t)=>(0,s.wN)(t.name,e.name));default:return e.sort((e,t)=>(t.date?.getTime()??0)-(e.date?.getTime()??0))}}function C(e,t){t={orderBy:r.H.get("sortBranchesBy"),...t};let i=e=>e instanceof GitWorktree?e:e.item;switch(t.orderBy){case"date:asc":return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(e.isDefault?-1:1)-(t.isDefault?-1:1)||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||(null==e.date?-1:e.date.getTime())-(null==t.date?-1:t.date.getTime())||(0,s.wN)(e.name,t.name)));case"name:asc":return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(e.isDefault?-1:1)-(t.isDefault?-1:1)||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||("main"===e.name?-1:1)-("main"===t.name?-1:1)||("master"===e.name?-1:1)-("master"===t.name?-1:1)||("develop"===e.name?-1:1)-("develop"===t.name?-1:1)||(0,s.wN)(e.name,t.name)));case"name:desc":return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(e.isDefault?-1:1)-(t.isDefault?-1:1)||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||("main"===e.name?-1:1)-("main"===t.name?-1:1)||("master"===e.name?-1:1)-("master"===t.name?-1:1)||("develop"===e.name?-1:1)-("develop"===t.name?-1:1)||(0,s.wN)(t.name,e.name)));default:return e.sort((e,t)=>(e=i(e),t=i(t),(e.opened?-1:1)-(t.opened?-1:1)||(e.isDefault?-1:1)-(t.isDefault?-1:1)||(null==t.date?-1:t.date.getTime())-(null==e.date?-1:e.date.getTime())||(null===e.hasChanges?0:e.hasChanges?-1:1)-(null===t.hasChanges?0:t.hasChanges?-1:1)||(0,s.wN)(t.name,e.name)))}}f([(0,h.B)()],GitWorktree.prototype,"friendlyPath",1),f([(0,h.B)()],GitWorktree.prototype,"workspaceFolder",1),f([(0,h.B)(e=>e??"MMMM Do, YYYY h:mma")],GitWorktree.prototype,"formatDate",1)},9043:(e,t,i)=>{i.r(t),i.d(t,{OpenRouterProvider:()=>OpenRouterProvider});var r=i(2476),s=i(1820),o=i(8730);let OpenRouterProvider=class OpenRouterProvider extends o.G{id=s.a.id;name=s.a.name;descriptor=s.a;config={keyUrl:"https://openrouter.ai/keys",keyValidator:/(?:sk-)?\w{24,128}/};async getModels(){let e=await this.getApiKey(!0);if(!e)return[];let t="https://openrouter.ai/api/v1/models",i=await (0,r.hd)(t,{headers:this.getHeadersCore(e)});if(!i.ok)throw Error(`Getting models (${t}) failed: ${i.status} (${i.statusText})`);return(await i.json()).data.map(e=>({id:e.id,name:e.name,maxTokens:{input:e.context_length,output:e.top_provider?.max_completion_tokens??Math.floor(e.context_length/2)},provider:s.a,temperature:null}))}getUrl(e){return"https://openrouter.ai/api/v1/chat/completions"}getHeaders(e,t,i,r){return this.getHeadersCore(t)}getHeadersCore(e){return{Accept:"application/json","Content-Type":"application/json","HTTP-Referer":"https://gitkraken.com/","X-Title":"GitKraken",Authorization:`Bearer ${e}`}}}},9065:(e,t,i)=>{i.d(t,{D0:()=>l,Y6:()=>n,e3:()=>o,xC:()=>a});var r=i(1398),s=i(9686);function o(e){let t=e.map(e=>l(e)?e.resourceUri:void 0).filter(e=>!!e);if(!t.length)return;let[i]=t;if(1===t.length)return r.Uri.joinPath(i,"..");let o=(0,s.xI)(t.map(e=>e.path),"/");return r.Uri.from({scheme:i.scheme,authority:i.authority,path:o})}function n(e){return null!=e&&null!=e.id&&null!=e.rootUri&&null!=e.inputBox&&null!=e.statusBarCommands}function a(e){return null!=e&&null!=e.id&&null!=e.label&&null!=e.resourceStates&&Array.isArray(e.resourceStates)}function l(e){return null!=e&&null!=e.resourceUri}},9091:(e,t,i)=>{function r(e,t){if(null==e)return 0;let i=0;for(let r of e)(null==t||t(r))&&i++;return i}function*s(e,t){if(void 0===t)for(let t of e)null!=t&&(yield t);else for(let i of e)t(i)&&(yield i)}function*o(e,t){for(let i of e){let e=t(i);null!=e&&(yield e)}}function n(e,t){for(let i of e)if(t(i))return i}function a(e){return e[Symbol.iterator]().next().value}function*l(e,t){for(let i of e)yield*t(i)}function u(e){return l(e,e=>e)}function c(e,t){let i=Object.create(null);for(let r of e){let e=t(r),s=i[e];null==s?i[e]=[r]:s.push(r)}return i}function h(e,t,i){let r=new Map,s=i?.filterNullGroups??!1;for(let i of e){let e=t(i);if(null==e&&s)continue;let o=r.get(e);null==o?r.set(e,[i]):o.push(i)}return r}function d(e,t,i){let r=new Map;for(let s of e){let e=i(s);if(null==e)continue;let o=t(s),n=r.get(o);null==n?r.set(o,[e]):n.push(e)}return r}function p(e,t){let i=e[Symbol.iterator](),r=i.next();if(r.done)return"";let s=String(r.value);for(;!(r=i.next()).done;)s+=`${t}${r.value}`;return s}function g(e){let t;for(t of e);return t}function*m(e,t){for(let i of e)yield t(i)}function f(e,t){let i=Number.POSITIVE_INFINITY;if(null==t)for(let t of e)t<i&&(i=t);else for(let r of e){let e=t(r);e<i&&(i=e)}return i}function w(e,t,i){return function*(e,t){let i=0;for(let r of e)i>=t&&(yield r),i++}(function*(e,t){if(t>0){let i=0;for(let r of e)if(yield r,++i>=t)break}}(e,i),t)}function v(e,t){for(let i of e)if(null==t||t(i))return!0;return!1}function y(e,t){if(null==e)return 0;let i=0;if(null==t)for(let t of e)i+=t;else for(let r of e)i+=t(r);return i}function*b(...e){for(let t of e)if(null!=t)for(let e of t)yield e}function C(e,t,i){let r=new Map;for(let s of e){let e=t(s),o=r.get(e);if(void 0===o)r.set(e,s);else{let t=i(o,s);void 0!==t&&r.set(e,t)}}return r.values()}i.d(t,{$1:()=>a,$z:()=>c,Bq:()=>u,Fi:()=>h,HV:()=>g,I6:()=>n,KC:()=>b,Tj:()=>m,U9:()=>r,cz:()=>y,di:()=>w,fA:()=>d,fj:()=>p,jk:()=>f,pD:()=>C,pb:()=>s,qI:()=>l,x1:()=>o,zN:()=>v})},9156:(e,t,i)=>{i.d(t,{MX:()=>f,PV:()=>g,ec:()=>m});var r=i(1398),s=i(7563),o=i(887),n=i(1182),a=i(8103),l=i(2624),u=i(6770),c=i(5962),h=i(2870),d=i(4256),p=i(7864);async function g(e,t,i,a,l){let p,g,m,f=i.sha,v=null;async function y(){var r,s;let o;if(null==t.file)return;let n=a+1,p=t.lines.find(e=>e.line===n)??t.lines[0];if(t.isUncommitted)(0,c.KH)(f)&&(o=f);else if(null==(o=v=p.previousSha))return`\`\`\`diff
+ ${(0,d.sF)(l.lineAt(a).text)}
\`\`\``;let g=t.file.originalPath;null==g&&i.fsPath!==t.file.uri.fsPath&&(g=t.file.path),a=p.line-1;let m=await e.git.getDiffForLine(i,a,o,f);return null==m&&null==o&&f!==u.id&&(m=await e.git.getDiffForLine(i,a,void 0,u.id)),null!=m?(r=m,null==s&&"hunk"===h.H.get("hovers.changesDiff")?w(r.hunk):`\`\`\`diff${null==r.line.previous?"":`
- ${(0,d.sF)(r.line.previous.trim())}`}${null==r.line.current?"":`
+ ${(0,d.sF)(r.line.current.trim())}`}
\`\`\``):void 0}let b=await y();if(null==b)return;if(t.isUncommitted){let e=await t.getPreviousComparisonUrisForLine(a,f);if(e?.previous==null)return;p=`[$(compare-changes)](${s.T.createMarkdownCommandLink({lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},repoPath:t.repoPath,line:a})} "Open Changes")`,g=null==e.previous.sha||e.previous.isUncommitted?`  &nbsp;_${(0,c.pV)(e.previous.sha,{strings:{working:"Working Tree"}})}_ &nbsp;${n.EO.ArrowLeftRightLong}&nbsp; `:`  &nbsp;[$(git-commit) ${(0,c.pV)(e.previous.sha||"")}](${o.p.createMarkdownCommandLink(e.previous.sha||"")} "Show Commit") &nbsp;${n.EO.ArrowLeftRightLong}&nbsp; `,m=null==e.current.sha||e.current.isUncommitted?`_${(0,c.pV)(e.current.sha,{strings:{working:"Working Tree"}})}_`:`[$(git-commit) ${(0,c.pV)(e.current.sha||"")}](${o.p.createMarkdownCommandLink(e.current.sha||"")} "Show Commit")`}else p=`[$(compare-changes)](${s.T.createMarkdownCommandLink(t,a)} "Open Changes")`,null===v&&(v=await t.getPreviousSha()),v&&(g=`  &nbsp;[$(git-commit) ${(0,c.pV)(v)}](${o.p.createMarkdownCommandLink(v)} "Show Commit") &nbsp;${n.EO.ArrowLeftRightLong}&nbsp;`),m=`[$(git-commit) ${t.shortSha}](${o.p.createMarkdownCommandLink(t.sha)} "Show Commit")`;p=`${b}
---

Changes${g??" added in "}${m} &nbsp;&nbsp;|&nbsp;&nbsp; ${p}`;let C=new r.MarkdownString(p,!0);return C.supportHtml=!0,C.isTrusted=!0,C}async function m(e,t,i,a){let u,c,h,d=w(a);if(null==e)c="_Working Tree_",h="_Unsaved_";else{let r=await e.findFile(t);if(null==r)return;u=`[$(compare-changes)](${s.T.createMarkdownCommandLink({lhs:{sha:e.sha,uri:l.nk.fromFile(r,t.repoPath,void 0,!0).toFileUri()},rhs:{sha:"",uri:t.toFileUri()},repoPath:t.repoPath,line:i})} "Open Changes")`,c=`[$(git-commit) ${e.shortSha}](${o.p.createMarkdownCommandLink(e.sha)} "Show Commit")`,h="_Working Tree_"}u=`${d}
---

Local Changes  &nbsp;${c} &nbsp;${n.EO.ArrowLeftRightLong}&nbsp; ${h}${null==u?"":` &nbsp;&nbsp;|&nbsp;&nbsp; ${u}`}`;let p=new r.MarkdownString(u,!0);return p.supportHtml=!0,p.isTrusted=!0,p}async function f(e,t,i,s,o){let n,l,u=await (0,p.wW)(o?.remotes??e.git.remotes(t.repoPath).getBestRemotesWithProviders(),o?.cancellation,o?.timeout);if(u.paused){if("cancelled"===u.reason)return}else n=u.value,[l]=n;let c=h.H.get("hovers"),d=l?.provider!=null&&o?.autolinks!==!1&&(o?.autolinks||c.autolinks.enabled)&&c.autolinks.enhanced&&a.c.has(c.detailsMarkdownFormat,"message"),g=l?.hasIntegration()&&!1!==l.maybeIntegrationConnected&&(o?.pullRequests||o?.pullRequests!==!1&&c.pullRequests.enabled)&&a.c.has(o.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"),[m,f,w,v]=await Promise.allSettled([d?(0,p.zu)(o?.enrichedAutolinks??t.getEnrichedAutolinks(l),o?.cancellation,o?.timeout):void 0,g?(0,p.wW)(o?.pullRequest??t.getAssociatedPullRequest(l),o?.cancellation,o?.timeout):void 0,e.vsls.active?(0,p.wW)(e.vsls.getContactPresence(t.author.email),o?.cancellation,Math.min(o?.timeout??250,250)):void 0,t.isUncommitted?t.getPreviousComparisonUrisForLine(s,i.sha):void 0,null==t.message?t.ensureFullDetails():void 0]);if(o?.cancellation?.isCancellationRequested)return;let y=(0,p.Ro)(m),b=(0,p.Ro)(f),C=(0,p.Ro)(w),R=(0,p.Ro)(v),k=await a.c.fromTemplateAsync(o.format,t,{enrichedAutolinks:y?.value==null||y.paused?void 0:y.value,dateFormat:null===o.dateFormat?"MMMM Do, YYYY h:mma":o.dateFormat,editor:{line:s,uri:i},getBranchAndTagTips:o?.getBranchAndTagTips,messageAutolinks:o?.autolinks||o?.autolinks!==!1&&c.autolinks.enabled,pullRequest:b?.value,presence:C?.value,previousLineComparisonUris:R,outputFormat:"markdown",remotes:n}),S=new r.MarkdownString(k,!0);return S.supportHtml=!0,S.isTrusted=!0,S}function w(e){return`\`\`\`diff
${(0,d.sF)(e.content.trim())}
\`\`\``}},9181:(e,t,i)=>{i.d(t,{O5:()=>a,Qw:()=>l,U6:()=>u,ft:()=>s,lb:()=>o,zF:()=>n});var r=i(1182);function s(e){return 1===e.length?e[0]:e.find(e=>e.default)}function o(e){if(0===e.length)return;let t=s(e);if(null!=t)return t.provider.name;let i=e[0].provider.name;if(e.every(e=>e.provider.name===i))return i}function n(e){if(0===e.length)return;let t=s(e);if(null!=t)return[t.provider];let i=e[0].provider.name;if(e.every(e=>e.provider.name===i))return e.map(e=>e.provider)}function a(e){var t;return null!=(t=e?.provider)?`gitlens-provider-${t.icon}`:"cloud"}function l(e){let t=function(e){let t,i,s;for(let{type:t}of e.urls)if("fetch"===t){if(i=!0,s)break}else if("push"===t&&(s=!0,i))break;return i&&s?r.EO.ArrowsRightLeft:s?r.EO.ArrowRight:i?r.EO.ArrowLeft:r.EO.Dash}(e),{provider:i}=e;return null!=i?`${t}${r.EO.Space} ${i.name} ${r.EO.Space}${r.EO.Dot}${r.EO.Space} ${i.displayPath}`:`${t}${r.EO.Space} ${e.domain?`${e.domain} ${r.EO.Space}${r.EO.Dot}${r.EO.Space} `:""}${e.path}`}function u(e){return Array.isArray(e)?e.map(e=>e.remoteKey).sort().join(","):e.remoteKey}},9207:(e,t,i)=>{i.d(t,{Fj:()=>CommandQuickPickItem,Xt:()=>o,g5:()=>ActionQuickPickItem,uK:()=>s});var r=i(1398);function s(e){return{kind:r.QuickPickItemKind.Separator,label:e??""}}function o(e,t){return"string"==typeof e?{label:e,item:t}:{...e,item:t}}let CommandQuickPickItem=class CommandQuickPickItem{constructor(e,t,i,r,s){this.command=i,this.args=r,this.options=s,this.command=i,this.args=r,"string"==typeof e?this.label=e:Object.assign(this,e),null!=t&&(this.iconPath=t)}static fromCommand(e,t,i){return new CommandQuickPickItem("string"==typeof e?{label:e}:e,void 0,t,null==i?[]:Array.isArray(i)?i:[i])}static is(e){return e instanceof CommandQuickPickItem}label;description;detail;iconPath;execute(e){return void 0===this.command?Promise.resolve(void 0):r.commands.executeCommand(this.command,...this.args??[])}async onDidPressKey(e){if(this.options?.suppressKeyPress)return;let t=this.execute({preserveFocus:!0,preview:!1});this.options?.onDidPressKey?.(e,t),await t}};let ActionQuickPickItem=class ActionQuickPickItem extends CommandQuickPickItem{constructor(e,t){super(e,void 0,void 0),this.action=t}async execute(e){return this.action(e)}}},9210:(e,t,i)=>{i.d(t,{GZ:()=>r,dI:()=>o,xT:()=>s});let r=new Set(["","=:","message:","@:","author:","#:","commit:","?:","file:","~:","change:","is:","type:"]),s=new Map([["","message:"],["=:","message:"],["message:","message:"],["@:","author:"],["author:","author:"],["#:","commit:"],["commit:","commit:"],["?:","file:"],["file:","file:"],["~:","change:"],["change:","change:"],["is:","type:"],["type:","type:"]]),o=/(?:(?<op>=:|message:|@:|author:|#:|commit:|\?:|file:|~:|change:|is:|type:)\s?(?<value>".+?"|\S+}?))|(?<text>\S+)(?!(?:=|message|@|author|#|commit|\?|file|~|change|is|type):)/g},9259:function(e,t,i){var r,s,o,n,a,l,u,c,h,d,p,g,m,f,w,v,y,b,C,R,k,S,P,A,I,D,_,$,T,E,x,O,F,B,L,U,q,N,M;"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==i.g&&i.g,o="3.7.5",n="function"==typeof atob,a="function"==typeof btoa,l="function"==typeof Buffer,u="function"==typeof TextDecoder?new TextDecoder:void 0,c="function"==typeof TextEncoder?new TextEncoder:void 0,d=(s={},(h=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")).forEach(function(e,t){return s[e]=t}),s),p=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,g=String.fromCharCode.bind(String),m="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(e){return new Uint8Array(Array.prototype.slice.call(e,0))},f=function(e){return e.replace(/=/g,"").replace(/[+\/]/g,function(e){return"+"==e?"-":"_"})},w=function(e){return e.replace(/[^A-Za-z0-9\+\/]/g,"")},v=function(e){for(var t,i,r,s,o="",n=e.length%3,a=0;a<e.length;){if((i=e.charCodeAt(a++))>255||(r=e.charCodeAt(a++))>255||(s=e.charCodeAt(a++))>255)throw TypeError("invalid character found");o+=h[(t=i<<16|r<<8|s)>>18&63]+h[t>>12&63]+h[t>>6&63]+h[63&t]}return n?o.slice(0,n-3)+"===".substring(n):o},y=a?function(e){return btoa(e)}:l?function(e){return Buffer.from(e,"binary").toString("base64")}:v,b=l?function(e){return Buffer.from(e).toString("base64")}:function(e){for(var t=[],i=0,r=e.length;i<r;i+=4096)t.push(g.apply(null,e.subarray(i,i+4096)));return y(t.join(""))},C=function(e,t){return void 0===t&&(t=!1),t?f(b(e)):b(e)},R=function(e){if(e.length<2){var t=e.charCodeAt(0);return t<128?e:t<2048?g(192|t>>>6)+g(128|63&t):g(224|t>>>12&15)+g(128|t>>>6&63)+g(128|63&t)}var t=65536+(e.charCodeAt(0)-55296)*1024+(e.charCodeAt(1)-56320);return g(240|t>>>18&7)+g(128|t>>>12&63)+g(128|t>>>6&63)+g(128|63&t)},k=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,S=function(e){return e.replace(k,R)},P=l?function(e){return Buffer.from(e,"utf8").toString("base64")}:c?function(e){return b(c.encode(e))}:function(e){return y(S(e))},A=function(e,t){return void 0===t&&(t=!1),t?f(P(e)):P(e)},I=function(e){return A(e,!0)},D=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,_=function(e){switch(e.length){case 4:var t=((7&e.charCodeAt(0))<<18|(63&e.charCodeAt(1))<<12|(63&e.charCodeAt(2))<<6|63&e.charCodeAt(3))-65536;return g((t>>>10)+55296)+g((1023&t)+56320);case 3:return g((15&e.charCodeAt(0))<<12|(63&e.charCodeAt(1))<<6|63&e.charCodeAt(2));default:return g((31&e.charCodeAt(0))<<6|63&e.charCodeAt(1))}},$=function(e){return e.replace(D,_)},T=function(e){if(e=e.replace(/\s+/g,""),!p.test(e))throw TypeError("malformed base64.");e+="==".slice(2-(3&e.length));for(var t,i,r,s="",o=0;o<e.length;)t=d[e.charAt(o++)]<<18|d[e.charAt(o++)]<<12|(i=d[e.charAt(o++)])<<6|(r=d[e.charAt(o++)]),s+=64===i?g(t>>16&255):64===r?g(t>>16&255,t>>8&255):g(t>>16&255,t>>8&255,255&t);return s},E=n?function(e){return atob(w(e))}:l?function(e){return Buffer.from(e,"base64").toString("binary")}:T,x=l?function(e){return m(Buffer.from(e,"base64"))}:function(e){return m(E(e).split("").map(function(e){return e.charCodeAt(0)}))},O=function(e){return x(B(e))},F=l?function(e){return Buffer.from(e,"base64").toString("utf8")}:u?function(e){return u.decode(x(e))}:function(e){return $(E(e))},B=function(e){return w(e.replace(/[-_]/g,function(e){return"-"==e?"+":"/"}))},L=function(e){return F(B(e))},U=function(e){return{value:e,enumerable:!1,writable:!0,configurable:!0}},q=function(){var e=function(e,t){return Object.defineProperty(String.prototype,e,U(t))};e("fromBase64",function(){return L(this)}),e("toBase64",function(e){return A(this,e)}),e("toBase64URI",function(){return A(this,!0)}),e("toBase64URL",function(){return A(this,!0)}),e("toUint8Array",function(){return O(this)})},N=function(){var e=function(e,t){return Object.defineProperty(Uint8Array.prototype,e,U(t))};e("toBase64",function(e){return C(this,e)}),e("toBase64URI",function(){return C(this,!0)}),e("toBase64URL",function(){return C(this,!0)})},(M={version:o,VERSION:o,atob:E,atobPolyfill:T,btoa:y,btoaPolyfill:v,fromBase64:L,toBase64:A,encode:A,encodeURI:I,encodeURL:I,utob:S,btou:$,decode:L,isValid:function(e){if("string"!=typeof e)return!1;var t=e.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(t)||!/[^\s0-9a-zA-Z\-_]/.test(t)},fromUint8Array:C,toUint8Array:O,extendString:q,extendUint8Array:N,extendBuiltins:function(){q(),N()}}).Base64={},Object.keys(M).forEach(function(e){return M.Base64[e]=M[e]}),e.exports=M},9271:(e,t,i)=>{i.d(t,{Ao:()=>a,PU:()=>l,vJ:()=>o,vV:()=>n});var r=i(9091),s=i(1957);function o(e){let t;return e?.size&&((t=new Set((0,r.x1)(e,([e,t])=>t.opened?e:void 0))).size||(t=void 0)),t}async function n(e,t,i,r,o){function n(e){return e.upstream?.name!=null&&(i.includes(e.upstream.name)||e.upstream.name.startsWith("remotes/")&&i.includes(e.upstream.name.substring(8)))}if(null==i||Array.isArray(i)||(i=[i]),r??=await e.git.worktrees()?.getWorktrees(),r?.length)for(let a of r){if(a.branch?.name===t)return a;if(null==i||null==a.branch)continue;let r=(o??=new s.t(t=>e.git.branches().getBranches(null!=t?{paging:t}:void 0))).values();if(Symbol.asyncIterator in r){for await(let e of r)if(e.name===a.branch.name){if(n(e))return a;break}}else for(let e of r)if(e.name===a.branch.name){if(n(e))return a;break}}}async function a(e,t){let i=new Map;if(null==e)return i;async function r(e){let r=e.git.worktrees();null!=r&&l(await r.getWorktrees(),{includeDefault:t?.includeDefault,worktreesByBranch:i})}return Array.isArray(e)?await Promise.allSettled(e.map(async e=>r(e))):await r(e),i}function l(e,t){let i=t?.worktreesByBranch??new Map;if(null==e)return i;for(let r of e)null!=r.branch&&(t?.includeDefault||!r.isDefault)&&i.set(r.branch.id,r);return i}},9336:(e,t,i)=>{i.d(t,{F:()=>g,X:()=>p});var r=i(1398),s=i(2099),o=i(2870),n=i(4692),a=i(2812),l=i(9091),u=i(7864),c=i(9207),h=i(4357),d=i(3227);async function p(e,t,i,p){let g,m=r.window.createQuickPick();if(m.ignoreFocusOut=(0,n.dW)(),m.title=t,m.placeholder=i,m.matchOnDescription=!0,m.matchOnDetail=!0,(0,u.yL)(e)&&(m.busy=!0,m.show(),e=await e),null==e)if(m.placeholder="No commits found",p?.empty?.getState!=null){let e=await p.empty.getState();m.items=e.items,null!=e.placeholder&&(m.placeholder=e.placeholder),null!=e.title&&(m.title=e.title)}else m.items=[(0,h.Du)(h.WL.Cancel,void 0,{label:"OK"})];else m.items=await f(e);async function f(e){let t=[];return p?.showOtherReferences!=null&&t.push(...p.showOtherReferences),t.push(...(0,a.x1)(await Promise.allSettled((0,l.Tj)(e.commits.values(),async e=>(0,d.Rc)(e,p?.picked===e.ref,{compact:!0,icon:"avatar"}))),e=>"fulfilled"===e.status?e.value:void 0)),e.hasMore&&t.push((0,h.Du)(h.WL.LoadMore)),t}async function w(){m.ignoreFocusOut=!0,m.busy=!0;try{let t;if(e=await (await e)?.more?.(o.H.get("advanced.maxListItems")),null==e)if(p?.empty?.getState!=null){let e=await p.empty.getState();t=e.items,null!=e.placeholder&&(m.placeholder=e.placeholder),null!=e.title&&(m.title=e.title)}else t=[(0,h.Du)(h.WL.Cancel,void 0,{label:"OK"})];else t=await f(e);let i=-1;if(0!==m.activeItems.length){let e=m.activeItems[0];i=m.items.indexOf(e),(0,h.hr)(e)&&i--}m.items=t,i&&(m.activeItems=[m.items[i]])}finally{m.busy=!1}}p?.picked&&(m.activeItems=m.items.filter(e=>!c.Fj.is(e)&&e.picked));let v=[];if(p?.keyboard!=null){let{keyboard:e}=p;(g=s.m.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==m.activeItems.length){let[i]=m.activeItems;if(null!=i&&!(0,h.hr)(i)&&!c.Fj.is(i)){let r=m.ignoreFocusOut;m.ignoreFocusOut=!0,await e.onDidPressKey(t,i),m.ignoreFocusOut=r}}}}])))).start(),v.push(g)}try{let e=await new Promise(e=>{v.push(m.onDidHide(()=>e(void 0)),m.onDidAccept(()=>{if(0!==m.activeItems.length){let[t]=m.activeItems;if((0,h.hr)(t))if(t.directive===h.WL.LoadMore)return void w();else return void e(void 0);e(t)}}),m.onDidChangeValue(e=>{null!=g&&(0!==e.length?g.pause(["left","ctrl+left","right","ctrl+right"]):g.resume())})),m.busy=!1,m.show()});if(null==e||(0,h.hr)(e))return;if(e instanceof c.Fj)return void await e.execute();return e.item}finally{m.dispose(),v.forEach(e=>void e.dispose())}}async function g(e,t,i,o){let a,p=r.window.createQuickPick();p.ignoreFocusOut=(0,n.dW)(),p.title=t,p.placeholder=i,p.matchOnDescription=!0,p.matchOnDetail=!0,(0,u.yL)(e)&&(p.busy=!0,p.show(),e=await e),null!=e&&(p.items=[...o?.showOtherReferences??[],...(0,l.Tj)(o?.filter!=null?(0,l.pb)(e.stashes.values(),o.filter):e.stashes.values(),e=>(0,d.rA)(e,o?.picked===e.ref,{compact:!0,icon:!0}))]),(null==e||p.items.length<=(o?.showOtherReferences?.length??0))&&(p.placeholder=null==e?"No stashes found":o?.empty??"No matching stashes found",p.items=[(0,h.Du)(h.WL.Cancel)]),o?.picked&&(p.activeItems=p.items.filter(e=>!c.Fj.is(e)&&e.picked));let g=[];if(o?.keyboard!=null){let{keyboard:e}=o;(a=s.m.instance.keyboard.createScope(Object.fromEntries(e.keys.map(t=>[t,{onDidPressKey:async t=>{if(0!==p.activeItems.length){let[i]=p.activeItems;if(null!=i&&!(0,h.hr)(i)&&!c.Fj.is(i)){let r=p.ignoreFocusOut;p.ignoreFocusOut=!0,await e.onDidPressKey(t,i),p.ignoreFocusOut=r}}}}])))).start(),g.push(a)}try{let e=await new Promise(e=>{g.push(p.onDidHide(()=>e(void 0)),p.onDidAccept(()=>{if(0!==p.activeItems.length){let[t]=p.activeItems;if((0,h.hr)(t))return void e(void 0);e(t)}}),p.onDidChangeValue(e=>{null!=a&&(0!==e.length?a.pause(["left","ctrl+left","right","ctrl+right"]):a.resume())})),p.busy=!1,p.show()});if(null==e||(0,h.hr)(e))return;if(e instanceof c.Fj)return void await e.execute();return e.item}finally{p.dispose(),g.forEach(e=>void e.dispose())}}},9385:(e,t,i)=>{i.d(t,{u:()=>o});var r=i(1182),s=i(4808);function o(e,t){if(null==e)return t?.empty??"";let{state:{ahead:i,behind:o}}=e;if(!o&&!i)return t?.empty??"";let n=!0,a=!1,l=!1,u="",c=" ",h="";if(null!=t&&({count:n=!0,expand:a=!1,icons:l=!1,prefix:u="",separator:c=" ",suffix:h=""}=t),a){let t="";return e.missing?t="missing":(o&&(t+=`${(0,s.td)("commit",o,{infix:l?"$(arrow-down) ":void 0})} behind`),i&&(t+=`${0===t.length?"":c}${(0,s.td)("commit",i,{infix:l?"$(arrow-up) ":void 0})} ahead`,h.includes(e.name.split("/")[0])&&(t+=" of"))),`${u}${t}${h}`}let d=n&&!e.missing;return`${u}${d?o:""}${d||0!==o?r.EO.ArrowDown:""}${c}${d?i:""}${d||0!==i?r.EO.ArrowUp:""}${h}`}},9388:(e,t,i)=>{i.d(t,{G:()=>o});var r=i(7864),s=i(4473);function o(e){return(t,i,o)=>{let n;if("function"==typeof o.value?n=o.value:"function"==typeof o.get&&(n=o.get),null==n)throw Error("Not supported");let a=`$gate$${i}`;o.value=function(...t){let i=(0,s.q)(a,e,...t);Object.prototype.hasOwnProperty.call(this,i)||Object.defineProperty(this,i,{configurable:!1,enumerable:!1,writable:!0,value:void 0});let o=this[i];if(void 0===o){if(null==(o=n.apply(this,t))||!(0,r.yL)(o))return o;this[i]=o,o.finally(()=>this[i]=void 0)}return o}}}},9442:(e,t,i)=>{let r;i.d(t,{DX:()=>EditorCommand,EL:()=>a,Kt:()=>GlCommandBase,Zr:()=>ActiveEditorCommand,dY:()=>ActiveEditorCachedCommand});var s=i(1398),o=i(2141),n=i(7945);let GlCommandBase=class GlCommandBase{contextParsingOptions={expectsEditor:!1};_disposable;constructor(e,t){let i=[..."string"==typeof e?[e]:e,...t??[]].map(e=>(0,o.Lb)(e,(...t)=>this._execute(e,...t),this));this._disposable=s.Disposable.from(...i)}dispose(){this._disposable.dispose()}preExecute(e,...t){return this.execute(...t)}_execute(e,...t){let[i,r]=(0,n.qU)(e,{...this.contextParsingOptions},...t);return this.preExecute(i,...r)}};let ActiveEditorCommand=class ActiveEditorCommand extends GlCommandBase{contextParsingOptions={expectsEditor:!0};preExecute(e,...t){return this.execute(e.editor,e.uri,...t)}_execute(e,...t){return super._execute(e,void 0,...t)}};function a(){return r}let ActiveEditorCachedCommand=class ActiveEditorCachedCommand extends ActiveEditorCommand{_execute(e,...t){return r={command:e,args:t},super._execute(e,...t)}};let EditorCommand=class EditorCommand{_disposable;constructor(e){Array.isArray(e)||(e=[e]);let t=[];for(let i of e)t.push(s.commands.registerTextEditorCommand(i,(e,t,...r)=>this.executeCore(i,e,t,...r),this));this._disposable=s.Disposable.from(...t)}dispose(){this._disposable.dispose()}executeCore(e,t,i,...r){return this.execute(t,i,...r)}}},9615:(e,t,i)=>{i.d(t,{SD:()=>l,o:()=>u,wt:()=>a});var r=i(1398),s=i(2141);let o=new Map,n=new r.EventEmitter,a=n.event;function l(e,t){return o.get(e)??t}async function u(e,t){o.get(e)!==t&&(null==t?o.delete(e):o.set(e,t),await (0,s.S4)("setContext",e,t??void 0),n.fire(e))}},9638:(e,t,i)=>{function r(e,t){if(e===t)return!0;if(null==e||null==t)return!1;let i=typeof e;return(i!==typeof t||"string"!==i&&"number"!==i&&"boolean"!==i)&&JSON.stringify(e)===JSON.stringify(t)}function s(e,t,i){let r=i?.joinArrays??!1,s=i?.skipPaths?.length?t?i.skipPaths.map(e=>`${t}.${e}`):i.skipPaths:void 0,o=Object.create(null);return!function e(t,i,o){if(!s?.includes(i))if(Object(o)!==o){if(null==o)return;t[i]="string"==typeof o||"number"==typeof o||"boolean"==typeof o?o:JSON.stringify(o)}else if(Array.isArray(o)){let s=o.length;if(0===s)return;if(r)t[i]=o.join(",");else for(let r=0;r<s;r++)e(t,`${i}[${r}]`,o[r])}else{let r=Object.entries(o);if(0===r.length)return;for(let[s,o]of r)e(t,i?`${i}.${s}`:s,o)}}(o,t??"",e),o}function o(e,t,i){if(null==e&&(e=Object.create(null)),null!=i&&("boolean"!=typeof i||i))"object"==typeof i?e[t]={...i}:e[t]=i;else{let{[t]:i,...r}=e;e=r}return e}i.d(t,{Bq:()=>s,Y8:()=>o,t7:()=>r})},9667:(e,t,i)=>{i.d(t,{CommitDetailsWebviewProvider:()=>CommitDetailsWebviewProvider});var r=i(928),s=i(1398),o=i(1350),n=i(3037),a=i(1849),l=i(3583),u=i(4123),c=i(3782),h=i(8103),d=i(8518),p=i(8219),g=i(6770),m=i(4119);function f(e){return{type:e.type,provider:{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon},id:e.id,nodeId:e.nodeId,title:e.title,url:e.url,createdDate:e.createdDate,updatedDate:e.updatedDate,closedDate:e.closedDate,closed:e.closed,state:e.state}}var w=i(7125),v=i(7660),y=i(5962),b=i(1902),C=i(6207),R=i(711),k=i(4269),S=i(1678),P=i(2141),A=i(2870),I=i(9615),D=i(6206),_=i(5539),$=i(9091),T=i(4941),E=i(1003);let MRU=class MRU{constructor(e=10,t){this.maxSize=e,this.comparator=t}stack=[];get count(){return this.stack.length}_position=0;get position(){return this._position}add(e){this._position>0&&(this.stack.splice(0,this._position),this._position=0);let t=null!=this.comparator?this.stack.findIndex(t=>this.comparator(e,t)):this.stack.indexOf(e);-1!==t?this.stack.splice(t,1):this.stack.length===this.maxSize&&this.stack.pop(),this.stack.unshift(e),this._position=0}get(e){if(null!=e){if(e<0||e>=this.stack.length)return;return this.stack[e]}return this.stack.length>0?this.stack[0]:void 0}insert(e){this._position>0&&(this.stack.splice(0,this._position),this._position=0),this.stack.unshift(e),this._position++}navigate(e){if(!(this.stack.length<=1)){if("back"===e){if(this._position>=this.stack.length-1)return;this._position+=1}else{if(this._position<=0)return;this._position-=1}return this.stack[this._position]}}};var x=i(7864),O=i(3415),F=i(2692),B=i(1673),L=i(486);let U="commitDetails",q=`\0
\0`,N=new L.Q2(U,"commit/suggestChanges"),M=new L.Q2(U,"commit/actions/execute"),W=new L.Q2(U,"file/actions/execute"),G=new L.Q2(U,"file/open"),H=new L.Q2(U,"file/openOnRemote"),V=new L.Q2(U,"file/compareWorking"),j=new L.Q2(U,"file/comparePrevious"),z=new L.Q2(U,"file/stage"),Q=new L.Q2(U,"file/unstage"),Y=new L.Q2(U,"pickCommit"),K=new L.Q2(U,"searchCommit"),Z=new L.Q2(U,"switchMode");new L.Q2(U,"autolinkSettings");let J=new L.Q2(U,"pin"),X=new L.Q2(U,"navigate"),ee=new L.Q2(U,"preferences/update"),et=new L.Q2(U,"wip/createPatch"),ei=new L.Q2(U,"wip/changeReviewMode"),er=new L.Q2(U,"wip/showCodeSuggestion"),es=new L.Q2(U,"fetch"),eo=new L.Q2(U,"publish"),en=new L.Q2(U,"push"),ea=new L.Q2(U,"pull"),el=new L.Q2(U,"switch"),eu=new L.Q2(U,"openPullRequestChanges"),ec=new L.Q2(U,"openPullRequestComparison"),eh=new L.Q2(U,"openPullRequestOnRemote"),ed=new L.Q2(U,"openPullRequestDetails"),ep=new L.Oz(U,"explain"),eg=new L.Oz(U,"generate"),em=new L.C1(U,"didChange",!0),ef=new L.C1(U,"didChange/wip");new L.C1(U,"org/settings/didChange");let ew=new L.C1(U,"didChange/jira"),ev=new L.C1(U,"didChange/account"),ey=new L.C1(U,"didChange/patch");var eb=Object.defineProperty,eC=Object.getOwnPropertyDescriptor,eR=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eC(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eb(t,i,o),o};let CommitDetailsWebviewProvider=class CommitDetailsWebviewProvider{constructor(e,t,i){this.container=e,this.host=t,this.options=i,this._context={mode:"commit",inReview:!1,navigationStack:{count:0,position:0},pinned:!1,preferences:this.getPreferences(),commit:void 0,autolinksEnabled:A.H.get("views.commitDetails.autolinks.enabled"),richStateLoaded:!1,formattedMessage:void 0,autolinkedIssues:void 0,pullRequest:void 0,wip:void 0,orgSettings:this.getOrgSettings(),hasConnectedJira:void 0,hasAccount:void 0},this._disposable=s.Disposable.from(A.H.onDidChangeAny(this.onAnyConfigurationChanged,this),(0,I.wt)(this.onContextChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),e.integrations.onDidChangeConnectionState(this.onIntegrationConnectionStateChanged,this))}_bootstraping=!0;_context;_pendingContext;_disposable;_pinned=!1;_focused=!1;_commitStack=new MRU(10,(e,t)=>e.ref===t.ref);dispose(){this._disposable.dispose(),this._lineTrackerDisposable?.dispose(),this._repositorySubscription?.subscription.dispose(),this._selectionTrackerDisposable?.dispose(),this._wipSubscription?.subscription.dispose()}getTelemetryContext(){let e;if("wip"===this.mode){let t=this._context.wip?.repo;e={...this.host.getTelemetryContext(),"context.attachedTo":this.options.attachedTo,"context.mode":this.mode,"context.autolinks":+(this._context.wip?.pullRequest!=null),"context.inReview":this._context.inReview,"context.codeSuggestions":this._context.wip?.codeSuggestions?.length??0,"context.repository.id":t?.idHash,"context.repository.scheme":t?.uri.scheme,"context.repository.closed":t?.closed,"context.repository.folder.scheme":t?.folder?.uri.scheme,"context.repository.provider.id":t?.provider.id}}else e={...this.host.getTelemetryContext(),"context.attachedTo":this.options.attachedTo,"context.mode":this.mode,"context.autolinks":+(null!=this._context.pullRequest)+(this._context.autolinkedIssues?.length??0),"context.pinned":this._context.pinned,"context.type":null==this._context.commit?void 0:(0,d.kk)(this._context.commit)?"stash":"commit","context.uncommitted":this._context.commit?.isUncommitted??!1};return e}_skipNextRefreshOnVisibilityChange=!1;_shouldRefreshPullRequestDetails=!1;async onShowing(e,t,...i){let[r]=i;return r?.type==="wip"?[await this.onShowingWip(r),this.getTelemetryContext()]:[await this.onShowingCommit(r,t),this.getTelemetryContext()]}get inReview(){return this._pendingContext?.inReview??this._context.inReview}async onShowingWip(e,t){this.updatePendingContext({source:e.source});let i=null!=e.inReview&&this.inReview!==e.inReview;return"wip"!==this.mode||null!=e.repository&&this._context.wip?.repo!==e.repository?(i&&this.updatePendingContext({inReview:e.inReview}),await this.setMode("wip",e.repository),i&&!0===e.inReview&&this.trackOpenReviewMode(e.source)):i&&await this.setInReview(e.inReview,e.source),(!t?.preserveVisibility||!!this.host.visible)&&("launchpad"===e.source&&this.host.visible&&(this._shouldRefreshPullRequestDetails=!0,this.onRefresh()),!0)}async onShowingCommit(e,t){let i,r;if((0,B.c)(e)){let{commit:t}=e.state;t?.repoPath!=null&&t?.sha!=null&&(i=null!=t.stashNumber?{commit:(0,v.kA)(t.sha,t.repoPath,{refType:"stash",name:t.message,number:t.stashNumber})}:{commit:(0,v.kA)(t.sha,t.repoPath,{refType:"revision",message:t.message})})}else i=null!=e&&"object"==typeof e?e:void 0;return null!=i&&(i.preserveFocus&&(null==t?t={preserveFocus:!0}:t.preserveFocus=!0),{commit:r,...i}=i),null!=r&&"wip"===this.mode&&i?.interaction!=="passive"&&await this.setMode("commit"),null!=r||this._pinned||(r=this.getBestCommitOrStash()),null==r||this._context.commit?.ref.startsWith(r.ref)||await this.updateCommit(r,{pinned:!1}),(!i?.preserveVisibility||!!this.host.visible)&&(this._skipNextRefreshOnVisibilityChange=!0,!0)}async trackOpenReviewMode(e){if(this._context.wip?.pullRequest==null)return;let t=this._context.wip.pullRequest.provider.id,i=await this.container.git.visibility(this._context.wip.repo.path),r=this._context.wip.changes?.files.length??0;this.container.telemetry.sendEvent("openReviewMode",{provider:t,"repository.visibility":i,repoPrivacy:i,source:e??"inspect",filesChanged:r})}includeBootstrap(){return this._bootstraping=!0,this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,this.getState(this._context)}registerCommands(){return[(0,P.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0))]}onFocusChanged(e){this._focused!==e&&(this._focused=e,e&&this.isLineTrackerSuspended&&this.ensureTrackers())}onMessageReceived(e){switch(!0){case H.is(e):this.openFileOnRemote(e.params);break;case G.is(e):this.openFile(e.params);break;case V.is(e):this.openFileComparisonWithWorking(e.params);break;case j.is(e):this.openFileComparisonWithPrevious(e.params);break;case W.is(e):this.showFileActions(e.params);break;case M.is(e):switch(e.params.action){case"graph":{let e;if(null==(e="wip"===this._context.mode?this._context.wip?.changes!=null?(0,v.kA)(g.SU,this._context.wip.changes.repository.path,{refType:"revision"}):void 0:null!=this._context.commit?(0,m.rd)(this._context.commit):void 0))return;(0,P.RS)("graph"===this.options.attachedTo?"gitlens.showInCommitGraphView":"gitlens.showInCommitGraph",{ref:e});break}case"more":this.showCommitActions();break;case"scm":(0,P.S4)("workbench.view.scm");break;case"sha":null!=this._context.commit&&(e.params.alt?(0,P.RS)("gitlens.copyMessageToClipboard",{message:this._context.commit.message}):(0,d.kk)(this._context.commit)?s.env.clipboard.writeText(this._context.commit.stashName):(0,P.RS)("gitlens.copyShaToClipboard",{sha:this._context.commit.sha}))}break;case Y.is(e):this.showCommitPicker();break;case K.is(e):this.showCommitSearch();break;case Z.is(e):this.switchMode(e.params);break;case J.is(e):this.updatePinned(e.params.pin??!1,!0);break;case X.is(e):this.navigateStack(e.params.direction);break;case ee.is(e):this.updatePreferences(e.params);break;case ep.is(e):this.explainRequest(ep,e);break;case eg.is(e):this.generateRequest(eg,e);break;case z.is(e):this.stageFile(e.params);break;case Q.is(e):this.unstageFile(e.params);break;case et.is(e):this.createPatchFromWip(e.params);break;case es.is(e):this.fetch();break;case eo.is(e):this.publish();break;case en.is(e):this.push();break;case ea.is(e):this.pull();break;case el.is(e):this.switch();break;case N.is(e):this.suggestChanges(e.params);break;case er.is(e):this.showCodeSuggestion(e.params.id);break;case ei.is(e):this.setInReview(e.params.inReview,"inspect-overview");break;case eu.is(e):this.openPullRequestChanges();break;case ec.is(e):this.openPullRequestComparison();break;case eh.is(e):this.openPullRequestOnRemote();break;case ed.is(e):this.showPullRequestDetails()}}getEncodedEntityid(e=this._context.wip?.pullRequest){if(null==e)return;let t=(0,S.Dz)(e);if(null!=t)return r.EntityIdentifierUtils.encode(t)}async trackCreateCodeSuggestion(e,t){if(this._context.wip?.pullRequest==null)return;let i=this._context.wip.pullRequest.provider.id,r=await this.container.git.visibility(this._context.wip.repo.path);this.container.telemetry.sendEvent("codeSuggestionCreated",{provider:i,"repository.visibility":r,repoPrivacy:r,draftId:e.id,draftPrivacy:e.visibility,filesChanged:t,source:"reviewMode"},{source:"inspect-overview",detail:{reviewMode:!0}})}async suggestChanges(e){if(!await (0,R.G5)(this.container,"Code Suggestions are a Preview feature and require an account.",{source:"code-suggest",detail:"create"})||!await (0,C.l)(this.container))return;let t=[],i=Object.entries(e.changesets),o=1===i.length,n=0;for(let[e,r]of i){if(!o&&!1===r.checked)continue;let e=this._context.wip.repo.id===r.repository.path?this._context.wip.repo:void 0;if(null==e)continue;let{checked:i}=r,s={to:g.SU,from:"HEAD"};"staged"===i&&(s={...s,to:g.id});let a=this.getEncodedEntityid();null!=a&&(r.files&&r.files.length>0&&("staged"===i?n+=r.files.filter(e=>!0===e.staged).length:n+=r.files.length),t.push({repository:e,revision:s,prEntityId:a}))}if(0!==t.length)try{let i=(0,S.Dz)(this._context.wip.pullRequest),o=r.EntityIdentifierUtils.encode(i),a={description:e.description,visibility:"provider_access",prEntityId:o},l=await this.container.drafts.createDraft("suggested_pr_change",e.title,t,a);(async function(){let e={title:"View Code Suggestions"},t={title:"Copy Link"},i=!1;for(;;){let r=await s.window.showInformationMessage(`Code Suggestion successfully created${i?"— link copied to the clipboard":""}`,e,t);if(r===t){s.env.clipboard.writeText(l.deepLinkUrl),i=!0;continue}r===e&&(0,b.X)({mode:"view",draft:l,source:"notification"});break}})(),this.setInReview(!1),this.trackCreateCodeSuggestion(l,n)}catch(e){s.window.showErrorMessage(`Unable to create draft: ${e.message}`)}}getRepoActionPath(){return"wip"===this._context.mode?this._context.wip?.repo.path:this._context.commit?.repoPath}fetch(){let e=this.getRepoActionPath();null!=e&&c.hd(e)}publish(){let e=this.getRepoActionPath();null!=e&&(0,P.wS)("git.publish",s.Uri.file(e))}push(){let e=this.getRepoActionPath();null!=e&&c.VC(e)}pull(){let e=this.getRepoActionPath();null!=e&&c.a$(e)}switch(){let e=this.getRepoActionPath();null!=e&&c.S_(e)}get pullRequestContext(){if("wip"===this.mode){if(this._context.wip?.pullRequest==null)return;return{repoPath:this._context.wip.repo.path,branch:this._context.wip.branch,pr:this._context.wip.pullRequest}}if(null!=this._context.pullRequest)return{repoPath:this._context.commit.repoPath,commit:this._context.commit,pr:this._context.pullRequest}}openPullRequestChanges(){if(null==this.pullRequestContext)return;let{repoPath:e,pr:t}=this.pullRequestContext;if(null==t.refs)return;let i=(0,w.tI)(e,t.refs);return(0,u.$5)(this.container,{repoPath:i.repoPath,lhs:i.base.ref,rhs:i.head.ref},{title:`Changes in Pull Request #${t.id}`})}openPullRequestComparison(){if(null==this.pullRequestContext)return;let{repoPath:e,pr:t}=this.pullRequestContext;if(null==t.refs)return;let i=(0,w.tI)(e,t.refs);return this.container.views.searchAndCompare.compare(i.repoPath,i.head,i.base)}async openPullRequestOnRemote(e){if(null==this.pullRequestContext)return;let{pr:{url:t}}=this.pullRequestContext;return(0,P.RS)("gitlens.openPullRequestOnRemote",{pr:{url:t},clipboard:e})}async showPullRequestDetails(){if(null==this.pullRequestContext)return;let{pr:e,repoPath:t,branch:i,commit:r}=this.pullRequestContext;if(null!=e)return this.container.views.pullRequest.showPullRequest(e,r??i??t)}onRefresh(e){if(!this._pinned)if("wip"===this.mode){let e=this._context.wip?.changes?.repository.uri;this.updateWipState(this.container.git.getBestRepositoryOrFirst(null!=e?s.Uri.parse(e):void 0))}else{let e=this._pendingContext?.commit??this.getBestCommitOrStash();this.updateCommit(e,{immediate:!1})}}onReloaded(){this.notifyDidChangeState(!0)}onVisibilityChanged(e){if(this.ensureTrackers(),!e)return;let t=this._skipNextRefreshOnVisibilityChange;if(t&&(this._skipNextRefreshOnVisibilityChange=!1),this._bootstraping){if(this._bootstraping=!1,null==this._pendingContext)return;this.updateState()}else t||this.onRefresh(),this.updateState(!0)}onAnyConfigurationChanged(e){(A.H.changed(e,["defaultDateFormat","defaultDateStyle","views.commitDetails.files","views.commitDetails.avatars"])||A.H.changedCore(e,"workbench.tree.renderIndentGuides")||A.H.changedCore(e,"workbench.tree.indent"))&&(this.updatePendingContext({preferences:{...this._context.preferences,...this._pendingContext?.preferences,...this.getPreferences()}}),this.updateState()),null!=this._context.commit&&A.H.changed(e,["views.commitDetails.autolinks","views.commitDetails.pullRequests"])&&(this.updateCommit(this._context.commit,{force:!0}),this.updateState())}onSubscriptionChanged(e){this.updateCodeSuggestions(),this.updateHasAccount(e.current)}updateHasAccount(e){let t=null!=e.account;this._context.hasAccount!==t&&(this._context.hasAccount=t,this.host.notify(ev,{hasAccount:t}))}onIntegrationConnectionStateChanged(e){if("jira"===e.key){let t="connected"===e.reason;this._context.hasConnectedJira!==t&&(this._context.hasConnectedJira=t,this.host.notify(ew,{hasConnectedJira:this._context.hasConnectedJira}))}}async getHasJiraConnection(e=!1){if(null!=this._context.hasConnectedJira&&!e)return this._context.hasConnectedJira;let t=await this.container.integrations.get(a.tp.Jira);return null==t?this._context.hasConnectedJira=!1:this._context.hasConnectedJira=t.maybeConnected??await t.isConnected(),this._context.hasConnectedJira}async getHasAccount(e=!1){return(null==this._context.hasAccount||e)&&(this._context.hasAccount=(await this.container.subscription.getSubscription())?.account!=null),this._context.hasAccount}getPreferences(){return{autolinksExpanded:this.container.storage.getWorkspace("views:commitDetails:autolinksExpanded")??!0,pullRequestExpanded:this.container.storage.getWorkspace("views:commitDetails:pullRequestExpanded")??!0,avatars:A.H.get("views.commitDetails.avatars"),dateFormat:A.H.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",dateStyle:A.H.get("defaultDateStyle")??"relative",files:A.H.get("views.commitDetails.files"),indentGuides:A.H.getCore("workbench.tree.renderIndentGuides")??"onHover",indent:A.H.getCore("workbench.tree.indent")}}onContextChanged(e){["gitlens:gk:organization:ai:enabled","gitlens:gk:organization:drafts:enabled"].includes(e)&&(this.updatePendingContext({orgSettings:this.getOrgSettings()}),this.updateState())}getOrgSettings(){return{ai:(0,I.SD)("gitlens:gk:organization:ai:enabled",!1),drafts:(0,I.SD)("gitlens:gk:organization:drafts:enabled",!1)}}onCommitSelected(e){if(null!=e.data&&("graph"!==this.options.attachedTo||"gitlens.views.graph"===e.source)&&("default"!==this.options.attachedTo||"gitlens.views.graph"!==e.source)){if("graph"===this.options.attachedTo)return void(e.data.commit.ref===g.SU?"wip"!==this.mode?this.setMode("wip",this.container.git.getRepository(e.data.commit.repoPath)):e.data.commit.repoPath!==this._context.wip?.changes?.repository.path&&this.updateWipState(this.container.git.getRepository(e.data.commit.repoPath)):(this._pinned&&"passive"===e.data.interaction&&(this._commitStack.insert((0,m.rd)(e.data.commit)),this.updateNavigation()),"commit"!==this.mode&&this.setMode("commit",this.container.git.getRepository(e.data.commit.repoPath)),this._pinned&&"passive"===e.data.interaction||this.host.show(!1,{preserveFocus:e.data.preserveFocus},e.data)));if("wip"===this.mode){e.data.commit.repoPath!==this._context.wip?.changes?.repository.path&&this.updateWipState(this.container.git.getRepository(e.data.commit.repoPath));return}this._pinned&&"passive"===e.data.interaction?(this._commitStack.insert((0,m.rd)(e.data.commit)),this.updateNavigation()):this.host.show(!1,{preserveFocus:e.data.preserveFocus},e.data)}}_lineTrackerDisposable;_selectionTrackerDisposable;ensureTrackers(){if((this._selectionTrackerDisposable?.dispose(),this._selectionTrackerDisposable=void 0,this._lineTrackerDisposable?.dispose(),this._lineTrackerDisposable=void 0,this.host.visible)&&(this._selectionTrackerDisposable=this.container.events.on("commit:selected",this.onCommitSelected,this),!this._pinned&&"graph"!==this.options.attachedTo)){let{lineTracker:e}=this.container;this._lineTrackerDisposable=e.subscribe(this,e.onDidChangeActiveLines(this.onActiveEditorLinesChanged,this))}}get isLineTrackerSuspended(){return"graph"!==this.options.attachedTo&&null==this._lineTrackerDisposable}suspendLineTracker(){setTimeout(()=>{this._lineTrackerDisposable?.dispose(),this._lineTrackerDisposable=void 0},100)}createPatchFromWip(e){if(null==e.changes)return;let t={type:"wip",repository:{name:e.changes.repository.name,path:e.changes.repository.path,uri:e.changes.repository.uri},files:e.changes.files,revision:{to:g.SU,from:"HEAD"},checked:e.checked};(0,b.X)({mode:"create",create:{changes:[t]}})}showCodeSuggestion(e){let t=this._context.wip?.codeSuggestions?.find(t=>t.id===e);null!=t&&(0,b.X)({mode:"view",draft:t,source:"inspect"})}onActiveEditorLinesChanged(e){if(e.pending||null==e.editor||e.suspended)return;if("wip"===this.mode){let t=this.container.git.getBestRepositoryOrFirst(e.editor);this.updateWipState(t,!0);return}let t=e.selections?.[0]?.active,i=null!=t?this.container.lineTracker.getState(t)?.commit:void 0;this.updateCommit(i)}_wipSubscription;get mode(){return this._pendingContext?.mode??this._context.mode}async setMode(e,t){this.updatePendingContext({mode:e}),"commit"===e?this.updateState(!0):await this.updateWipState(t??this.container.git.getBestRepositoryOrFirst()),this.updateTitle()}updateTitle(){if("commit"===this.mode)if(null==this._context.commit)this.host.title=this.host.originalTitle;else{let e="Commit Details";"stash"===this._context.commit.refType?e="Stash Details":this._context.commit.isUncommitted&&(e="Uncommitted Changes"),this.host.title=`${this.host.originalTitle}: ${e}`}else this.host.title=`${this.host.originalTitle}: Overview`}async explainRequest(e,t){let i;try{let e=await this.container.ai.explainCommit(this._context.commit,{source:"inspect",type:(0,d.kk)(this._context.commit)?"stash":"commit"},{progress:{location:{viewId:this.host.id}}});if(null==e)throw Error("Error retrieving content");i={result:e?.parsed}}catch(e){i={error:{message:e.message}}}this.host.respond(e,t,i)}async generateRequest(e,t){let i,r=this._context.wip?.repo;if(!r)return void this.host.respond(e,t,{error:{message:"Unable to find changes"}});try{let e=await this.container.ai.generateCreateDraft(r,{source:"inspect",type:"suggested_pr_change"},{progress:{location:{viewId:this.host.id}}});if(null==e)throw Error("Error retrieving content");i={title:e.parsed.summary,description:e.parsed.body}}catch(e){i={error:{message:e.message}}}this.host.respond(e,t,i)}navigateStack(e){let t=this._commitStack.navigate(e);null!=t&&this.updateCommit(t,{immediate:!0,skipStack:!0})}_cancellationTokenSource=void 0;async getState(e){let t;if(null!=this._cancellationTokenSource&&(this._cancellationTokenSource.cancel(),this._cancellationTokenSource=void 0),null!=e.commit&&(t=await this.getDetailsModel(e.commit,e.formattedMessage),!e.richStateLoaded)){this._cancellationTokenSource=new s.CancellationTokenSource;let t=this._cancellationTokenSource.token;setTimeout(()=>{t.isCancellationRequested||this.updateRichState(e,t)},100)}let i=e.wip;if(null==i&&this._repositorySubscription){null==this._cancellationTokenSource&&(this._cancellationTokenSource=new s.CancellationTokenSource);let e=this._cancellationTokenSource.token;setTimeout(()=>{e.isCancellationRequested||this.updateWipState(this._repositorySubscription?.repo)},100)}return null==e.hasConnectedJira&&(e.hasConnectedJira=await this.getHasJiraConnection()),null==e.hasAccount&&(e.hasAccount=await this.getHasAccount()),(0,O.l)({...this.host.baseWebviewState,mode:e.mode,commit:t,navigationStack:e.navigationStack,pinned:e.pinned,preferences:e.preferences,includeRichContent:e.richStateLoaded,autolinksEnabled:e.autolinksEnabled,autolinkedIssues:e.autolinkedIssues?.map(f),pullRequest:null!=e.pullRequest?(0,w.pf)(e.pullRequest):void 0,wip:ek(i),orgSettings:e.orgSettings,inReview:e.inReview,hasConnectedJira:e.hasConnectedJira,hasAccount:e.hasAccount})}async updateWipState(e,t=!1){let i;if(null!=this._wipSubscription){let{repo:i,subscription:r}=this._wipSubscription;if(e?.path!==i.path)r.dispose(),this._wipSubscription=void 0;else if(t)return}let r=this.inReview;if(null!=e){null==this._wipSubscription&&(this._wipSubscription={repo:e,subscription:this.subscribeToRepositoryWip(e)});let t=await this.getWipChange(e);if(i={changes:t,repo:e,repositoryCount:this.container.git.openRepositoryCount},null!=t){let r=await this.getWipBranchDetails(e,t.branchName);null!=r&&(i.branch=r.branch,i.pullRequest=r.pullRequest,i.codeSuggestions=r.codeSuggestions)}if(i.pullRequest?.state!=="opened"&&(r=!1),this._shouldRefreshPullRequestDetails&&null!=i.pullRequest&&("launchpad"===this._context.source||this._pendingContext?.source==="launchpad")&&(this.container.views.pullRequest.showPullRequest(i.pullRequest,i.branch??e.path),this._shouldRefreshPullRequestDetails=!1),null==this._pendingContext&&await this.host.notify(ef,(0,O.l)({wip:ek(i),inReview:r}))){this._context.wip=i,this._context.inReview=r;return}}this.updatePendingContext({wip:i,inReview:r}),this.updateState(!0)}async getWipBranchDetails(e,t){let i=await e.git.branches().getBranch(t);if(null==i)return;if("commit"===this.mode)return{branch:i,pullRequest:void 0,codeSuggestions:[]};let r=await i.getAssociatedPullRequest({expiryOverride:3e5}),s=[];if(null!=r&&(0,k.Ac)(r.provider)){let t=await this.getCodeSuggestions(r,e);t.length&&(s=t)}return{branch:i,pullRequest:r,codeSuggestions:s}}async canAccessDrafts(){return await this.getHasAccount()!==!1&&(0,I.SD)("gitlens:gk:organization:drafts:enabled",!1)}async getCodeSuggestions(e,t){if(!await this.canAccessDrafts()||!(0,k.Ac)(e.provider))return[];let i=await this.container.drafts.getCodeSuggestions(e,t);for(let e of i){if(null!=e.author.avatarUri||null==e.organizationId)continue;let t=e.author.email;if(null==t){let i=await this.container.organizations.getMemberById(e.author.id,e.organizationId);t=i?.email}null!=t&&(e.author.avatarUri=(0,n.m_)(t))}return i}async updateCodeSuggestions(){if("wip"!==this.mode||this._context.wip?.pullRequest==null)return;let e=this._context.wip,{pullRequest:t,repo:i}=e;if(e.codeSuggestions=(0,k.Ac)(t.provider)?await this.getCodeSuggestions(t,i):[],null==this._pendingContext&&await this.host.notify(ef,(0,O.l)({wip:ek(e)}))){this._context.wip=e;return}this.updatePendingContext({wip:e}),this.updateState(!0)}async updateRichState(e,t){let{commit:i}=e;if(null==i)return;let r=await this.container.git.remotes(i.repoPath).getBestRemoteWithIntegration();if(t.isCancellationRequested)return;let[s,o]=r?.provider!=null&&e.autolinksEnabled?await Promise.allSettled([A.H.get("views.commitDetails.autolinks.enhanced")?(0,x.zu)(i.getEnrichedAutolinks(r)):void 0,A.H.get("views.commitDetails.pullRequests.enabled")?i.getAssociatedPullRequest(r):void 0]):[];if(t.isCancellationRequested)return;let n=(0,x.Ro)(s)?.value,a=(0,x.Ro)(o),l=this.getFormattedMessage(i,r,n);this.updatePendingContext({autolinksEnabled:e.autolinksEnabled,richStateLoaded:!0,formattedMessage:l,autolinkedIssues:null!=n?[...(0,$.x1)(n.values(),([e])=>e?.value)]:void 0,pullRequest:a}),this.updateState()}_repositorySubscription;async updateCommit(e,t){let i;if(!t?.force&&this._context.commit?.sha===e?.ref)return;if((0,d.WM)(e))i=e;else if(null!=e)if("stash"===e.refType){let t=await this.container.git.stash(e.repoPath)?.getStash();i=t?.stashes.get(e.ref)}else i=await this.container.git.commits(e.repoPath).getCommit(e.ref);let r=this._pendingContext?.wip??this._context.wip;if(null!=this._repositorySubscription){let{repo:e,subscription:t}=this._repositorySubscription;i?.repoPath!==e.path&&(t.dispose(),this._repositorySubscription=void 0,r=void 0)}if(null==this._repositorySubscription&&null!=i){let e=await this.container.git.getOrOpenRepository(i.repoPath);null!=e&&(this._repositorySubscription={repo:e,subscription:this.subscribeToRepositoryWip(e)},"wip"===this.mode?this.updateWipState(e):r=void 0)}this.updatePendingContext({commit:i,autolinksEnabled:A.H.get("views.commitDetails.autolinks.enabled"),richStateLoaded:!!i?.isUncommitted||(null!=i?!(0,I.SD)("gitlens:repos:withHostingIntegrationsConnected")?.includes(i.repoPath):!(0,I.SD)("gitlens:repos:withHostingIntegrationsConnected")),formattedMessage:void 0,autolinkedIssues:void 0,pullRequest:void 0,wip:r},t?.force),t?.pinned!=null&&this.updatePinned(t?.pinned),this.isLineTrackerSuspended&&this.ensureTrackers(),null!=i&&(t?.skipStack||this._commitStack.add((0,m.rd)(i)),this.updateNavigation()),this.updateState(t?.immediate??!0),this.updateTitle()}subscribeToRepositoryWip(e){return s.Disposable.from(e.watchFileSystem(1e3),e.onDidChangeFileSystem(()=>this.onWipChanged(e)),e.onDidChange(t=>{t.changed(p.Z_.Index,p.Ti.Any)&&this.onWipChanged(e)}))}onWipChanged(e){this.updateWipState(e)}async getWipChange(e){let t=await this.container.git.status(e.path).getStatus();if(null==t)return;let i=[];for(let e of t.files){let t={repoPath:e.repoPath,path:e.path,status:e.status,originalPath:e.originalPath,staged:e.staged};i.push(t),e.staged&&e.wip&&i.push({...t,staged:!1})}return{repository:{name:e.name,path:e.path,uri:e.uri.toString()},branchName:t.branch,files:i}}updatePinned(e,t){e!==this._context.pinned&&(this._pinned=e,this.ensureTrackers(),this.updatePendingContext({pinned:e}),this.updateState(t))}updatePreferences(e){if(this._context.preferences?.autolinksExpanded===e.autolinksExpanded&&this._context.preferences?.pullRequestExpanded===e.pullRequestExpanded&&this._context.preferences?.files?.compact===e.files?.compact&&this._context.preferences?.files?.icon===e.files?.icon&&this._context.preferences?.files?.layout===e.files?.layout&&this._context.preferences?.files?.threshold===e.files?.threshold)return;let t={...this._context.preferences,...this._pendingContext?.preferences};null!=e.autolinksExpanded&&this._context.preferences?.autolinksExpanded!==e.autolinksExpanded&&(this.container.storage.storeWorkspace("views:commitDetails:autolinksExpanded",e.autolinksExpanded).catch(),t.autolinksExpanded=e.autolinksExpanded),null!=e.pullRequestExpanded&&this._context.preferences?.pullRequestExpanded!==e.pullRequestExpanded&&(this.container.storage.storeWorkspace("views:commitDetails:pullRequestExpanded",e.pullRequestExpanded).catch(),t.pullRequestExpanded=e.pullRequestExpanded),null!=e.files&&(this._context.preferences?.files?.compact!==e.files?.compact&&A.H.updateEffective("views.commitDetails.files.compact",e.files?.compact),this._context.preferences?.files?.icon!==e.files?.icon&&A.H.updateEffective("views.commitDetails.files.icon",e.files?.icon),this._context.preferences?.files?.layout!==e.files?.layout&&A.H.updateEffective("views.commitDetails.files.layout",e.files?.layout),this._context.preferences?.files?.threshold!==e.files?.threshold&&A.H.updateEffective("views.commitDetails.files.threshold",e.files?.threshold),t.files=e.files),this.updatePendingContext({preferences:t}),this.updateState()}updatePendingContext(e,t=!1){let[i,r]=(0,F.ql)(this._context,this._pendingContext,e,t);return i&&(this._pendingContext=r),i}_notifyDidChangeStateDebounced=void 0;updateState(e=!1){if(e)return void this.notifyDidChangeState();null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,_.s)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced()}updateNavigation(){let e=this._commitStack.get(this._commitStack.position-1)?.ref;null!=e&&(e=(0,y.pV)(e)),this.updatePendingContext({navigationStack:{count:this._commitStack.count,position:this._commitStack.position,hint:e}}),this.updateState()}async setInReview(e,t){this.inReview!==e&&(null==this._pendingContext&&await this.host.notify(ey,{inReview:e})&&(this._context.inReview=e),this.updatePendingContext({inReview:e}),this.updateState(!0),e&&this.trackOpenReviewMode(t))}async notifyDidChangeState(e=!1){let t,i=(0,E.dQ)();return this._notifyDidChangeStateDebounced?.cancel(),(!!e||null!=this._pendingContext)&&(null!=this._pendingContext?(t={...this._context,...this._pendingContext},this._context=t,this._pendingContext=void 0):t=this._context,s.window.withProgress({location:{viewId:this.host.id}},async()=>{try{await this.host.notify(em,{state:await this.getState(t)})}catch(e){T.Vy.error(e,i)}}))}getBestCommitOrStash(){let e;if(!this._pinned){if("graph"!==this.options.attachedTo&&null!=s.window.activeTextEditor){let{lineTracker:t}=this.container,i=t.selections?.[0].active;null!=i&&(e=t.getState(i)?.commit)}else if(null==(e=this._pendingContext?.commit)){let t=this.container.events.getCachedEventArgs("commit:selected");e=t?.commit}return e}}async getDetailsModel(e,t){let[i,r,s]=await Promise.allSettled([!e.hasFullDetails()?e.ensureFullDetails().then(()=>e):e,e.author.getAvatarUri(e,{size:32}),this.container.git.remotes(e.repoPath).getBestRemoteWithIntegration({includeDisconnected:!0})]);e=(0,x.Ro)(i,e);let n=(0,x.Ro)(r),a=(0,x.Ro)(s);null==t&&(t=this.getFormattedMessage(e,a));let l=null!=e.message?await this.container.autolinks.getAutolinks(e.message,a):void 0;return{repoPath:e.repoPath,sha:e.sha,shortSha:e.shortSha,author:{...e.author,avatar:n?.toString(!0)},message:t,parents:e.parents,stashNumber:"stash"===e.refType?e.stashNumber:void 0,files:e.fileset?.files,stats:e.stats,autolinks:null!=l?[...(0,$.Tj)(l.values(),o.U8)]:void 0}}getFormattedMessage(e,t,i){let r=h.c.fromTemplate("${message}",e),s=r.indexOf(`
`);return(-1!==s&&(r=`${r.substring(0,s)}${q}${r.substring(s+1)}`),A.H.get("views.commitDetails.autolinks.enabled"))?this.container.autolinks.linkify(r,"html",null!=t?[t]:void 0,i):r}async getFileCommitFromParams(e){let t;if("wip"===this.mode){let e=this._context.wip?.changes?.repository.uri;if(null==e)return;t=await this.container.git.commits(s.Uri.parse(e)).getCommit(g.SU)}else t=this._context.commit;return null!=(t=await t?.getCommitForFile(e.path,e.staged))?[t,t.file]:void 0}showCommitPicker(){(0,l.b)({command:"log",state:{reference:"HEAD",repo:this._context.commit?.repoPath,openPickInView:!0}})}showCommitSearch(){(0,l.b)({command:"search",state:{openPickInView:!0}})}showCommitActions(){null==this._context.commit||this._context.commit.isUncommitted||(0,u.G4)(this._context.commit)}async showFileActions(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;this.suspendLineTracker(),(0,u.G4)(i,r)}switchMode(e){let t;if(this.mode===e.mode)return;let i=this.mode;if("wip"===e.mode){let{repoPath:i}=e;if(null==i){if(null==(t=this.container.git.getBestRepositoryOrFirst()))return;i=t.path}else t=this.container.git.getRepository(i)}this.setMode(e.mode,t),this.container.telemetry.sendEvent(`${this.options.attachedTo?"graphDetails":"commitDetails"}/mode/changed`,{...this.getTelemetryContext(),"mode.old":i,"mode.new":e.mode})}async openFileComparisonWithWorking(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;this.suspendLineTracker(),(0,u.DD)(r,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)})}async openFileComparisonWithPrevious(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;this.suspendLineTracker(),(0,u.eX)(r,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)}),this.container.events.fire("file:selected",{uri:r.uri},{source:this.host.id})}async openFile(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;this.suspendLineTracker(),(0,u.Tq)(r,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(e)})}async openFileOnRemote(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;(0,u.gV)(r,i)}async stageFile(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;await this.container.git.staging(i.repoPath)?.stageFile(r.path)}async unstageFile(e){let t=await this.getFileCommitFromParams(e);if(null==t)return;let[i,r]=t;await this.container.git.staging(i.repoPath)?.unstageFile(r.path)}getShowOptions(e){return e.showOptions}};function ek(e){if(null!=e)return{changes:e.changes,repositoryCount:e.repositoryCount,branch:function(e){if(null!=e)return{name:e.name,repoPath:e.repoPath,upstream:e.upstream,tracking:{ahead:e.upstream?.state.ahead??0,behind:e.upstream?.state.behind??0}}}(e.branch),repo:{uri:e.repo.uri.toString(),name:e.repo.name,path:e.repo.path},pullRequest:null!=e.pullRequest?(0,w.pf)(e.pullRequest):void 0,codeSuggestions:e.codeSuggestions?.map(e=>{var t;return t=e,(0,O.l)({...t,changesets:void 0})})}}eR([(0,D.Yz)({args:!1})],CommitDetailsWebviewProvider.prototype,"getState",1),eR([(0,D.Yz)({args:!1})],CommitDetailsWebviewProvider.prototype,"updateWipState",1),eR([(0,D.Yz)({args:!1})],CommitDetailsWebviewProvider.prototype,"updateRichState",1)},9679:(e,t,i)=>{i.d(t,{$o:()=>T,EH:()=>C,F7:()=>k,FF:()=>a,II:()=>v,K0:()=>ToggleQuickInputButton,KD:()=>A,Lx:()=>n,M_:()=>f,NA:()=>D,Q8:()=>x,Rn:()=>b,S:()=>h,TR:()=>u,UM:()=>O,UO:()=>U,V3:()=>L,XS:()=>c,Zo:()=>S,iD:()=>y,ig:()=>p,kk:()=>E,lA:()=>I,m:()=>g,oS:()=>F,qk:()=>m,re:()=>R,tH:()=>o,w7:()=>d,wt:()=>P,xU:()=>_,y2:()=>B,yi:()=>$,yn:()=>l,z3:()=>w});var r=i(1398),s=i(2099);let ToggleQuickInputButton=class ToggleQuickInputButton{constructor(e,t=!1){this.state=e,this._on=t}get iconPath(){let e=this.getToggledState().icon;return"string"==typeof e?{dark:r.Uri.file(s.m.instance.context.asAbsolutePath(`images/dark/${e}.svg`)),light:r.Uri.file(s.m.instance.context.asAbsolutePath(`images/light/${e}.svg`))}:e}get tooltip(){return this.getToggledState().tooltip}get on(){return this._on}set on(e){this._on=e}getState(){return"function"==typeof this.state?this.state():this.state}getToggledState(){return this.on?this.getState().on:this.getState().off}};let SelectableQuickInputButton=class SelectableQuickInputButton extends ToggleQuickInputButton{constructor(e,t,i=!1){super({off:{tooltip:e,icon:t.off},on:{tooltip:e,icon:t.on}},i)}};let o={iconPath:new r.ThemeIcon("clear-all"),tooltip:"Clear"},n={iconPath:new r.ThemeIcon("plug"),tooltip:"Connect Additional Integrations"},a={iconPath:new r.ThemeIcon("feedback"),tooltip:"Give Us Feedback"},l={iconPath:new r.ThemeIcon("repo-fetch"),tooltip:"Fetch"},u={iconPath:new r.ThemeIcon("refresh"),tooltip:"Load More"},c=class extends SelectableQuickInputButton{constructor(e=!1){super("Match Case",{off:"icon-match-case",on:"icon-match-case-selected"},e)}},h=class extends SelectableQuickInputButton{constructor(e=!1){super("Match All",{off:"icon-match-all",on:"icon-match-all-selected"},e)}},d=class extends SelectableQuickInputButton{constructor(e=!1){super("Match using Regular Expressions",{off:"icon-match-regex",on:"icon-match-regex-selected"},e)}},p={iconPath:new r.ThemeIcon("git-commit"),tooltip:"Choose a Specific Commit"},g=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super(()=>({on:{tooltip:"Choose a Specific Commit",icon:new r.ThemeIcon("git-commit")},off:{tooltip:`Choose a Branch${t.showTags?" or Tag":""}`,icon:new r.ThemeIcon("git-branch")}}),e),this.onDidClick=i}},m={iconPath:new r.ThemeIcon("info"),tooltip:"Learn about GitLens Pro"},f={iconPath:new r.ThemeIcon("merge"),tooltip:"Merge..."},w={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on Jira"},v={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on GitHub"},y={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on GitLab"},b={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on Azure DevOps"},C={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on Bitbucket"},R={iconPath:new r.ThemeIcon("globe"),tooltip:"Open on gitkraken.dev"},k={iconPath:new r.ThemeIcon("gear"),tooltip:"Launchpad Settings"},S={iconPath:new r.ThemeIcon("pinned"),tooltip:"Pin"},P={iconPath:new r.ThemeIcon("pin"),tooltip:"Unpin"},A={iconPath:new r.ThemeIcon("bell-slash"),tooltip:"Snooze"},I={iconPath:new r.ThemeIcon("refresh"),tooltip:"Refresh"},D={iconPath:new r.ThemeIcon("bell"),tooltip:"Unsnooze"},_={iconPath:new r.ThemeIcon("empty-window"),tooltip:"Open in New Window"},$={iconPath:new r.ThemeIcon("search"),tooltip:"Reveal in Side Bar"},T={iconPath:new r.ThemeIcon("settings-gear"),tooltip:"Set as Default Remote"},E={iconPath:new r.ThemeIcon("eye"),tooltip:"Inspect Details"},x={iconPath:new r.ThemeIcon("compare-changes"),tooltip:"Open Changes"},O={iconPath:new r.ThemeIcon("link-external"),tooltip:"Show Results in Side Bar"},F={iconPath:new r.ThemeIcon("empty-window"),tooltip:"Open in Worktree"},B=class extends SelectableQuickInputButton{constructor(e=!1){super("Show Tags",{off:new r.ThemeIcon("tag"),on:"icon-tag-selected"},e)}},L={iconPath:new r.ThemeIcon("gitlens-confirm-checked"),tooltip:"You will be presented with a required confirmation step before the action is performed"},U=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super(()=>({on:{tooltip:t?`For future actions, you will be presented with confirmation step before the action is performed
Click to toggle`:`You will be presented with confirmation step before the action is performed
Click to toggle`,icon:new r.ThemeIcon("gitlens-confirm-checked")},off:{tooltip:t?`For future actions, you won't be presented with confirmation step before the action is performed
Click to toggle`:`You won't be presented with confirmation step before the action is performed
Click to toggle`,icon:new r.ThemeIcon("gitlens-confirm-unchecked")}}),e),this.onDidClick=i}}},9686:(e,t,i)=>{i.d(t,{Fd:()=>g,HS:()=>r.join,LC:()=>r.extname,Np:()=>d,P8:()=>r.basename,bm:()=>p,my:()=>c,oP:()=>h,pD:()=>r.dirname,vO:()=>u,xI:()=>l});var r=i(2101),s=i(6741);let o=/(?<=^\/?)([A-Z])(?=:\/)/,n=/^([a-zA-Z][\w+.-]+):/,a=/\\/g;function l(e,t,i){if(0===e.length)return;let r=e[0];for(let s=1;s<e.length;s++){let o=u(r,e[s],t,i);if(0===o)return;r=r.substring(0,o+1)}return r}function u(e,t,i,r){let o;if(0===e.length||0===t.length)return 0;(r??!s.j9)&&(e=e.toLowerCase(),t=t.toLowerCase());let n=0;for(let r=0;r<e.length&&(o=e[r])===t[r];r++)o===i&&(n=r);return n}function c(e){return n.exec(e)?.[1]}function h(e){return!p(e)&&(0,r.isAbsolute)(e)}function d(e){return"*"===(0,r.basename)(e)}function p(e){return n.test(e)}function g(e){return e&&(47!==(e=e.replace(a,"/")).charCodeAt(e.length-1)||s.uF&&3===e.length&&":"===e[1]||(e=e.slice(0,-1)),s.uF&&(e=e.replace(o,e=>e.toLowerCase()))),e}},9759:(e,t,i)=>{i.r(t),i.d(t,{GitHubModelsProvider:()=>GitHubModelsProvider});var r=i(2476),s=i(1820),o=i(2320),n=i(8730);let GitHubModelsProvider=class GitHubModelsProvider extends n.G{id=s.ej.id;name=s.ej.name;descriptor=s.ej;config={keyUrl:"https://github.com/settings/tokens",keyValidator:/(?:ghp-)?[a-zA-Z0-9]{32,}/};async getModels(){let e=await (0,r.hd)("https://github.com/marketplace?category=All&task=chat-completion&type=models",{headers:{Accept:"application/json","Content-Type":"application/json"}});return(await e.json()).results.map(e=>({id:e.name,name:e.friendly_name,maxTokens:{input:e.max_input_tokens,output:e.max_output_tokens},provider:s.ej,temperature:null}))}getUrl(e){return"https://models.inference.ai.azure.com/chat/completions"}async handleFetchFailure(e,t,i,r,s){if(404!==e.status&&429!==e.status){let t;try{t=await e.json()}catch{}if(t?.error?.code==="tokens_limit_reached"){if(r<2){let e=/Max size: (\d+) tokens/.exec(t?.error?.message);if(e?.[1]!=null)return{retry:!0,maxInputTokens:parseInt(e[1],10)}}throw new o.V9(o.zK.RequestTooLarge,Error(`(${this.name}) ${e.status}: ${t?.error?.message||e.statusText}`))}}return super.handleFetchFailure(e,t,i,r,s)}}},9779:(e,t,i)=>{i.d(t,{P:()=>d,Z:()=>GitBranch});var r=i(8845),s=i(1555),o=i(6206),n=i(4941),a=i(3631),l=i(9385),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor,h=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?c(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&u(t,i,o),o};function d(e){return e instanceof GitBranch}let GitBranch=class GitBranch{constructor(e,t,i,r,s,o,n,l,u=!1,c=!1){this.container=e,this.repoPath=t,this.refName=i,this.current=r,this.date=s,this.sha=o,this.upstream=n,this.worktree=l,this.rebasing=c,({name:this._name,remote:this._remote}=(0,a.oq)(i)),this.detached=u||!!this.current&&(0,a.xM)(this._name),this.detached?(this.id=(0,a.Yk)(t,this._remote,this.sha),this._name=(0,a.n$)(this.sha)):this.id=(0,a.Yk)(t,this._remote,this._name),this.upstream=n?.name?n:void 0}refType="branch";detached;id;_name;get name(){return this._name}_remote;get remote(){return this._remote}toString(){return`${(0,n.zu)(this)}(${this.id})`}get formattedDate(){return"absolute"===this.container.BranchDateFormatting.dateStyle?this.formatDate(this.container.BranchDateFormatting.dateFormat):this.formatDateFromNow()}get ref(){return this.detached?this.sha:this.name}get status(){return this.remote?"remote":null==this.upstream?this.detached?"detached":"local":this.upstream.missing?"missingUpstream":this.upstream.state.ahead&&this.upstream.state.behind?"diverged":this.upstream.state.ahead?"ahead":this.upstream.state.behind?"behind":"upToDate"}formatDate(e){return null!=this.date?(0,r.Yq)(this.date,e??"MMMM Do, YYYY h:mma"):""}formatDateFromNow(){return null!=this.date?(0,r.PI)(this.date):""}async getAssociatedPullRequest(e){let t=await this.getRemote();if(t?.provider==null)return;let i=await this.container.integrations.getByRemote(t);if(null!=i){if(this.upstream?.missing){if(!this.sha)return;return i?.getPullRequestForCommit(t.provider.repoDesc,this.sha)}return i?.getPullRequestForBranch(t.provider.repoDesc,this.getTrackingWithoutRemote()??this.getNameWithoutRemote(),e)}}async getEnrichedAutolinks(){let e=await this.container.git.remotes(this.repoPath).getBestRemoteWithProvider(),t=await this.container.autolinks.getBranchAutolinks(this.name,e);return this.container.autolinks.getEnrichedAutolinks(t,e)}getBasename(){let e=this.getNameWithoutRemote(),t=e.lastIndexOf("/");return -1!==t?e.substring(t+1):e}getNameWithoutRemote(){return this.remote?this.name.substring((0,a.Ht)(this.name)+1):this.name}getTrackingWithoutRemote(){return(0,a.UJ)(this)}async getRemote(){let e=this.getRemoteName();if(null!=e)return this.container.git.remotes(this.repoPath).getRemote(e)}getRemoteName(){return this.remote?(0,a.Zq)(this.name):null!=this.upstream?(0,a.Zq)(this.upstream.name):void 0}getTrackingStatus(e){return(0,l.u)(this.upstream,e)}async getWorktree(){if(!1===this.worktree)return;if(null==this.worktree){let{id:e}=this;return this.container.git.worktrees(this.repoPath)?.getWorktree(t=>t.branch?.id===e)}let{path:e}=this.worktree;return this.container.git.worktrees(this.repoPath)?.getWorktree(t=>t.path===e)}get starred(){let e=this.container.storage.getWorkspace("starred:branches");return void 0!==e&&!0===e[this.id]}async star(){return this.container.git.getRepository(this.repoPath)?.star(this)}async unstar(){return this.container.git.getRepository(this.repoPath)?.unstar(this)}};h([(0,s.B)(e=>e??"MMMM Do, YYYY h:mma")],GitBranch.prototype,"formatDate",1),h([(0,o.Yz)()],GitBranch.prototype,"getAssociatedPullRequest",1),h([(0,s.B)()],GitBranch.prototype,"getEnrichedAutolinks",1),h([(0,s.B)()],GitBranch.prototype,"getBasename",1),h([(0,s.B)()],GitBranch.prototype,"getNameWithoutRemote",1),h([(0,s.B)()],GitBranch.prototype,"getTrackingWithoutRemote",1),h([(0,s.B)()],GitBranch.prototype,"getRemote",1),h([(0,s.B)()],GitBranch.prototype,"getRemoteName",1),h([(0,o.Yz)()],GitBranch.prototype,"getWorktree",1)},9789:(e,t,i)=>{i.d(t,{dt:()=>b,ip:()=>CompareResultsNode,oI:()=>C,pi:()=>R,sV:()=>k});var r=i(1398),s=i(7808),o=i(2624),n=i(2272),a=i(5962),l=i(9388),u=i(6206),c=i(3361),h=i(4808),d=i(6266),p=i(5818),g=i(260),m=i(9994),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?w(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&f(t,i,o),o};let y=0;let CompareResultsNode=class CompareResultsNode extends d.Y{constructor(e,t,i,r,s,n=0){super("compare-results",o.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this._ref=r,this._compareWith=s,this._storedAt=n,this._instanceId=y++,this.updateContext({comparisonId:`${r.ref}+${s.ref}+${this._instanceId}`,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,p.pF)(this.type,this.context),0===this._storedAt&&(this._storedAt=Date.now(),this.store(!0).catch())}_instanceId;get id(){return this._uniqueId}etag(){return this._storedAt}get order(){return this._storedAt}get ahead(){return{ref1:this._compareWith.ref||"HEAD",ref2:this._ref.ref}}get behind(){return{ref1:this._ref.ref,ref2:this._compareWith.ref||"HEAD"}}get compareRef(){return this._ref}get compareWithRef(){return this._compareWith}_isFiltered;get filterByAuthors(){let e=this.getState("filterCommits"),t=!!e?.length;return null!=this._isFiltered&&this._isFiltered!==t&&this.updateContext({comparisonFiltered:t}),this._isFiltered=t,e}subscribe(){return r.Disposable.from((0,c.HC)(this.view.onDidChangeNodesCheckedState,this.onNodesCheckedStateChanged,this),(0,c.HC)(this.view.container.integrations.onDidChangeConnectionState,this.onIntegrationConnectionStateChanged,this))}onIntegrationConnectionStateChanged(){this.view.triggerNodeChange(this.parent)}onNodesCheckedStateChanged(e){let t=b(this.getStorageId());e.items.some(([e])=>e.id?.startsWith(t))&&this.store(!0).catch()}dismiss(){this.remove(!0)}async getChildren(){if(null==this.children){let e={...this.ahead,range:(0,a.Xn)(this.ahead.ref1,this.ahead.ref2,"..")},t={...this.behind,range:(0,a.Xn)(this.behind.ref1,this.behind.ref2,"..")},i=await this.view.container.git.commits(this.repoPath).getLeftRightCommitCount((0,a.Xn)(t.ref1||"HEAD",t.ref2,"..."),{authors:this.filterByAuthors}),r=this.view.container.git.refs(this.repoPath),s=await r.getMergeBase(t.ref1,t.ref2,{forkPoint:!0})??await r.getMergeBase(t.ref1,t.ref2),o=[new g.V(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery(t.range),comparison:t,direction:"behind",files:{ref1:""===t.ref1?"":s??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,h.td)("commit",i?.right??0),expand:!1}),new g.V(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery(e.range),comparison:e,direction:"ahead",files:{ref1:s??e.ref1,ref2:e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,h.td)("commit",i?.left??0),expand:!1})];this.filterByAuthors?.length||o.push(new m.o(this.view,this,this.repoPath,this._compareWith.ref,this._ref.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})),this.children=o}return this.children}getTreeItem(){let e;if(this.view.container.git.repositoryCount>1){let t=this.repoPath?this.view.container.git.getRepository(this.repoPath):void 0;e=t?.formattedName??this.repoPath}let t=new r.TreeItem(`Comparing ${this._ref.label??(0,a.pV)(this._ref.ref,{strings:{working:"Working Tree"}})} with ${this._compareWith.label??(0,a.pV)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,r.TreeItemCollapsibleState.Collapsed);return t.id=this.id,t.contextValue=`${p.U0.CompareResults}${""===this._ref.ref?"+working":""}${this.filterByAuthors?.length?"+filtered":""}`,t.description=e,t.iconPath=new r.ThemeIcon("compare-changes"),t}async getDiffRefs(){return Promise.resolve([this._compareWith.ref,this._ref.ref])}async getFilesComparison(){let e=(await this.getChildren()).find(e=>e.is("results-files"));return e?.getFilesComparison()}clearReviewed(){R(this.view,this.getStorageId()),this.store().catch()}async swap(){if(""===this._ref.ref)return void r.window.showErrorMessage("Cannot swap comparisons with the working tree");let e=this.getStorageId(),t=this._ref;this._ref=this._compareWith,this._compareWith=t,await this.replace(e,!0),this.children=void 0,this.view.triggerNodeChange(this.parent),queueMicrotask(()=>this.view.reveal(this,{expand:!0,focus:!0,select:!0}))}async getAheadFilesQuery(){return(0,n.Hn)(this.view.container,this.repoPath,(0,a.Xn)(this._compareWith?.ref||"HEAD",this._ref.ref||"HEAD","..."),""===this._ref.ref)}async getBehindFilesQuery(){return(0,n.Hn)(this.view.container,this.repoPath,(0,a.Xn)(this._ref.ref||"HEAD",this._compareWith.ref||"HEAD","..."),!1)}getCommitsQuery(e){return(0,n.R6)(this.view.container,this.repoPath,e,this.filterByAuthors)}getFilesQuery(){return(0,n.i9)(this.view.container,this.repoPath,this._ref.ref,this._compareWith.ref)}getStorageId(){return(0,s.Fx)(`${this.repoPath}|${this._ref.ref}|${this._compareWith.ref}`,"base64")}remove(e=!1){return R(this.view,this.getStorageId()),this.view.updateStorage(this.getStorageId(),void 0,e)}async replace(e,t=!1){return R(this.view,e),await this.view.updateStorage(e,void 0,t),this.store(t)}store(e=!1){let t=this.getStorageId(),i=C(this.view,t);return this.view.updateStorage(t,{type:"comparison",timestamp:this._storedAt,path:this.repoPath,ref1:{label:this._ref.label,ref:this._ref.ref},ref2:{label:this._compareWith.label,ref:this._compareWith.ref},checkedFiles:i.length>0?i:void 0},e)}};function b(e){return`${e}|`}function C(e,t){let i=[];for(let[s,o]of e.nodeState.get(b(t),"checked"))o===r.TreeItemCheckboxState.Checked&&i.push(s);return i}function R(e,t){e.nodeState.delete(b(t),"checked")}function k(e,t){if(t?.length)for(let i of t)e.nodeState.storeState(i,"checked",r.TreeItemCheckboxState.Checked,!0)}v([(0,l.G)(),(0,u.Yz)()],CompareResultsNode.prototype,"getDiffRefs",1),v([(0,u.Rm)()],CompareResultsNode.prototype,"clearReviewed",1),v([(0,u.Rm)()],CompareResultsNode.prototype,"swap",1)},9823:(e,t,i)=>{i.d(t,{JG:()=>o,V3:()=>s});var r=i(8757);function s(e){return JSON.parse((0,r.n)(e))}function o(e){let t,[i,s]=e.split("+");if(s)try{t=JSON.parse((0,r.n)(s))}catch{}return{scheme:i,metadata:t}}},9827:(e,t,i)=>{i.r(t),i.d(t,{JiraAuthenticationProvider:()=>JiraAuthenticationProvider});var r=i(1849),s=i(8576);let JiraAuthenticationProvider=class JiraAuthenticationProvider extends s.DP{get authProviderId(){return r.tp.Jira}}},9975:(e,t,i)=>{i.d(t,{A_:()=>w,Cj:()=>f,JP:()=>S,Jc:()=>y,KA:()=>A,Kg:()=>o,Ld:()=>d,Mt:()=>b,NK:()=>m,Nm:()=>g,RW:()=>P,SB:()=>c,UJ:()=>l,k0:()=>k,lc:()=>R,le:()=>u,pG:()=>h,wC:()=>a,x3:()=>n,yV:()=>C,zx:()=>v});var r=i(3911),s=i(8845);let o="did-update-subscription";function n(e,t){return g(e)-g(t)}function a(e){switch(e){case r.zZ.VerificationRequired:return"verification";case r.zZ.Community:return"free";case r.zZ.ProPreview:return"preview";case r.zZ.ProPreviewExpired:return"preview-expired";case r.zZ.ProTrial:return"trial";case r.zZ.ProTrialExpired:return"trial-expired";case r.zZ.ProTrialReactivationEligible:return"trial-reactivation-eligible";case r.zZ.Paid:return"paid";default:return"unknown"}}function l(e){let{account:t,plan:{actual:i,effective:s},previewTrial:o}=e;if(t?.verified===!1)return r.zZ.VerificationRequired;if(i.id===s.id||n(i.id,s.id)>0)switch(i.id===s.id?s.id:i.id){case r.qn.Community:return null==o?r.zZ.Community:r.zZ.ProPreviewExpired;case r.qn.CommunityWithAccount:if(null!=s.nextTrialOptInDate&&new Date(s.nextTrialOptInDate)<new Date)return r.zZ.ProTrialReactivationEligible;return r.zZ.ProTrialExpired;case r.qn.Pro:case r.qn.Advanced:case r.qn.Business:case r.qn.Enterprise:return r.zZ.Paid}if(n(i.id,r.qn.CommunityWithAccount)>0)return r.zZ.Paid;switch(s.id){case r.qn.Community:return null==o?r.zZ.Community:r.zZ.ProPreview;case r.qn.CommunityWithAccount:if(null!=s.nextTrialOptInDate&&new Date(s.nextTrialOptInDate)<new Date)return r.zZ.ProTrialReactivationEligible;return r.zZ.ProTrialExpired;case r.qn.Pro:case r.qn.Advanced:case r.qn.Business:case r.qn.Enterprise:return i.id===r.qn.Community?r.zZ.ProPreview:r.zZ.ProTrial}}function u(e,t,i,r,s,o,n=!1,a){return{id:e,name:c(e),bundle:t,cancelled:n,organizationId:r,trialReactivationCount:i,nextTrialOptInDate:a,startedOn:(s??new Date).toISOString(),expiresOn:null!=o?o.toISOString():void 0}}function c(e){return`GitLens ${h(e)}`}function h(e){switch(e){case r.qn.Pro:return"Pro";case r.qn.Advanced:return"Advanced";case r.qn.Business:return"Business";case r.qn.Enterprise:return"Enterprise";default:return"Community"}}function d(e){switch(e){case r.qn.Advanced:return"ADVANCED";case r.qn.Business:return"BUSINESS";case r.qn.Enterprise:return"ENTERPRISE";default:return"PRO"}}let p=new Map([[void 0,-1],[r.qn.Community,0],[r.qn.CommunityWithAccount,1],[r.qn.Pro,2],[r.qn.Advanced,3],[r.qn.Business,4],[r.qn.Enterprise,5]]);function g(e){return p.get(e)??-1}function m(e,t){return f(e.plan.effective.expiresOn,t)}function f(e,t){return null!=e?(0,s.m8)(Date.now(),new Date(e),t,Math.round):void 0}function w(e){return v(e.plan.actual.id)}function v(e){return e!==r.qn.Community&&e!==r.qn.CommunityWithAccount}function y(e){let t=m(e);return null!=t&&t<=0}function b(e){return e.plan.actual.id!==e.plan.effective.id}function C(e){if(null==e.account||!b(e)||!1===R(e))return!1;let t=m(e);return null==t||t<=0}function R(e){let t=f(e.previewTrial?.expiresOn);return null!=t?t<=0:void 0}function k(e){return null!=e&&(e===r.zZ.Paid||e===r.zZ.ProPreview||e===r.zZ.ProTrial)}function S(e){}function P(e){return{...e,plan:{actual:u(r.qn.Community,!1,0,void 0,e?.plan?.actual?.startedOn!=null?new Date(e.plan.actual.startedOn):void 0),effective:u(r.qn.Community,!1,0,void 0,e?.plan?.actual?.startedOn!=null?new Date(e.plan.actual.startedOn):void 0)},account:void 0,activeOrganization:void 0,state:r.zZ.Community}}function A(e,t){let i=new Date,o=new Date(i);return 0!==e&&(o.setHours(23,59,59,999),o=(0,s.Tl)(o,{days:e})),{...t??=P(),plan:{...t.plan,effective:u(r.qn.Pro,!1,0,void 0,i,o)},previewTrial:{startedOn:i.toISOString(),expiresOn:o.toISOString()}}}},9994:(e,t,i)=>{i.d(t,{U:()=>P,o:()=>ResultsFilesNode});var r,s=i(1398),o=i(2624),n=i(2812),a=i(9388),l=i(6206),u=i(9091),c=i(9686),h=i(7864),d=i(4808),p=i(5818),g=i(8902),m=i(534),f=i(567),w=i(7660),v=i(2141),y=i(745),b=i(6572),C=i(7273),R=i(9789);let ResultsFileNode=class ResultsFileNode extends C.p{constructor(e,t,i,r,s,n,a){super("results-file",o.nk.fromFile(r,i,s||n),e,t,r),this.ref1=s,this.ref2=n,this.direction=a,this.updateContext({file:r}),null!=this.context.storedComparisonId?this._uniqueId=`${(0,R.dt)(this.context.storedComparisonId)}${this.direction}|${r.path}`:this._uniqueId=(0,p.pF)(this.type,this.context)}toClipboard(){return this.file.path}get ref(){return(0,w.kA)(this.ref1||this.ref2,this.uri.repoPath)}getChildren(){return[]}getTreeItem(){let e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.None);e.contextValue=p.U0.ResultsFile,e.description=this.description,e.tooltip=(0,b.h)(this.file);let t=(0,f.O)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,c.HS)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,c.HS)("images","light",t))},e.command=this.getCommand(),e.checkboxState={state:this.getState("checked")??s.TreeItemCheckboxState.Unchecked,tooltip:"Mark as Reviewed"},e}_description;get description(){return void 0===this._description&&(this._description=m.Z.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return void 0===this._folderName&&(this._folderName=(0,y.A3)(this.uri.relativePath)),this._folderName}_label;get label(){return void 0===this._label&&(this._label=m.Z.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return(0,v.gu)("gitlens.diffWith","Open Changes",{lhs:{sha:this.ref1,uri:("R"===this.file.status||"C"===this.file.status)&&"behind"===this.direction?o.nk.fromFile(this.file,this.uri.repoPath,this.ref2,!0):this.uri},rhs:{sha:this.ref2,uri:("R"===this.file.status||"C"===this.file.status)&&"behind"!==this.direction?o.nk.fromFile(this.file,this.uri.repoPath,this.ref2,!0):this.uri},repoPath:this.uri.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}})}};var k=Object.defineProperty,S=Object.getOwnPropertyDescriptor,P=((r=P||{})[r.Left=0]="Left",r[r.Right=1]="Right",r);let ResultsFilesNode=class ResultsFilesNode extends p.eu{constructor(e,t,i,r,s,n,a,l){super("results-files",o.nk.fromRepoPath(i),e,t),this.parent=t,this.repoPath=i,this.ref1=r,this.ref2=s,this._filesQuery=n,this.direction=a,null!=this.direction&&this.updateContext({branchStatusUpstreamType:this.direction}),this._uniqueId=(0,p.pF)(this.type,this.context),this._options={expand:!0,timeout:100,...l}}_options;get id(){return this._uniqueId}get filter(){return this.getState("filter")}set filter(e){this.filter!==e&&(this.storeState("filter",e,!0),this._filterResults=void 0,this.triggerChange(!1))}get filterable(){return null!=this.filter||this.ref1!==this.ref2&&void 0===this.direction}async getFilesComparison(){let{files:e}=await this.getFilesQueryResults();return{files:e??[],repoPath:this.repoPath,ref1:this.ref1,ref2:this.ref2}}getFilterContextValue(){switch(this.filter){case 0:return"+filtered~left";case 1:return"+filtered~right";default:return""}}async getChildren(){let e=await this.getFilesQueryResults(),t=(null!=this.filter?e.filtered?.get(this.filter):void 0)??e.files;if(null==t)return[];let i=[...(0,u.Tj)(t,e=>new ResultsFileNode(this.view,this,this.repoPath,e,this.ref1,this.ref2,this.direction))];if("list"!==this.view.config.files.layout){let e=(0,n.Ay)(i,e=>e.uri.relativePath.split("/"),(...e)=>(0,c.Fd)((0,c.HS)(...e)),this.view.config.files.compact);i=new g.x(this.view,this,e,this.repoPath,"",void 0).getChildren()}else i.sort((e,t)=>e.priority-t.priority||(0,d.wN)(e.label,t.label));return i}async getTreeItem(){let e,t,i,r,o,n,a=this.filter;try{let l=await (0,h.nZ)(this.getFilesQueryResults(),!1===this._options.timeout?void 0:this._options.timeout);e=l.label,null==a&&null!=l.stats&&(t=`${(0,d.td)("addition",l.stats.additions)} (+), ${(0,d.td)("deletion",l.stats.deletions)} (-)${l.stats.approximated?" *approximated":""}`,n=`${e}, ${t}`),null!=a?(t="Filtered",n=`${e} &mdash; ${t}`,r=l.filtered?.get(a),null==r&&(e="files changed",i=new s.ThemeIcon("ellipsis"),o=s.TreeItemCollapsibleState.Collapsed,this._filterResults?.then(()=>queueMicrotask(()=>this.triggerChange(!1))))):r=l.files,void 0===o&&(o=null==r||0===r.length?s.TreeItemCollapsibleState.None:this._options.expand?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed)}catch(t){t instanceof h.NY&&t.promise.then(()=>queueMicrotask(()=>this.triggerChange(!1))),e="files changed",i=new s.ThemeIcon("ellipsis"),o=s.TreeItemCollapsibleState.Collapsed}let l=new s.TreeItem(`${null!=a&&null!=r?`Showing ${r.length} of `:""}${e}`,o);return l.description=t,l.id=this.id,l.iconPath=i,l.contextValue=`${p.U0.ResultsFiles}${this.filterable?"+filterable":""}${this.getFilterContextValue()}`,l.tooltip=n,l}refresh(e=!1){e&&(this.deleteState("filter"),this._filterResults=void 0,this._filesQueryResults=this._filesQuery())}_filesQueryResults;_filterResults;async getFilesQueryResults(){void 0===this._filesQueryResults&&(this._filesQueryResults=this._filesQuery());let e=await this._filesQueryResults;return null!=e.files&&this.filterable&&null!=this.filter&&e.filtered?.get(this.filter)==null&&(void 0===this._filterResults&&(this._filterResults=this.filterResults(this.filter,e)),await this._filterResults),e}async filterResults(e,t){let i,r=0===this.filter?this.ref2:this.ref1,s=await this.view.container.git.refs(this.repoPath).getMergeBase(this.ref1||"HEAD",this.ref2||"HEAD");if(null!=s){let e=await this.view.container.git.diff(this.uri.repoPath).getDiffStatus(`${s}..${r}`);null!=e&&(i=new Set(e.map(e=>e.path)))}else{let e=await this.view.container.git.commits(this.uri.repoPath).getCommit(r||"HEAD");e?.fileset?.files!=null&&(i=new Set(e.fileset?.files.map(e=>e.path)))}null==t.filtered&&(t.filtered=new Map),t.filtered.set(e,null==i?[]:t.files.filter(e=>i.has(e.path)))}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?S(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&k(t,i,o)})([(0,a.G)(),(0,l.Yz)()],ResultsFilesNode.prototype,"refresh",1)}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var i=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(i.exports,i,i.exports,__webpack_require__),i.exports}__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var i in t)__webpack_require__.o(t,i)&&!__webpack_require__.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||Function("return this")()}catch{if("object"==typeof window)return window}}(),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__={};(()=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{activate:()=>sj,deactivate:()=>sz});var e,t,i,r,s,o,n=__webpack_require__(1398),a=__webpack_require__(3881),l=__webpack_require__(224),u=__webpack_require__(6741),c=__webpack_require__(2099),h=__webpack_require__(8577);Object.freeze({dispose:()=>{}});let Api=class Api{#i;constructor(e){this.#i=e}registerActionRunner(e,t){if(t.name===h.zM)throw Error(`Cannot use the reserved name '${h.zM}'`);return"hover.commandHelp"===e&&(e="hover.commands"),this.#i.actionRunners.register(e,t)}};var d=__webpack_require__(6529),p=__webpack_require__(1182),g=((e=g||{}).Version="gitlens:synced:version",e.PreReleaseVersion="gitlens:synced:preVersion",e),m=__webpack_require__(2624),f=__webpack_require__(9779),w=__webpack_require__(8518),v=__webpack_require__(8219),y=__webpack_require__(3219),b=__webpack_require__(3631),C=__webpack_require__(5962),R=__webpack_require__(7019),k=__webpack_require__(2141),S=__webpack_require__(2870),P=__webpack_require__(9615),A=__webpack_require__(6206),I=Object.defineProperty,D=Object.getOwnPropertyDescriptor,_=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?D(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&I(t,i,o),o};let Storage=class Storage{constructor(e){this.context=e,this._disposable=n.Disposable.from(this._onDidChange,this._onDidChangeSecrets,this.context.secrets.onDidChange(e=>this._onDidChangeSecrets.fire(e)))}_onDidChange=new n.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeSecrets=new n.EventEmitter;get onDidChangeSecrets(){return this._onDidChangeSecrets.event}_disposable;dispose(){this._disposable.dispose()}get(e,t){return this.context.globalState.get(`${p.Od}:${e}`,t)}async delete(e){await this.context.globalState.update(`${p.Od}:${e}`,void 0),this._onDidChange.fire({keys:[e],workspace:!1})}async deleteWithPrefix(e){return this.deleteWithPrefixCore(e)}async deleteWithPrefixCore(e,t){let i=`${p.Od}:`,r=[];for(let s of this.context.globalState.keys()){if(!s.startsWith(i))continue;let o=s.substring(i.length);if(null==e||o===e||o.startsWith(`${e}:`)){if(t?.test(o))continue;r.push(o),await this.context.globalState.update(s,void 0)}}r.length&&this._onDidChange.fire({keys:r,workspace:!1})}async reset(){return this.deleteWithPrefixCore(void 0,/^(premium:subscription|plus:preview:.*)$/)}async store(e,t){await this.context.globalState.update(`${p.Od}:${e}`,t),this._onDidChange.fire({keys:[e],workspace:!1})}async getSecret(e){return this.context.secrets.get(e)}async deleteSecret(e){return this.context.secrets.delete(e)}async storeSecret(e,t){return this.context.secrets.store(e,t)}getWorkspace(e,t){return this.context.workspaceState.get(`${p.Od}:${e}`,t)}async deleteWorkspace(e){await this.context.workspaceState.update(`${p.Od}:${e}`,void 0),this._onDidChange.fire({keys:[e],workspace:!0})}async deleteWorkspaceWithPrefix(e){return this.deleteWorkspaceWithPrefixCore(e)}async deleteWorkspaceWithPrefixCore(e,t){let i=`${p.Od}:`,r=[];for(let s of this.context.workspaceState.keys()){if(!s.startsWith(i))continue;let o=s.substring(i.length);if(null==e||o===e||o.startsWith(`${e}:`)){if(t?.includes(o))continue;r.push(o),await this.context.workspaceState.update(s,void 0)}}r.length&&this._onDidChange.fire({keys:r,workspace:!0})}async resetWorkspace(){return this.deleteWorkspaceWithPrefixCore()}async storeWorkspace(e,t){await this.context.workspaceState.update(`${p.Od}:${e}`,t),this._onDidChange.fire({keys:[e],workspace:!0})}};_([(0,A.Yz)({logThreshold:50})],Storage.prototype,"get",1),_([(0,A.Yz)({logThreshold:250})],Storage.prototype,"delete",1),_([(0,A.Yz)({logThreshold:250})],Storage.prototype,"deleteWithPrefix",1),_([(0,A.Yz)({logThreshold:250})],Storage.prototype,"reset",1),_([(0,A.Yz)({args:{1:!1},logThreshold:250})],Storage.prototype,"store",1),_([(0,A.Yz)({args:!1,logThreshold:250})],Storage.prototype,"getSecret",1),_([(0,A.Yz)({args:!1,logThreshold:250})],Storage.prototype,"deleteSecret",1),_([(0,A.Yz)({args:!1,logThreshold:250})],Storage.prototype,"storeSecret",1),_([(0,A.Yz)({logThreshold:25})],Storage.prototype,"getWorkspace",1),_([(0,A.Yz)({logThreshold:250})],Storage.prototype,"deleteWorkspace",1),_([(0,A.Yz)({logThreshold:250})],Storage.prototype,"deleteWorkspaceWithPrefix",1),_([(0,A.Yz)({logThreshold:250})],Storage.prototype,"resetWorkspace",1),_([(0,A.Yz)({args:{1:!1},logThreshold:250})],Storage.prototype,"storeWorkspace",1);var $=__webpack_require__(4692),T=__webpack_require__(553),E=__webpack_require__(797),x=__webpack_require__(3677),O=__webpack_require__(8845),F=__webpack_require__(3361),B=__webpack_require__(4941),L=__webpack_require__(9638),U=__webpack_require__(8178),q=__webpack_require__(6549),N=__webpack_require__(1510),M=__webpack_require__(3583),W=__webpack_require__(9442),G=Object.defineProperty,H=Object.getOwnPropertyDescriptor;let V=class extends W.Kt{constructor(e){super("gitlens.addAuthors"),this.container=e}execute(e){let t;return e?.rootUri!=null&&(t=this.container.git.getRepository(e.rootUri)),(0,M.b)({command:"co-authors",state:{repo:t,contributors:void 0}})}};V=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?H(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&G(t,i,o),o})([(0,k.G5)()],V);var j=__webpack_require__(9686),z=__webpack_require__(7193),Q=Object.defineProperty,Y=Object.getOwnPropertyDescriptor;let K=class extends W.Zr{constructor(e){super(["gitlens.browseRepoAtRevision","gitlens.browseRepoAtRevisionInNewWindow","gitlens.browseRepoBeforeRevision","gitlens.browseRepoBeforeRevisionInNewWindow"]),this.container=e}preExecute(e,t){switch(e.command){case"gitlens.browseRepoAtRevisionInNewWindow":t={...t,before:!1,openInNewWindow:!0};break;case"gitlens.browseRepoBeforeRevision":t={...t,before:!0,openInNewWindow:!1};break;case"gitlens.browseRepoBeforeRevisionInNewWindow":t={...t,before:!0,openInNewWindow:!0}}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){i={...i};try{if(null==i.uri){if(t=(0,z.q)(t,e),null==t)return}else t=i.uri;let r=await m.nk.fromUri(t);if(null==r.sha)return;let s=i?.before?await this.container.git.refs(r.repoPath).resolveReference(`${r.sha}^`):r.sha;t=this.container.git.getRevisionUri(r.repoPath,s,r.repoPath),r=m.nk.fromRevisionUri(t),(0,x.OH)(t,{location:i.openInNewWindow?"newWindow":"addToWorkspace",name:`${(0,j.P8)(r.repoPath)} @ ${r.shortSha}`}),i.openInNewWindow||(0,k.S4)("workbench.files.action.focusFilesExplorer")}catch(e){B.Vy.error(e,"BrowseRepoAtRevisionCommand"),(0,R.qQ)("Unable to open the repository at the specified revision")}}};K=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?Y(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&Q(t,i,o),o})([(0,k.G5)()],K);var Z=__webpack_require__(8397),J=__webpack_require__(811),X=Object.defineProperty,ee=Object.getOwnPropertyDescriptor;let et=class extends W.Kt{constructor(e){super("gitlens.closeUnchangedFiles"),this.container=e}async execute(e){e={...e};try{if(null==e.uris){let t=await (0,Z.t6)("Close All Unchanged Files");if(null==t)return;let i=await this.container.git.status(t.uri).getStatus();if(null==i)return void n.window.showWarningMessage("Unable to close unchanged files");e.uris=i.files.map(e=>e.uri)}let t=0===e.uris.length;for(let i of n.window.tabGroups.all)for(let r of i.tabs)if(r.input instanceof n.TabInputText||r.input instanceof n.TabInputCustom||r.input instanceof n.TabInputNotebook){let i=r.input.uri;(t||!e.uris.some(e=>(0,J.k)(e,i)))&&n.window.tabGroups.close(r,!0)}else if(r.input instanceof n.TabInputTextDiff||r.input instanceof n.TabInputNotebookDiff){let i=r.input.modified;(t||!e.uris.some(e=>(0,J.k)(e,i)))&&n.window.tabGroups.close(r,!0)}}catch(e){B.Vy.error(e,"CloseUnchangedFilesCommand"),(0,R.qQ)("Unable to close all unchanged files")}}};et=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ee(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&X(t,i,o),o})([(0,k.G5)()],et);var ei=Object.defineProperty,er=Object.getOwnPropertyDescriptor,es=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?er(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ei(t,i,o),o};let eo=class extends W.Kt{constructor(e){super("gitlens.plus.cloudIntegrations.manage"),this.container=e}async execute(e){await this.container.integrations.manageCloudIntegrations(e?.source)}};eo=es([(0,k.G5)()],eo);let en=class extends W.Kt{constructor(e){super("gitlens.plus.cloudIntegrations.connect"),this.container=e}async execute(e){await this.container.integrations.connectCloudIntegrations(e?.integrationIds?{integrationIds:e.integrationIds}:void 0,e?.source)}};en=es([(0,k.G5)()],en);var ea=Object.defineProperty,el=Object.getOwnPropertyDescriptor;let eu=class extends W.Zr{constructor(e){super(["gitlens.compareWith","gitlens.compareHeadWith","gitlens.compareWorkingWith"],["gitlens.diffHeadWith","gitlens.diffWorkingWith"]),this.container=e}preExecute(e,t){switch(e.command){case"gitlens.compareWith":t={...t};break;case"gitlens.compareHeadWith":case"gitlens.diffHeadWith":(t={...t}).ref1="HEAD";break;case"gitlens.compareWorkingWith":case"gitlens.diffWorkingWith":(t={...t}).ref1=""}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,z.q)(t,e),i={...i};try{let r;switch(i.ref1){case null:r="Compare";break;case"":r="Compare Working Tree with";break;case"HEAD":r="Compare HEAD with";break;default:r=`Compare ${i.ref1} with`}let s=(await (0,Z.X)(t,e,r))?.path;if(!s)return;null!=i.ref1&&null!=i.ref2?await this.container.views.searchAndCompare.compare(s,i.ref1,i.ref2):this.container.views.searchAndCompare.selectForCompare(s,i.ref1,{prompt:!0})}catch(e){B.Vy.error(e,"CompareWithCommmand"),(0,R.qQ)("Unable to open comparison")}}};eu=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?el(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ea(t,i,o),o})([(0,k.G5)()],eu);var ec=Object.defineProperty,eh=Object.getOwnPropertyDescriptor;let ed=class extends W.Zr{constructor(e){super("gitlens.copyCurrentBranch"),this.container=e}async execute(e,t){let i=null!=(t=(0,z.q)(t,e))?await m.nk.fromUri(t):void 0,r=await (0,Z.X)(i,e,"Copy Current Branch Name");if(null!=r)try{let e=await r.git.branches().getBranch();e?.name&&await n.env.clipboard.writeText(e.name)}catch(e){B.Vy.error(e,"CopyCurrentBranchCommand"),(0,R.qQ)("Unable to copy current branch name")}}};ed=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eh(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ec(t,i,o),o})([(0,k.G5)()],ed);var ep=__webpack_require__(7660),eg=__webpack_require__(1288),em=__webpack_require__(9679),ef=__webpack_require__(3227);async function ew(e,t="Choose a remote",i,r){let s,o=[];if(0===i.length)t="No remotes found";else{if(r?.autoPick==="default"&&i.length>1){let e=i.find(e=>e.default);null!=e&&(i=[e])}let e={upstream:!0,buttons:r?.setDefault?[em.$o]:void 0};for(let t of i)o.push((0,ef.G0)(t,void 0,e)),t.name===r?.picked&&(s=o[o.length-1])}if(r?.autoPick&&1===i.length)return o[0].item;let a=n.window.createQuickPick();a.ignoreFocusOut=(0,$.dW)();let l=[];try{let i=await new Promise(i=>{l.push(a.onDidHide(()=>i(void 0)),a.onDidAccept(()=>{0!==a.activeItems.length&&i(a.activeItems[0])}),a.onDidTriggerItemButton(async e=>{e.button===em.$o&&(await e.item.item.setAsDefault(),i(e.item))})),a.title=e,a.placeholder=t,a.matchOnDetail=!0,a.items=o,null!=s&&(a.activeItems=[s]),a.show()});return i?.item}finally{a.dispose(),l.forEach(e=>void e.dispose())}}var ev=__webpack_require__(1017),ey=__webpack_require__(7945),eb=Object.defineProperty,eC=Object.getOwnPropertyDescriptor,eR=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?eC(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eb(t,i,o),o};let ek=class extends W.Zr{constructor(e){super(["gitlens.copyDeepLinkToBranch","gitlens.copyDeepLinkToCommit","gitlens.copyDeepLinkToRepo","gitlens.copyDeepLinkToTag","gitlens.copyDeepLinkToComparison","gitlens.copyDeepLinkToWorkspace"]),this.container=e}preExecute(e,t){return null==t&&((0,ey.j7)(e)?t={refOrRepoPath:e.node.commit}:(0,ey.d2)(e)?t={refOrRepoPath:e.node.uri.fsPath,compareRef:e.node.compareRef,compareWithRef:e.node.compareWithRef}:(0,ey.K0)(e)?t="gitlens.copyDeepLinkToRepo"===e.command?{refOrRepoPath:e.node.branch.repoPath,remote:e.node.branch.getRemoteName()}:{refOrRepoPath:e.node.branch}:(0,ey.oD)(e)?t={refOrRepoPath:e.node.tag}:(0,ey.qv)(e)?t={refOrRepoPath:e.node.remote.repoPath,remote:e.node.remote.name}:(0,ey.vH)(e)&&(t={workspaceId:e.node.workspace.id})),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,s;if(null!=(i={...i}).workspaceId){try{await this.container.deepLinks.copyDeepLinkUrl(i.workspaceId)}catch(e){B.Vy.error(e,"CopyDeepLinkCommand"),(0,R.qQ)("Unable to copy link")}return}if(i?.refOrRepoPath==null){let i=null!=(t=(0,z.q)(t,e))?await m.nk.fromUri(t):void 0;r=ev.vk.Repository,s=(await (0,Z.X)(i,e,`Copy Link to ${(0,ev.$)(r)}`))?.path}else"string"==typeof i.refOrRepoPath?(r=null==i.compareRef?ev.vk.Repository:ev.vk.Comparison,s=i.refOrRepoPath,i.refOrRepoPath=void 0):(r=(0,ev.NK)(i.refOrRepoPath.refType),s=i.refOrRepoPath.repoPath);if(s){if(!i.remote&&i.refOrRepoPath?.refType==="branch"&&(i.refOrRepoPath.remote||i.refOrRepoPath.upstream?.name!=null)){let[e,t]=(0,b.He)(i.refOrRepoPath);null!=e&&null!=t&&(i.remote=t,i.prePickRemote=!0)}try{let e,t=await this.container.git.remotes(s).getRemotes({sort:!0}),o=t.find(e=>e.default);if(i.remote&&!i.prePickRemote)e=t.find(e=>e.name===i?.remote);else if(null!=o)e=o;else{let s=await ew(`Copy Link to ${(0,ev.$)(r)}`,"Choose which remote to copy the link for",t,{autoPick:!0,picked:i.remote,setDefault:!0});if(null==s)return;e=s}if(null==e)return;null==i.refOrRepoPath?await this.container.deepLinks.copyDeepLinkUrl(s,e.url,i.compareRef,i.compareWithRef):await this.container.deepLinks.copyDeepLinkUrl(i.refOrRepoPath,e.url)}catch(e){B.Vy.error(e,"CopyDeepLinkCommand"),(0,R.qQ)("Unable to copy link")}}}};ek=eR([(0,k.G5)()],ek);let eS=class extends W.Zr{constructor(e){super(["gitlens.copyDeepLinkToFile","gitlens.copyDeepLinkToFileAtRevision","gitlens.copyDeepLinkToLines"]),this.container=e}preExecute(e,t){if(null==t&&(t={}),null==t.ref&&"gitlens.copyDeepLinkToFileAtRevision"===e.command&&(t.chooseRef=!0),null==t.lines&&"gitlens.copyDeepLinkToLines"===e.command){let i;(0,ey.Or)(e)&&null!=e.line?i=[e.line+1]:e.editor?.selection==null||e.editor.selection.isEmpty||(i=e.editor.selection.isSingleLine?[e.editor.selection.start.line+1]:[e.editor.selection.start.line+1,e.editor.selection.end.line+1]),t.lines=i}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){i={...i};let r=ev.vk.File,s=i?.repoPath,o=i?.filePath,n=i?.ref;if(null==s||null==o||null==n){let r=null!=(t=(0,z.q)(t,e))?await m.nk.fromUri(t):void 0;if(r?.path==null||r?.repoPath==null||(null==s&&(s=r.repoPath),null==o&&(o=r?.fsPath),i?.chooseRef!==!0&&null==n&&null!=s&&r?.sha!=null&&(n=(0,ep.kA)(r.sha,s,{refType:"revision"})),null==s||null==o))return;s=(0,j.Fd)(s),(o=(0,j.Fd)(o)).startsWith(s)||(B.Vy.error(`CopyFileDeepLinkCommand: File path ${o} is not contained in repo path ${s}`),(0,R.qQ)("Unable to copy file link")),(o=o.substring(s.length+1)).startsWith("/")&&(o=o.substring(1))}if(s&&o){if(i?.chooseRef){let e=await (0,eg.NZ)(s,`Copy Link to ${o} at Reference`,"Choose a reference (branch, tag, etc) to copy the file link for",{allowRevisions:!0,include:eg.m7.All});if(null==e)return;n=""===e.ref?void 0:e}if(!i.remote&&i.ref?.refType==="branch"&&(i.ref.remote||i.ref.upstream?.name!=null)){let[e,t]=(0,b.He)(i.ref);null!=e&&null!=t&&(i.remote=t,i.prePickRemote=!0)}try{let e,t=await this.container.git.remotes(s).getRemotes({sort:!0}),a=t.find(e=>e.default);if(i.remote&&!i.prePickRemote)e=t.find(e=>e.name===i?.remote);else if(null!=a)e=a;else{let s=await ew(`Copy Link to ${(0,ev.$)(r)}`,"Choose which remote to copy the link for",t,{autoPick:!0,picked:i.remote,setDefault:!0});if(null==s)return;e=s}if(null==e)return;await this.container.deepLinks.copyFileDeepLinkUrl(s,o,e.url,i.lines,n)}catch(e){B.Vy.error(e,"CopyFileDeepLinkCommand"),(0,R.qQ)("Unable to copy file link")}}}};eS=eR([(0,k.G5)()],eS);var eP=__webpack_require__(4123),eA=__webpack_require__(9091),eI=Object.defineProperty,eD=Object.getOwnPropertyDescriptor;let e_=class extends W.Zr{constructor(e){super("gitlens.copyMessageToClipboard"),this.container=e}async preExecute(e,t){return(0,ey.j7)(e)?((t={...t}).sha=e.node.commit.sha,null!=e.node.commit.message&&await e.node.commit.ensureFullDetails(),t.message=e.node.commit.message,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):(0,ey.K0)(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):(0,ey.oD)(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,z.q)(t,e),i={...i};try{if(!i.message){let r;if(null!=i.repoPath&&null!=i.sha)return void await (0,eP.eU)({ref:i.sha,repoPath:i.repoPath});if(null==t){if(!(r=this.container.git.getBestRepository(e)?.path))return;let t=await this.container.git.commits(r).getLog(void 0,{limit:1});if(null==t)return;let s=(0,eA.$1)(t.commits.values());if(s?.message==null)return;i.message=s.message}else if(null==i.message){let s=await m.nk.fromUri(t);if(!(r=s.repoPath))return;if(null!=i.sha)return void await (0,eP.eU)({ref:i.sha,repoPath:r});{let t=e?.selection.active.line??0;if(t<0)return;try{let i=await this.container.git.getBlameForLine(s,t,e?.document);if(null==i||i.commit.isUncommitted)return;await (0,eP.eU)(i.commit);return}catch(e){B.Vy.error(e,"CopyMessageToClipboardCommand",`getBlameForLine(${t})`),(0,R.qQ)("Unable to copy message");return}}}}await n.env.clipboard.writeText(i.message)}catch(e){B.Vy.error(e,"CopyMessageToClipboardCommand"),(0,R.qQ)("Unable to copy message")}}};e_=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eD(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eI(t,i,o),o})([(0,k.G5)()],e_);var e$=Object.defineProperty,eT=Object.getOwnPropertyDescriptor;let eE=class extends W.Zr{constructor(e){super("gitlens.copyShaToClipboard"),this.container=e}preExecute(e,t){return(0,ey.j7)(e)?((t={...t}).sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.file?.uri??e.node.commit.getRepository()?.uri,t)):(0,ey.K0)(e)?((t={...t}).sha=e.node.branch.sha,this.execute(e.editor,e.node.uri,t)):(0,ey.oD)(e)?((t={...t}).sha=e.node.tag.sha,this.execute(e.editor,e.node.uri,t)):this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,z.q)(t,e),i={...i};try{if(!i.sha){if(null==t){let t=this.container.git.getBestRepository(e)?.path;if(!t)return;let r=await this.container.git.commits(t).getLog(void 0,{limit:1});if(null==r||(i.sha=(0,eA.$1)(r.commits.values())?.sha,null==i.sha))return}else if(null==i.sha){let r=e?.selection.active.line??0;if(r<0)return;try{let s=await m.nk.fromUri(t),o=await this.container.git.getBlameForLine(s,r,e?.document);if(null==o)return;i.sha=o.commit.sha}catch(e){B.Vy.error(e,"CopyShaToClipboardCommand",`getBlameForLine(${r})`),(0,R.qQ)("Unable to copy commit SHA");return}}}await n.env.clipboard.writeText(S.H.get("advanced.abbreviateShaOnCopy")?(0,C.pV)(i.sha):i.sha)}catch(e){B.Vy.error(e,"CopyShaToClipboardCommand"),(0,R.qQ)("Unable to copy commit SHA")}}};eE=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eT(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e$(t,i,o),o})([(0,k.G5)()],eE);var ex=Object.defineProperty,eO=Object.getOwnPropertyDescriptor;let eF=class extends W.Zr{constructor(e){super("gitlens.copyRelativePathToClipboard"),this.container=e}preExecute(e){return(0,ey.xT)(e)?this.execute(e.editor,e.node.commit.file.uri):this.execute(e.editor,e.uri)}async execute(e,t){t=(0,z.q)(t,e);let i="";if(null!=t){let r=this.container.git.getBestRepository(e)?.uri;null!=r&&(i=this.container.git.getRelativePath(t,r))}await n.env.clipboard.writeText(i)}};eF=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eO(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ex(t,i,o),o})([(0,k.G5)()],eF);var eB=__webpack_require__(5853),eL=Object.defineProperty,eU=Object.getOwnPropertyDescriptor;let eq=class extends W.Kt{constructor(e){super("gitlens.createPullRequestOnRemote"),this.container=e}async execute(e){let t;if(e?.repoPath!=null&&(t=this.container.git.getRepository(e.repoPath)),null==(t??=await (0,Z.t6)("Create Pull Request",void 0,void 0)))return;if(null==e){let i=await t.git.branches().getBranch();if(i?.upstream==null)return void n.window.showErrorMessage(`Unable to create a pull request for branch \`${i?.name}\` as it hasn't been published to a remote.`);e={base:void 0,compare:i.name,remote:(0,b.Zq)(i.upstream.name),repoPath:t.path}}let i=await t.git.remotes().getRemote(e.remote);if(i?.provider==null)return void n.window.showErrorMessage(`Unable to create a pull request for branch \`${e.compare}\` because it is not associated with a supported remote provider.`);let r=i.provider.id,s=await t.git.remotes().getRemotes({filter:e=>e.provider?.id===r,sort:!0}),o={type:eB.J.CreatePullRequest,repoPath:t.path,base:{branch:e.base,remote:void 0},head:{branch:e.compare,remote:{path:i.path,url:i.url,name:i.name}},details:e.describeWithAI?{describeWithAI:!0}:void 0};await (0,k.RS)("gitlens.openOnRemote",{resource:o,remotes:s})}};eq=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eU(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eL(t,i,o),o})([(0,k.G5)()],eq);var eN=__webpack_require__(9789),eM=Object.defineProperty,eW=Object.getOwnPropertyDescriptor;let eG=class extends W.Zr{constructor(e){super(["gitlens.diffDirectory","gitlens.diffDirectoryWithHead","gitlens.views.openDirectoryDiff","gitlens.views.openDirectoryDiffWithWorking"]),this.container=e}async preExecute(e,t){switch(e.command){case"gitlens.diffDirectoryWithHead":(t={...t}).ref1="HEAD",t.ref2=void 0;break;case"gitlens.views.openDirectoryDiff":"viewItem"===e.type&&e.node instanceof eN.ip&&(t={...t},[t.ref1,t.ref2]=await e.node.getDiffRefs());break;case"gitlens.views.openDirectoryDiffWithWorking":(0,ey.nX)(e)&&((t={...t}).ref1=e.node.ref.ref,t.ref2="")}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){t=(0,z.q)(t,e),i={...i};try{let r=(await (0,Z.X)(t,e,"Directory Compare Working Tree With"))?.path;if(!r)return;if(!i.ref1){let e=await (0,eg.NZ)(r,"Directory Compare Working Tree with","Choose a branch or tag to compare with",{allowRevisions:!0});if(null==e||(i.ref1=e.ref,null==i.ref1))return}(0,eP.nA)(r,i.ref1,i.ref2)}catch(e){B.Vy.error(e,"OpenDirectoryCompareCommand"),(0,R.qQ)("Unable to open directory compare")}}};eG=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eW(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eM(t,i,o),o})([(0,k.G5)()],eG);var eH=__webpack_require__(9336),eV=__webpack_require__(9207),ej=__webpack_require__(4808),ez=Object.defineProperty,eQ=Object.getOwnPropertyDescriptor;let eY=class extends W.Zr{constructor(e){super("gitlens.diffFolderWithRevision"),this.container=e}async execute(e,t,i){if(i={...i},null==(t=i?.uri??(0,z.q)(t,e)))return;try{(await n.workspace.fs.stat(t)).type!==n.FileType.Directory&&(t=n.Uri.joinPath(t,".."))}catch{}let r=await m.nk.fromUri(t);try{let i=(await (0,Z.X)(t,e,"Open Folder Changes with Revision"))?.path;if(!i)return;let s=this.container.git.commits(i),o=s.getLogForPath(r.fsPath).then(e=>e??(r.sha?s.getLogForPath(r.fsPath,r.sha):void 0)),n=this.container.git.getRelativePath(t,i),a=`Open Folder Changes with Revision${(0,ej.eV)(p.EO.Dot,2,2)}${n}${r.sha?` at ${(0,C.pV)(r.sha)}`:""}`,l=await (0,eH.X)(o,a,"Choose a commit to compare with",{picked:r.sha,showOtherReferences:[eV.Fj.fromCommand("Choose a Branch or Tag...","gitlens.diffFolderWithRevisionFrom")]});if(null==l)return;(0,eP.Kg)(this.container,t,{repoPath:i,lhs:l.ref,rhs:r.sha??""})}catch(e){B.Vy.error(e,"DiffFolderWithRevisionCommand"),(0,R.qQ)("Unable to open comparison")}}};eY=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ez(t,i,o),o})([(0,k.G5)()],eY);var eK=Object.defineProperty,eZ=Object.getOwnPropertyDescriptor;let eJ=class extends W.Zr{constructor(e){super("gitlens.diffFolderWithRevisionFrom"),this.container=e}async execute(e,t,i){let r=null==i;if(i={...i},null!=(t=i?.uri??(0,z.q)(t,e))){try{(await n.workspace.fs.stat(t)).type!==n.FileType.Directory&&(t=n.Uri.joinPath(t,".."))}catch{}try{let s=(await (0,Z.X)(t,e,"Open Folder Changes with Branch or Tag"))?.path;if(!s)return;let o=this.container.git.getRelativePath(t,s);if(null==i.rhs)if(r){let e=await m.nk.fromUri(t);i.rhs=e.sha??""}else{let e=await (0,eg.NZ)(s,`Open Folder Changes with Branch or Tag${(0,ej.eV)(p.EO.Dot,2,2)}${o}`,"Choose a reference (branch, tag, etc) to compare",{allowRevisions:!0,include:eg.m7.All,sort:{branches:{current:!0},tags:{}}});if(e?.ref==null)return;i.rhs=e.ref}if(!i.lhs){let e=await (0,eg.NZ)(s,`Open Folder Changes with Branch or Tag${(0,ej.eV)(p.EO.Dot,2,2)}${o}${i.rhs?` at ${(0,C.pV)(i.rhs)}`:""}`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0,include:""===i.rhs?eg.m7.All&~eg.m7.WorkingTree:eg.m7.All});if(e?.ref==null)return;i.lhs=e.ref,""!==i.rhs&&""===i.lhs&&(i.lhs=i.rhs,i.rhs="")}(0,eP.Kg)(this.container,t,{repoPath:s,lhs:i.lhs,rhs:i.rhs})}catch(e){B.Vy.error(e,"DiffFolderWithRevisionFromCommand"),(0,R.qQ)("Unable to open comparison")}}}};eJ=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?eZ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eK(t,i,o),o})([(0,k.G5)()],eJ);var eX=Object.defineProperty,e0=Object.getOwnPropertyDescriptor;let e1=class extends W.Zr{constructor(e){super("gitlens.diffLineWithPrevious"),this.container=e}preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,z.q)(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let r=i.commit?.getGitUri()??await m.nk.fromUri(t);try{let e=await this.container.git.diff(r.repoPath).getPreviousComparisonUrisForLine(r,i.line,r.sha);if(e?.previous==null)return void(0,R.pR)();await (0,k.RS)("gitlens.diffWith",{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:e.line,showOptions:i.showOptions})}catch(e){B.Vy.error(e,"DiffLineWithPreviousCommand",`getPreviousLineDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,R.qQ)("Unable to open compare")}}};e1=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e0(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&eX(t,i,o),o})([(0,k.G5)()],e1);var e2=__webpack_require__(6770),e4=Object.defineProperty,e5=Object.getOwnPropertyDescriptor;let e7=class extends W.Zr{constructor(e){super("gitlens.diffLineWithWorking"),this.container=e}preExecute(e,t){return"editorLine"===e.type&&(t={...t,line:e.line}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,s;if(null==(t=(0,z.q)(t,e)))return;let o=await m.nk.fromUri(t);if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.commit||i.commit.isUncommitted){let t=i.line;if(t<0)return;try{let n=await this.container.git.getBlameForLine(o,t,e?.document);if(null==n)return void(0,R.gD)("Unable to open compare");if(i.commit=n.commit,i.commit.isUncommitted){let e=await this.container.git.status(o.repoPath).getStatusForFile?.(o);e?.indexStatus!=null?(r=e2.id,s=this.container.git.getAbsoluteUri(e.originalPath||e.path,i.commit.repoPath)):(r=i.commit.unresolvedPreviousSha,s=i.commit.file.originalUri??i.commit.file.uri)}else r=i.commit.sha,s=i.commit.file.uri;i.line=n.line.line-1}catch(e){B.Vy.error(e,"DiffLineWithWorkingCommand",`getBlameForLine(${t})`),(0,R.qQ)("Unable to open compare");return}}else r=i.commit.sha,s=i.commit.file?.uri??o;let a=await i.commit.file?.getWorkingUri();if(null==a)return void n.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");await (0,k.RS)("gitlens.diffWith",{repoPath:i.commit.repoPath,lhs:{sha:r,uri:s},rhs:{sha:"",uri:a},line:i.line,showOptions:i.showOptions})}};e7=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e5(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e4(t,i,o),o})([(0,k.G5)()],e7),__webpack_require__(7563);var e8=__webpack_require__(4283),e6=Object.defineProperty,e3=Object.getOwnPropertyDescriptor;let e9=class extends W.Zr{constructor(e){super("gitlens.diffWithNext"),this.container=e}async execute(e,t,i){if(null==(t=(0,z.q)(t,e)))return;null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let r=!1;if(null==i.commit){let[e]=(0,e8.re)(t);if(null!=e){let i=(0,e8.hM)(e);null!=i.original&&(0,J.k)(t,i.original)&&(r=!0)}}let s=i.commit?.getGitUri()??await m.nk.fromUri(t);try{let e=await this.container.git.diff(s.repoPath).getNextComparisonUris(s,s.sha,+!!r);if(e?.next==null)return;await (0,k.RS)("gitlens.diffWith",{repoPath:e.current.repoPath,lhs:{sha:e.current.sha??"",uri:e.current.documentUri()},rhs:{sha:e.next.sha??"",uri:e.next.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){B.Vy.error(e,"DiffWithNextCommand",`getNextDiffUris(${s.repoPath}, ${s.fsPath}, ${s.sha})`),(0,R.qQ)("Unable to open compare")}}};e9=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?e3(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&e6(t,i,o),o})([(0,k.G5)()],e9);var te=Object.defineProperty,tt=Object.getOwnPropertyDescriptor;let ti=class extends W.Zr{constructor(e){super("gitlens.diffWithPrevious"),this.container=e}async execute(e,t,i){let r;if(null==(i={...i}).uri){if(null==(t=(0,z.q)(t,e)))return}else t=i.uri;if(null==i.line&&(i.line=e?.selection.active.line??0),i.commit?.file!=null){if(!i.commit.isUncommitted)return void await (0,k.RS)("gitlens.diffWith",{repoPath:i.commit.repoPath,lhs:{sha:`${i.commit.sha}^`,uri:i.commit.file.originalUri??i.commit.file.uri},rhs:{sha:"?"===i.commit.file.status?`${i.commit.sha}^3`:i.commit.sha||"",uri:i.commit.file.uri},line:i.line,showOptions:i.showOptions});r=i.commit?.getGitUri()}else r=await m.nk.fromUri(t);let s=!1,o=!1;if(null==i.commit){let[e]=(0,e8.re)(t);if(null!=e){o=e.isDirty;let i=(0,e8.hM)(e);null!=i.original&&(0,J.k)(t,i.modified)&&(s=!0)}}try{let e=await this.container.git.diff(r.repoPath).getPreviousComparisonUris(r,r.sha,+!!s,o);if(e?.previous==null){if(null==e)return void(0,R.pR)();if(null==e.current.sha)return void await (0,E.gF)(e.current,i.showOptions);if(!e.current.isUncommittedStaged)return void(0,R.pR)();e.previous=m.nk.fromFile(e.current.fileName,e.current.repoPath,e2.nB)}await (0,k.RS)("gitlens.diffWith",{repoPath:e.current.repoPath,lhs:{sha:e.previous.sha??"",uri:e.previous.documentUri()},rhs:{sha:e.current.sha??"",uri:e.current.documentUri()},line:i.line,showOptions:i.showOptions})}catch(e){B.Vy.error(e,"DiffWithPreviousCommand",`getPreviousDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,R.qQ)("Unable to open compare")}}};ti=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tt(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&te(t,i,o),o})([(0,k.G5)()],ti);var tr=__webpack_require__(4357),ts=__webpack_require__(745),to=Object.defineProperty,tn=Object.getOwnPropertyDescriptor;let ta=class extends W.Zr{constructor(e){super("gitlens.diffWithRevision"),this.container=e}async execute(e,t,i){if(null==(t=(0,z.q)(t,e)))return;let r=await m.nk.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{let e=this.container.git.commits(r.repoPath),s=e.getLogForPath(r.fsPath).then(t=>t??(r.sha?e.getLogForPath(r.fsPath,r.sha):void 0)),o=`Open Changes with Revision${(0,ej.eV)(p.EO.Dot,2,2)}`,n=`${o}${r.getFormattedFileName({suffix:r.sha?`:${(0,C.pV)(r.sha)}`:void 0,truncateTo:p.uR-o.length})}`,a=await (0,eH.X)(s,n,"Choose a commit to compare with",{empty:r.sha?void 0:{getState:async()=>{let e,t,i=[],s=await this.container.git.status(r.repoPath).getStatus();if(null!=s)for(let e of s.files){if("?"===e.workingTreeStatus||"!"===e.workingTreeStatus)continue;let[t,s]=(0,ts.Uf)(e.path,void 0,!0);i.push(new eV.Fj({label:t,description:s},void 0,"gitlens.diffWithRevision",[this.container.git.getAbsoluteUri(e.path,r.repoPath)]))}return i.length?(e=`${r.getFormattedFileName()} is likely untracked, choose a different file?`,t=`${n} (Untracked?)`):e="No commits found",i.push((0,tr.Du)(tr.WL.Cancel,void 0,{label:i.length?"Cancel":"OK"})),{items:i,placeholder:e,title:t}}},picked:r.sha,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,k.RS)("gitlens.diffWith",{repoPath:r.repoPath,lhs:{sha:t.item.ref,uri:r},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})}},showOtherReferences:[eV.Fj.fromCommand("Choose a Branch or Tag...","gitlens.diffWithRevisionFrom",[t]),eV.Fj.fromCommand("Choose a Stash...","gitlens.diffWithRevisionFrom",[t,{stash:!0}])]});if(null==a)return;await (0,k.RS)("gitlens.diffWith",{repoPath:r.repoPath,lhs:{sha:a.ref,uri:r},rhs:{sha:"",uri:r},line:i.line,showOptions:i.showOptions})}catch(e){B.Vy.error(e,"DiffWithRevisionCommand"),(0,R.qQ)("Unable to open compare")}}};ta=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&to(t,i,o),o})([(0,k.G5)()],ta);var tl=Object.defineProperty,tu=Object.getOwnPropertyDescriptor;let tc=class extends W.Zr{constructor(e){super("gitlens.diffWithRevisionFrom"),this.container=e}async execute(e,t,i){let r,s,o,n;if(null==(t=(0,z.q)(t,e)))return;let a=await m.nk.fromUri(t);if(!a.repoPath)return void(0,R.A5)("Unable to open file comparison");null==(i={...i}).line&&(i.line=e?.selection.active.line??0);let l=this.container.git.getRelativePath(a,a.repoPath);if(i?.stash){let e=`Open Changes with Stash${(0,ej.eV)(p.EO.Dot,2,2)}`,t=await (0,eH.F)(this.container.git.stash(a.repoPath)?.getStash(),`${e}${a.getFormattedFileName({truncateTo:p.uR-e.length})}`,"Choose a stash to compare with",{empty:`No stashes with '${a.getFormattedFileName()}' found`,filter:e=>e.fileset?.files.some(e=>e.path===l||e.originalPath===l)??!0});if(null==t)return;s=r=t.ref}else{let e=`Open Changes with Branch or Tag${(0,ej.eV)(p.EO.Dot,2,2)}`,t=await (0,eg.NZ)(a.repoPath,`${e}${a.getFormattedFileName({truncateTo:p.uR-e.length})}`,"Choose a reference (branch, tag, etc) to compare with",{allowRevisions:!0});if(null==t)return;r=t.ref,s=(0,ep.gC)(t)&&t.remote?`remotes/${r}`:r}if(null==r)return;let u=await this.container.git.diff(a.repoPath).getDiffStatus("HEAD",r,{filters:["R","C"]});if(null!=u){let e=u.find(e=>e.path===l);e?.originalPath!=null&&(o=this.container.git.getAbsoluteUri(e.originalPath,a.repoPath),n=`${(0,j.P8)(e.originalPath)} (${(0,C.pV)(r)})`)}await (0,k.RS)("gitlens.diffWith",{repoPath:a.repoPath,lhs:{sha:s,uri:o??a,title:n??`${(0,j.P8)(a.fsPath)} (${(0,C.pV)(r)})`},rhs:{sha:"",uri:a},line:i.line,showOptions:i.showOptions})}};tc=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tu(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tl(t,i,o),o})([(0,k.G5)()],tc);var th=__webpack_require__(8829),td=Object.defineProperty,tp=Object.getOwnPropertyDescriptor;let tg=class extends W.Zr{constructor(e){super("gitlens.diffWithWorking"),this.container=e}async execute(e,t,i){if(null==(i={...i}).uri){if(null==(t=(0,z.q)(t,e)))return}else t=i.uri;let r=await m.nk.fromUri(t);null==i.line&&(i.line=e?.selection.active.line??0);let s=!1,[o]=(0,e8.re)(t);if(null!=o){let e=(0,e8.hM)(o);null!=e.original&&(0,J.k)(t,e.modified)&&(s=!0)}if(s)try{let e=await this.container.git.diff(r.repoPath).getPreviousComparisonUris(r,r.sha);r=e?.previous??r}catch(e){B.Vy.error(e,"DiffWithWorkingCommand",`getPreviousDiffUris(${r.repoPath}, ${r.fsPath}, ${r.sha})`),(0,R.qQ)("Unable to open compare");return}if(null==r.sha)return void n.window.showInformationMessage("File matches the working tree");if(r.sha===e2.nB)return void n.window.showWarningMessage("Unable to open compare. File has been deleted from the working tree");if(r.isUncommittedStaged){let e=await this.container.git.status(r.repoPath).getStatusForFile?.(r);if(e?.indexStatus!=null)return void await (0,k.RS)("gitlens.diffWith",{repoPath:r.repoPath,lhs:{sha:e2.id,uri:r.documentUri()},rhs:{sha:"",uri:r.documentUri()},line:i.line,showOptions:i.showOptions})}t=r.toFileUri();let a=await this.container.git.getWorkingUri(r.repoPath,t);if(null==a){let e=await (0,th.G)(this.container,(0,ep.kA)("HEAD",r.repoPath),{ignoreFocusOut:!0,initialPath:r.relativePath,title:`Open File \u2022 Unable to open '${r.relativePath}'`,placeholder:"Choose another working file to open",keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,E.gF)(t,{...i.showOptions,preserveFocus:!0,preview:!0})}}});if(null==e)return;a=e}await (0,k.RS)("gitlens.diffWith",{repoPath:r.repoPath,lhs:{sha:r.sha,uri:t,title:i?.lhsTitle},rhs:{sha:"",uri:a},line:i.line,showOptions:i.showOptions})}};tg=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tp(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&td(t,i,o),o})([(0,k.G5)()],tg);var tm=((t=tm||{})[t.Force=0]="Force",t[t.ForceWithLease=1]="ForceWithLease",t[t.ForceWithLeaseIfIncludes=2]="ForceWithLeaseIfIncludes",t),tf=((i=tf||{})[i.Head=0]="Head",i[i.RemoteHead=1]="RemoteHead",i[i.Tag=2]="Tag",i),tw=((r=tw||{})[r.INDEX_MODIFIED=0]="INDEX_MODIFIED",r[r.INDEX_ADDED=1]="INDEX_ADDED",r[r.INDEX_DELETED=2]="INDEX_DELETED",r[r.INDEX_RENAMED=3]="INDEX_RENAMED",r[r.INDEX_COPIED=4]="INDEX_COPIED",r[r.MODIFIED=5]="MODIFIED",r[r.DELETED=6]="DELETED",r[r.UNTRACKED=7]="UNTRACKED",r[r.IGNORED=8]="IGNORED",r[r.INTENT_TO_ADD=9]="INTENT_TO_ADD",r[r.INTENT_TO_RENAME=10]="INTENT_TO_RENAME",r[r.TYPE_CHANGED=11]="TYPE_CHANGED",r[r.ADDED_BY_US=12]="ADDED_BY_US",r[r.ADDED_BY_THEM=13]="ADDED_BY_THEM",r[r.DELETED_BY_US=14]="DELETED_BY_US",r[r.DELETED_BY_THEM=15]="DELETED_BY_THEM",r[r.BOTH_ADDED=16]="BOTH_ADDED",r[r.BOTH_DELETED=17]="BOTH_DELETED",r[r.BOTH_MODIFIED=18]="BOTH_MODIFIED",r),tv=((s=tv||{}).BadConfigFile="BadConfigFile",s.AuthenticationFailed="AuthenticationFailed",s.NoUserNameConfigured="NoUserNameConfigured",s.NoUserEmailConfigured="NoUserEmailConfigured",s.NoRemoteRepositorySpecified="NoRemoteRepositorySpecified",s.NotAGitRepository="NotAGitRepository",s.NotAtRepositoryRoot="NotAtRepositoryRoot",s.Conflict="Conflict",s.StashConflict="StashConflict",s.UnmergedChanges="UnmergedChanges",s.PushRejected="PushRejected",s.ForcePushWithLeaseRejected="ForcePushWithLeaseRejected",s.ForcePushWithLeaseIfIncludesRejected="ForcePushWithLeaseIfIncludesRejected",s.RemoteConnectionError="RemoteConnectionError",s.DirtyWorkTree="DirtyWorkTree",s.CantOpenResource="CantOpenResource",s.GitNotFound="GitNotFound",s.CantCreatePipe="CantCreatePipe",s.PermissionDenied="PermissionDenied",s.CantAccessRemote="CantAccessRemote",s.RepositoryNotFound="RepositoryNotFound",s.RepositoryIsLocked="RepositoryIsLocked",s.BranchNotFullyMerged="BranchNotFullyMerged",s.NoRemoteReference="NoRemoteReference",s.InvalidBranchName="InvalidBranchName",s.BranchAlreadyExists="BranchAlreadyExists",s.NoLocalChanges="NoLocalChanges",s.NoStashFound="NoStashFound",s.LocalChangesOverwritten="LocalChangesOverwritten",s.NoUpstreamBranch="NoUpstreamBranch",s.IsInSubmodule="IsInSubmodule",s.WrongCase="WrongCase",s.CantLockRef="CantLockRef",s.CantRebaseMultipleBranches="CantRebaseMultipleBranches",s.PatchDoesNotApply="PatchDoesNotApply",s.NoPathFound="NoPathFound",s.UnknownPath="UnknownPath",s.EmptyCommitMessage="EmptyCommitMessage",s.BranchFastForwardRejected="BranchFastForwardRejected",s.BranchNotYetBorn="BranchNotYetBorn",s.TagConflict="TagConflict",s),ty=((o=ty||{})[o.Merge=0]="Merge",o[o.Index=1]="Index",o[o.WorkingTree=2]="WorkingTree",o),tb=__webpack_require__(2812),tC=Object.defineProperty,tR=Object.getOwnPropertyDescriptor;let tk=class extends W.Kt{constructor(e){super(["gitlens.externalDiff","gitlens.externalDiffAll"]),this.container=e}async preExecute(e,t){if(t={...t},(0,ey.xT)(e)){let i=await e.node.commit.getPreviousSha(),r=(0,C._k)(i)?"":i,s=e.node.commit.isUncommitted?"":e.node.commit.sha;return t.files=[{uri:m.nk.fromFile(e.node.file,e.node.file.repoPath??e.node.repoPath),staged:e.node.commit.isUncommittedStaged||null!=e.node.file.indexStatus,ref1:r,ref2:s}],this.execute(t)}if((0,ey.cD)(e))return t.files=[{uri:m.nk.fromFile(e.node.file,e.node.file.repoPath??e.node.repoPath),staged:null!=e.node.file.indexStatus,ref1:e.node.ref1,ref2:e.node.ref2}],this.execute(t);if(null==t.files&&("scm-states"===e.type?t.files=e.scmResourceStates.map(e=>({uri:e.resourceUri,staged:e.resourceGroupType===ty.Index})):"scm-groups"===e.type&&(t.files=(0,tb.x1)(e.scmResourceGroups[0].resourceStates,e=>this.isModified(e)?{uri:e.resourceUri,staged:e.resourceGroupType===ty.Index}:void 0))),"gitlens.externalDiffAll"===e.command&&null==t.files){let e=await (0,Z.t6)("Open All Changes (difftool)");if(null==e)return;let i=await this.container.git.status(e.uri).getStatus();if(null==i)return void n.window.showInformationMessage("The repository doesn't have any changes");for(let e of(t.files=[],i.files))"M"===e.indexStatus&&t.files.push({uri:e.uri,staged:!0}),"M"===e.workingTreeStatus&&t.files.push({uri:e.uri,staged:!1})}return this.execute(t)}isModified(e){let t=e.type;return t===tw.BOTH_MODIFIED||t===tw.INDEX_MODIFIED||t===tw.MODIFIED}async execute(e){e={...e};try{let t;if(null==e.files){let i=n.window.activeTextEditor;if(null==i||!(t=this.container.git.getBestRepository(i)?.path))return;let r=i.document.uri,s=await this.container.git.status(t).getStatusForFile?.(r);if(null==s)return void n.window.showInformationMessage("The current file doesn't have any changes");e.files=[],"M"===s.indexStatus&&e.files.push({uri:s.uri,staged:!0}),"M"===s.workingTreeStatus&&e.files.push({uri:s.uri,staged:!1})}else if(!(t=(await this.container.git.getOrOpenRepository(e.files[0].uri))?.path))return;let i=S.H.get("advanced.externalDiffTool")||await this.container.git.diff(t).getDiffTool?.();if(!i){let e="View Git Docs";await n.window.showWarningMessage("Unable to open changes because no Git diff tool is configured",e)===e&&n.env.openExternal(n.Uri.parse("https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool"));return}for(let r of e.files)this.container.git.diff(t).openDiffTool?.(r.uri,{ref1:r.ref1,ref2:r.ref2,staged:r.staged,tool:i})}catch(e){B.Vy.error(e,"ExternalDiffCommand"),(0,R.qQ)("Unable to open changes in diff tool")}}};tk=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tR(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tC(t,i,o),o})([(0,k.G5)()],tk),__webpack_require__(3566);var tS=Object.defineProperty,tP=Object.getOwnPropertyDescriptor;let tA=class extends W.Zr{constructor(e){super(["gitlens.ai.generateCommitMessage","gitlens.scm.ai.generateCommitMessage"],["gitlens.generateCommitMessage","gitlens.scm.generateCommitMessage"]),this.container=e}preExecute(e,t){let i=t?.source;return null==i&&("gitlens.scm.ai.generateCommitMessage"===e.command||"gitlens.scm.generateCommitMessage"===e.command)&&(i="scm-input","scm"===e.type&&null!=e.scm.rootUri&&(t={...t,repoPath:e.scm.rootUri})),this.execute(e.editor,e.uri,{...t,source:i})}async execute(e,t,i){let r;if(null!=(i={...i}).repoPath)r=this.container.git.getRepository(i.repoPath);else{let i=null!=(t=(0,z.q)(t,e))?await m.nk.fromUri(t):void 0;r=await (0,Z.X)(i,e,"Generate Commit Message")}if(null==r)return;let s=await this.container.git.getScmRepository(r.path);if(null!=s)try{let e=s.inputBox.value,t=await this.container.ai.generateCommitMessage(r,{source:i?.source??"commandPalette"},{context:e,progress:{location:n.ProgressLocation.Notification,title:"Generating commit message..."}});if(null==t)return;(0,k.S4)("workbench.view.scm"),s.inputBox.value=`${e?`${e}

`:""}${t.parsed.summary}

${t.parsed.body}`}catch(e){if(B.Vy.error(e,"GenerateCommitMessageCommand"),e instanceof Error&&e.message.startsWith("No changes"))return void n.window.showInformationMessage("No changes to generate a commit message from.");(0,R.qQ)(e.message)}}};tA=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tP(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tS(t,i,o),o})([(0,k.G5)()],tA);var tI=__webpack_require__(4931),tD=__webpack_require__(3130),t_=__webpack_require__(4119),t$=__webpack_require__(9271),tT=__webpack_require__(7864),tE=Object.defineProperty,tx=Object.getOwnPropertyDescriptor;let tO=class extends W.Kt{constructor(e){super("gitlens.ghpr.views.openOrCreateWorktree"),this.container=e}async execute(...e){let t,i,r,s,o,[a]=e,{base:{repositoryCloneUrl:{url:l,owner:u,repositoryName:c}},githubRepository:{rootUri:h},head:{repositoryCloneUrl:{url:d,owner:p},ref:g},item:{number:m}}="pullRequestModel"in a?a.pullRequestModel:a,f=this.container.git.getRepository(h);if(null==f)return void n.window.showWarningMessage(`Unable to find repository(${h.toString()}) for PR #${m}`);if(null==(f=await f.getCommonRepository()))return void n.window.showWarningMessage(`Unable to find main repository(${h.toString()}) for PR #${m}`);let w=d.toString(),[,v,y]=(0,tD.BX)(w),b=(await f.git.remotes().getRemotes({filter:e=>e.matches(v,y)}))[0];null!=b?(r=b.name,await this.container.git.fetch(f.path,{remote:b.name})):(r=p,i={name:p,url:w});let C=`${r}/${g}`,R=`pr/${l.toString()===d.toString()?g:C}`,k=`remotes/${C}`,S=await (0,t$.vV)(f,R,C);if(null!=S)return void(0,tI.ho)(S,{openOnly:!0});let P=await f.git.branches().getLocalBranchByUpstream?.(C);null!=P?s=(0,t_.iw)(P):(s=(0,ep.kA)(k,f.path,{refType:"branch",name:k,remote:!0}),o=R),await (0,tT.Ar)();try{let e=await (0,tI.vt)(f,void 0,s,{addRemote:i,createBranch:o});if(null==e)return;f.git.config().setConfig?.(`branch.${R}.github-pr-owner-number`,`${u}#${c}#${m}`)}catch(e){B.Vy.error(e,"CreateWorktreeCommand","Unable to create worktree"),n.window.showErrorMessage(`Unable to create worktree for ${p}:${g}`)}}};tO=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tx(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tE(t,i,o),o})([(0,k.G5)()],tO);var tF=__webpack_require__(3911),tB=__webpack_require__(3296),tL=__webpack_require__(564),tU=Object.defineProperty,tq=Object.getOwnPropertyDescriptor;let tN=/\$\(.+?\)|\s/g,tM=Symbol("ShowLoading");let QuickWizardCommandBase=class QuickWizardCommandBase extends W.Kt{constructor(e,t){super(t),this.container=e}startedWith="menu";async execute(e){let t,i,r=new tL.d(this.container,e),s=e?.command!=null?r.find(e.command):void 0;for(this.startedWith=null!=s?"command":"menu",i=null==s?r:await this.showLoadingIfNeeded(s,this.getCommandStep(s,r)),i?.ignoreFocusOut===!0&&(i.ignoreFocusOut=void 0);null!=i;){if(i===r&&null!=s){i=await this.getCommandStep(s,r);continue}if(t&&null==i.ignoreFocusOut&&(i.ignoreFocusOut=!0),(0,tB.xb)(i)){i=await this.showPickStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}if((0,tB.ud)(i)){i=await this.showInputStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}if((0,tB.U5)(i)){i=await this.showCustomStep(i,r),i?.ignoreFocusOut===!0&&(t=!0);continue}break}e?.completion?.fulfill()}async showLoadingIfNeeded(e,t){let i,r=await Promise.race([t,new Promise(e=>setTimeout(e,250,tM))]);if(r!==tM)return r;let s=n.window.createQuickPick();s.ignoreFocusOut=!1;let o=[];try{return await new Promise(async r=>{o.push(s.onDidHide(()=>r(i))),s.title=e.title,s.placeholder="Loading...",s.busy=!0,s.enabled=!1,s.show(),i=await t,s.hide()})}finally{s.dispose(),o.forEach(e=>void e.dispose())}}getButtons(e,t){let i=[];if(null!=e){if(null!=e.buttons)return i.push(...e.buttons),i;!0!==e.disallowBack&&i.push(n.QuickInputButtons.Back),null!=e.additionalButtons&&i.push(...e.additionalButtons)}if(t?.canConfirm)if(t.canSkipConfirm){let r=new em.UO(t.confirm(),e?.isConfirmationStep??!1,async()=>{if(t?.skipConfirmKey==null)return;let e=S.H.get("gitCommands.skipConfirmations")??[],i=e.indexOf(t.skipConfirmKey);-1!==i?e.splice(i,1):e.push(t.skipConfirmKey),await S.H.updateEffective("gitCommands.skipConfirmations",e)});i.push(r)}else e?.isConfirmationStep||i.push(em.V3);return i}async getCommandStep(e,t){t.setCommand(e,"command"),null!=this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories;let i=await e.next();if(!i.done)return i.value}async nextStep(e,t,i){null!=i&&(i.busy=!0);let r=await e.next(t);if(!r.done)return null!=i&&(i.value=""),r.value}async showCustomStep(e,t){let i=await e.show(e);if(i!==tB.Lt)if(!(0,tr.qT)(i))return this.nextStep(t.command,i);else switch(i){case tr.WL.Back:return await t?.command?.previous()??t;case tr.WL.Noop:case tr.WL.Reload:return t.command?.retry();case tr.WL.Cancel:default:return}}async showInputStep(e,t){let i=n.window.createInputBox();i.ignoreFocusOut=!S.H.get("gitCommands.closeOnFocusOut")||(e.ignoreFocusOut??!1);let r=[];try{return await new Promise(async s=>{let o=async()=>{!0!==e.disallowBack&&(i.value="",null!=t.command&&(i.busy=!0,s(await t.command.previous()??t)))},a={};if(null!=e.onDidPressKey&&null!=e.keys&&0!==e.keys.length)for(let t of e.keys)a[t]={onDidPressKey:t=>e.onDidPressKey(i,t)};let l=this.container.keyboard.createScope(a);if(l.start(),null!=e.value&&l.pause(["left","ctrl+left","right","ctrl+right"]),r.push(l,i.onDidHide(()=>{e.frozen||s(void 0)}),i.onDidTriggerButton(async r=>{if(r===n.QuickInputButtons.Back)return void o();if(r!==em.V3){if(r instanceof em.K0&&null!=r.onDidClick){let o=r.onDidClick(i);return(i.buttons=this.getButtons(e,t.command),await o===!0)?void s(t.command?.retry()):void((0,tT.yL)(o)&&(i.buttons=this.getButtons(e,t.command)))}if(null!=e.onDidClickButton){let o=e.onDidClickButton(i,r);i.buttons=this.getButtons(e,t.command),await o===!0&&s(t.command?.retry())}}}),i.onDidChangeValue(async t=>{if(i.ignoreFocusOut||(i.ignoreFocusOut=!0),null!=l&&(0!==t.length?l.pause(["left","ctrl+left","right","ctrl+right"]):l.resume()),null==e.validate)return;let[,r]=await e.validate(t);i.validationMessage=r}),i.onDidAccept(async()=>{s(await this.nextStep(t.command,i.value,i))})),i.buttons=this.getButtons(e,t.command),i.title=e.title,i.placeholder=e.placeholder,i.prompt=e.prompt,null!=e.value&&(i.value=e.value,null!=e.validate)){let[t,r]=await e.validate(e.value);t||null==r||(i.validationMessage={severity:n.InputBoxValidationSeverity.Error,message:r})}if(i.show(),null!=e.value)try{i._onDidChangeValueEmitter?.fire(i.value)}catch{}e.onDidActivate?.(i)})}finally{i.dispose(),r.forEach(e=>void e.dispose())}}async showPickStep(e,t){let i=n.window.createQuickPick();i.ignoreFocusOut=!S.H.get("gitCommands.closeOnFocusOut")||(e.ignoreFocusOut??!1);let r=[];try{return await new Promise(async s=>{let o;async function a(){!0!==e.disallowBack&&(i.value="",null!=t.command&&(i.busy=!0,s(await t.command.previous()??t)))}async function l(){if(null!=e.onDidLoadMore){i.busy=!0;try{let t=await e.onDidLoadMore?.(i),r=-1;if(0!==i.activeItems.length){let e=i.activeItems[0];r=i.items.indexOf(e),(0,tr.hr)(e)&&r--}i.items=e.items=t,r&&(i.activeItems=[i.items[r]])}finally{i.busy=!1}}}let u={left:{onDidPressKey:a}};if(null!=e.onDidPressKey&&e.keys?.length)for(let t of e.keys)u[t]={onDidPressKey:t=>{if(!i.activeItems.length)return;let r=i.activeItems[0];if(!(0,tr.hr)(r))return e.onDidPressKey(i,t,r)}};let h=this.container.keyboard.createScope(u);h.start(),null!=e.value&&h.pause(["left","ctrl+left","right","ctrl+right"]);let d=!0,p=!1;r.push(h,i.onDidHide(()=>{e.frozen||s(void 0)}),i.onDidTriggerItemButton(async r=>{await e.onDidClickItemButton?.(i,r.button,r.item)===!0&&s(await this.nextStep(t.command,[r.item],i))}),i.onDidTriggerButton(async r=>{if(r===n.QuickInputButtons.Back)return void a();if(r!==em.V3){if(r===em.TR)return void l();if(r instanceof em.K0&&null!=r.onDidClick){let o;if(null==t.command&&0!==i.activeItems.length){let e=i.activeItems[0];(0,tB.XD)(e)&&(o=e)}let n=r.onDidClick(i);return(i.buttons=this.getButtons(o?.value&&!(0,tB.U5)(o.value)?o.value:e,o??t.command),await n===!0)?void s(t.command?.retry()):void((0,tT.yL)(n)&&(i.buttons=this.getButtons(o?.value&&!(0,tB.U5)(o.value)?o.value:e,o??t.command)))}if(null!=e.onDidClickButton){let o=e.onDidClickButton(i,r);i.buttons=this.getButtons(e,t.command);let n=await o;!0===n?s(t.command?.retry()):!1!==n&&null!=n&&s(n.value)}}}),i.onDidChangeValue(async r=>{if(i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),null!=h&&(0!==r.length?h.pause(["left","ctrl+left","right","ctrl+right"]):h.resume()),!(null!=e.onDidChangeValue&&await e.onDidChangeValue(i))){if(!p){if(i.canSelectMany&&" "===r){i.value="",i.selectedItems=i.selectedItems.length===i.items.length?[]:i.items;return}if(r.endsWith(" ")){let r;if(i.canSelectMany&&0!==i.selectedItems.length)return;if(null==t.command){let e=t.find(i.value.trim(),!0);if(null==e)return;t.setCommand(e,this.startedWith)}else{let t=i.value.trim().toLowerCase(),s=(await e.items).find(e=>e.label.replace(tN,"").toLowerCase()===t);if(null==s)return;r=[s]}s(await this.nextStep(t.command,r,i));return}}if(!i.canSelectMany&&null!=t.command&&0!==r.trim().length&&(p||0===i.activeItems.length)){if(null==e.onValidateValue)return;p=await e.onValidateValue(i,r.trim(),await e.items)}else p=!1;p||(e.items=await e.items,i.items.length!==e.items.length&&(i.items=e.items))}}),i.onDidChangeActive(()=>{if(d||i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),d&&(d=!1),null!=t.command||0===i.activeItems.length)return;let r=i.activeItems[0];(0,tB.XD)(r)&&(i.buttons=this.getButtons(void 0,r))}),i.onDidChangeSelection(t=>{i.canSelectMany&&(i.ignoreFocusOut||(i.ignoreFocusOut=!0,e.ignoreFocusOut=!0),e.onDidChangeSelection?.(i,t))}),i.onDidAccept(async()=>{let r=i.selectedItems;if(0===r.length){if(!i.canSelectMany||0===i.activeItems.length){let r=i.value.trim();if(0===r.length&&!e.allowEmpty)return;if(null==e.onDidAccept){e.allowEmpty&&s(await this.nextStep(t.command,[],i));return}i.busy=!0,await e.onDidAccept(i)&&s(await this.nextStep(t.command,r,i)),i.busy=!1;return}r=i.activeItems}if(1===r.length){let[i]=r;if((0,tr.hr)(i))switch(await i.onDidSelect?.(),i.directive){case tr.WL.Cancel:s(void 0);return;case tr.WL.Back:a();return;case tr.WL.LoadMore:l();return;case tr.WL.Noop:return;case tr.WL.Reload:s(await t.command?.retry());return;case tr.WL.SignIn:{let i=await c.m.instance.subscription.loginOrSignUp(!1,{source:"quick-wizard",detail:{action:t.command?.key,"step.title":e.title}});s(i?await t.command?.retry():void 0);return}case tr.WL.StartPreview:await c.m.instance.subscription.startPreviewTrial({source:"quick-wizard",detail:{action:t.command?.key,"step.title":e.title}}),s(await t.command?.retry());return;case tr.WL.RequiresVerification:{let i=await c.m.instance.subscription.resendVerification({source:"quick-wizard",detail:{action:t.command?.key,"step.title":e.title}});s(i?await t.command?.retry():void 0);return}case tr.WL.StartProTrial:{let i=await c.m.instance.subscription.loginOrSignUp(!0,{source:"quick-wizard",detail:{action:t.command?.key,"step.title":e.title}});s(i?await t.command?.retry():void 0);return}case tr.WL.RequiresPaidSubscription:c.m.instance.subscription.upgrade(tF.qn.Pro,{source:"quick-wizard",detail:{action:t.command?.key,"step.title":e.title}}),s(void 0);return}}if(null==t.command){let[e]=r;if(!(0,tB.XD)(e))return;t.setCommand(e,this.startedWith)}if(!i.canSelectMany&&null!=e.onDidAccept){i.busy=!0;let t=await e.onDidAccept(i);if(i.busy=!1,!t)return}s(await this.nextStep(t.command,r,i))})),i.title=e.title,i.matchOnDescription=!!e.matchOnDescription,i.matchOnDetail=!!e.matchOnDetail;let g=e.selectValueWhenShown??!0,m=!1;if((0,tT.yL)(e.items)?(i.placeholder="Loading...",i.busy=!0,null!=e.value&&g&&(i.value=e.value),i.show(),m=!0,o=await e.items):o=e.items,i.canSelectMany=!!e.multiselect&&o.filter(e=>!(0,tr.hr)(e)).length>1,i.placeholder="function"==typeof e.placeholder?e.placeholder(o.length):e.placeholder,i.items=o,i.busy=!1,i.canSelectMany?i.selectedItems=e.selectedItems??i.items.filter(e=>e.picked):i.activeItems=e.selectedItems??i.items.filter(e=>e.picked),null!=t.command&&e===t&&t.setCommand(void 0,"menu"),i.buttons=this.getButtons(e,t.command),m||(null!=e.value&&g&&(i.value=e.value),i.show()),null==e.value||g||(i.value=e.value),null!=e.value&&g)try{i._onDidChangeValueEmitter?.fire(i.value)}catch{}e.onDidActivate?.(i)})}finally{i.dispose(),r.forEach(e=>void e.dispose())}}};((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tU(t,i,o)})([(0,A.Rm)({args:!1,scoped:!0,singleLine:!0,timed:!1})],QuickWizardCommandBase.prototype,"execute",1);var tW=Object.defineProperty,tG=Object.getOwnPropertyDescriptor;let tH=class extends QuickWizardCommandBase{constructor(e){super(e,["gitlens.gitCommands","gitlens.gitCommands.branch","gitlens.gitCommands.branch.create","gitlens.gitCommands.branch.delete","gitlens.gitCommands.branch.prune","gitlens.gitCommands.branch.rename","gitlens.gitCommands.checkout","gitlens.gitCommands.cherryPick","gitlens.gitCommands.history","gitlens.gitCommands.merge","gitlens.gitCommands.rebase","gitlens.gitCommands.remote","gitlens.gitCommands.remote.add","gitlens.gitCommands.remote.prune","gitlens.gitCommands.remote.remove","gitlens.gitCommands.reset","gitlens.gitCommands.revert","gitlens.gitCommands.show","gitlens.gitCommands.stash","gitlens.gitCommands.stash.drop","gitlens.gitCommands.stash.list","gitlens.gitCommands.stash.pop","gitlens.gitCommands.stash.push","gitlens.gitCommands.stash.rename","gitlens.gitCommands.status","gitlens.gitCommands.switch","gitlens.gitCommands.tag","gitlens.gitCommands.tag.create","gitlens.gitCommands.tag.delete","gitlens.gitCommands.worktree","gitlens.gitCommands.worktree.create","gitlens.gitCommands.worktree.delete","gitlens.gitCommands.worktree.open","gitlens.copyWorkingChangesToWorktree"])}preExecute(e,t){switch(e.command){case"gitlens.gitCommands.branch":return this.execute({command:"branch",...t});case"gitlens.gitCommands.branch.create":return this.execute({command:"branch",state:{subcommand:"create"}});case"gitlens.gitCommands.branch.delete":return this.execute({command:"branch",state:{subcommand:"delete"}});case"gitlens.gitCommands.branch.prune":return this.execute({command:"branch",state:{subcommand:"prune"}});case"gitlens.gitCommands.branch.rename":return this.execute({command:"branch",state:{subcommand:"rename"}});case"gitlens.gitCommands.cherryPick":return this.execute({command:"cherry-pick"});case"gitlens.gitCommands.history":return this.execute({command:"log"});case"gitlens.gitCommands.merge":return this.execute({command:"merge"});case"gitlens.gitCommands.rebase":return this.execute({command:"rebase"});case"gitlens.gitCommands.remote":return this.execute({command:"remote"});case"gitlens.gitCommands.remote.add":return this.execute({command:"remote",state:{subcommand:"add"}});case"gitlens.gitCommands.remote.prune":return this.execute({command:"remote",state:{subcommand:"prune"}});case"gitlens.gitCommands.remote.remove":return this.execute({command:"remote",state:{subcommand:"remove"}});case"gitlens.gitCommands.reset":return this.execute({command:"reset"});case"gitlens.gitCommands.revert":return this.execute({command:"revert"});case"gitlens.gitCommands.show":return this.execute({command:"show"});case"gitlens.gitCommands.stash":return this.execute({command:"stash"});case"gitlens.gitCommands.stash.drop":return this.execute({command:"stash",state:{subcommand:"drop"}});case"gitlens.gitCommands.stash.list":return this.execute({command:"stash",state:{subcommand:"list"}});case"gitlens.gitCommands.stash.pop":return this.execute({command:"stash",state:{subcommand:"pop"}});case"gitlens.gitCommands.stash.push":return this.execute({command:"stash",state:{subcommand:"push"}});case"gitlens.gitCommands.stash.rename":return this.execute({command:"stash",state:{subcommand:"rename"}});case"gitlens.gitCommands.status":return this.execute({command:"status"});case"gitlens.gitCommands.switch":case"gitlens.gitCommands.checkout":return this.execute({command:"switch"});case"gitlens.gitCommands.tag":return this.execute({command:"tag"});case"gitlens.gitCommands.tag.create":return this.execute({command:"tag",state:{subcommand:"create"}});case"gitlens.gitCommands.tag.delete":return this.execute({command:"tag",state:{subcommand:"delete"}});case"gitlens.gitCommands.worktree":return this.execute({command:"worktree"});case"gitlens.gitCommands.worktree.create":return this.execute({command:"worktree",state:{subcommand:"create"}});case"gitlens.gitCommands.worktree.delete":return this.execute({command:"worktree",state:{subcommand:"delete"}});case"gitlens.gitCommands.worktree.open":return this.execute({command:"worktree",state:{subcommand:"open"}});case"gitlens.copyWorkingChangesToWorktree":return this.execute({command:"worktree",state:{subcommand:"copy-changes",changes:{type:"working-tree"}}});default:return this.execute(t)}}};tH=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tG(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tW(t,i,o),o})([(0,k.G5)()],tH);var tV=__webpack_require__(5231),tj=Object.defineProperty,tz=Object.getOwnPropertyDescriptor;let tQ=class extends W.Kt{constructor(e){super("gitlens.inviteToLiveShare"),this.container=e}static createMarkdownCommandLink(e){return(0,tV.J)("gitlens.inviteToLiveShare",void 0===e||"string"==typeof e?{email:e}:e)}preExecute(e,t){return(0,ey.BA)(e)&&((t={...t}).email=e.node.contributor.email),this.execute(t)}async execute(e){if(e?.email){let t=await this.container.vsls.getContact(e.email);if(null!=t)return t.invite()}return this.container.vsls.startSession()}};tQ=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?tz(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tj(t,i,o),o})([(0,k.G5)()],tQ),__webpack_require__(6882);var tY=Object.defineProperty,tK=Object.getOwnPropertyDescriptor,tZ=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?tK(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&tY(t,i,o),o};let tJ=class extends W.Kt{constructor(e){super("gitlens.enableDebugLogging"),this.container=e}async execute(){await S.H.updateEffective("outputLevel","debug")}};tJ=tZ([(0,k.G5)()],tJ);let tX=class extends W.Kt{constructor(e){super("gitlens.disableDebugLogging"),this.container=e}async execute(){await S.H.updateEffective("outputLevel","error")}};tX=tZ([(0,k.G5)()],tX);var t0=Object.defineProperty,t1=Object.getOwnPropertyDescriptor;let t2=class extends W.Zr{constructor(e){super("gitlens.openAssociatedPullRequestOnRemote"),this.container=e}async execute(e,t){let i,r=null!=(t=(0,z.q)(t,e))?await m.nk.fromUri(t):void 0;if(null!=e&&null!=r){let t=e.selection.active.line;if(t<0)return;try{let e=await this.container.git.getBlameForLine(r,t);if(null==e)return;i={clipboard:!1,ref:e.commit.sha,repoPath:e.commit.repoPath}}catch(e){B.Vy.error(e,"OpenAssociatedPullRequestOnRemoteCommand",`getBlameForLine(${t})`);return}}else try{let e=await (0,Z.t6)("Open Associated Pull Request",void 0,void 0,{filter:async e=>await this.container.git.remotes(e.uri).getBestRemoteWithIntegration()!=null});if(null==e)return;let t=await e?.git.branches().getBranch(),r=await t?.getAssociatedPullRequest({expiryOverride:!0});i=null!=r?{clipboard:!1,pr:{url:r.url}}:{clipboard:!1,ref:t?.name??"HEAD",repoPath:e.path}}catch(e){B.Vy.error(e,"OpenAssociatedPullRequestOnRemoteCommand","No editor opened");return}await (0,k.RS)("gitlens.openPullRequestOnRemote",i)}};t2=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?t1(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t0(t,i,o),o})([(0,k.G5)()],t2);var t4=Object.defineProperty,t5=Object.getOwnPropertyDescriptor;let t7=class extends W.Zr{constructor(e){super(["gitlens.openBranchesOnRemote","gitlens.copyRemoteBranchesUrl"],["gitlens.openBranchesInRemote"]),this.container=e}preExecute(e,t){return(0,ey.qv)(e)&&(t={...t,remote:e.node.remote.name}),"gitlens.copyRemoteBranchesUrl"===e.command&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,z.q)(t,e))?await m.nk.fromUri(t):void 0,s=(await (0,Z.X)(r,e,i?.clipboard?"Copy Remote Branches URL":"Open Branches on Remote"))?.path;if(s)try{await (0,k.RS)("gitlens.openOnRemote",{resource:{type:eB.J.Branches},repoPath:s,remote:i?.remote,clipboard:i?.clipboard})}catch(e){B.Vy.error(e,"OpenBranchesOnRemoteCommand"),(0,R.qQ)("Unable to open branches on remote provider")}}};t7=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?t5(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t4(t,i,o),o})([(0,k.G5)()],t7);var t8=Object.defineProperty,t6=Object.getOwnPropertyDescriptor;let t3=class extends W.Zr{constructor(e){super(["gitlens.openBranchOnRemote","gitlens.copyRemoteBranchUrl"],["gitlens.openBranchInRemote"]),this.container=e}preExecute(e,t){return(0,ey.K0)(e)&&(t={...t,branch:e.node.branch.name,remote:e.node.branch.getRemoteName()}),"gitlens.copyRemoteBranchUrl"===e.command&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,z.q)(t,e))?await m.nk.fromUri(t):void 0,s=(await (0,Z.X)(r,e,i?.clipboard?"Copy Remote Branch URL":"Open Branch On Remote"))?.path;if(s){i={...i};try{if(null==i.branch){let e=await (0,eg.NZ)(s,i.clipboard?"Copy Remote Branch URL":"Open Branch On Remote",i.clipboard?"Choose a branch to copy the URL from":"Choose a branch to open",{autoPick:!0,filter:{branches:e=>null!=e.upstream},include:eg.m7.Branches,sort:{branches:{current:!0},tags:{}}});if(null==e||e instanceof eV.Fj)return;if("branch"===e.refType)if(e.remote||null!=e.upstream&&!e.upstream.missing){let t=e.remote?e.name:e.upstream.name;i.branch=(0,b.km)(t),i.remote=(0,b.Zq)(t)}else i.branch=e.name;else i.branch=e.ref}await (0,k.RS)("gitlens.openOnRemote",{resource:{type:eB.J.Branch,branch:i.branch||"HEAD"},repoPath:s,remote:i.remote,clipboard:i.clipboard})}catch(e){B.Vy.error(e,"OpenBranchOnRemoteCommand"),(0,R.qQ)("Unable to open branch on remote provider")}}}};t3=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?t6(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t8(t,i,o),o})([(0,k.G5)()],t3);var t9=Object.defineProperty,ie=Object.getOwnPropertyDescriptor;let it=class extends W.Zr{constructor(e){super("gitlens.openCurrentBranchOnRemote"),this.container=e}async execute(e,t){let i=null!=(t=(0,z.q)(t,e))?await m.nk.fromUri(t):void 0,r=await (0,Z.X)(i,e,"Open Current Branch Name");if(null!=r)try{let e,t,i=await r.git.branches().getBranch();if(i?.detached)return void await (0,k.RS)("gitlens.openOnRemote",{resource:{type:eB.J.Commit,sha:i.sha??"HEAD"},repoPath:r.path});i?.upstream==null||i.upstream.missing?null!=i&&(e=i.name):(e=(0,b.km)(i.upstream.name),t=(0,b.Zq)(i.upstream.name)),await (0,k.RS)("gitlens.openOnRemote",{resource:{type:eB.J.Branch,branch:e??"HEAD"},remote:t,repoPath:r.path})}catch(e){B.Vy.error(e,"OpenCurrentBranchOnRemoteCommand"),(0,R.qQ)("Unable to open branch on remote provider")}}};it=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ie(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&t9(t,i,o),o})([(0,k.G5)()],it);var ii=Object.defineProperty,ir=Object.getOwnPropertyDescriptor;let is=class extends W.Kt{constructor(e){super("gitlens.openChangedFiles"),this.container=e}async execute(e){e={...e};try{if(null==e.uris){let t=await (0,Z.t6)("Open All Changed Files");if(null==t)return;let i=await this.container.git.status(t.uri).getStatus();if(null==i)return void n.window.showWarningMessage("Unable to open changed files");e.uris=(0,tb.x1)(i.files,e=>"D"!==e.status?e.uri:void 0)}(0,E.k1)(e.uris)}catch(e){B.Vy.error(e,"OpenChangedFilesCommand"),(0,R.qQ)("Unable to open all changed files")}}};is=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ir(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ii(t,i,o),o})([(0,k.G5)()],is),__webpack_require__(1866);var io=Object.defineProperty,ia=Object.getOwnPropertyDescriptor;let il=class extends W.Kt{constructor(e){super(["gitlens.openComparisonOnRemote","gitlens.copyRemoteComparisonUrl"]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&(e.node.isAny("results-commits")?t={...t,repoPath:e.node.repoPath,ref1:e.node.ref1||"HEAD",ref2:e.node.ref2||"HEAD"}:e.node.is("compare-results")?t={...t,repoPath:e.node.repoPath,ref1:e.node.ahead.ref1,ref2:e.node.ahead.ref2}:e.node.is("compare-branch")&&(t={...t,repoPath:e.node.repoPath,ref1:e.node.ahead.ref1,ref2:e.node.ahead.ref2})),"gitlens.copyRemoteComparisonUrl"===e.command&&(t={...t,clipboard:!0}),this.execute(t)}async execute(e){if(e?.repoPath!=null&&null!=e.ref1&&null!=e.ref2)try{await (0,k.RS)("gitlens.openOnRemote",{resource:{type:eB.J.Comparison,base:e.ref1,head:e.ref2,notation:e.notation},repoPath:e.repoPath,clipboard:e?.clipboard})}catch(e){B.Vy.error(e,"OpenComparisonOnRemoteCommand"),(0,R.qQ)("Unable to open comparison on remote provider")}}};il=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ia(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&io(t,i,o),o})([(0,k.G5)()],il);var iu=Object.defineProperty,ic=Object.getOwnPropertyDescriptor,ih=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ic(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iu(t,i,o),o};let id=class extends W.Kt{constructor(e){super("gitlens.openFileFromRemote"),this.container=e}async execute(){await ig(this.container,"file")}};id=ih([(0,k.G5)()],id);let ip=class extends W.Kt{constructor(e){super("gitlens.openRevisionFromRemote"),this.container=e}async execute(){await ig(this.container,"revision")}};async function ig(e,t){let i,r=await n.env.clipboard.readText();try{n.Uri.parse(r,!0)}catch{r=void 0}let s=await n.window.showInputBox({prompt:"Enter a remote file url to open",placeHolder:"Remote file url",value:r,ignoreFocusOut:!0});if(!s?.length)return;let o=await e.git.getLocalInfoFromRemoteUri(n.Uri.parse(s));if(null==o)return void n.window.showWarningMessage("Unable to parse the provided remote url.");let{uri:a}=o;"revision"===t&&a.scheme===p.xB.File&&o.rev&&(a=await e.git.getBestRevisionUri(o.repoPath,o.uri.fsPath,o.rev)??a),o.startLine&&(i=o.endLine?new n.Range(o.startLine-1,0,o.endLine,0):new n.Range(o.startLine-1,0,o.startLine-1,0));try{await (0,E.zu)(a,{selection:i,throwOnError:!0})}catch{let e=await n.window.showOpenDialog({title:"Open local file",defaultUri:a,canSelectMany:!1,canSelectFolders:!1});if(!e?.length)return;await (0,E.zu)(e[0])}}ip=ih([(0,k.G5)()],ip);var im=__webpack_require__(8146),iw=Object.defineProperty,iv=Object.getOwnPropertyDescriptor;let iy=class extends W.Zr{constructor(e){super(["gitlens.openFileOnRemote","gitlens.copyRemoteFileUrlToClipboard","gitlens.copyRemoteFileUrlWithoutRange","gitlens.openFileOnRemoteFrom","gitlens.copyRemoteFileUrlFrom"],["gitlens.openFileInRemote"]),this.container=e}async preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line,range:!0}),"gitlens.copyRemoteFileUrlWithoutRange"===e.command&&(t={...t,range:!1}),(0,ey.j7)(e)?(t={...t,range:!1},"gitlens.copyRemoteFileUrlToClipboard"===e.command||"gitlens.copyRemoteFileUrlWithoutRange"===e.command||"gitlens.copyRemoteFileUrlFrom"===e.command?t.sha=e.node instanceof im.Z?void 0:e.node.commit.sha:(0,ey.K0)(e)&&(t.branchOrTag=e.node.branch?.name),i=e.node.uri):"viewItem"===e.type&&(t={...t,range:!1},i=e.node.uri??e.uri),("gitlens.copyRemoteFileUrlToClipboard"===e.command||"gitlens.copyRemoteFileUrlWithoutRange"===e.command||"gitlens.copyRemoteFileUrlFrom"===e.command)&&null==(t={...t,clipboard:!0}).sha){let i=(0,z.q)(e.uri,e.editor);if(null!=i){let e=await m.nk.fromUri(i);if(e.repoPath)if(null==e.sha){let i=await this.container.git.commits(e.repoPath).getCommitForFile(e,void 0,{firstIfNotFound:!0});null!=i&&(t.sha=i.sha)}else t.sha=e.sha}}return("gitlens.openFileOnRemoteFrom"===e.command||"gitlens.copyRemoteFileUrlFrom"===e.command)&&(t={...t,pickBranchOrTag:!0,range:!1}),this.execute(e.editor,i,t)}async execute(e,t,i){if(null==(t=(0,z.q)(t,e)))return;let r=await m.nk.fromUri(t);if(r.repoPath){i={range:!0,...i};try{let s,o=await this.container.git.remotes(r.repoPath).getRemotesWithProviders({sort:!0});i.range&&(null!=e&&(0,J.k)(e.document.uri,t)?s=new n.Range(e.selection.start.with({line:e.selection.start.line+1}),e.selection.end.with({line:e.selection.end.line+ +(0!==e.selection.end.character)})):null!=i.line&&(s=new n.Range(i.line+1,0,i.line+1,0)));let a=i.sha??r.sha;if(null==i.branchOrTag&&null!=a&&!(0,C.HH)(a)&&0!==o.length){let[e,t]=(0,ej.Br)(a,"/");if(null!=t){let r=o.find(t=>t.name===e);null!=r&&(i.branchOrTag=t,a=void 0,o=[r])}}if(null==i.sha&&null==i.branchOrTag||i.pickBranchOrTag){let e;if(i.pickBranchOrTag||(e=await this.container.git.branches(r.repoPath).getBranch()),e?.upstream==null){let t=await (0,eg.NZ)(r.repoPath,i.clipboard?`Copy Remote File URL From${(0,ej.eV)(p.EO.Dot,2,2)}${r.relativePath}`:`Open File on Remote From${(0,ej.eV)(p.EO.Dot,2,2)}${r.relativePath}`,`Choose a branch or tag to ${i.clipboard?"copy":"open"} the file revision from`,{allowRevisions:!0,autoPick:!0,filter:{branches:e=>e.remote||null!=e.upstream},picked:i.branchOrTag,sort:{branches:{current:!0,orderBy:"date:desc"},tags:{orderBy:"date:desc"}}});if(null==t)return;"branch"===t.refType?(e=t,i.branchOrTag=void 0,a=void 0):"tag"===t.refType?(i.branchOrTag=t.ref,a=void 0):(i.branchOrTag=void 0,a=t.ref)}if(null!=e)if(e.remote||null!=e.upstream&&!e.upstream.missing){let t=e.remote?e.name:e.upstream.name;i.branchOrTag=(0,b.km)(t);let r=(0,b.Zq)(t),s=o.find(e=>e.name===r);null!=s&&(o=[s])}else i.branchOrTag=e.name}await (0,k.RS)("gitlens.openOnRemote",{resource:{type:null==a?eB.J.File:eB.J.Revision,branchOrTag:i.branchOrTag??"HEAD",fileName:r.relativePath,range:s,sha:a??void 0},repoPath:r.repoPath,remotes:o,clipboard:i.clipboard})}catch(e){B.Vy.error(e,"OpenFileOnRemoteCommand"),(0,R.qQ)("Unable to open file on remote provider")}}}};iy=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iv(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iw(t,i,o),o})([(0,k.G5)()],iy),__webpack_require__(134);var ib=Object.defineProperty,iC=Object.getOwnPropertyDescriptor;let iR=class extends W.Zr{constructor(e){super("gitlens.openFileRevisionFrom"),this.container=e}async execute(e,t,i){if(null==(t=(0,z.q)(t,e)))return;let r=await m.nk.fromUri(t);if(!r.repoPath)return void(0,R.A5)("Unable to open file revision");if(null==(i={...i}).line&&(i.line=e?.selection.active.line??0),null==i.reference)if(i?.stash){let e=this.container.git.getRelativePath(r,r.repoPath),t=`Open Changes with Stash${(0,ej.eV)(p.EO.Dot,2,2)}`,s=await (0,eH.F)(this.container.git.stash(r.repoPath)?.getStash(),`${t}${r.getFormattedFileName({truncateTo:p.uR-t.length})}`,"Choose a stash to compare with",{filter:t=>t.fileset?.files.some(t=>t.path===e||t.originalPath===e)??!0});if(null==s)return;i.reference=s}else{let e=`Open File at Branch or Tag${(0,ej.eV)(p.EO.Dot,2,2)}`,t=await (0,eg.NZ)(r.repoPath,`${e}${r.getFormattedFileName({truncateTo:p.uR-e.length})}`,"Choose a branch or tag to open the file revision from",{allowRevisions:!0,keyboard:{keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await (0,eP.vM)(this.container.git.getRevisionUri(r.repoPath,t.ref,r.fsPath),{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!0})}}});if(null==t)return;i.reference=t}await (0,eP.vM)(this.container.git.getRevisionUri(r.repoPath,i.reference.ref,r.fsPath),{annotationType:i.annotationType,line:i.line,...i.showOptions})}};iR=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iC(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&ib(t,i,o),o})([(0,k.G5)()],iR);var ik=__webpack_require__(9181),iS=__webpack_require__(5462),iP=Object.defineProperty,iA=Object.getOwnPropertyDescriptor;let iI=class extends W.Kt{constructor(e){super(["gitlens.openOnRemote"],["gitlens.openInRemote"]),this.container=e}async execute(e){if(e?.resource==null)return;let t="remotes"in e?e.remotes:await this.container.git.remotes(e.repoPath).getRemotesWithProviders({sort:!0});if(null!=e.remote){let i=t.filter(t=>t.name===e.remote);t.length>0&&(t=i)}async function i(e){try{if(e.type===eB.J.Branch){let[i,r]=(0,ej.Br)(e.branch,"/");if(null!=r){let s=t.find(e=>e.name===i);null!=s&&(e.branch=r,t=[s])}}else if(e.type===eB.J.Revision){let{commit:t,fileName:i}=e;if(null!=t){let r=await t.findFile(i);r?.status==="D"?e.sha=await this.container.git.refs(t.repoPath).resolveReference(`${t.sha}^`,i):e.sha=t.sha}}}catch(e){B.Vy.error(e,"OpenOnRemoteCommand.processResource")}}try{let r,s=function(t){return e?.clipboard?`Copy ${a} ${t} Link${o.length>1?"s":""}`:`Open ${t} on ${a}`},o=(0,tb.eC)(e.resource);for(let e of o)await i.call(this,e);let n=(0,ik.zF)(t),a=n?.length?n[0].name:"Remote",l={autoPick:"default",clipboard:e.clipboard,setDefault:!0},u=`Choose which remote to ${e.clipboard?`copy the link${o.length>1?"s":""} for`:"open on"} (or use the gear to set it as default)`,[c]=o;switch(c.type){case eB.J.Branch:r=s("Branch"),1===o.length&&(r+=`${(0,ej.eV)(p.EO.Dot,2,2)}${c.branch}`);break;case eB.J.Branches:r=s("Branches");break;case eB.J.Commit:r=s("Commit"),1===o.length&&(r+=`${(0,ej.eV)(p.EO.Dot,2,2)}${(0,C.pV)(c.sha)}`);break;case eB.J.Comparison:r=s("Comparisons"),1===o.length&&(r+=`${(0,ej.eV)(p.EO.Dot,2,2)}${(0,C.Xn)(c.base,c.head,c.notation??"...")}`);break;case eB.J.CreatePullRequest:l.autoPick=!0,l.setDefault=!1,o.length>1?(r=e.clipboard?`Copy ${a} Create Pull Request Links`:`Create Pull Requests on ${a}`,u=`Choose which remote to ${e.clipboard?"copy the create pull request links for":"create the pull requests on"}`):(r=`${e.clipboard?`Copy ${a} Create Pull Request Link`:`Create Pull Request on ${a}`}${(0,ej.eV)(p.EO.Dot,2,2)}${c.base?.branch?(0,C.Xn)(c.base.branch,c.head.branch,"..."):c.head.branch}`,u=`Choose which remote to ${e.clipboard?"copy the create pull request link for":"create the pull request on"}`);break;case eB.J.File:r=s("File"),1===o.length&&(r+=`${(0,ej.eV)(p.EO.Dot,2,2)}${c.fileName}`);break;case eB.J.Repo:r=s("Repository");break;case eB.J.Revision:r=s("File"),1===o.length&&(r+=`${(0,ej.eV)(p.EO.Dot,2,2)}${(0,C.pV)(c.sha)}${(0,ej.eV)(p.EO.Dot,1,1)}${c.fileName}`)}let h=await (0,iS.ZM)(r,u,o,t,l);await h?.execute()}catch(e){B.Vy.error(e,"OpenOnRemoteCommand"),(0,R.qQ)("Unable to open in remote provider")}}};iI=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iA(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iP(t,i,o),o})([(0,k.G5)()],iI);var iD=__webpack_require__(4152),i_=Object.defineProperty,i$=Object.getOwnPropertyDescriptor;let iT=class extends W.Kt{constructor(e){super(["gitlens.openPullRequestOnRemote","gitlens.copyRemotePullRequestUrl"]),this.container=e}preExecute(e,t){return"viewItem"===e.type&&(e.node.is("pullrequest")||e.node.is("launchpad-item"))&&(t={...t,pr:null!=e.node.pullRequest?{url:e.node.pullRequest.url}:void 0,clipboard:"gitlens.copyRemotePullRequestUrl"===e.command}),this.execute(t)}async execute(e){if(e?.pr==null){if(e?.repoPath==null||e?.ref==null)return;let t=await this.container.git.remotes(e.repoPath).getBestRemoteWithIntegration();if(null==t)return;let i=await this.container.integrations.getByRemote(t);if(null==i)return;let r=await i.getPullRequestForCommit(t.provider.repoDesc,e.ref);if(null==r)return void n.window.showInformationMessage(`No pull request associated with '${(0,C.pV)(e.ref)}'`);(e={...e}).pr=r}e.clipboard?await n.env.clipboard.writeText(e.pr.url):(0,iD.CZ)(e.pr.url)}};iT=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?i$(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i_(t,i,o),o})([(0,k.G5)()],iT);var iE=Object.defineProperty,ix=Object.getOwnPropertyDescriptor;let iO=class extends W.Zr{constructor(e){super(["gitlens.openRepoOnRemote","gitlens.copyRemoteRepositoryUrl"],["gitlens.openRepoInRemote"]),this.container=e}preExecute(e,t){return(0,ey.qv)(e)&&(t={...t,remote:e.node.remote.name}),"gitlens.copyRemoteRepositoryUrl"===e.command&&(t={...t,clipboard:!0}),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r=null!=(t=(0,z.q)(t,e))?await m.nk.fromUri(t):void 0,s=(await (0,Z.X)(r,e,i?.clipboard?"Choose which repository to copy the url from":"Choose which repository to open on remote"))?.path;if(s)try{await (0,k.RS)("gitlens.openOnRemote",{resource:{type:eB.J.Repo},repoPath:s,remote:i?.remote,clipboard:i?.clipboard})}catch(e){B.Vy.error(e,"OpenRepoOnRemoteCommand"),(0,R.qQ)("Unable to open repository on remote provider")}}};iO=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ix(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iE(t,i,o),o})([(0,k.G5)()],iO);var iF=Object.defineProperty,iB=Object.getOwnPropertyDescriptor;let iL=class extends W.Zr{constructor(e){super("gitlens.openRevisionFile"),this.container=e}async execute(e,t,i){if(null==(t=(0,z.q)(t,e)))return;let r=await m.nk.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri)if(r?.sha){let e=await this.container.git.commits(r.repoPath).getCommit(r.sha);i.revisionUri=e?.file?.status==="D"?this.container.git.getRevisionUri(e.repoPath,await e.getPreviousSha()??e2.nB,e.file):this.container.git.getRevisionUriFromGitUri(r)}else i.revisionUri=this.container.git.getRevisionUriFromGitUri(r);await (0,eP.vM)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){B.Vy.error(e,"OpenRevisionFileCommand"),(0,R.qQ)("Unable to open file revision")}}};iL=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iB(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iF(t,i,o),o})([(0,k.G5)()],iL);var iU=Object.defineProperty,iq=Object.getOwnPropertyDescriptor;let iN=class extends W.Zr{constructor(e){super("gitlens.openWorkingFile"),this.container=e}async execute(e,t,i){null==(i={...i}).line&&(i.line=e?.selection.active.line);try{if(null==i.uri){if(t=(0,z.q)(t,e),null==t)return}else t=i.uri;if(i.uri=await m.nk.fromUri(t),(0,m.t5)(i.uri)&&i.uri.sha){let e=await this.container.git.getWorkingUri(i.uri.repoPath,i.uri);if(void 0===e)return void n.window.showWarningMessage("Unable to open working file. File could not be found in the working tree");i.uri=new m.nk(e,i.uri.repoPath)}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new n.Range(i.line,0,i.line,0));let r=await (0,E.gF)(i.uri,{...i.showOptions,throwOnError:!0});if(void 0===i.annotationType)return;await this.container.fileAnnotations.show(r,i.annotationType,{selection:{line:i.line}})}catch(e){B.Vy.error(e,"OpenWorkingFileCommand"),(0,R.qQ)("Unable to open working file")}}};iN=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?iq(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iU(t,i,o),o})([(0,k.G5)()],iN);var iM=__webpack_require__(928),iW=__webpack_require__(2320),iG=__webpack_require__(1705),iH=__webpack_require__(1838),iV=__webpack_require__(1902),ij=__webpack_require__(1678),iz=Object.defineProperty,iQ=Object.getOwnPropertyDescriptor,iY=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?iQ(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&iz(t,i,o),o};let CreatePatchCommandBase=class CreatePatchCommandBase extends W.Kt{constructor(e,t){super(t),this.container=e}async preExecute(e,t){if(null==t){if("scm-states"===e.type){let i,r=new Map,s=new Set,o=!1;for(let t of e.scmResourceStates){i??=await this.container.git.getOrOpenRepository(t.resourceUri),o=o||t.type===tw.UNTRACKED,s.add(t.resourceUri.toString());let e=r.get(t.resourceGroupType);null==e?(e=[],r.set(t.resourceGroupType,e)):e.push(t)}let a=1===r.size&&r.has(ty.Index)?e2.id:e2.SU;t={repoPath:i?.path,to:a,from:"HEAD",uris:[...(0,eA.Tj)(s,e=>n.Uri.parse(e))],title:a===e2.id?"Staged Changes":"Uncommitted Changes",includeUntracked:!!o||void 0}}else if("scm-groups"===e.type){let i=e.scmResourceGroups[0];if(!i?.resourceStates?.length)return;let r=await this.container.git.getOrOpenRepository(i.resourceStates[0].resourceUri),s="index"===i.id?e2.id:e2.SU;t={repoPath:r?.path,to:s,from:"HEAD",title:s===e2.id?"Staged Changes":"Uncommitted Changes"}}else if("viewItem"===e.type)if((0,ey.j7)(e)){let{commit:i}=e.node;null==i.message&&await i.ensureFullDetails();let{summary:r,body:s}=(0,iH.TH)(i.message);t={repoPath:e.node.commit.repoPath,to:e.node.commit.ref,from:`${e.node.commit.ref}^`,title:r,description:s},(0,ey.xT)(e)&&(t.uris=[e.node.uri])}else(0,ey.d2)(e)?t={repoPath:e.node.uri.fsPath,to:e.node.compareRef.ref,from:e.node.compareWithRef.ref,title:`Changes between ${(0,C.pV)(e.node.compareRef.ref)} and ${(0,C.pV)(e.node.compareWithRef.ref)}`}:(0,ey.cD)(e)&&(t={repoPath:e.node.repoPath,to:e.node.ref2,from:e.node.ref1,uris:[e.node.uri]});else if("viewItems"===e.type&&(0,N.d5)(e.node))for(let i of(t={repoPath:e.node.repoPath,to:e.node.ref.sha,from:`${e.node.ref.sha}^`,uris:[e.node.uri],title:`Changes (partial) in ${(0,C.pV)(e.node.ref.sha)}`},e.nodes))(0,N.d5)(i)&&i!==e.node&&i.ref.sha===t.to&&t.uris.push(i.uri)}return this.execute(t)}async getDiff(e,t){let i;if(t?.repoPath!=null&&(i=this.container.git.getRepository(t.repoPath)),null!=(i??=await (0,Z.t6)(e)))return i.git.diff().getDiff?.(t?.to??e2.SU,t?.from??"HEAD",{includeUntracked:t?.includeUntracked??(t?.to!=null||t?.to===e2.SU),uris:t?.uris})}};let iK=class extends CreatePatchCommandBase{constructor(e){super(e,"gitlens.createPatch")}async execute(e){let t=await this.getDiff("Create Patch",e);if(null==t)return;let i=await n.workspace.openTextDocument({content:t.contents,language:"diff"});await n.window.showTextDocument(i)}};iK=iY([(0,k.G5)()],iK);let iZ=class extends CreatePatchCommandBase{constructor(e){super(e,"gitlens.copyPatchToClipboard")}async execute(e){let t=await this.getDiff("Copy as Patch",e);null!=t&&(await n.env.clipboard.writeText(t.contents),n.window.showInformationMessage("Copied patch — use 'Apply Copied Patch' in another window to apply it"))}};iZ=iY([(0,k.G5)()],iZ);let iJ=class extends W.Kt{constructor(e){super(["gitlens.applyPatchFromClipboard","gitlens.pastePatchFromClipboard"]),this.container=e}async execute(){let e=await n.env.clipboard.readText(),t=this.container.git.highlander,i=t?.uri!=null?this.container.git.patch(t.uri):void 0;if(!(e.length&&await i?.validatePatch(e)))return void n.window.showWarningMessage("No valid patch found in the clipboard");if(null!=(t??=await (0,Z.t6)("Apply Copied Patch")))try{let t=await i?.createUnreachableCommitForPatch("HEAD","Pasted Patch",e);if(null==t)return;await i?.applyUnreachableCommitForPatch(t.sha,{stash:!1}),n.window.showInformationMessage("Patch applied successfully")}catch(e){if(e instanceof iW.AL)return;e instanceof iG.ol?e.reason===iG.a_.AppliedWithConflicts?n.window.showWarningMessage("Patch applied with conflicts"):n.window.showErrorMessage(e.message):n.window.showErrorMessage(`Unable to apply patch: ${e.message}`)}}};iJ=iY([(0,k.G5)()],iJ);let iX=class extends CreatePatchCommandBase{constructor(e){super(e,["gitlens.createCloudPatch","gitlens.shareAsCloudPatch"])}async execute(e){if(e?.repoPath==null)return(0,iV.X)({mode:"create"});let t=this.container.git.getRepository(e.repoPath);if(null==t)return(0,iV.X)({mode:"create"});let i=await i2(t,e);return null==i?(0,iV.X)({mode:"create",create:{repositories:[t]}}):(0,iV.X)({mode:"create",create:i})}};iX=iY([(0,k.G5)()],iX);let i0=class extends W.Zr{constructor(e){super("gitlens.openPatch"),this.container=e}async execute(e){let t;if(e?.document?.languageId==="diff")t=e.document;else{let e=await n.window.showOpenDialog({canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{Patches:["diff","patch"]},openLabel:"Open Patch",title:"Open Patch File"}),i=e?.[0];if(null==i)return;t=await n.workspace.openTextDocument(i),await n.window.showTextDocument(t)}let i={draftType:"local",patch:{type:"local",uri:t.uri,contents:t.getText()}};(0,iV.X)({mode:"view",draft:i})}};i0=iY([(0,k.G5)()],i0);let i1=class extends W.Kt{constructor(e){super("gitlens.openCloudPatch"),this.container=e}async execute(e){let t,i=e?.type==="code_suggestion"?"Code Suggestion":"Cloud Patch";if(e?.id==null&&e?.draft==null)return void n.window.showErrorMessage(`Cannot open ${i}; no patch or patch id provided`);if(null!=e.prEntityId&&"code_suggestion"===e.type){let r,s;try{let t=iM.EntityIdentifierUtils.decode(e.prEntityId);r=(0,ij.H8)(t),s=t.domain??void 0}catch{n.window.showErrorMessage(`Cannot open ${i}; invalid provider details.`);return}if(null==r)return void n.window.showErrorMessage(`Cannot open ${i}; unsupported provider.`);let o=await this.container.integrations.get(r,s);if(null==o)return void n.window.showErrorMessage(`Cannot open ${i}; provider not found.`);let a=await o.getSession("cloud-patches");if(null==a)return void n.window.showErrorMessage(`Cannot open ${i}; provider not connected.`);t={provider:o.id,token:a.accessToken}}try{let i=e.draft??await this.container.drafts.getDraft(e.id,{providerAuth:t});(0,iV.X)({mode:"view",draft:i})}catch(t){B.Vy.error(t,"OpenCloudPatchCommand"),n.window.showErrorMessage(`Unable to open ${i} '${e.id}'`)}}};async function i2(e,t){if(null==t.to)return;let i=t.to??"HEAD",r={type:"revision",repository:{name:e.name,path:e.path,uri:e.uri.toString()},files:void 0,revision:{to:i,from:t.from??`${i}^`}},s={changes:[r],title:t.title,description:t.description},o=e.git.commits(),n=await o.getCommit(i);if(null!=n){if(null==t.from){if(n.fileset?.files==null)return;r.files=[...n.fileset.files]}else{let s=await e.git.diff().getDiff?.(i,t.from);if(null==s)return;let n=await e.git.diff().getDiffFiles?.(s.contents);if(n?.files==null)return;if(r.files=n.files,!(0,C.HH)(t.to)){let e=await o.getCommit(t.to);null!=e&&(r.revision.to=e.sha)}if(!(0,C.HH)(t.from)){let e=await o.getCommit(t.from);null!=e&&(r.revision.from=e.sha)}}return s}}i1=iY([(0,k.G5)()],i1);var i4=Object.defineProperty,i5=Object.getOwnPropertyDescriptor;let i7=class extends QuickWizardCommandBase{constructor(e){super(e,["gitlens.showLaunchpad","gitlens.startWork","gitlens.associateIssueWithBranch"])}preExecute(e,t){switch(e.command){case"gitlens.showLaunchpad":return this.execute({command:"launchpad",...t});case"gitlens.startWork":return this.execute({command:"startWork",...t});case"gitlens.associateIssueWithBranch":return this.execute({command:"associateIssueWithBranch",...t});default:return this.execute(t)}}};i7=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?i5(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i4(t,i,o),o})([(0,k.G5)()],i7);var i8=Object.defineProperty,i6=Object.getOwnPropertyDescriptor,i3=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?i6(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&i8(t,i,o),o};let i9=class extends W.Kt{constructor(e){super("gitlens.disableRebaseEditor"),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!1)}};i9=i3([(0,k.G5)()],i9);let re=class extends W.Kt{constructor(e){super("gitlens.enableRebaseEditor"),this.container=e}execute(){return this.container.rebaseEditor.setEnabled(!0)}};re=i3([(0,k.G5)()],re);var rt=Object.defineProperty,ri=Object.getOwnPropertyDescriptor;let rr=class extends W.Kt{constructor(e){super("gitlens.refreshHover"),this.container=e}async execute(){await (0,k.S4)("editor.action.showHover")}};rr=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ri(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rt(t,i,o),o})([(0,k.G5)()],rr),__webpack_require__(8734);var rs=Object.defineProperty,ro=Object.getOwnPropertyDescriptor,rn=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?ro(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rs(t,i,o),o};let ra=class extends W.Kt{constructor(e){super("gitlens.fetchRepositories"),this.container=e}async execute(){return(0,M.b)({command:"fetch",state:{repos:this.container.git.openRepositories}})}};ra=rn([(0,k.G5)()],ra);let rl=class extends W.Kt{constructor(e){super("gitlens.pullRepositories"),this.container=e}async execute(){return(0,M.b)({command:"pull",state:{repos:this.container.git.openRepositories}})}};rl=rn([(0,k.G5)()],rl);let ru=class extends W.Kt{constructor(e){super("gitlens.pushRepositories"),this.container=e}async execute(){return(0,M.b)({command:"push",state:{repos:this.container.git.openRepositories}})}};ru=rn([(0,k.G5)()],ru);var rc=__webpack_require__(3037),rh=Object.defineProperty,rd=Object.getOwnPropertyDescriptor,rp=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?rd(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rh(t,i,o),o};let rg=["ai","ai:confirmations","avatars","integrations","previews","repositoryAccess","subscription","suppressedWarnings","usageTracking","workspace"],rm=class extends W.Kt{constructor(e){super("gitlens.reset"),this.container=e}async execute(){let e,t=[{label:"AI Keys...",detail:"Clears any locally stored AI keys",item:"ai"},{label:"AI Confirmations...",detail:"Clears any accepted AI confirmations",item:"ai:confirmations"},{label:"Avatars...",detail:"Clears the stored avatar cache",item:"avatars"},{label:"Integrations (Authentication)...",detail:"Clears any locally stored authentication for integrations",item:"integrations"},{label:"Repository Access...",detail:"Clears the stored repository access cache",item:"repositoryAccess"},{label:"Suppressed Warnings...",detail:'Clears any suppressed warnings, e.g. messages with "Don\'t Show Again" options',item:"suppressedWarnings"},{label:"Usage Tracking...",detail:"Clears any locally tracked usage, typically used for first time experience",item:"usageTracking"},{label:"Workspace Storage...",detail:"Clears stored data associated with the current workspace",item:"workspace"},(0,eV.uK)(),{label:"Everything...",description:" —  be very careful with this!",detail:"Clears ALL locally stored data; ALL GitLens state will be LOST",item:"all"}],i=await n.window.showQuickPick(t,{title:"Reset Stored Data",placeHolder:"Choose which data to reset, will be prompted to confirm"});if(i?.item==null)return;let r={title:"Reset"};switch(i?.item){case"all":e="Are you sure you want to reset EVERYTHING?",r.title="Reset Everything";break;case"ai":e="Are you sure you want to reset all of the stored AI keys?",r.title="Reset AI Keys";break;case"ai:confirmations":e="Are you sure you want to reset all AI confirmations?",r.title="Reset AI Confirmations";break;case"avatars":e="Are you sure you want to reset the avatar cache?",r.title="Reset Avatars";break;case"integrations":e="Are you sure you want to reset all of the stored integrations?",r.title="Reset Integrations";break;case"previews":e="Are you sure you want to reset the stored state for feature previews?",r.title="Reset Feature Previews";break;case"repositoryAccess":e="Are you sure you want to reset the repository access cache?",r.title="Reset Repository Access";break;case"subscription":e="Are you sure you want to reset the stored subscription?",r.title="Reset Subscription";break;case"suppressedWarnings":e="Are you sure you want to reset all of the suppressed warnings?",r.title="Reset Suppressed Warnings";break;case"usageTracking":e="Are you sure you want to reset all of the usage tracking?",r.title="Reset Usage Tracking";break;case"workspace":e="Are you sure you want to reset the stored data for the current workspace?",r.title="Reset Workspace Storage"}(null==e||await n.window.showWarningMessage(`This is IRREVERSIBLE!
${e}`,{modal:!0},r,{title:"Cancel",isCloseAffordance:!0})===r)&&await this.reset(i.item)}async reset(e){switch(e){case"all":for(let e of rg)await this.reset(e);await this.container.storage.reset();break;case"ai":await this.container.ai.reset(!0);break;case"ai:confirmations":this.container.ai.resetConfirmations();break;case"avatars":(0,rc.H3)("all");break;case"integrations":await this.container.integrations.reset();break;case"repositoryAccess":await this.container.git.clearAllRepoVisibilityCaches();break;case"suppressedWarnings":await S.H.update("advanced.messages",void 0,n.ConfigurationTarget.Global);break;case"usageTracking":await this.container.usage.reset();break;case"workspace":await this.container.storage.resetWorkspace()}}};rm=rp([(0,k.G5)()],rm);let rf=class extends W.Kt{constructor(e){super("gitlens.resetAIKey"),this.container=e}async execute(){await this.container.ai.reset()}};rf=rp([(0,k.G5)()],rf);var rw=__webpack_require__(3374),rv=Object.defineProperty,ry=Object.getOwnPropertyDescriptor;let rb=class extends W.Kt{constructor(e){super("gitlens.resetViewsLayout"),this.container=e}async execute(){for(let[e,t]of rw.OB){try{await (0,k.S4)("vscode.moveViews",{viewIds:t.map(e=>`gitlens.views.${e}`),destinationId:e})}catch{}e.includes("gitlens")&&await (0,k.S4)(`${e}.resetViewContainerLocation`)}}};rb=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?ry(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rv(t,i,o),o})([(0,k.G5)()],rb);var rC=__webpack_require__(242),rR=Object.defineProperty,rk=Object.getOwnPropertyDescriptor;let rS=class extends W.Kt{constructor(e){super(["gitlens.showCommitSearch","gitlens.views.searchAndCompare.searchCommits"]),this.container=e}preExecute(e,t){return"gitlens.views.searchAndCompare.searchCommits"===e.command?(t={...t}).showResultsInSideBar=!0:"viewItem"===e.type&&((t={...t}).showResultsInSideBar=!0,e.node instanceof rC.X&&(t.repoPath=e.node.repoPath,t.search=e.node.search,t.prefillOnly=!0),(0,ey.q)(e)&&(t.repoPath=e.node.repo.path)),this.execute(t)}async execute(e){await (0,M.b)({command:"search",prefillOnly:e?.prefillOnly,state:{repo:e?.repoPath,...e?.search,showResultsInSideBar:S.H.get("gitCommands.search.showResultsInSideBar")??e?.showResultsInSideBar,openPickInView:e?.openPickInView??!1}})}};rS=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rk(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rR(t,i,o),o})([(0,k.G5)()],rS);var rP=__webpack_require__(5042),rA=Object.defineProperty,rI=Object.getOwnPropertyDescriptor;let rD=class extends W.Zr{constructor(e){super("gitlens.showCommitsInView"),this.container=e}static createMarkdownCommandLink(e,t){return(0,tV.J)("gitlens.showCommitsInView","string"==typeof e?{refs:[e],repoPath:t}:e)}async execute(e,t,i){if(null==(i={...i}).refs){if(null==(t=(0,z.q)(t,e)))return;let r=await m.nk.fromUri(t);if(i.repoPath=r.repoPath,null!=e)try{let t=e.document.isDirty?await this.container.git.getBlameForRangeContents(r,e.selection,e.document.getText()):await this.container.git.getBlameForRange(r,e.selection);if(void 0===t)return void(0,R.gD)("Unable to find commits");i.refs=[...(0,eA.x1)(t.commits.values(),e=>e.isUncommitted?void 0:e.ref)]}catch(e){return B.Vy.error(e,"ShowCommitsInViewCommand","getBlameForRange"),void(0,R.qQ)("Unable to find commits")}else{if(null==r.sha)return;i.refs=[r.sha]}}return(0,M.b)({command:"search",state:{repo:i?.repoPath,query:(0,rP.gz)(i.refs),showResultsInSideBar:!0}})}};rD=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rI(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rA(t,i,o),o})([(0,k.G5)()],rD);var r_=Object.defineProperty,r$=Object.getOwnPropertyDescriptor;let rT=class extends W.Kt{constructor(e){super("gitlens.showLastQuickPick"),this.container=e}execute(){let e=(0,W.EL)();if(void 0===e)return Promise.resolve(void 0);try{return n.commands.executeCommand(e.command,...e.args)}catch(e){return B.Vy.error(e,"ShowLastQuickPickCommand"),(0,R.qQ)("Unable to show last quick pick")}}};rT=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?r$(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r_(t,i,o),o})([(0,k.G5)()],rT);var rE=Object.defineProperty,rx=Object.getOwnPropertyDescriptor;let rO=class extends W.Kt{constructor(e){super("gitlens.openOnlyChangedFiles"),this.container=e}async execute(e){e={...e};try{let t,i;if(null==e.uris){let t=await (0,Z.t6)("Open Changed & Close Unchanged Files");if(null==t)return;let i=await this.container.git.status(t.uri).getStatus();if(null==i)return void n.window.showWarningMessage("Unable to open changed & close unchanged files");e.uris=(0,tb.x1)(i.files,e=>"D"!==e.status?e.uri:void 0)}let r=0===e.uris.length,s=new Set(e.uris);for(let o of n.window.tabGroups.all)for(let a of o.tabs){if(r){n.window.tabGroups.close(a,!0);continue}i=a.input instanceof n.TabInputText||a.input instanceof n.TabInputCustom||a.input instanceof n.TabInputNotebook?a.input.uri:a.input instanceof n.TabInputTextDiff||a.input instanceof n.TabInputNotebookDiff?a.input.modified:void 0,null!=i&&(t=e.uris.find(e=>(0,J.k)(e,i)),null!=t?s.delete(t):n.window.tabGroups.close(a,!0))}s.size>0&&(0,E.k1)([...s])}catch(e){B.Vy.error(e,"OpenOnlyChangedFilesCommand"),(0,R.qQ)("Unable to open changed & close unchanged files")}}};rO=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rx(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rE(t,i,o),o})([(0,k.G5)()],rO);var rF=Object.defineProperty,rB=Object.getOwnPropertyDescriptor;let rL=class extends W.dY{constructor(e){super(["gitlens.showQuickBranchHistory","gitlens.showQuickRepoHistory"]),this.container=e}preExecute(e,t){return"gitlens.showQuickRepoHistory"===e.command&&((t={...t}).branch="HEAD"),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,s=null!=(t=(0,z.q)(t,e))?await m.nk.fromUri(t):void 0,o=i?.repoPath??s?.repoPath??this.container.git.highlander?.path;return null!=o&&(i?.branch!=null?r="HEAD"===i.branch?"HEAD":(0,ep.kA)(i.branch,o,{refType:"branch",name:i.branch,remote:!1}):i?.tag!=null&&(r=(0,ep.kA)(i.tag,o,{refType:"tag",name:i.tag}))),(0,M.b)({command:"log",state:null!=o?{repo:o,reference:r}:{}})}};rL=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rB(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rF(t,i,o),o})([(0,k.G5)()],rL),__webpack_require__(887),__webpack_require__(6121);var rU=__webpack_require__(9065),rq=Object.defineProperty,rN=Object.getOwnPropertyDescriptor;let rM=class extends W.dY{constructor(e){super(["gitlens.openFileHistory","gitlens.openFolderHistory","gitlens.showQuickFileHistory","gitlens.quickOpenFileHistory"],["gitlens.showFileHistoryInView"]),this.container=e}preExecute(e,t){let i=e.uri;return"gitlens.openFileHistory"===e.command||"gitlens.showFileHistoryInView"===e.command?(t={...t}).showInSideBar=!0:"gitlens.openFolderHistory"===e.command&&((t={...t}).showInSideBar=!0,"scm-states"===e.type&&(i=(0,rU.e3)(e.args)??e.uri)),this.execute(e.editor,i,t)}async execute(e,t,i){if(null==(t=(0,z.q)(t,e)))return;let r=await m.nk.fromUri(t);if(i?.showInSideBar)return void await this.container.views.fileHistory.showHistoryForUri(r);await (0,M.b)({command:"log",state:r?.repoPath!=null?{repo:r.repoPath,reference:i?.reference??"HEAD",fileName:r.relativePath}:{}})}};rM=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rN(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rq(t,i,o),o})([(0,k.G5)()],rM);var rW=Object.defineProperty,rG=Object.getOwnPropertyDescriptor;let rH=class extends W.Kt{constructor(e){super("gitlens.showQuickRepoStatus"),this.container=e}async execute(e){return(0,M.b)({command:"status",state:{repo:e?.repoPath}})}};rH=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rG(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rW(t,i,o),o})([(0,k.G5)()],rH);var rV=Object.defineProperty,rj=Object.getOwnPropertyDescriptor;let rz=class extends W.Kt{constructor(e){super("gitlens.showQuickStashList"),this.container=e}execute(e){return(0,M.b)({command:"stash",state:{subcommand:"list",repo:e?.repoPath}})}};rz=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rj(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rV(t,i,o),o})([(0,k.G5)()],rz);var rQ=Object.defineProperty,rY=Object.getOwnPropertyDescriptor;let rK=class extends W.Kt{constructor(e){super(["gitlens.showAccountView","gitlens.showBranchesView","gitlens.showCommitDetailsView","gitlens.showCommitsView","gitlens.showContributorsView","gitlens.showDraftsView","gitlens.showFileHistoryView","gitlens.showGraphView","gitlens.showHomeView","gitlens.showLaunchpadView","gitlens.showLineHistoryView","gitlens.showRemotesView","gitlens.showRepositoriesView","gitlens.showSearchAndCompareView","gitlens.showStashesView","gitlens.showTagsView","gitlens.showTimelineView","gitlens.showWorktreesView","gitlens.showWorkspacesView"]),this.container=e}preExecute(e,...t){return this.execute(e,...t)}async notifyWhenNoRepository(e){if(this.container.git.openRepositoryCount>0)return;let t=e?`No repository detected. To view ${e}, open a folder containing a git repository or clone from a URL in Source Control.`:"No repository detected. To use GitLens, open a folder containing a git repository or clone from a URL in Source Control.",i={title:"Open a Folder or Repo",isCloseAffordance:!0};await n.window.showInformationMessage(t,i)===i&&(0,k.S4)("workbench.view.scm")}async execute(e,...t){switch(e.command){case"gitlens.showAccountView":return this.container.views.home.show(void 0,{focusAccount:!0},...t);case"gitlens.showBranchesView":return this.container.views.showView("branches");case"gitlens.showCommitDetailsView":return this.notifyWhenNoRepository("Inspect"),this.container.views.commitDetails.show();case"gitlens.showCommitsView":return this.container.views.showView("commits");case"gitlens.showContributorsView":return this.container.views.showView("contributors");case"gitlens.showDraftsView":return this.container.views.showView("drafts");case"gitlens.showFileHistoryView":return this.container.views.showView("fileHistory");case"gitlens.showGraphView":return this.notifyWhenNoRepository("the Commit Graph"),this.container.views.graph.show(void 0,...t);case"gitlens.showHomeView":return this.container.views.home.show(void 0,...t);case"gitlens.showLaunchpadView":return this.container.views.showView("launchpad");case"gitlens.showLineHistoryView":return this.container.views.showView("lineHistory");case"gitlens.showRemotesView":return this.container.views.showView("remotes");case"gitlens.showRepositoriesView":return this.container.views.showView("repositories");case"gitlens.showSearchAndCompareView":return this.container.views.showView("searchAndCompare");case"gitlens.showStashesView":return this.container.views.showView("stashes");case"gitlens.showTagsView":return this.container.views.showView("tags");case"gitlens.showTimelineView":return this.container.views.timeline.show();case"gitlens.showWorktreesView":return this.container.views.showView("worktrees");case"gitlens.showWorkspacesView":return this.container.views.showView("workspaces")}return Promise.resolve(void 0)}};rK=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rY(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rQ(t,i,o),o})([(0,k.G5)()],rK);var rZ=__webpack_require__(3621),rJ=Object.defineProperty,rX=Object.getOwnPropertyDescriptor;let r0=class extends W.Kt{constructor(e){super("gitlens.stashApply"),this.container=e}async preExecute(e,t){return(0,ey.j7)(e)?(null==e.node.commit.message&&await e.node.commit.ensureFullDetails(),t={...t,stashItem:e.node.commit}):(0,ey.q)(e)&&(t={...t,repoPath:e.node.repo.path}),this.execute(t)}async execute(e){return e?.deleteAfter?(0,rZ.uY)(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem):(0,rZ.Bb)(e?.repoPath??e?.stashItem?.repoPath,e?.stashItem)}};r0=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?rX(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&rJ(t,i,o),o})([(0,k.G5)()],r0);var r1=Object.defineProperty,r2=Object.getOwnPropertyDescriptor;let r4=class extends W.Kt{constructor(e){super(["gitlens.stashSave","gitlens.stashSaveFiles"]),this.container=e}async preExecute(e,t){if((0,ey.Ey)(e))(t={...t}).repoPath=e.node.file.repoPath??e.node.repoPath,t.uris=[m.nk.fromFile(e.node.file,t.repoPath)];else if((0,ey.q)(e))(t={...t}).repoPath=e.node.repo.path;else if((0,ey.z2)(e))(t={...t}).repoPath=e.node.repoPath;else if("scm"===e.type){if(null!=e.scm.rootUri){let i=this.container.git.getRepository(e.scm.rootUri);null!=i&&((t={...t}).repoPath=i.path)}}else if("scm-states"===e.type){let i;t={...t};let r=!1,s=!1,o=[];for(let t of e.scmResourceStates)o.push(t.resourceUri),t.type===tw.UNTRACKED&&(s=!0),t.resourceGroupType===ty.Index?(r=!0,null==i&&(i=!0)):i=!1;let n=await this.container.git.getOrOpenRepository(o[0]);t.repoPath=n?.path,t.onlyStaged=null!=n&&!!i&&await n.git.supports("git:stash:push:staged"),null!=t.keepStaged||r||(t.keepStaged=!0),t.includeUntracked=s,t.uris=o}else if("scm-groups"===e.type){let i;t={...t};let r=!1,s=!1,o=[],n=[];for(let t of e.scmResourceGroups){for(let e of t.resourceStates)o.push(e.resourceUri),e.type===tw.UNTRACKED&&(s=!0);"index"===t.id?(r=!0,null==i&&(i=!0),n.push(...t.resourceStates.map(e=>e.resourceUri))):i=!1}let a=await this.container.git.getOrOpenRepository(o[0]);t.repoPath=a?.path,t.onlyStaged=null!=a&&!!i&&await a.git.supports("git:stash:push:staged"),null!=t.keepStaged||r||(t.keepStaged=!0),t.includeUntracked=s,t.onlyStaged?t.onlyStagedUris=n:t.uris=o}return this.execute(t)}execute(e){return(0,rZ.VC)(e?.repoPath,e?.uris,e?.message,e?.includeUntracked,e?.keepStaged,e?.onlyStaged,e?.onlyStagedUris)}};r4=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?r2(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r1(t,i,o),o})([(0,k.G5)()],r4);var r5=Object.defineProperty,r7=Object.getOwnPropertyDescriptor;let r8=class extends W.Kt{constructor(e){super("gitlens.switchAIModel"),this.container=e}async execute(e){await this.container.ai.switchModel(e)}};async function r6(){let e=S.H.get("modes");if(null==e)return;let t=Object.keys(e);if(0===t.length)return;let i=S.H.get("mode.active"),r=t.map(t=>{let r=e[t];return{label:`${i===t?"$(check)  ":"     "}${r.name} mode`,description:r.description?`\xa0${p.EO.Dash}\xa0 ${r.description}`:"",key:t}});return i&&null!=e[i]&&r.unshift({label:`Exit ${e[i].name} mode`,key:void 0}),await n.window.showQuickPick(r,{placeHolder:"select a GitLens mode to enter"})}r8=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?r7(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r5(t,i,o),o})([(0,k.G5)()],r8);var r3=__webpack_require__(1003),r9=Object.defineProperty,se=Object.getOwnPropertyDescriptor,st=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?se(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&r9(t,i,o),o};let si=class extends W.Kt{constructor(e){super("gitlens.switchMode"),this.container=e}async execute(){let e=(0,r3.dQ)(),t=await r6();if(void 0===t)return;(0,r3.TT)(e,` \u2022 mode=${t.key??""}`);let i=S.H.get("mode.active");if(i!==t.key){if(null!=i&&0!==i.length){let e=S.H.get("modes"),r=e?.[i].annotations;null!=r&&r!==(null!=t.key?e?.[t.key].annotations:void 0)&&await this.container.fileAnnotations.clearAll()}await S.H.update("mode.active",t.key,n.ConfigurationTarget.Global)}}};st([(0,A.Rm)({args:!1,scoped:!0,singleLine:!0,timed:!1})],si.prototype,"execute",1),si=st([(0,k.G5)()],si);let sr=class extends W.Kt{constructor(e){super("gitlens.toggleReviewMode"),this.container=e}async execute(){let e=S.H.get("modes");if(null==e||!Object.keys(e).includes("review"))return;let t="review"===S.H.get("mode.active")?void 0:"review";await S.H.update("mode.active",t,n.ConfigurationTarget.Global)}};st([(0,A.Rm)({args:!1,singleLine:!0,timed:!1})],sr.prototype,"execute",1),sr=st([(0,k.G5)()],sr);let ss=class extends W.Kt{constructor(e){super("gitlens.toggleZenMode"),this.container=e}async execute(){let e=S.H.get("modes");if(null==e||!Object.keys(e).includes("zen"))return;let t="zen"===S.H.get("mode.active")?void 0:"zen";await S.H.update("mode.active",t,n.ConfigurationTarget.Global)}};st([(0,A.Rm)({args:!1,singleLine:!0,timed:!1})],ss.prototype,"execute",1),ss=st([(0,k.G5)()],ss);var so=Object.defineProperty,sn=Object.getOwnPropertyDescriptor;let sa=class extends W.Kt{constructor(e){super("gitlens.toggleCodeLens"),this.container=e}execute(){this.container.codeLens.toggleCodeLens()}};sa=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?sn(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&so(t,i,o),o})([(0,k.G5)()],sa);var sl=Object.defineProperty,su=Object.getOwnPropertyDescriptor,sc=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?su(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sl(t,i,o),o};let sh=class extends W.DX{constructor(e){super(["gitlens.clearFileAnnotations","gitlens.computingFileAnnotations"]),this.container=e}async execute(e,t,i){e=sf(e,i);try{if(!e||this.container.fileAnnotations.isInWindowToggle())return void await this.container.fileAnnotations.clear(e);await Promise.allSettled([e,...(0,E.gw)(e)].map(e=>this.container.fileAnnotations.clear(e)))}catch(e){B.Vy.error(e,"ClearFileAnnotationsCommand"),(0,R.qQ)("Unable to clear file annotations")}}};sh=sc([(0,k.G5)()],sh);let sd=class extends W.Zr{constructor(e){super("gitlens.toggleFileBlame"),this.container=e}execute(e,t,i){return sm(this.container,e,t,{...i,type:"blame"})}};sd=sc([(0,k.G5)()],sd);let sp=class extends W.Zr{constructor(e){super("gitlens.toggleFileChanges"),this.container=e}execute(e,t,i){return sm(this.container,e,t,{...i,type:"changes"})}};sp=sc([(0,k.G5)()],sp);let sg=class extends W.Zr{constructor(e){super(["gitlens.toggleFileHeatmap","gitlens.toggleFileHeatmapInDiffLeft","gitlens.toggleFileHeatmapInDiffRight"]),this.container=e}execute(e,t,i){return sm(this.container,e,t,{...i,type:"heatmap"})}};async function sm(e,t,i,r){t=sf(t,i);try{r={type:"blame",...r},await e.fileAnnotations.toggle(t,r.type,{selection:r.context?.selection??{line:t?.selection.active.line},...r.context},r.on)}catch(e){B.Vy.error(e,"ToggleFileAnnotationsCommand"),(0,R.qQ)(`Unable to toggle file ${r.type} annotations`)}}function sf(e,t){if(null==e||(0,E.oU)(e)||(e=void 0),null!=t&&(null==e||e.document.uri.toString()!==t.toString())){let i=(0,E.sP)(t);null!=i&&(e=i)}return e}sg=sc([(0,k.G5)()],sg);var sw=Object.defineProperty,sv=Object.getOwnPropertyDescriptor;let sy=class extends W.Zr{constructor(e){super("gitlens.toggleLineBlame"),this.container=e}async execute(e,t){try{await this.container.lineAnnotations.toggle(e)}catch(e){B.Vy.error(e,"ToggleLineBlameCommand"),(0,R.qQ)("Unable to toggle line blame annotations")}}};sy=((e,t,i,r)=>{for(var s,o=r>1?void 0:r?sv(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sw(t,i,o),o})([(0,k.G5)()],sy);var sb=Object.defineProperty,sC=Object.getOwnPropertyDescriptor,sR=(e,t,i,r)=>{for(var s,o=r>1?void 0:r?sC(t,i):t,n=e.length-1;n>=0;n--)(s=e[n])&&(o=(r?s(t,i,o):s(o))||o);return r&&o&&sb(t,i,o),o};let sk=class extends W.Kt{constructor(e){super("gitlens.getStarted"),this.container=e}execute(e){let t=e!==this.container.context.extension.id?void 0:e;sP(this.container,t?{source:{source:t}}:void 0)}};sk=sR([(0,k.G5)()],sk);let sS=class extends W.Kt{constructor(e){super("gitlens.openWalkthrough"),this.container=e}execute(e){sP(this.container,e)}};function sP(e,t){e.telemetry.enabled&&e.telemetry.sendEvent("walkthrough",{step:t?.step},t?.source),(0,$.Hn)(e.context.extension.id,"welcome",t?.step,!1)}sS=sR([(0,k.G5)()],sS);let sA=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openWalkthrough"),this.container=e}execute(){let e="gitlens.openWalkthrough";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/walkthrough",command:e}),(0,k.RS)(e,{source:{source:"walkthrough"}})}};sA=sR([(0,k.G5)()],sA);let sI=class extends W.Kt{constructor(e){super("gitlens.walkthrough.plus.upgrade"),this.container=e}execute(){let e="gitlens.plus.upgrade";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"plus/upgrade",command:e}),(0,k.RS)(e,{source:"walkthrough"})}};sI=sR([(0,k.G5)()],sI);let sD=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openHelpCenter"),this.container=e}execute(){let e=p.DS.helpCenter;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center",url:e}),(0,iD.CZ)(e)}};sD=sR([(0,k.G5)()],sD);let s_=class extends W.Kt{constructor(e){super("gitlens.walkthrough.plus.signUp"),this.container=e}execute(){let e="gitlens.plus.signUp";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"plus/sign-up",command:e}),(0,k.RS)(e,{source:"walkthrough"})}};s_=sR([(0,k.G5)()],s_);let s$=class extends W.Kt{constructor(e){super("gitlens.walkthrough.plus.reactivate"),this.container=e}execute(){let e="gitlens.plus.reactivateProTrial";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"plus/reactivate",command:e}),(0,k.RS)(e,{source:"walkthrough"})}};s$=sR([(0,k.G5)()],s$);let sT=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openCommunityVsPro"),this.container=e}execute(){let e=p.DS.communityVsPro;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/community-vs-pro",url:e}),(0,iD.CZ)(e)}};sT=sR([(0,k.G5)()],sT);let sE=class extends W.Kt{constructor(e){super("gitlens.walkthrough.showGraph"),this.container=e}execute(){let e="gitlens.showGraph";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/graph",command:e}),(0,k.RS)(e)}};sE=sR([(0,k.G5)()],sE);let sx=class extends W.Kt{constructor(e){super("gitlens.walkthrough.gitlensInspect"),this.container=e}execute(){let e="gitlens.showCommitDetailsView";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/inspect",command:e}),(0,k.RS)(e)}};sx=sR([(0,k.G5)()],sx);let sO=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openInteractiveCodeHistory"),this.container=e}execute(){let e=p.DS.interactiveCodeHistory;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/interactive-code-history",url:e}),(0,iD.CZ)(e)}};sO=sR([(0,k.G5)()],sO);let sF=class extends W.Kt{constructor(e){super("gitlens.walkthrough.showLaunchpad"),this.container=e}execute(){let e="gitlens.showLaunchpad";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/launchpad",command:e}),(0,k.RS)(e,{source:"walkthrough"})}};sF=sR([(0,k.G5)()],sF);let sB=class extends W.Kt{constructor(e){super("gitlens.walkthrough.worktree.create"),this.container=e}execute(){let e="gitlens.gitCommands.worktree.create";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"create/worktree",command:e}),(0,k.RS)(e)}};sB=sR([(0,k.G5)()],sB);let sL=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openDevExPlatform"),this.container=e}execute(){let e=p.DS.platform;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/devex-platform",url:e}),(0,iD.CZ)(e)}};sL=sR([(0,k.G5)()],sL);let sU=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openAcceleratePrReviews"),this.container=e}execute(){let e=p.DS.acceleratePrReviews;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/accelerate-pr-reviews",url:e}),(0,iD.CZ)(e)}};sU=sR([(0,k.G5)()],sU);let sq=class extends W.Kt{constructor(e){super("gitlens.walkthrough.showDraftsView"),this.container=e}execute(){let e="gitlens.showDraftsView";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/drafts",command:e}),(0,k.RS)(e)}};sq=sR([(0,k.G5)()],sq);let sN=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openStreamlineCollaboration"),this.container=e}execute(){let e=p.DS.streamlineCollaboration;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/streamline-collaboration",url:e}),(0,iD.CZ)(e)}};sN=sR([(0,k.G5)()],sN);let sM=class extends W.Kt{constructor(e){super("gitlens.walkthrough.connectIntegrations"),this.container=e}execute(){let e="gitlens.plus.cloudIntegrations.connect";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"connect/integrations",command:e}),(0,k.RS)(e,{source:{source:"walkthrough"}})}};sM=sR([(0,k.G5)()],sM);let sW=class extends W.Kt{constructor(e){super("gitlens.walkthrough.showAutolinks"),this.container=e}execute(){let e="gitlens.showSettingsPage!autolinks";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/autolinks",command:e}),(0,k.RS)(e)}};sW=sR([(0,k.G5)()],sW);let sG=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openStartIntegrations"),this.container=e}execute(){let e=p.DS.startIntegrations;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/start-integrations",url:e}),(0,iD.CZ)(e)}};sG=sR([(0,k.G5)()],sG);let sH=class extends W.Kt{constructor(e){super("gitlens.walkthrough.openHomeViewVideo"),this.container=e}execute(){let e=p.DS.homeView;this.container.telemetry.sendEvent("walkthrough/action",{type:"url",name:"open/help-center/home-view",url:e}),(0,iD.CZ)(e)}};sH=sR([(0,k.G5)()],sH);let sV=class extends W.Kt{constructor(e){super("gitlens.walkthrough.showHomeView"),this.container=e}execute(){let e="gitlens.showHomeView";this.container.telemetry.sendEvent("walkthrough/action",{type:"command",name:"open/home",command:e}),(0,k.RS)(e)}};async function sj(e){let t,i,r=e.extension.packageJSON.version,s=(0,q.ib)(r,"> 2020.0.0"),o=S.H.get("defaultDateLocale"),h=(0,d.Wn)(S.H.get("outputLevel"));B.Vy.configure({name:"GitLens",createChannel:function(t){let i=new B.j8(n.window.createOutputChannel(t,{log:!0}),500);return e.subscriptions.push(i),("error"===h||"warn"===h)&&(i.appendLine(`GitLens${s?" (pre-release)":""} v${r} activating in ${n.env.appName} (${n.version}) on the ${u.HZ?"web":"desktop"}; language='${n.env.language}', logLevel='${h}', defaultDateLocale='${o}' (${n.env.machineId}|${n.env.sessionId})`),i.appendLine('To enable debug logging, set `"gitlens.outputLevel": "debug"` or run "GitLens: Enable Debug Logging" from the Command Palette')),i},toLoggable:function(e){return(0,m.t5)(e)?`GitUri(${e.toString(!0)}${e.repoPath?` repoPath=${e.repoPath}`:""}${e.sha?` sha=${e.sha}`:""})`:e instanceof n.Uri?`Uri(${e.toString(!0)})`:(0,v.Z6)(e)||(0,f.P)(e)||(0,w.WM)(e)||(0,y.d)(e)||(0,N.sN)(e)?e.toString():"rootUri"in e&&e.rootUri instanceof n.Uri?`ScmRepository(${e.rootUri.toString(!0)})`:"uri"in e&&e.uri instanceof n.Uri?(0,x.Iy)(e)?`WorkspaceFolder(${e.name}, index=${e.index}, ${e.uri.toString(!0)})`:(0,T.v2)(e)?`TextDocument(${e.languageId}, dirty=${e.isDirty}, ${e.uri.toString(!0)})`:`${(0,B.zu)(e)}(${e.uri.toString(!0)})`:(0,E.ld)(e)?`TextEditor(${e.viewColumn}, ${e.document.uri.toString(!0)} ${e.selections?.map(e=>`[${e.anchor.line}:${e.anchor.character}-${e.active.line}:${e.active.character}]`).join(",")})`:void 0},sanitizer:l.q},h,e.extensionMode===n.ExtensionMode.Development);let A=new U.e(`GitLens${s?" (pre-release)":""} v${r}`,{log:{message:` activating in ${n.env.appName} (${n.version}) on the ${u.HZ?"web":"desktop"}; language='${n.env.language}', logLevel='${h}', defaultDateLocale='${o}' (${n.env.machineId}|${n.env.sessionId})`}});if(s){let e=(0,q.sH)(r);if(new Date(e.major,e.minor-1,Number(e.patch.toString().substring(0,2))).getTime()<Date.now()-12096e5){A.stop({message:` was NOT activated because this pre-release version (${r}) has expired`}),setTimeout(R.AO,0,r);return}}n.workspace.isTrusted||(0,P.o)("gitlens:untrusted",!0),function(e,...t){e.globalState?.setKeysForSync([...t,g.Version,g.PreReleaseVersion])}(e);let I=new Storage(e),D=I.get(s?"synced:preVersion":"synced:version"),_=I.get(s?"preVersion":"version");t=null==_||null==D?D??_:1===(0,q.UD)(D,_)?D:_,null==_||null==t?(0,P.o)("gitlens:install:new",!0):r!==t&&1===(0,q.UD)(r,t)&&(0,P.o)("gitlens:install:upgradedFrom",t),B.Vy.enabled("debug")&&(i=`syncedVersion=${D}, localVersion=${_}, previousVersion=${t}`),S.V.configure(e),(0,O.Fl)(o??n.env.language),e.subscriptions.push(S.H.onDidChange(e=>{S.H.changed(e,"defaultDateLocale")&&(0,O.Fl)(S.H.get("defaultDateLocale")??n.env.language),S.H.changed(e,"advanced.abbreviatedShaLength")&&(0,C.S4)(S.H.get("advanced.abbreviatedShaLength"))}));let M=c.m.create(e,I,s,r,t);(0,F.Oo)(M.onReady)(()=>{var i;e.subscriptions.push(...(0,k.yd)(M)),(i=M).context.subscriptions.push(i.actionRunners.registerBuiltIn("createPullRequest",{label:e=>`Create Pull Request on ${e.remote?.provider?.name??"Remote"}`,run:async e=>{"createPullRequest"===e.type&&await (0,k.RS)("gitlens.createPullRequestOnRemote",{base:void 0,compare:e.branch.isRemote?(0,b.km)(e.branch.name):e.branch.upstream?(0,b.km)(e.branch.upstream):e.branch.name,remote:e.remote?.name??"",repoPath:e.repoPath,describeWithAI:e.describeWithAI,source:e.source})}}),i.actionRunners.registerBuiltIn("openPullRequest",{label:e=>`Open Pull Request on ${e.provider?.name??"Remote"}`,run:async e=>{"openPullRequest"===e.type&&await (0,k.RS)("gitlens.openPullRequestOnRemote",{pr:{url:e.pullRequest.url}})}}));e.subscriptions.push(c.m.instance.actionRunners.registerBuiltInPartner("liveshare","hover.commands",{name:"Live Share",label:e=>"hover.commands"===e.type&&"You"!==e.commit.author.name?`$(live-share) Invite ${e.commit.author.name}${e.commit.author.presence?.statusText?` (${e.commit.author.presence?.statusText})`:""} to a Live Share Session`:"$(live-share) Start a Live Share Session",run:async e=>{if("hover.commands"!==e.type||"You"===e.commit.author.name)return void await (0,k.RS)("gitlens.inviteToLiveShare",{});await (0,k.RS)("gitlens.inviteToLiveShare",{email:e.commit.author.email})}})),n.workspace.isTrusted||e.subscriptions.push(n.workspace.onDidGrantWorkspaceTrust(()=>{(0,P.o)("gitlens:untrusted",void 0),M.telemetry.setGlobalAttribute("workspace.isTrusted",n.workspace.isTrusted)})),sQ(M,r,s,t),I.store(s?"preVersion":"version",r).catch(),(null==D||1===(0,q.UD)(r,D))&&I.store(s?"synced:preVersion":"synced:version",r).catch(),"debug"===h&&setTimeout(async()=>{"debug"===(0,d.Wn)(S.H.get("outputLevel"))&&!M.prereleaseOrDebugging&&await (0,R.pn)()&&(0,k.RS)("gitlens.disableDebugLogging")},6e4)}),M.debugging?((0,P.o)("gitlens:debugging",!0),(0,P.o)("gitlens:prerelease",!0)):M.prerelease&&(0,P.o)("gitlens:prerelease",!0),(0,P.o)("gitlens:schemes:trackable",[...p.MV]),await M.ready();let W=(0,L.Bq)(S.H.getAll(!0),"config",{joinArrays:!0});M.telemetry.setGlobalAttributes({debugging:M.debugging,"device.cohort":$.r$,prerelease:s,install:null==t,upgrade:null!=t&&r!==t,upgradedFrom:null!=t&&r!==t?t:void 0});let G=new Api(M),H=M.mode,V=A.startTime,j=(0,a.k)(),z=A.elapsed();return A.stop({message:`activated${null!=i?`, ${i}`:""}${null!=H?`, mode: ${H.name}`:""}`}),M.telemetry.sendEvent("activate",{"activation.elapsed":z,"activation.mode":H?.name,...W},void 0,V,j),Promise.resolve(G)}function sz(){B.Vy.log("GitLens deactivating..."),c.m.instance.deactivate()}async function sQ(e,t,i,r){if(null==r)return void B.Vy.log(`GitLens first-time install; window.focused=${n.window.state.focused}`);r!==t&&B.Vy.log(`GitLens upgraded from v${r} to v${t}; window.focused=${n.window.state.focused}`);let s=(0,q.sH)(t),o=(0,q.sH)(r);if(s.major<o.major||s.major===o.major&&s.minor<o.minor)return;let a=i&&(0,q.ib)(o,"< 2023.6.0800");if((s.major!==o.major||a)&&(t=a?"14":String(s.major),S.H.get("showWhatsNewAfterUpgrades")))if(n.window.state.focused)await e.storage.delete("pendingWhatsNewOnFocus"),await (0,R.U_)(t);else{await e.storage.store("pendingWhatsNewOnFocus",!0);let i=n.window.onDidChangeWindowState(r=>{r.focused&&(i.dispose(),!0===e.storage.get("pendingWhatsNewOnFocus")&&(e.storage.delete("pendingWhatsNewOnFocus"),S.H.get("showWhatsNewAfterUpgrades")&&(0,R.U_)(t)))});e.context.subscriptions.push(i)}}sV=sR([(0,k.G5)()],sV)})(),module.exports=__webpack_exports__;