parameters:
  - name: poolVmImage
    type: string
    default: "ubuntu-22.04"
  - name: poolName
    type: string
    default: ""
  - name: environment
    type: string
  - name: azureSubscription
    type: string
    default: ""
  - name: acrName
    type: string
    default: ""
  - name: awsServiceConnection
    type: string
    default: ""
  - name: awsRegion
    type: string
    default: ""
  - name: imagePathPrefix
    type: string
    default: ""
  - name: cloud
    type: string
    default: ""

jobs:
  - job: push_${{ parameters.environment }}
    pool:
      ${{ if not(eq(parameters.poolName, '')) }}:
        name: ${{ parameters.poolName }}
      ${{ if not(eq(parameters.poolVmImage, '')) }}:
        vmImage: ${{ parameters.poolVmImage }}
    displayName: Push image to ${{ parameters.environment }}
    continueOnError: false
    steps:
      - bash: |
          set -e
          # env grep work ardound for env name issues
          # https://developercommunity.visualstudio.com/t/cannot-directly-access-release-pipeline-variables/433796
          SOURCE_VERSION_KEY="RESOURCES_PIPELINE_${SERVICE_NAME^^}_SOURCECOMMIT"
          SOURCE_VERSION=$(env | grep -e "^${SOURCE_VERSION_KEY}" | cut -d= -f2)
          SHA_SHORT=${SOURCE_VERSION:0:7}
          IMAGE_ID=${SERVICE_NAME}:${SOURCE_VERSION:0:7}
          ARTIFACT_FILE_NAME=${IMAGE_ID/:/_}.tar.gz
          IMAGE_ID_FULL="${ACR_NAME}.azurecr.io/${IMAGE_PATH_PREFIX:+${IMAGE_PATH_PREFIX}/}${IMAGE_ID}"

          echo "##vso[task.setvariable variable=imageId]$IMAGE_ID"
          echo "##vso[task.setvariable variable=imageIdFull]$IMAGE_ID_FULL"
          echo "##vso[task.setvariable variable=shaShort]$SHA_SHORT"
          echo "##vso[task.setvariable variable=artifactFileName]$ARTIFACT_FILE_NAME"

          PROJECT_ID_KEY="RESOURCES_PIPELINE_${SERVICE_NAME^^}_PROJECTID"
          PROJECT_ID=$(env | grep -e "^${PROJECT_ID_KEY}" | cut -d= -f2)
          PIPELINE_ID_KEY="RESOURCES_PIPELINE_${SERVICE_NAME^^}_PIPELINEID"
          PIPELINE_ID=$(env | grep -e "^${PIPELINE_ID_KEY}" | cut -d= -f2)
          RUN_ID_KEY="RESOURCES_PIPELINE_${SERVICE_NAME^^}_RUNID"
          RUN_ID=$(env | grep -e "^${RUN_ID_KEY}" | cut -d= -f2)
          echo "##vso[task.setvariable variable=projectId]$PROJECT_ID"
          echo "##vso[task.setvariable variable=pipelineId]$PIPELINE_ID"
          echo "##vso[task.setvariable variable=runId]$RUN_ID"

          echo "Debug:"
          echo "imageId (IMAGE_ID): $IMAGE_ID"
          echo "imageIdFull (IMAGE_ID_FULL): $IMAGE_ID_FULL"
          echo "shaShort (SHA_SHORT): $SHA_SHORT"
          echo "artifactFileName (ARTIFACT_FILE_NAME): $ARTIFACT_FILE_NAME"
          echo "projectId (PROJECT_ID): $PROJECT_ID"
          echo "pipelineId (PIPELINE_ID): $PIPELINE_ID"
          echo "runId (RUN_ID): $RUN_ID"
        displayName: "Calculate artifact variables"
        env:
          SERVICE_NAME: $(resources.triggeringAlias)
          ACR_NAME: ${{ parameters.acrName }}
          IMAGE_PATH_PREFIX: ${{ parameters.imagePathPrefix }}

      - task: DownloadPipelineArtifact@2
        displayName: "Download container artifact"
        inputs:
          buildType: "specific"
          project: "$(projectId)"
          definition: "$(pipelineId)"
          runId: "$(runId)"
          runVersion: "specific"
          preferTriggeringPipeline: true
          targetPath: "$(Pipeline.Workspace)"

      - task: AzureCLI@2
        displayName: "Get ACR login info"
        inputs:
          azureSubscription: ${{ parameters.azureSubscription }}
          addSpnToEnvironment: true
          workingDirectory: "."
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -e
            az acr login -n "${ACR_NAME}"
        condition: and(succeeded(), eq('${{ parameters.cloud }}', 'azure'))
        env:
          ACR_NAME: ${{ parameters.acrName }}

      - ${{ if eq(parameters.cloud, 'aws') }}:
          - template: push_aws.yaml
            parameters:
              awsRegion: ${{ parameters.awsRegion }}
              awsServiceConnection: ${{ format(parameters.awsServiceConnection, parameters.environment) }}

      - bash: |
          set -e
          ARTIFACT_PATH="${WORKSPACE}/${SERVICE_NAME}/${ARTIFACT_FILE_NAME}"
          if [[ ! -f "${ARTIFACT_PATH}" ]]
          then
              echo "Missing artifact file ($ARTIFACT_PATH) from CI pipeline, did you trigger this pipeline manually?"
              exit 1
          fi

          docker load < $ARTIFACT_PATH
          docker tag $(imageId) "${IMAGE_ID_FULL}"
          docker push "${IMAGE_ID_FULL}"

        displayName: "Push image to container registry in ${{ parameters.environment }}"
        env:
          SERVICE_NAME: $(resources.triggeringAlias)
          ARTIFACT_FILE_NAME: $(artifactFileName)
          IMAGE_ID_FULL: $(imageIdFull)
          WORKSPACE: $(Pipeline.Workspace)
