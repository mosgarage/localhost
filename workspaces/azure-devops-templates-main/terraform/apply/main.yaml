parameters:
  - name: poolNameTemplate
    type: string
    default: ""
  - name: poolVmImage
    type: string
    default: "ubuntu-22.04"
  - name: sourceBranch
    type: string
    default: "refs/heads/master"
  - name: azureSubscriptionTemplate
    type: string
  - name: terraformVersion
    type: string
    default: "0.13.4"
  - name: terraformFolder
    type: string
  - name: environments
    type: object
    default:
      - name: dev
      - name: qa
      - name: prod

stages:
  - ${{ each env in parameters.environments }}:
      - stage: apply_${{ env.name }}
        displayName: ${{ env.name }}
        jobs:
          - deployment: ${{ env.name }}
            variables:
              - group: terraform-encryption
            pool:
              ${{ if not(eq(parameters.poolNameTemplate, '')) }}:
                name: ${{ format(parameters.poolNameTemplate, env.name) }}
              ${{ if not(eq(parameters.poolVmImage, '')) }}:
                vmImage: ${{ parameters.poolVmImage }}
            environment: ${{ env.name }}
            displayName: Terraform Apply
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self
                      displayName: Get sources
                    - bash: |
                        if [ -z "$tfEncPassword" ]; then
                          echo "##vso[task.logissue type=error;]Missing variable \"terraformEncryptionSecret\" from variable group \"terraform-encryption\""
                          echo "##vso[task.complete result=Failed;]"
                        fi
                        if [ "$tfEncPassword" == "\$(terraformEncryptionSecret)" ]; then
                          echo "##vso[task.logissue type=error;]Missing variable \"terraformEncryptionSecret\" from variable group \"terraform-encryption\""
                          echo "##vso[task.complete result=Failed;]"
                        fi
                      env:
                        tfEncPassword: $(terraformEncryptionSecret)
                      displayName: Check for encryption secret
                    - task: DownloadPipelineArtifact@2
                      displayName: "Download artifact"
                      inputs:
                        artifact: "${{ env.name }}"
                        path: $(System.ArtifactsDirectory)
                    - task: AzureCLI@1
                      displayName: "Apply"
                      inputs:
                        azureSubscription: ${{ format(parameters.azureSubscriptionTemplate, env.name) }}
                        addSpnToEnvironment: true
                        scriptLocation: inlineScript
                        inlineScript: |
                          set -e
                          pwsh .ci/Invoke-PipelineTask.ps1 -tfFolderName $TF_FOLDER -azureDevOps -deploy -tfVersion $TF_VERSION -environmentShort $ENV -artifactPath $ART_PATH
                      env:
                        TF_FOLDER: ${{ parameters.terraformFolder }}
                        TF_VERSION: ${{ parameters.terraformVersion }}
                        ART_PATH: $(Build.ArtifactStagingDirectory)
                        ENV: ${{ env.name }}
                        tfEncPassword: $(terraformEncryptionSecret)
        condition: and(succeeded(), eq(variables['Build.sourceBranch'], '${{ parameters.sourceBranch }}'))
